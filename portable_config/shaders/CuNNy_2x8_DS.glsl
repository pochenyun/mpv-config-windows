// CuNNy 2x8 BILINEAR MPV NVL DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-2x8-BILINEAR-MPV-NVL-DS-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(LUMA_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0)) + vec2(0.5)) * LUMA_pt).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(-4.160e-04, -7.890e-03, -1.460e-01, 3.159e-03) * s0_0_0;
	r1 += V4(-1.668e-02, 8.807e-02, 6.762e-03, 3.238e-01) * s0_0_0;
	r0 += V4(-2.800e-02, -9.773e-02, 1.823e-02, -1.567e-01) * s0_0_1;
	r1 += V4(5.529e-02, -6.092e-02, -1.328e-01, 2.190e-01) * s0_0_1;
	r0 += V4(2.489e-02, 4.962e-02, -9.583e-02, -2.952e-02) * s0_0_2;
	r1 += V4(8.069e-03, -3.029e-02, 1.432e-01, -7.208e-03) * s0_0_2;
	r0 += V4(6.822e-01, 1.962e-02, -2.929e-01, -6.375e-02) * s0_1_0;
	r1 += V4(1.229e-02, -6.038e-01, 1.049e-01, -1.178e-01) * s0_1_0;
	r0 += V4(-6.699e-01, -1.286e-01, 1.004e+00, 8.430e-01) * s0_1_1;
	r1 += V4(-2.114e-01, -1.463e-01, -4.813e-01, -8.995e-02) * s0_1_1;
	r0 += V4(-5.696e-03, -4.178e-01, -1.287e-01, -1.536e-01) * s0_1_2;
	r1 += V4(-6.059e-02, 1.033e-01, -3.210e-01, 9.043e-02) * s0_1_2;
	r0 += V4(1.357e-02, 3.665e-02, 3.641e-03, -5.285e-02) * s0_2_0;
	r1 += V4(3.964e-02, 1.147e-01, -9.482e-02, 3.061e-02) * s0_2_0;
	r0 += V4(4.122e-03, -1.890e-01, -2.073e-01, 1.989e-01) * s0_2_1;
	r1 += V4(2.166e-01, 6.113e-01, 6.327e-01, -1.232e-01) * s0_2_1;
	r0 += V4(-1.592e-02, 8.184e-02, -6.696e-02, 1.315e-02) * s0_2_2;
	r1 += V4(1.333e-01, -7.482e-02, 1.519e-01, 8.667e-02) * s0_2_2;
	r0 += V4(-3.883e-03, 6.835e-01, -1.713e-02, 1.208e-01);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(3.009e-02, -4.317e-03, 3.969e-03, 1.465e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-2x8-BILINEAR-MPV-NVL-DS-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * in_pt))
#define l1(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * in_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-2.815e-01, 1.692e-01, 2.428e-01, 6.563e-02, 1.400e-01, -2.491e-01, 1.782e-01, 9.203e-02, 1.333e-01, 3.073e-02, 6.904e-02, -3.535e-02, -3.014e-01, -9.505e-02, -3.825e-01, -9.462e-02) * s0_0_0;
	r1 += M4(-1.001e-01, -4.225e-04, -1.383e-01, 9.849e-02, 8.430e-02, -2.315e-03, 1.395e-01, -1.105e-01, 8.666e-02, 3.423e-02, -6.486e-02, 3.841e-01, -9.824e-02, -2.647e-02, 3.005e-02, -8.366e-02) * s0_0_0;
	r0 += M4(-2.548e-01, 2.962e-01, 3.639e-01, 3.145e-01, -6.711e-02, -1.168e+00, 4.773e-02, 1.088e-01, 2.705e-01, 4.438e-02, 3.097e-01, 5.059e-03, -2.464e-01, -7.840e-02, -1.942e-01, 4.144e-03) * s0_0_1;
	r1 += M4(1.479e-01, -1.475e-01, -2.192e-01, -5.313e-01, -1.176e-01, 1.817e-01, -2.194e-01, 4.119e-01, -2.923e-02, 1.679e-01, 1.801e-01, 8.720e-01, 1.119e-01, 7.513e-02, 9.915e-02, -9.625e-01) * s0_0_1;
	r0 += M4(6.747e-02, 5.281e-01, 3.179e-02, 4.159e-01, 8.513e-03, -7.090e-01, -1.853e-01, -2.229e-01, 1.815e-01, 5.092e-02, 4.837e-02, -6.039e-02, -2.494e-01, 3.611e-01, 5.290e-02, 1.785e-01) * s0_0_2;
	r1 += M4(-1.236e-01, -2.049e-01, 3.602e-02, -1.651e-01, 5.310e-02, -8.454e-02, 1.772e-01, 7.341e-03, 1.555e-02, -1.038e-01, 8.371e-02, 3.494e-01, -3.503e-02, 1.774e-01, -2.900e-01, -1.895e-01) * s0_0_2;
	r0 += M4(-2.179e-01, 5.959e-02, -1.896e-01, -4.752e-03, 1.870e-01, 4.891e-03, 2.738e-01, -2.679e-02, 1.114e-02, -2.586e-01, 1.788e-02, 4.104e-02, -8.327e-02, 1.067e-01, 2.676e-01, -2.551e-01) * s0_1_0;
	r1 += M4(-1.291e-01, -7.256e-02, -1.499e-01, 6.365e-02, 2.217e-01, 1.559e-02, -1.465e-01, 4.196e-01, 2.568e-02, 1.327e-01, -5.794e-02, -9.168e-02, 2.725e-01, -3.994e-01, -2.059e-02, -1.028e+00) * s0_1_0;
	r0 += M4(3.316e-01, 1.792e-01, -6.680e-01, 4.103e-01, -3.302e-01, -2.789e+00, -5.202e-02, -1.553e-01, -7.597e-01, -2.633e-01, -7.028e-01, -4.189e-01, 2.280e-01, -6.588e-02, -4.815e-01, -3.686e-01) * s0_1_1;
	r1 += M4(4.579e-01, -5.290e-01, 2.705e-01, 1.946e+00, -2.203e-01, -1.495e-01, -8.656e-02, 2.553e-01, -4.948e-01, 2.841e-01, -4.178e-01, -3.673e-01, 6.191e-02, 3.328e-01, 5.017e-01, -1.740e+00) * s0_1_1;
	r0 += M4(1.259e+00, 1.285e+00, 2.125e-01, 9.863e-01, 2.447e-02, -6.601e-01, 9.430e-02, -2.659e-02, -4.916e-02, 1.137e+00, 3.031e-01, 8.878e-02, 3.188e-01, 6.945e-01, 2.733e-02, 7.300e-01) * s0_1_2;
	r1 += M4(9.920e-02, 4.724e-02, 8.900e-01, 2.355e+00, -4.228e-02, 8.107e-03, -3.252e-02, 6.452e-02, -9.064e-02, -1.573e-01, -1.351e-01, 5.154e-01, 2.911e-02, 3.138e-01, 7.732e-02, -3.516e-02) * s0_1_2;
	r0 += M4(9.405e-02, -5.731e-03, -1.603e-01, -1.038e-01, -2.029e-01, 1.481e-01, -1.822e-01, 5.866e-02, 2.194e-02, -6.427e-02, 3.643e-01, 1.541e-01, 1.264e-01, -1.978e-01, 6.419e-01, -7.711e-02) * s0_2_0;
	r1 += M4(-1.449e-01, -1.158e-01, -7.523e-03, -1.818e-02, -3.307e-01, 1.342e-01, 1.385e-02, -1.247e-03, 6.074e-02, -1.450e-01, -8.703e-05, 2.939e-01, -1.293e-01, -1.945e-01, -1.256e-01, -1.460e-01) * s0_2_0;
	r0 += M4(-3.701e-01, 4.987e-01, -1.191e+00, 1.025e-01, 2.055e-01, -3.368e-01, -1.190e-01, -2.563e-02, 1.025e-01, -3.527e-01, 4.165e-01, -4.287e-01, 4.416e-02, -2.456e-01, 4.965e-01, -2.755e-01) * s0_2_1;
	r1 += M4(2.689e-01, 2.710e-01, 1.159e-01, 7.285e-02, 3.135e-01, 1.272e-01, 1.373e-01, 2.246e-01, -2.020e-01, -8.958e-01, -2.582e-01, -1.808e-01, 1.260e-01, -5.291e-01, -5.761e-01, -6.034e-01) * s0_2_1;
	r0 += M4(-7.084e-01, 3.009e-01, 9.704e-02, 6.346e-01, -1.911e-02, -1.457e-01, 9.421e-02, -2.216e-02, 1.381e-01, -7.849e-03, -1.132e-01, 1.636e-01, -2.820e-01, -4.063e-02, -2.959e-01, 1.830e-01) * s0_2_2;
	r1 += M4(3.114e-01, 9.191e-01, 7.950e-02, 4.596e-01, -4.181e-02, -7.968e-02, 1.884e-02, 5.964e-02, -6.505e-02, 1.600e-01, 6.444e-02, 7.638e-02, -4.762e-02, 2.321e-02, -1.880e-01, -7.118e-01) * s0_2_2;
	r0 += M4(1.682e-01, -5.499e-02, 1.677e-01, 2.418e-01, 3.355e-01, 1.378e-01, 2.572e-01, -1.902e-01, -2.059e-01, 1.663e-01, 3.164e-01, 4.428e-03, 1.189e-01, -5.190e-03, 1.058e-01, 7.189e-02) * s1_0_0;
	r1 += M4(5.728e-02, 1.442e-01, -7.553e-02, -9.289e-01, -5.024e-02, -1.753e-01, 1.087e-01, 1.687e-01, 1.292e-01, 8.315e-02, -4.146e-01, 1.797e-01, 3.327e-02, 1.003e-02, -2.277e-02, -6.881e-02) * s1_0_0;
	r0 += M4(-1.787e-01, 7.561e-02, -1.247e-01, -1.246e-01, 3.552e-01, -1.307e-02, -2.150e-01, -3.665e-01, 2.257e-01, 4.359e-01, 5.298e-01, -6.269e-02, -2.446e-01, -1.347e-01, 8.757e-02, -1.570e-01) * s1_0_1;
	r1 += M4(-3.994e-01, 4.196e-01, -3.991e-01, -1.423e+00, 1.294e-01, -2.743e-01, 4.498e-01, 1.173e+00, 2.364e-01, -9.578e-02, -1.770e-01, 8.535e-01, 2.731e-02, 7.699e-02, 6.788e-03, 1.832e-01) * s1_0_1;
	r0 += M4(6.625e-03, 1.823e-01, 2.336e-01, 2.916e-01, 5.688e-01, 6.778e-01, -5.354e-01, 2.330e-02, 2.479e-01, 5.515e-01, 3.633e-02, -9.538e-02, 2.814e-02, -6.069e-02, -3.035e-01, 7.787e-03) * s1_0_2;
	r1 += M4(-1.074e-02, 4.089e-01, -3.249e-02, -2.399e-01, -2.133e-01, -4.041e-01, 2.727e-01, -9.142e-03, -7.240e-02, -6.861e-02, 1.009e-01, 6.149e-02, -5.708e-02, 3.658e-02, 5.648e-02, -1.125e-01) * s1_0_2;
	r0 += M4(1.169e-01, -3.611e-02, 2.822e-02, -2.542e-01, 1.394e-01, 1.821e-01, -7.832e-01, -1.352e-01, -3.664e-01, 6.670e-02, -1.051e+00, -1.849e-01, 5.332e-01, -1.136e-01, -1.840e-02, -2.476e-01) * s1_1_0;
	r1 += M4(1.200e-01, 1.291e-01, 3.015e-01, -2.502e-01, -1.421e-01, 2.588e-01, 2.017e-01, 9.730e-02, 5.026e-02, 4.164e-02, -2.408e-01, 2.082e-01, 1.790e-02, -1.548e-01, 1.158e-01, -7.450e-02) * s1_1_0;
	r0 += M4(-2.632e-01, 1.156e-01, -1.430e-01, 1.015e-01, 4.170e-01, 7.996e-02, -1.422e+00, -7.614e-02, 2.271e-01, -1.720e-01, 4.089e-01, 3.976e-01, 2.792e-02, 1.469e-01, 3.211e-01, -3.132e-01) * s1_1_1;
	r1 += M4(9.652e-02, -4.229e-01, -1.070e-01, 4.913e-01, 5.086e-01, 1.890e-01, 3.232e-01, 4.582e-01, 5.371e-01, 2.973e-01, 6.039e-01, 7.758e-01, 1.502e-01, -1.662e-01, 5.555e-02, 3.207e-01) * s1_1_1;
	r0 += M4(-1.163e-01, 5.012e-02, -8.633e-02, 2.851e-01, 2.211e-01, 4.951e-01, -1.164e-01, -4.829e-02, -1.733e-01, 3.312e-01, 2.650e-01, -2.116e-01, 5.603e-01, 1.790e-02, 9.122e-02, 1.461e-01) * s1_1_2;
	r1 += M4(1.058e-01, -1.454e-01, -5.363e-01, 1.246e-01, 1.625e-01, -3.978e-01, 8.301e-02, 1.499e+00, 2.625e-01, -1.841e-01, 1.140e-01, -2.273e-01, -2.346e-01, -3.889e-01, 1.252e-01, -4.213e-01) * s1_1_2;
	r0 += M4(3.800e-02, 4.386e-02, -1.159e-01, 1.377e-01, -4.067e-02, 8.704e-02, -1.568e-01, -7.572e-02, -3.602e-01, 1.821e-01, -4.541e-01, -1.883e-01, 3.650e-01, 1.490e-01, -3.701e-01, -2.261e-01) * s1_2_0;
	r1 += M4(-2.113e-01, 1.390e-01, -2.020e-02, -3.899e-01, -1.460e-01, 1.817e-02, 7.445e-02, 1.658e-01, 1.763e-01, 3.711e-02, -1.946e-01, 3.466e-02, -1.831e-01, 2.056e-01, 2.389e-01, -2.008e-01) * s1_2_0;
	r0 += M4(-1.141e-01, -2.310e-01, 1.581e-01, 2.239e-01, 5.430e-02, -5.300e-02, -3.943e-01, -1.625e-01, -3.404e-01, -9.761e-02, -4.568e-01, -7.120e-02, -3.281e-01, -1.944e-02, -2.412e-01, -3.848e-01) * s1_2_1;
	r1 += M4(-1.083e-01, -2.599e-01, 4.463e-01, -1.547e-01, -2.530e-02, 1.330e-01, 2.099e-01, 1.724e-01, 2.087e-01, 2.529e-01, -8.793e-02, 2.261e-01, -1.493e-01, 6.609e-01, 2.817e-01, -3.729e-01) * s1_2_1;
	r0 += M4(5.020e-01, -1.676e-01, 6.577e-02, -2.630e-01, 3.186e-01, 2.319e-01, 3.819e-01, 1.492e-01, -4.586e-01, 2.221e-01, 1.617e-01, -1.602e-04, -5.202e-01, 3.673e-01, 1.965e-01, 5.330e-01) * s1_2_2;
	r1 += M4(-4.442e-02, -3.942e-01, 1.228e-01, -1.827e-01, -1.055e-03, -1.600e-01, 1.309e-01, 2.705e-01, -1.137e-02, 1.477e-01, -1.886e-01, 2.216e-01, 8.243e-02, 3.828e-01, 1.236e-01, 4.042e-01) * s1_2_2;
	r0 += V4(7.007e-02, -3.081e-01, -8.560e-02, 1.038e-01);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-4.808e-03, -1.209e-01, 2.080e-02, -1.096e-01);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-2x8-BILINEAR-MPV-NVL-DS-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv1_pt))
#define l1(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv1_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(7.762e-02, 2.212e-01, 1.958e-02, -7.201e-02, 3.784e-01, -1.175e-02, -1.459e-03, 4.546e-02, -1.267e-01, -2.528e-01, -3.211e-02, -4.876e-02, -5.369e-02, -2.184e-01, -2.784e-04, 1.480e-01) * s0_0_0;
	r1 += M4(-4.700e-01, 1.191e-01, -1.418e-01, 7.890e-02, 3.881e-01, 3.476e-01, 5.207e-01, -9.113e+00, -2.201e-02, 2.670e-02, 5.203e-02, -4.653e-02, 5.453e-01, 8.063e-02, 1.615e-01, 4.674e-02) * s0_0_0;
	r0 += M4(1.555e-01, -1.104e-01, -6.893e-02, 1.003e-01, 1.151e-01, 1.261e-01, 1.510e-01, 1.209e-01, -1.179e-01, -1.656e-01, -5.954e-02, -1.769e-02, -2.846e-01, 2.860e-01, 8.032e-02, -5.279e-02) * s0_0_1;
	r1 += M4(4.150e-01, 1.260e-01, 1.276e-01, -4.175e-01, 3.654e-01, 2.595e-01, 4.195e-01, 1.733e-01, -6.055e-02, -3.499e-01, -1.429e-01, 1.143e-01, -5.684e-01, -1.351e-01, -5.724e-02, 5.615e-01) * s0_0_1;
	r0 += M4(-8.768e-02, 5.145e-02, 1.258e-02, -2.853e-02, 3.737e-02, 7.417e-02, 7.475e-02, 4.686e-02, -2.666e-01, -3.267e-01, -1.465e-01, -1.117e-01, 2.666e-01, -3.725e-02, 6.924e-03, 2.028e-02) * s0_0_2;
	r1 += M4(-1.099e-01, 1.443e-02, -2.025e-02, 2.568e-01, 1.578e-02, 1.289e-01, 1.308e-01, 1.166e-01, -9.400e-02, -2.216e-01, -9.967e-02, -8.525e-01, 7.091e-02, -3.611e-02, 3.069e-02, -3.609e-01) * s0_0_2;
	r0 += M4(-1.929e-01, -3.584e-01, -3.479e-02, -2.851e-01, -7.145e-01, -1.164e+00, -8.727e+00, -4.136e-01, 7.884e-02, -2.238e-01, 1.667e-02, -4.260e-02, -2.705e-01, 2.567e-01, -1.258e-01, 8.432e-02) * s0_1_0;
	r1 += M4(3.930e-02, -4.483e-01, -4.179e-02, -1.818e-01, 5.364e-01, -8.943e-01, 1.823e+00, 4.776e-01, -5.374e-02, -2.613e-01, -4.291e-02, -4.413e-02, 2.423e-02, -3.174e-01, 1.104e-01, 2.436e-01) * s0_1_0;
	r0 += M4(-7.754e-01, 5.059e-01, -1.619e-02, 2.350e-02, 3.455e-01, 3.859e-01, -1.352e-02, 1.186e-01, -5.098e-01, -3.959e-01, -1.337e-01, -1.647e-01, 2.187e-01, -3.111e-01, 2.252e-01, 1.997e-01) * s0_1_1;
	r1 += M4(-1.170e-01, -9.696e-02, 1.189e-01, -4.251e-02, 1.876e-01, -4.075e-01, 6.472e-01, -4.830e+00, -1.875e-02, -7.599e-01, 5.011e-02, 9.378e-02, -6.622e-02, 2.013e-01, 9.988e-02, -4.891e-01) * s0_1_1;
	r0 += M4(-3.064e-01, -3.120e-01, 7.830e-02, -3.077e-02, 1.070e-01, 2.137e-02, 4.629e-02, 2.459e-02, -8.003e-01, -3.579e-01, -1.382e-01, -1.008e-01, -3.430e-01, 8.278e-02, -6.328e-02, 1.131e-02) * s0_1_2;
	r1 += M4(-3.240e-02, 3.767e-01, -1.189e-01, -3.899e-01, -5.981e-02, 7.299e-02, 1.282e-01, 5.774e-01, -4.522e-02, -5.371e-01, -6.602e-02, -1.216e-01, -1.062e-02, -9.313e-02, 2.925e-02, 3.722e-01) * s0_1_2;
	r0 += M4(-4.653e-02, -4.452e-03, -1.316e-02, 4.146e-02, 1.436e-01, 4.283e-01, 3.456e-02, -2.211e-01, 7.679e-02, -8.338e-02, 2.133e-02, 1.724e-03, 1.254e-01, -5.449e-03, -1.901e-03, 8.329e-02) * s0_2_0;
	r1 += M4(-9.580e-03, 2.627e-01, 1.730e-02, -6.708e-02, -3.866e-02, -5.785e-02, 1.730e-01, 1.778e-01, -1.938e-02, -1.828e-01, -3.983e-02, -5.884e-02, 3.310e-02, -1.323e-01, -4.491e-02, -1.194e-01) * s0_2_0;
	r0 += M4(8.260e-02, 1.197e-01, -1.279e-02, 5.005e-02, -2.119e-01, 1.112e-01, 1.511e-01, 1.062e-01, 1.300e-01, -2.497e-01, 2.259e-02, -6.818e-02, -1.595e-01, -7.783e-02, -6.400e-03, 5.854e-02) * s0_2_1;
	r1 += M4(-4.422e-02, 8.330e-02, -1.782e-02, -1.236e-02, -8.329e-02, 3.682e-01, 9.343e-04, 9.094e-02, 1.435e-02, -1.952e-01, 1.627e-02, 2.104e-02, -5.158e-02, -3.856e-01, 8.207e-03, 1.987e-01) * s0_2_1;
	r0 += M4(4.355e-02, 2.179e-02, -2.186e-02, -2.948e-02, 3.840e-02, -6.521e-02, 4.632e-02, 7.549e-02, 3.796e-02, -1.407e-01, -8.438e-03, -5.015e-02, 6.665e-02, -4.588e-02, 1.909e-02, -2.206e-02) * s0_2_2;
	r1 += M4(-7.373e-03, -3.179e-02, -3.655e-02, -2.442e-01, -3.920e-02, 1.229e-01, 4.098e-03, 7.835e-02, 4.228e-02, -3.230e-01, 2.002e-03, -2.937e-02, -7.049e-03, 8.415e-03, -2.799e-03, -2.167e-02) * s0_2_2;
	r0 += M4(-9.351e-02, -1.648e-01, -3.186e-02, 5.314e-02, 3.533e-01, -1.154e-01, 8.625e-02, 1.845e-01, -6.730e-02, -1.650e-01, -1.258e-02, 1.044e-01, 5.229e-03, -5.063e-03, -5.821e-03, 5.732e-02) * s1_0_0;
	r1 += M4(2.232e-01, 1.965e-02, 3.963e-02, -1.744e-01, -3.350e-01, -8.418e-02, -1.242e-01, 5.001e-02, 3.833e-01, -1.537e-01, 3.028e-02, -4.345e-02, 3.206e-01, 5.224e-02, 3.998e-02, -1.542e-01) * s1_0_0;
	r0 += M4(8.954e-02, -1.799e-03, 6.812e-02, -5.015e-02, 1.600e-01, -1.240e-01, 2.280e-01, 2.271e-01, -2.696e-01, 2.017e-01, 1.587e-01, 3.060e-02, -1.428e-01, 4.389e-03, 1.652e-01, 1.037e-01) * s1_0_1;
	r1 += M4(-7.956e-02, -3.486e-01, 2.468e-01, 5.378e-01, 3.505e-01, 1.139e-01, 4.608e-01, -3.582e-01, -3.857e-01, -1.499e-01, -1.062e-01, 1.439e-01, -1.921e-01, -1.821e-02, -5.525e-02, 1.636e-01) * s1_0_1;
	r0 += M4(4.526e-01, 9.045e-02, 1.814e-02, 4.761e-02, -6.571e-02, -1.702e-01, 5.237e-02, 2.967e-02, -8.675e-02, -2.291e-02, 2.006e-02, 3.441e-02, 9.735e-02, 8.433e-02, 6.616e-02, 3.449e-02) * s1_0_2;
	r1 += M4(5.380e-02, -1.442e-01, 1.107e-01, -2.528e-01, 9.204e-02, 3.643e-02, -1.814e-03, 2.705e-01, 4.560e-02, 3.357e-02, 2.998e-02, -1.953e-01, 1.658e-03, 4.946e-02, 7.075e-02, 1.385e-01) * s1_0_2;
	r0 += M4(2.851e-01, -2.411e-01, 1.424e-02, 2.447e-01, -2.040e-01, -2.558e-01, 8.741e-03, -2.684e-01, -9.748e-02, 4.437e-01, 9.352e-02, 3.924e-01, 1.129e-01, 1.203e-01, 1.072e-01, 5.799e-01) * s1_1_0;
	r1 += M4(8.581e-02, -1.164e-01, 5.852e-02, 1.333e-01, -9.204e-02, -3.693e-02, -1.263e-02, 5.192e-02, 8.083e-02, 3.650e-01, -2.880e-02, -2.463e-01, 2.103e-01, 1.402e-01, 1.059e-01, 2.129e-02) * s1_1_0;
	r0 += M4(6.363e-01, 3.096e-01, 3.389e-01, 3.173e-03, -2.535e-01, 1.978e-01, -2.192e-01, 6.427e-02, 2.510e-01, -6.442e-01, -6.111e-02, -2.387e-01, 1.607e-01, 1.670e-01, 6.206e-01, 6.348e-01) * s1_1_1;
	r1 += M4(-1.964e-01, 4.854e-01, -2.155e-01, -7.483e-02, 8.027e-02, -3.134e-01, -6.711e-02, -2.752e-01, -7.578e-02, 5.712e-01, 3.004e-01, 2.424e-01, -1.915e-01, 1.415e-01, -2.813e-01, -2.455e-02) * s1_1_1;
	r0 += M4(-3.192e-01, -2.818e-01, 1.175e-02, 9.285e-02, 3.391e-01, -2.601e-01, 7.687e-02, 3.082e-02, 2.175e-01, 2.016e-01, -8.130e-02, 2.037e-02, -2.216e-02, -1.237e-01, 8.598e-02, 3.677e-02) * s1_1_2;
	r1 += M4(1.734e-01, -7.615e-03, 1.152e-01, 2.488e-01, -2.158e-02, -7.293e-02, -1.927e-02, -3.210e-02, -1.450e-01, -2.164e-01, 2.206e-02, -2.669e-01, 5.144e-02, 1.362e-01, -6.796e-02, 1.332e-01) * s1_1_2;
	r0 += M4(-1.948e-01, 2.782e-02, -2.879e-02, 2.322e-02, 5.188e-02, -2.784e-01, -2.610e-02, -1.637e-02, -2.202e-01, 3.857e-01, 3.415e-03, -2.058e-03, 6.213e-02, 8.071e-02, 1.392e-02, 2.592e-01) * s1_2_0;
	r1 += M4(-8.686e-03, -4.835e-02, -2.889e-02, 2.569e-04, 8.221e-03, 7.741e-02, 1.342e-02, 1.402e-02, -7.350e-02, -2.688e-01, -7.959e-02, -1.018e-01, 4.498e-03, 8.321e-02, -1.196e-04, 2.284e-02) * s1_2_0;
	r0 += M4(-2.693e-01, -2.436e-01, -4.926e-02, 7.520e-02, 2.568e-01, 1.588e-02, 1.923e-02, -1.614e-02, -3.981e-01, -3.477e-02, -6.103e-02, -9.159e-02, 1.411e-01, 4.598e-02, 1.064e-01, 2.881e-01) * s1_2_1;
	r1 += M4(4.017e-02, -3.545e-01, 1.355e-02, -7.097e-03, -7.841e-03, 2.450e-01, -7.488e-03, -1.480e-01, 8.936e-02, -2.906e-01, 5.324e-03, -6.467e-03, -4.740e-03, 1.567e-01, -2.031e-04, -5.616e-02) * s1_2_1;
	r0 += M4(1.212e-01, 5.970e-02, -1.897e-02, -4.268e-03, 4.425e-02, -3.011e-02, -2.989e-02, 1.566e-02, -1.959e-01, 2.642e-02, 5.042e-02, -3.256e-03, 1.529e-01, 4.947e-02, -2.934e-02, -2.660e-03) * s1_2_2;
	r1 += M4(-3.396e-02, 3.992e-02, 1.645e-02, -6.034e-03, 4.431e-02, -9.455e-02, -5.205e-03, 1.033e-01, -1.171e-01, 2.432e-01, -1.205e-02, -1.273e-01, -2.651e-03, -8.226e-02, 7.704e-03, 1.792e-02) * s1_2_2;
	r0 += V4(-7.493e-03, 1.961e-04, 3.049e-03, 1.065e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-8.395e-04, -2.982e-04, 5.312e-03, -1.448e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-2x8-BILINEAR-MPV-NVL-DS-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv2
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv2_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv2_pt))
#define l1(x, y) V4(conv2_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv2_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-2.783e-01, -8.255e-03, 9.206e-02, 4.604e-02, -6.098e-03, -1.320e-02, -7.784e-03, 3.415e-03, 1.230e-01, 1.072e-01, -1.162e-01, -2.069e-02, 5.432e-02, -4.117e-02, 5.847e-02, -1.235e-02) * s0_0_0;
	r0 += M4(4.923e-02, -3.740e-01, 1.606e-01, 1.686e-01, -6.269e-02, 2.065e-01, 1.075e-01, -2.078e-02, 2.904e-01, 5.679e-02, -4.930e-02, -1.701e-01, -4.569e-01, -2.021e-02, 7.011e-02, 1.365e-01) * s0_0_1;
	r0 += M4(4.455e-02, 1.411e-01, -4.457e-02, -1.861e-02, 2.418e-01, -3.353e-01, 8.759e-02, -7.444e-02, -2.399e-02, 1.484e-01, -8.569e-02, -6.708e-02, 8.891e-02, -1.958e-01, 1.041e-01, 1.103e-01) * s0_0_2;
	r0 += M4(8.423e-02, -4.180e-02, 9.202e-02, 2.559e-02, 1.030e-01, -2.074e-02, 7.642e-02, -5.479e-02, -1.413e-01, 4.676e-02, 2.001e-01, 1.755e-01, 5.068e-02, -1.205e-02, 2.984e-02, -4.826e-02) * s0_1_0;
	r0 += M4(2.906e-01, 4.151e-01, -4.768e-01, -1.276e-01, -3.996e-01, 1.673e-01, -5.106e-01, 4.561e-01, -3.965e-01, -8.162e-01, 7.403e-02, -3.847e-01, -1.267e-01, 1.592e-01, -7.958e-01, -5.292e-02) * s0_1_1;
	r0 += M4(-5.018e-02, -3.599e-02, 9.507e-02, -2.076e-01, 5.787e-03, 1.415e-01, 2.116e-01, -1.655e-01, -2.156e-01, 5.642e-02, -5.674e-02, 3.318e-01, 1.870e-01, -4.525e-02, 7.249e-02, -5.062e-01) * s0_1_2;
	r0 += M4(5.745e-03, -8.435e-03, -2.006e-02, -1.225e-02, -2.899e-02, -1.622e-02, 2.451e-03, 6.230e-03, 1.573e-02, 7.917e-03, 4.691e-02, 3.422e-02, 4.182e-03, -2.942e-03, 7.502e-03, -2.558e-03) * s0_2_0;
	r0 += M4(-5.019e-02, -6.027e-03, 4.829e-02, -2.838e-02, 7.580e-02, -2.309e-02, 1.586e-02, -9.219e-02, 1.126e-01, 2.120e-02, 1.792e-01, 4.680e-02, -3.359e-02, 5.673e-03, 2.743e-02, 3.591e-02) * s0_2_1;
	r0 += M4(-2.622e-02, -4.333e-02, 1.177e-02, 8.166e-02, -1.851e-02, 1.577e-03, -5.749e-02, 8.435e-02, -5.914e-02, 4.258e-02, -7.590e-02, 9.158e-02, 1.743e-02, -1.327e-02, 3.771e-02, 3.915e-02) * s0_2_2;
	r0 += M4(-6.176e-03, 8.148e-03, -1.524e-02, -2.906e-03, 1.673e-01, 1.679e-02, -2.199e-02, -2.936e-02, -5.601e-03, -1.415e-02, 3.243e-03, -3.961e-03, 5.080e-02, 1.087e-02, -8.700e-03, -5.551e-03) * s1_0_0;
	r0 += M4(4.583e-03, -1.018e-02, 9.950e-03, -6.253e-03, -3.135e-01, 1.321e-01, 2.007e-01, 1.233e-01, -2.389e-02, -4.768e-03, -1.582e-02, -7.284e-03, -4.636e-02, 5.486e-02, -2.375e-02, -4.163e-02) * s1_0_1;
	r0 += M4(-2.129e-02, 3.304e-02, 6.206e-03, 9.308e-03, 6.931e-03, -2.861e-01, 3.009e-02, 1.362e-01, -3.408e-03, -8.707e-03, 1.767e-03, 5.036e-04, -2.629e-03, -4.502e-03, 4.650e-03, 2.073e-05) * s1_0_2;
	r0 += M4(-1.174e-01, 3.630e-02, -7.635e-02, 2.531e-02, -1.019e-01, -1.064e-02, -1.107e-01, 1.027e-01, 2.531e-01, -2.631e-02, 1.432e-01, -2.715e-02, -4.619e-01, 2.529e-01, -1.978e-01, 9.985e-02) * s1_1_0;
	r0 += M4(3.847e-01, -2.311e-01, 4.042e-02, -1.479e-01, 4.600e-01, 1.804e-01, -2.944e-01, -4.756e-01, 2.210e-01, 5.801e-01, 1.255e-01, 3.089e-01, 2.278e-01, -1.627e-01, 4.998e-03, 2.302e-01) * s1_1_1;
	r0 += M4(-8.471e-02, -1.132e-02, -4.757e-02, 6.930e-02, -2.090e-02, 1.067e-01, 7.593e-02, 2.210e-02, 6.880e-03, 5.268e-03, -1.137e-02, -2.593e-02, 5.074e-04, -2.055e-02, 2.258e-02, 5.752e-03) * s1_1_2;
	r0 += M4(-3.465e-02, 5.902e-03, -5.020e-02, 4.044e-02, -3.343e-02, -2.580e-02, 6.362e-02, -2.371e-03, -2.961e-02, 7.675e-03, 4.794e-02, -1.946e-02, 1.298e-01, -2.368e-02, -9.203e-02, 9.990e-02) * s1_2_0;
	r0 += M4(1.163e-01, -9.298e-02, 4.482e-01, -1.515e-01, -2.866e-02, -3.918e-02, 1.137e-02, 5.370e-02, -7.110e-03, -1.387e-02, 5.676e-02, 2.283e-01, 3.966e-02, -1.267e-01, 2.842e-01, -3.688e-01) * s1_2_1;
	r0 += M4(-2.559e-02, 9.333e-02, -8.865e-02, -1.481e-02, 4.341e-03, -1.071e-02, -2.689e-03, -4.093e-02, 1.553e-02, -1.233e-02, 1.776e-02, -2.065e-03, -3.210e-02, 4.662e-02, -4.213e-02, 1.747e-03) * s1_2_2;
	r0 += V4(-2.717e-08, -1.945e-08, -2.852e-08, -1.930e-08);
	r0 = tanh(r0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
