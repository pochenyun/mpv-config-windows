// CuNNy 4x32 BILINEAR MPV NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-4x32-BILINEAR-MPV-NVL-in
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(LUMA_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0)) + vec2(0.5)) * LUMA_pt).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2, r3, r4, r5, r6, r7;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0); r3 = V4(0.0); r4 = V4(0.0); r5 = V4(0.0); r6 = V4(0.0); r7 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(-2.758e-03, 5.097e-03, 5.170e-02, -3.332e-02) * s0_0_0;
	r1 += V4(1.910e-02, 6.860e-02, 1.135e-01, 1.249e-02) * s0_0_0;
	r2 += V4(-3.426e-03, 6.252e-02, -4.120e-02, -1.710e-01) * s0_0_0;
	r3 += V4(-5.401e-02, -3.376e-02, -3.426e-03, 5.584e-02) * s0_0_0;
	r4 += V4(-1.215e-01, -4.129e-03, 9.551e-02, -1.849e-02) * s0_0_0;
	r5 += V4(5.773e-02, 8.960e-02, -3.555e-03, -5.766e-02) * s0_0_0;
	r6 += V4(1.970e-02, 2.434e-02, 4.817e-02, 2.680e-02) * s0_0_0;
	r7 += V4(2.337e-02, 9.287e-03, -4.586e-02, 4.530e-03) * s0_0_0;
	r0 += V4(3.493e-03, -1.032e-02, -1.145e-02, 4.000e-02) * s0_0_1;
	r1 += V4(-5.606e-02, 3.069e-02, -1.567e-01, 6.248e-02) * s0_0_1;
	r2 += V4(1.129e-02, 8.890e-02, -4.416e-04, 2.045e-02) * s0_0_1;
	r3 += V4(1.187e-01, 2.567e-02, -2.476e-01, -2.524e-01) * s0_0_1;
	r4 += V4(6.440e-02, -5.241e-03, -4.547e-03, 1.489e-02) * s0_0_1;
	r5 += V4(-4.090e-02, -1.333e-01, 3.648e-02, -6.062e-02) * s0_0_1;
	r6 += V4(1.831e-01, -2.881e-02, 2.351e-01, -1.284e-01) * s0_0_1;
	r7 += V4(-2.950e-02, -1.038e-01, 6.302e-02, -6.470e-02) * s0_0_1;
	r0 += V4(1.812e-01, 4.643e-04, -1.173e-03, -6.017e-03) * s0_0_2;
	r1 += V4(1.564e-02, -8.276e-02, 2.928e-02, 2.590e-01) * s0_0_2;
	r2 += V4(-1.155e-02, 3.675e-02, 3.106e-02, -2.993e-02) * s0_0_2;
	r3 += V4(-5.800e-02, -1.802e-01, 2.476e-01, 1.052e-01) * s0_0_2;
	r4 += V4(-1.065e-01, 8.805e-03, 5.343e-02, -3.337e-03) * s0_0_2;
	r5 += V4(5.825e-02, 3.552e-02, -5.652e-02, -2.112e-02) * s0_0_2;
	r6 += V4(-2.036e-01, 1.818e-03, 4.871e-02, 3.454e-01) * s0_0_2;
	r7 += V4(-4.085e-02, 6.606e-02, -2.337e-02, 5.163e-02) * s0_0_2;
	r0 += V4(1.752e-03, 2.309e-01, 1.248e-01, 4.941e-02) * s0_1_0;
	r1 += V4(1.033e-01, -1.638e-01, -4.321e-03, -1.011e-02) * s0_1_0;
	r2 += V4(-5.180e-02, -9.255e-02, -2.061e-01, 2.089e-02) * s0_1_0;
	r3 += V4(4.472e-02, -1.794e-02, -1.399e-02, 9.738e-02) * s0_1_0;
	r4 += V4(9.725e-02, 3.940e-03, 9.937e-02, -4.092e-01) * s0_1_0;
	r5 += V4(5.774e-02, -8.554e-02, 4.906e-02, -1.024e-01) * s0_1_0;
	r6 += V4(-2.274e-03, -9.644e-02, 2.075e-01, -5.323e-02) * s0_1_0;
	r7 += V4(-2.290e-01, -1.763e-01, -2.783e-01, -7.105e-02) * s0_1_0;
	r0 += V4(-1.028e-01, -1.264e-01, 1.309e-01, 2.946e-01) * s0_1_1;
	r1 += V4(-1.835e-01, 2.330e-01, -1.272e-01, -6.673e-02) * s0_1_1;
	r2 += V4(3.433e-01, -8.988e-01, -1.255e-01, 1.108e-01) * s0_1_1;
	r3 += V4(3.496e-01, 4.912e-01, 2.037e-01, 2.332e-01) * s0_1_1;
	r4 += V4(4.925e-02, -7.615e-02, -1.264e-01, -3.503e-02) * s0_1_1;
	r5 += V4(-1.634e+00, -3.955e-01, 1.236e-01, -8.438e-02) * s0_1_1;
	r6 += V4(-2.251e-01, -9.226e-02, -7.153e-02, -2.358e-01) * s0_1_1;
	r7 += V4(3.774e-01, 3.998e-01, -8.772e-02, 2.627e-01) * s0_1_1;
	r0 += V4(-1.000e-01, -9.015e-02, 1.140e-01, 1.773e-02) * s0_1_2;
	r1 += V4(-2.819e-01, -5.165e-02, 1.655e-01, -1.355e-02) * s0_1_2;
	r2 += V4(1.549e-01, 5.412e-02, 3.450e-01, 5.378e-02) * s0_1_2;
	r3 += V4(-2.404e-01, -2.329e-01, 4.111e-02, -1.217e-01) * s0_1_2;
	r4 += V4(3.544e-02, -3.313e-01, 6.612e-02, 2.694e-03) * s0_1_2;
	r5 += V4(3.527e-02, 1.385e-01, -3.792e-01, -5.535e-02) * s0_1_2;
	r6 += V4(8.130e-02, 1.958e-01, -3.580e-02, -2.182e-01) * s0_1_2;
	r7 += V4(2.153e-02, -1.282e-01, 2.361e-01, -2.143e-01) * s0_1_2;
	r0 += V4(7.922e-03, 2.663e-01, -1.069e-02, -1.388e-02) * s0_2_0;
	r1 += V4(2.427e-01, 4.944e-02, 2.143e-01, 4.226e-03) * s0_2_0;
	r2 += V4(-1.382e-01, -1.181e-02, -8.765e-02, -3.371e-02) * s0_2_0;
	r3 += V4(1.496e-02, -1.519e-01, 1.338e-02, -6.219e-02) * s0_2_0;
	r4 += V4(6.308e-02, 1.962e-03, -2.479e-01, 4.252e-01) * s0_2_0;
	r5 += V4(6.444e-02, -8.389e-03, 2.551e-02, -2.435e-02) * s0_2_0;
	r6 += V4(-2.797e-02, 2.072e-02, -1.779e-01, 1.782e-02) * s0_2_0;
	r7 += V4(-1.001e-01, 5.755e-02, -6.946e-02, -3.197e-02) * s0_2_0;
	r0 += V4(8.247e-02, -9.008e-02, -1.940e-02, -9.115e-02) * s0_2_1;
	r1 += V4(1.443e-01, 6.425e-02, -1.112e-01, -2.398e-02) * s0_2_1;
	r2 += V4(-2.065e-01, -3.699e+00, -5.976e-02, 1.542e-01) * s0_2_1;
	r3 += V4(6.313e-02, -3.057e-01, 5.921e-02, -6.957e-02) * s0_2_1;
	r4 += V4(2.261e-01, 3.760e-01, 2.578e-01, 2.360e-02) * s0_2_1;
	r5 += V4(5.210e-02, 1.028e-01, 1.744e-01, -4.197e-03) * s0_2_1;
	r6 += V4(3.713e-02, 3.601e-01, -2.387e-01, 1.492e-01) * s0_2_1;
	r7 += V4(-2.721e-02, -2.368e-01, 6.640e-02, -8.738e-03) * s0_2_1;
	r0 += V4(-5.603e-02, -1.850e-01, 1.370e-01, -2.616e-01) * s0_2_2;
	r1 += V4(-2.055e-02, -9.564e-02, -1.169e-01, -2.212e-01) * s0_2_2;
	r2 += V4(-9.606e-02, -8.696e-02, 1.420e-01, -1.222e-01) * s0_2_2;
	r3 += V4(-2.426e-01, -6.252e-03, -2.998e-01, 1.751e-02) * s0_2_2;
	r4 += V4(-9.598e-02, 2.676e-02, -2.261e-01, 8.631e-04) * s0_2_2;
	r5 += V4(5.541e-02, 2.521e-01, 3.052e-02, -3.719e-02) * s0_2_2;
	r6 += V4(1.294e-01, -3.857e-01, -1.594e-02, 9.341e-02) * s0_2_2;
	r7 += V4(1.380e-02, 9.455e-02, 1.302e-01, 4.431e-02) * s0_2_2;
	r0 += V4(1.971e-02, 7.706e-03, -2.456e-01, 2.313e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-2.534e-02, -1.327e-02, 5.783e-03, 7.970e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(1.304e-03, 6.665e-02, 1.295e-02, 7.645e-03);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r2));
	r3 += V4(-8.409e-03, 1.046e-03, -6.790e-04, -6.896e-05);
	r3 = max(r3, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r3));
	r4 += V4(-2.003e-01, 1.299e-03, 7.171e-03, -3.977e-04);
	r4 = max(r4, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r4));
	r5 += V4(3.976e-02, -4.593e-03, 1.487e-02, -5.047e-04);
	r5 = max(r5, V4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), vec4(r5));
	r6 += V4(1.924e-02, -2.159e-03, 4.290e-03, -4.112e-03);
	r6 = max(r6, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), vec4(r6));
	r7 += V4(1.043e-02, -1.009e-02, -1.443e-02, 4.973e-02);
	r7 = max(r7, V4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), vec4(r7));
}

//!DESC CuNNy-4x32-BILINEAR-MPV-NVL-conv1
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF0F70E17, 0xFCFB060F, 0x04FB0A01, 0x0A040F0E);
	r1 = D(r1, s0_0_0, 0x12080912, 0x2502FED5, 0xEB0E14FC, 0xE8F6FA07);
	r2 = D(r2, s0_0_0, 0x81F0F79C, 0xF6FD0711, 0xEC11EC10, 0xD4ED101B);
	r3 = D(r3, s0_0_0, 0x180213EC, 0xFFF1EEF0, 0xDF0A17F2, 0xF7F7FEFE);
	r4 = D(r4, s0_0_0, 0xE1080005, 0x0AFB09F0, 0x0614141C, 0xFA05F809);
	r5 = D(r5, s0_0_0, 0x18F0FE06, 0xF0020213, 0xFF1103FA, 0x2502FBFE);
	r6 = D(r6, s0_0_0, 0x03030C0F, 0x00F70817, 0xB702EBF5, 0xE7F40008);
	r7 = D(r7, s0_0_0, 0x110AFCF4, 0xEAFBEDE2, 0x120C1A10, 0xE90DFD04);
	r0 = D(r0, s0_0_1, 0x0B0C14FF, 0x16031807, 0xFAFFFA05, 0xFEFAD10B);
	r1 = D(r1, s0_0_1, 0xFD0437FC, 0xEBF3E717, 0xEF063A22, 0x02050309);
	r2 = D(r2, s0_0_1, 0x8A11080B, 0xE101EAFE, 0x01059BFA, 0xF805F409);
	r3 = D(r3, s0_0_1, 0xC8059508, 0x2711DCFA, 0xEB14E2FC, 0x0A0A0907);
	r4 = D(r4, s0_0_1, 0x01F6040E, 0x090BDE18, 0xE6090EF0, 0x23F610E8);
	r5 = D(r5, s0_0_1, 0xF904E9FD, 0x33FC30F1, 0xE4F609F3, 0x24F2ECF8);
	r6 = D(r6, s0_0_1, 0xF20224F7, 0x020C0527, 0xB709C6F8, 0x0008FB07);
	r7 = D(r7, s0_0_1, 0x061DF809, 0xF5DFF602, 0x2BF31512, 0xF50906F3);
	r0 = D(r0, s0_0_2, 0x09FFF6DE, 0x0C0413FB, 0xFE070FEB, 0xE6EAEFF0);
	r1 = D(r1, s0_0_2, 0x0400F0F6, 0xFDF9FBF9, 0x01050C05, 0x0BFE2008);
	r2 = D(r2, s0_0_2, 0xE20E13E2, 0xFEFFD903, 0x03F3DAFD, 0x00020210);
	r3 = D(r3, s0_0_2, 0xF3EED60A, 0x1C0FEBE9, 0xED1053EF, 0x03FEF60B);
	r4 = D(r4, s0_0_2, 0xFBF60502, 0x02012015, 0xF2EDF507, 0xF1F90715);
	r5 = D(r5, s0_0_2, 0xF9090003, 0x0DF934E9, 0xF4F52002, 0xF6F811F9);
	r6 = D(r6, s0_0_2, 0x09050105, 0xF4FF2813, 0xEEFCEB0C, 0x0B0A2417);
	r7 = D(r7, s0_0_2, 0xE50A13F9, 0xF8FBED90, 0xEEF81AF4, 0x0308FC05);
	r0 = D(r0, s0_1_0, 0x21FBF4F6, 0xDFFB08F0, 0x1FEF1F0A, 0x00090712);
	r1 = D(r1, s0_1_0, 0x0404FF15, 0xF40005E1, 0x20F916F3, 0xE310FFFB);
	r2 = D(r2, s0_1_0, 0xECE203E4, 0xF207F8FA, 0xD1FDED0C, 0xE4FD05FE);
	r3 = D(r3, s0_1_0, 0x12F7E205, 0xF8040412, 0x040E170D, 0xE7F7FE0A);
	r4 = D(r4, s0_1_0, 0x04000CFE, 0xE4FF16DD, 0xF51510EC, 0xF40CFFF2);
	r5 = D(r5, s0_1_0, 0xA60D05E7, 0xFE04FB02, 0xE00C0B0E, 0xED010316);
	r6 = D(r6, s0_1_0, 0x1FFF1DFD, 0xD507F2DA, 0x01F7FCE8, 0x12FF0DF9);
	r7 = D(r7, s0_1_0, 0x0D19100D, 0xFF13F506, 0x280002F5, 0x0B17E907);
	r0 = D(r0, s0_1_1, 0x0609F9F1, 0xC4FFECE9, 0x191010E2, 0x0D04E407);
	r1 = D(r1, s0_1_1, 0xCEFFF1F2, 0x0102FF18, 0x19F31B05, 0xE608EB0C);
	r2 = D(r2, s0_1_1, 0xE809FC10, 0xF504B300, 0x1401E6F8, 0xE4080E01);
	r3 = D(r3, s0_1_1, 0xE609E6F4, 0x05F7F026, 0x1CF0ED08, 0x18F8F30A);
	r4 = D(r4, s0_1_1, 0x130B18EA, 0x08EBE00B, 0x1D06101A, 0x3F0DF1E0);
	r5 = D(r5, s0_1_1, 0x5005C9E3, 0x29071F11, 0x030F0E0E, 0xCB02DF2B);
	r6 = D(r6, s0_1_1, 0x0B0B1A1B, 0x16F3D3F0, 0x06F7DFFE, 0xF0FA41F8);
	r7 = D(r7, s0_1_1, 0x041113FE, 0xD8F40E08, 0xEA00F908, 0x052EE8F7);
	r0 = D(r0, s0_1_2, 0x0AFF1712, 0xE8FFC70A, 0xE308FD0A, 0x1006FBE5);
	r1 = D(r1, s0_1_2, 0x07FEEC0C, 0xF20421F7, 0xF6F60E06, 0x090ED3FA);
	r2 = D(r2, s0_1_2, 0x15EDF132, 0x10F5E1F8, 0x0901DA0D, 0x04F5EFF1);
	r3 = D(r3, s0_1_2, 0x1719ECF7, 0x01F8FAFB, 0x0705E80A, 0xFFFBF611);
	r4 = D(r4, s0_1_2, 0x0C0A13FD, 0x060C0002, 0x22050208, 0xFD01061E);
	r5 = D(r5, s0_1_2, 0xF6FBF107, 0xFEEE1503, 0xF8222002, 0x060209E6);
	r6 = D(r6, s0_1_2, 0xF6F4120C, 0x09EFBAFD, 0x210BD9FD, 0xD6F81713);
	r7 = D(r7, s0_1_2, 0xFA14160C, 0xED07D81C, 0xE61E10FA, 0x081809F8);
	r0 = D(r0, s0_2_0, 0xFA040138, 0xEE0C05F8, 0x17FCF81B, 0x19031C1D);
	r1 = D(r1, s0_2_0, 0x05FAFCE5, 0xFA020B07, 0xE1FB05E4, 0x01FEFBE6);
	r2 = D(r2, s0_2_0, 0xFAE7F3DA, 0x00010AED, 0x09030F01, 0xEF0814FD);
	r3 = D(r3, s0_2_0, 0xFEFA0B03, 0x0C01F7F9, 0x04F3FDF0, 0xF3F1F6F8);
	r4 = D(r4, s0_2_0, 0xFCFEFF01, 0xFA020E1A, 0xE2FDEFF2, 0x01FC1D00);
	r5 = D(r5, s0_2_0, 0x0909DE04, 0xF3FEFB0C, 0x07F0FE03, 0xF20812DD);
	r6 = D(r6, s0_2_0, 0x08F10AE1, 0xCF0FECEC, 0x0F01F70B, 0x120ECEF8);
	r7 = D(r7, s0_2_0, 0xEF0C10FA, 0x1701EC06, 0xF3F401F5, 0xF6010507);
	r0 = D(r0, s0_2_1, 0xDBFDF4DB, 0x2DFA05E4, 0xF600EDED, 0x1CEFF0F4);
	r1 = D(r1, s0_2_1, 0x04FE0509, 0x0808032A, 0xF00001F2, 0x1AEFFCF7);
	r2 = D(r2, s0_2_1, 0x13FFFB13, 0x2500FE04, 0xF3FC24F6, 0xFA11E715);
	r3 = D(r3, s0_2_1, 0xF4FA0A06, 0xF2040E06, 0xFBEF86EC, 0xE50AF91A);
	r4 = D(r4, s0_2_1, 0x011712FB, 0x01F4D6F0, 0x0BEFF60A, 0x0104EB0B);
	r5 = D(r5, s0_2_1, 0x32F7041A, 0x010BFAFC, 0x02FDFAE0, 0xF30105F6);
	r6 = D(r6, s0_2_1, 0xFE0A0E01, 0x0C031AF4, 0x0A0E0812, 0x0A00EBE2);
	r7 = D(r7, s0_2_1, 0x00051AFB, 0xF10CFDF8, 0x0201E4F7, 0x0D12000A);
	r0 = D(r0, s0_2_2, 0xF7FBE70D, 0x1C09EB25, 0xD6FCF627, 0xF313FDE3);
	r1 = D(r1, s0_2_2, 0x1BFAFCEE, 0xE705FB01, 0xF50CFA0D, 0x0DF5130A);
	r2 = D(r2, s0_2_2, 0x03FCFB00, 0xF6000509, 0x06FE02F0, 0xFE08F2F0);
	r3 = D(r3, s0_2_2, 0x03061607, 0x08F4FFF6, 0x37F0FB0C, 0xEC03E9F9);
	r4 = D(r4, s0_2_2, 0x0206FC16, 0xE208160C, 0x0BF1FCE7, 0xECFE0200);
	r5 = D(r5, s0_2_2, 0xEDFBF7FA, 0xFC05FFEA, 0xF60307FE, 0xFD0801FA);
	r6 = D(r6, s0_2_2, 0x07FCF1F8, 0x20010DFB, 0x15F31F01, 0x070013EE);
	r7 = D(r7, s0_2_2, 0x0D15090A, 0xF0F9DA25, 0xE6F8FDF3, 0xF516F8F6);
	r0 = D(r0, s1_0_0, 0xF20304F1, 0xFFF20604, 0x1FEF070B, 0xF6F20A21);
	r1 = D(r1, s1_0_0, 0xF5F1F504, 0xE3200106, 0x07FBF3FD, 0x00F51705);
	r2 = D(r2, s1_0_0, 0xA5C51022, 0x22FA0103, 0x0108DF3B, 0xFFEA07DC);
	r3 = D(r3, s1_0_0, 0x0E15E70E, 0x0802FF20, 0xF00316F8, 0x0B0A1409);
	r4 = D(r4, s1_0_0, 0xF9FCFD05, 0x27F3F7E0, 0xEAF1F40D, 0xD80F2E08);
	r5 = D(r5, s1_0_0, 0xFAFB11F0, 0x17F400FD, 0x13F7160A, 0x02F40D07);
	r6 = D(r6, s1_0_0, 0xEF061FEB, 0x1FF306F5, 0xFA23D9F4, 0x1AE30007);
	r7 = D(r7, s1_0_0, 0x000BF508, 0x1812CAED, 0x14EBEF29, 0x0DF0F402);
	r0 = D(r0, s1_0_1, 0xF504F308, 0x031111F7, 0xEF010B05, 0x0E042716);
	r1 = D(r1, s1_0_1, 0x0706060B, 0x3AE11709, 0x05F909DF, 0x01FFE810);
	r2 = D(r2, s1_0_1, 0x1CA315E7, 0xF214FEF2, 0x0BF5FC7F, 0x240822C0);
	r3 = D(r3, s1_0_1, 0x08BE005D, 0x0802FD18, 0xF50AEE01, 0x080BEC10);
	r4 = D(r4, s1_0_1, 0xFC0804F0, 0x06210014, 0x15093C13, 0xE1F51B03);
	r5 = D(r5, s1_0_1, 0xE7E909F7, 0xEF272E03, 0x160FF920, 0x05010B0B);
	r6 = D(r6, s1_0_1, 0x0613FBDF, 0x00FA0EEB, 0xE1EEF508, 0xDF16FAD9);
	r7 = D(r7, s1_0_1, 0xF2050803, 0xEBDFF121, 0x261B030C, 0xFBF6F6F4);
	r0 = D(r0, s1_0_2, 0x162521FC, 0x0E04FD0C, 0xF900EEE2, 0xE4F01F03);
	r1 = D(r1, s1_0_2, 0x08FCF3ED, 0x0CFAFBFF, 0x0FF4DF12, 0xFB0C0010);
	r2 = D(r2, s1_0_2, 0x03EE17F4, 0xF015E328, 0x0D090A15, 0xFC110AF3);
	r3 = D(r3, s1_0_2, 0x18060EF3, 0x011F0717, 0x03161EC4, 0xF704F414);
	r4 = D(r4, s1_0_2, 0xF603F7F8, 0xEE08FFE6, 0x1707F4F7, 0x19E9FF01);
	r5 = D(r5, s1_0_2, 0x02ECE9E6, 0x0BFE09EC, 0x0502E522, 0x01FAEFFB);
	r6 = D(r6, s1_0_2, 0x1004E804, 0xE4EB09F7, 0x010F19F7, 0x1E0903F0);
	r7 = D(r7, s1_0_2, 0xF200F9F5, 0x0D151CD5, 0xF618002D, 0x10040609);
	r0 = D(r0, s1_1_0, 0xFEF8F01A, 0xEE0B0C01, 0x04F21209, 0x10F0FD28);
	r1 = D(r1, s1_1_0, 0x1AEBF009, 0x84FC00F8, 0xEBDA0206, 0x03040308);
	r2 = D(r2, s1_1_0, 0x9CECD21B, 0x3F031CD3, 0x06360CE2, 0xFA05D7FA);
	r3 = D(r3, s1_1_0, 0xFB0E030B, 0xF110F2E9, 0xF9F0F9E8, 0x03151C04);
	r4 = D(r4, s1_1_0, 0x28FF01F0, 0x0E0ADA17, 0xEF0906FB, 0xFDE30703);
	r5 = D(r5, s1_1_0, 0x1324FF34, 0x1D0AF503, 0xF40C0009, 0xF10BFBFC);
	r6 = D(r6, s1_1_0, 0xF4D617F6, 0xFEFA0BE8, 0xD2100EF9, 0x33F60B11);
	r7 = D(r7, s1_1_0, 0x0E02F806, 0xE514D60B, 0x06EDE320, 0xF9090630);
	r0 = D(r0, s1_1_1, 0x00E5F1E6, 0xC2FFEB23, 0xED17ECEB, 0xF400FD23);
	r1 = D(r1, s1_1_1, 0x05FED5F1, 0x461EF70F, 0x090DFB00, 0x2EF1F937);
	r2 = D(r2, s1_1_1, 0x07E6CE0E, 0xFD1111DD, 0x0CF313FB, 0x15FADD11);
	r3 = D(r3, s1_1_1, 0xF728FC40, 0x0BF1F71B, 0xD9FD0201, 0x020BFCE5);
	r4 = D(r4, s1_1_1, 0xF1FF0DDC, 0xEDD52DF4, 0xFBFD11D1, 0x16E4F7F7);
	r5 = D(r5, s1_1_1, 0xF81C0BF9, 0xFCF2FDF9, 0xEB0D29BD, 0x06FF0C03);
	r6 = D(r6, s1_1_1, 0x02FAF1FB, 0xC2EC1407, 0xF2F60205, 0xA2FE0FD4);
	r7 = D(r7, s1_1_1, 0x0BEFF900, 0xAC2ADB07, 0xED091406, 0xE6051004);
	r0 = D(r0, s1_1_2, 0xF3FCD5E7, 0x2AE7F404, 0xFD2BF4E3, 0x0127020D);
	r1 = D(r1, s1_1_2, 0x0BE31CE8, 0x070AEC0E, 0x0D08EF10, 0xFF0F2C07);
	r2 = D(r2, s1_1_2, 0xF8E9E0FB, 0x01F434F9, 0x10FDF620, 0xFC0A1807);
	r3 = D(r3, s1_1_2, 0xFD1810F1, 0x060C30F8, 0xF5F0F2D6, 0xF022FD23);
	r4 = D(r4, s1_1_2, 0x02F50F07, 0xFCFCF9DE, 0xDCE1FDF6, 0x2201EA18);
	r5 = D(r5, s1_1_2, 0xE5FE09FD, 0x07E0F1EC, 0xECF3E6F2, 0x041BF9FE);
	r6 = D(r6, s1_1_2, 0x000E1200, 0xEB06F6FC, 0x08E90C11, 0xDCFEEBE9);
	r7 = D(r7, s1_1_2, 0x10FFE800, 0xECC641E5, 0xFDF2FCBA, 0xF306FF06);
	r0 = D(r0, s1_2_0, 0x1A0C1003, 0xE700FDEC, 0x1FD90FF1, 0x05D4E4DD);
	r1 = D(r1, s1_2_0, 0x10030C02, 0xE809F6F5, 0x00F819F3, 0x1E08F7F8);
	r2 = D(r2, s1_2_0, 0xF30906F2, 0x17F201EF, 0xE90A06E4, 0x09E213EA);
	r3 = D(r3, s1_2_0, 0xFBEEF7F6, 0xF210F808, 0x11EEDE2E, 0x0EED01FB);
	r4 = D(r4, s1_2_0, 0xF40B0404, 0xFE10CDF9, 0x070E18F4, 0x04F4E712);
	r5 = D(r5, s1_2_0, 0xFC0ED20B, 0xF502FDF1, 0xFAFAFF07, 0xFBF50804);
	r6 = D(r6, s1_2_0, 0xE8F1F907, 0xF00A0635, 0xEEF8FF10, 0x0118E44C);
	r7 = D(r7, s1_2_0, 0x0CEFFEDA, 0xF407EF03, 0xFDFDF9FB, 0x0600F906);
	r0 = D(r0, s1_2_1, 0xE6F01E3D, 0xC619FD0D, 0xD9FFECFD, 0x021CF0F4);
	r1 = D(r1, s1_2_1, 0xD1070AFD, 0x02EAFAE8, 0x05230DF8, 0xED19E014);
	r2 = D(r2, s1_2_1, 0xF129E200, 0xDD09ECFF, 0x01DCE802, 0xE6000AD9);
	r3 = D(r3, s1_2_1, 0x04F4F8FA, 0x09FEF8EA, 0xFE0F1E4D, 0xF2F9DD03);
	r4 = D(r4, s1_2_1, 0xF71402EC, 0x0EEC263E, 0x0EF7EF03, 0xF007E120);
	r5 = D(r5, s1_2_1, 0xFD06E2FC, 0x02060AFC, 0x1C04FE08, 0xF4F41709);
	r6 = D(r6, s1_2_1, 0x0101FCE1, 0xF80FFC00, 0x0316F0FD, 0xF4D80517);
	r7 = D(r7, s1_2_1, 0x0408021A, 0xFC1A1BF4, 0xE70FF501, 0xFB000700);
	r0 = D(r0, s1_2_2, 0xF1DB0507, 0x1D110C14, 0xF515180D, 0xF3FCDB0C);
	r1 = D(r1, s1_2_2, 0x140204FD, 0xEF0C19E6, 0xFE08FDFA, 0x02E90510);
	r2 = D(r2, s1_2_2, 0xF6F3E1FE, 0xF8E1EAFA, 0xF3F00EF0, 0xF511D713);
	r3 = D(r3, s1_2_2, 0x09FB09EF, 0x02F3FBFF, 0x12F7E417, 0x01FE0409);
	r4 = D(r4, s1_2_2, 0x1C0B1200, 0x060DFDF9, 0x0100E5ED, 0x08080905);
	r5 = D(r5, s1_2_2, 0xE0EE080E, 0x090DEDF7, 0xF9F6E8F3, 0x000AF3F7);
	r6 = D(r6, s1_2_2, 0xFE01F5F1, 0x1904E7F2, 0x14DE11FD, 0x050509EA);
	r7 = D(r7, s1_2_2, 0xFAFE03F9, 0x1BE7F31A, 0x0DFE1607, 0x10030B12);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF5FCB2F1, 0x0DF3DFF6, 0x000C0AFE, 0xF82103F3);
	r1 = D(r1, s0_0_0, 0x0CF914F2, 0xF00E05C7, 0xF0082D05, 0x18FBF3E8);
	r2 = D(r2, s0_0_0, 0x38140EE8, 0xFF04DFF9, 0x0D0D0714, 0x1105DCFE);
	r3 = D(r3, s0_0_0, 0x1007E4BC, 0x00ED17FF, 0x033CB6FA, 0x03F227E0);
	r4 = D(r4, s0_0_0, 0x070519F3, 0xF303F419, 0x06D7DEF6, 0x2FECE0D6);
	r5 = D(r5, s0_0_0, 0x13EEE8E1, 0x1408C40D, 0x140B1612, 0x03F60707);
	r6 = D(r6, s0_0_0, 0x010195E4, 0x02D017FE, 0xF4242AC7, 0xF503E514);
	r7 = D(r7, s0_0_0, 0xFB0D04F8, 0x10FBE00C, 0x0613080E, 0xFCF5FEFF);
	r0 = D(r0, s0_0_1, 0x190A37F7, 0xFC07E7D3, 0x18D7C51C, 0x123FE0F9);
	r1 = D(r1, s0_0_1, 0xF3010FEC, 0x1502818F, 0x03F5F905, 0xF604FB16);
	r2 = D(r2, s0_0_1, 0xFC0B02D6, 0xF3EB3605, 0x031F21FB, 0xEB200CF7);
	r3 = D(r3, s0_0_1, 0xFCDB0ACF, 0xEE0A042A, 0x0E0538F9, 0xF6EC2B16);
	r4 = D(r4, s0_0_1, 0xFD0752FF, 0x0C048717, 0x10FF0532, 0x12F004CC);
	r5 = D(r5, s0_0_1, 0xFEF8810C, 0x0FAEF437, 0xFE163AF5, 0xF30AFF16);
	r6 = D(r6, s0_0_1, 0x03F221E5, 0xEDE50510, 0xFA1F81BD, 0x0117FAE3);
	r7 = D(r7, s0_0_1, 0x07F23D15, 0x08E68127, 0x11EE3710, 0x031154EF);
	r0 = D(r0, s0_0_2, 0xE201B70E, 0x100F1BC9, 0x03C42018, 0x00FEF905);
	r1 = D(r1, s0_0_2, 0x17030622, 0x0BFEF1D9, 0x04090BCF, 0xFD13CFFC);
	r2 = D(r2, s0_0_2, 0xEB0606F2, 0xF612BF03, 0xFEF0E1FC, 0x09FF230F);
	r3 = D(r3, s0_0_2, 0x16C6EEB0, 0x0E251C2D, 0x0AF3FA1D, 0x01EB2103);
	r4 = D(r4, s0_0_2, 0xF912F6FE, 0xFFE52C1D, 0xF60281E7, 0xFBEA0DBF);
	r5 = D(r5, s0_0_2, 0xEC050A2B, 0xF0EB0FFA, 0xF90430F3, 0x04F80D09);
	r6 = D(r6, s0_0_2, 0x10111FFD, 0xFD0AF116, 0x090DCC12, 0x06EA0603);
	r7 = D(r7, s0_0_2, 0x030C8112, 0xE1E75200, 0xF2EEF9EF, 0xFCF206FD);
	r0 = D(r0, s0_1_0, 0x06D0220C, 0xF9F90AC2, 0x2AB80AF7, 0xF3011DE7);
	r1 = D(r1, s0_1_0, 0xEF03FDF9, 0xFC29B2E8, 0x16D0D113, 0x050BD3D2);
	r2 = D(r2, s0_1_0, 0x0AC01117, 0xF71A2232, 0xEC2F1DFA, 0x0712DA19);
	r3 = D(r3, s0_1_0, 0xE42622EC, 0x122E0C11, 0xE4F02EF3, 0x15D514EA);
	r4 = D(r4, s0_1_0, 0x04FBFD06, 0x2022341D, 0x07F7E8FB, 0x02FEEBF5);
	r5 = D(r5, s0_1_0, 0x0E320AE0, 0x18D4E913, 0xFA0AF1FB, 0xEF000D09);
	r6 = D(r6, s0_1_0, 0xFFC581D8, 0xDF07F311, 0xF417EAFF, 0x14F6F814);
	r7 = D(r7, s0_1_0, 0x02FD48F7, 0xFC012EFA, 0x03F5F0F3, 0x1807F208);
	r0 = D(r0, s0_1_1, 0x18C4A6EF, 0x07F2F9D9, 0x0EE8C7E5, 0x151A1D1A);
	r1 = D(r1, s0_1_1, 0xFD242F0C, 0x1FE781BE, 0x12C5EFE8, 0xF80AF217);
	r2 = D(r2, s0_1_1, 0xE9EADD29, 0x0B08D6F9, 0xFE20C607, 0xFF130CE4);
	r3 = D(r3, s0_1_1, 0xEAFCF725, 0xCD1929F7, 0xF90301F9, 0xE4063901);
	r4 = D(r4, s0_1_1, 0x0E00E2F6, 0xF22581F3, 0xFAF8BFFA, 0xEEF02303);
	r5 = D(r5, s0_1_1, 0xF61BCF3D, 0x07A1F018, 0x01015414, 0xFE2722F3);
	r6 = D(r6, s0_1_1, 0x04DD37F7, 0xE9062AD0, 0x162D13F2, 0x08CCD6C6);
	r7 = D(r7, s0_1_1, 0x0DFF7C13, 0xFF0F621D, 0x02EE1C12, 0x05067714);
	r0 = D(r0, s0_1_2, 0xE6DB1600, 0x060EFD95, 0xB5073B1D, 0xDAE5FF07);
	r1 = D(r1, s0_1_2, 0x0514412B, 0xDCFDC9E5, 0x1B06FDF1, 0xFFF0D4E3);
	r2 = D(r2, s0_1_2, 0xEBF8FA0B, 0x071DE8F6, 0x1107F609, 0x0601F117);
	r3 = D(r3, s0_1_2, 0x0D011516, 0x07FC0010, 0xF6F3EC19, 0x02EE1D11);
	r4 = D(r4, s0_1_2, 0xFC02F4FE, 0xEAF615EF, 0x110BCDF4, 0x0A051EDB);
	r5 = D(r5, s0_1_2, 0xE9ED1916, 0xD0CC17E8, 0xEDF9A70A, 0x07FB090D);
	r6 = D(r6, s0_1_2, 0xF8FF0C07, 0x032CFCD4, 0x01132DF6, 0xF69CD7A8);
	r7 = D(r7, s0_1_2, 0xFF0743F1, 0x19FEF2DA, 0x00F107FD, 0xFFE77F0A);
	r0 = D(r0, s0_2_0, 0xF32FC52C, 0xFB00131C, 0xF9F4E2DF, 0x19D9E9FE);
	r1 = D(r1, s0_2_0, 0xF50C0CFD, 0xEF1D1604, 0xF203411D, 0xFAFF1213);
	r2 = D(r2, s0_2_0, 0x13E13300, 0x01DCF41B, 0xF613FD04, 0x0005E8FD);
	r3 = D(r3, s0_2_0, 0x08FEF80D, 0x07EFDD09, 0x0BDEBE04, 0xF81AEFDA);
	r4 = D(r4, s0_2_0, 0xFA10FAFF, 0xF52C0219, 0xF00B42F5, 0xFAFEE60C);
	r5 = D(r5, s0_2_0, 0x39ECDC09, 0xF61901F3, 0xFF1422FA, 0x01F202FC);
	r6 = D(r6, s0_2_0, 0x18DDFB22, 0x10E4B5EC, 0xFB06ECFC, 0xFB0019E5);
	r7 = D(r7, s0_2_0, 0xEEFF020A, 0xF1EF0124, 0xD915020B, 0xFFFCF0F9);
	r0 = D(r0, s0_2_1, 0xF11114C2, 0x1102EF1B, 0xC22727ED, 0x111B1AF8);
	r1 = D(r1, s0_2_1, 0xE3041800, 0x0304AC2D, 0xE90EFDF6, 0x030FF105);
	r2 = D(r2, s0_2_1, 0xFE181007, 0x03D8F61E, 0xFD0B2502, 0xF10ED9FE);
	r3 = D(r3, s0_2_1, 0xF8F7F608, 0xEBF000EE, 0xFB96A1A1, 0xDAF2E2F0);
	r4 = D(r4, s0_2_1, 0xF50610F8, 0xE908CDF3, 0xF3F11310, 0xFEEEE805);
	r5 = D(r5, s0_2_1, 0xE70B27FA, 0x070116F2, 0xFA0B0B09, 0xF9050CFE);
	r6 = D(r6, s0_2_1, 0xECF406F9, 0x0304E3F9, 0x0EE60104, 0x04E104E3);
	r7 = D(r7, s0_2_1, 0xF70C1FFF, 0x00EC0304, 0xF30508F0, 0xF20F13F9);
	r0 = D(r0, s0_2_2, 0x00F5F411, 0xFC12F2EE, 0x1928F903, 0xE2F0FCF3);
	r1 = D(r1, s0_2_2, 0x0007FD01, 0xF3F24E1E, 0x0B0015FD, 0x1E0DD0E2);
	r2 = D(r2, s0_2_2, 0x05F419EF, 0xECC22713, 0x11FFF512, 0x0703F701);
	r3 = D(r3, s0_2_2, 0xF41CF015, 0xF8FE0B0B, 0x03E6BCE3, 0xF003FA12);
	r4 = D(r4, s0_2_2, 0xEDFBF50C, 0x1FD91800, 0xEE0331E3, 0xE4F70DD4);
	r5 = D(r5, s0_2_2, 0xDE000C09, 0xFA0F08EB, 0xED0916F5, 0x01FDFD04);
	r6 = D(r6, s0_2_2, 0xEC0E0101, 0x2707AAEC, 0x02DB1B06, 0x0B4802FB);
	r7 = D(r7, s0_2_2, 0xFB0CF704, 0xE7F93BF7, 0x081800FD, 0xF8FDD9FE);
	r0 = D(r0, s1_0_0, 0xF61AEBE0, 0xF40D2711, 0xDCE5D1EC, 0xEA052D1C);
	r1 = D(r1, s1_0_0, 0x04F60CEC, 0xDEF1FBFB, 0x020C1CFD, 0xEF1D320D);
	r2 = D(r2, s1_0_0, 0x81EF1C70, 0x2EF2F90C, 0x1EE1FFFB, 0x1800E517);
	r3 = D(r3, s1_0_0, 0xEAF88781, 0xF222080B, 0xDC212F4A, 0x1B1C072C);
	r4 = D(r4, s1_0_0, 0xF8FDD401, 0xF0EAF430, 0x1A051106, 0xF0100309);
	r5 = D(r5, s1_0_0, 0x0A0424E0, 0x13F9F5E8, 0x070FC6ED, 0x08F3F5ED);
	r6 = D(r6, s1_0_0, 0xFB1EE509, 0x1311F7FD, 0xEFD0A466, 0x031CDF14);
	r7 = D(r7, s1_0_0, 0xF805EFF3, 0x02F3F208, 0xEFFB010F, 0xFFFC291D);
	r0 = D(r0, s1_0_1, 0x0E054FDA, 0xF6148129, 0xF01324F9, 0x07140942);
	r1 = D(r1, s1_0_1, 0x020CFB09, 0xEFF003F7, 0xF900FFDC, 0xE6024C37);
	r2 = D(r2, s1_0_1, 0xCBB04D0D, 0xF313E22D, 0xE6E2052B, 0x041C3E2D);
	r3 = D(r3, s1_0_1, 0xF3D0E1D6, 0x0A0E21F6, 0xFC15D90E, 0xF5113D1B);
	r4 = D(r4, s1_0_1, 0xF00FEF1E, 0x09FEF7E1, 0xF8FDEE13, 0xF6FBACE8);
	r5 = D(r5, s1_0_1, 0xFEEBFB25, 0xFC0A14C0, 0xFCF9CB03, 0xF31031FC);
	r6 = D(r6, s1_0_1, 0xE2ECEA07, 0x1CEEE307, 0x01F38117, 0x11E9F6EC);
	r7 = D(r7, s1_0_1, 0x0DFEF4EA, 0xE712713C, 0x1AF9F200, 0xFD043809);
	r0 = D(r0, s1_0_2, 0x05FFEDF6, 0xE80301F5, 0x0904EA17, 0x000CDB21);
	r1 = D(r1, s1_0_2, 0xFFF71DEF, 0x03F8FFFF, 0x02EF18FF, 0x210DFEFD);
	r2 = D(r2, s1_0_2, 0x18FAF017, 0xFFF6E01A, 0x08040905, 0x17F62702);
	r3 = D(r3, s1_0_2, 0xF30789ED, 0x0EF405FA, 0x09200B0C, 0x17FA1509);
	r4 = D(r4, s1_0_2, 0x0C04E9FC, 0xF5F4E8E1, 0x06ECCBF9, 0xE6F7010F);
	r5 = D(r5, s1_0_2, 0x06F6E907, 0xEC0628DB, 0xFE0F07FB, 0x120C0CFD);
	r6 = D(r6, s1_0_2, 0x00EA0D03, 0x1E06FC0D, 0x0914DA08, 0x11EDF4E0);
	r7 = D(r7, s1_0_2, 0xFF00D715, 0x1A18E816, 0xF913F0F9, 0x02060409);
	r0 = D(r0, s1_1_0, 0x071C00CB, 0xEEE31F13, 0xE815FEED, 0xF11F30F1);
	r1 = D(r1, s1_1_0, 0xF7F400E7, 0xF1D41419, 0x0213FBDA, 0xFEFB2200);
	r2 = D(r2, s1_1_0, 0xEBD57F46, 0x27F7D800, 0x06F9F6EC, 0xDCF43E09);
	r3 = D(r3, s1_1_0, 0x0303F1B5, 0xF911081C, 0x09E85DF5, 0x000E1110);
	r4 = D(r4, s1_1_0, 0x1400FC11, 0xEC0025EE, 0x00040618, 0x03D80FE8);
	r5 = D(r5, s1_1_0, 0xC5E1AAC5, 0x0FE11DC3, 0xFC12EEF2, 0x07000439);
	r6 = D(r6, s1_1_0, 0x2D1E2024, 0x07051709, 0x1F03D41B, 0xFEF12DD2);
	r7 = D(r7, s1_1_0, 0x05F73EE9, 0x1EFE0003, 0xE2EA462D, 0x0405EE09);
	r0 = D(r0, s1_1_1, 0x18E029C6, 0xF9FC81CD, 0x00FD10EF, 0x24FDFBF9);
	r1 = D(r1, s1_1_1, 0x01FCC80F, 0xDE1106D9, 0x16E720E6, 0x1BF9B2FF);
	r2 = D(r2, s1_1_1, 0xEE0828FA, 0x0116FD06, 0x0CFC0403, 0xEE192511);
	r3 = D(r3, s1_1_1, 0xFEFB02C6, 0xE6D7F4E6, 0x0CEEC4DC, 0x201810FF);
	r4 = D(r4, s1_1_1, 0x0E1BCE08, 0xF60BFC19, 0xEB06E015, 0x1E11E507);
	r5 = D(r5, s1_1_1, 0x081F19F2, 0x10D501D7, 0x040CEF1E, 0xF20402FC);
	r6 = D(r6, s1_1_1, 0x100216EC, 0x062FF5E2, 0x0625FF10, 0xF8D831D5);
	r7 = D(r7, s1_1_1, 0x06F13500, 0xF3370929, 0x0813EEE9, 0xFF0B101C);
	r0 = D(r0, s1_1_2, 0xEF14F706, 0x0C118501, 0x1CD0E319, 0xFC01D10B);
	r1 = D(r1, s1_1_2, 0x08FAFB04, 0x150DCE0A, 0xEDF20513, 0xFCECF800);
	r2 = D(r2, s1_1_2, 0xE7FFF8EC, 0xEE0EE4FB, 0xF2051AFF, 0x0EF5DFFD);
	r3 = D(r3, s1_1_2, 0x0FE5230D, 0xE4D90DDF, 0x122EDA16, 0xF30B06FB);
	r4 = D(r4, s1_1_2, 0xF4FDE0F7, 0xFB01ED1A, 0x0A08EE0D, 0xEF04E9F7);
	r5 = D(r5, s1_1_2, 0x18FF1707, 0xFD0B01D7, 0x1613FC13, 0x0F0608F4);
	r6 = D(r6, s1_1_2, 0xECF9FD00, 0x4402FFFE, 0xFDFC16F9, 0xEF1A81D4);
	r7 = D(r7, s1_1_2, 0x03F709F8, 0xFE0B172B, 0x0706F207, 0x151408FB);
	r0 = D(r0, s1_2_0, 0xF6060B1F, 0x09F20F0C, 0x17FC170E, 0xF2E61209);
	r1 = D(r1, s1_2_0, 0x01FC0CE7, 0x2F08DD19, 0xDCEF19FD, 0x0EF10FEC);
	r2 = D(r2, s1_2_0, 0x07EBF7FB, 0x0EE301EF, 0xF20601F5, 0xE3FEE410);
	r3 = D(r3, s1_2_0, 0x0BFC0902, 0x0D0D0BF8, 0x19AEF397, 0x001304E8);
	r4 = D(r4, s1_2_0, 0x17FCD3EA, 0x0B14AC2F, 0xE805D804, 0xFDF3E32C);
	r5 = D(r5, s1_2_0, 0xF6ED00DC, 0xE4FFFB07, 0xF5F1180D, 0xFF08F405);
	r6 = D(r6, s1_2_0, 0xF1EF18F5, 0xF5061813, 0xFA12E502, 0x07F0F206);
	r7 = D(r7, s1_2_0, 0xFDF826E8, 0xE0D30BEF, 0xFAFB012F, 0x0A0AE811);
	r0 = D(r0, s1_2_1, 0xFE2B1229, 0x12C4150F, 0xC53A060A, 0x0FF40AEA);
	r1 = D(r1, s1_2_1, 0xF401FEF3, 0x15092000, 0x0DFAECFF, 0xEFEB1401);
	r2 = D(r2, s1_2_1, 0xFF25EEF5, 0x06E0010C, 0xFBF1DA10, 0x051A06F8);
	r3 = D(r3, s1_2_1, 0xFB28F5C8, 0xFB08EB04, 0xF7F581C8, 0x03210621);
	r4 = D(r4, s1_2_1, 0xF903F7E4, 0xF916F8FC, 0x1906FEFA, 0x020EEF0F);
	r5 = D(r5, s1_2_1, 0x02EE0BEF, 0x13F80302, 0x0D050AFE, 0x0F261209);
	r6 = D(r6, s1_2_1, 0x060BF8F1, 0xE60DE102, 0xECFA04FC, 0xEE120510);
	r7 = D(r7, s1_2_1, 0xECFB28F7, 0x2A130720, 0x0819081D, 0xEAE9F603);
	r0 = D(r0, s1_2_2, 0xF40A0007, 0x1E07121D, 0x0CFBE749, 0x0F181027);
	r1 = D(r1, s1_2_2, 0xFBF80BE4, 0x112BFEF3, 0x0517FA0B, 0xED0802FE);
	r2 = D(r2, s1_2_2, 0xF9F4F105, 0xCDF404FF, 0xFC040BFE, 0xE8FDF41B);
	r3 = D(r3, s1_2_2, 0x06E1FBEA, 0x0DDEF50E, 0x0618D7D2, 0xDD03030D);
	r4 = D(r4, s1_2_2, 0x00E5F0EE, 0x11050BF3, 0x1A191EE1, 0xFB210BFD);
	r5 = D(r5, s1_2_2, 0xF213F602, 0xFBF7F811, 0xF922F501, 0x0505F3E8);
	r6 = D(r6, s1_2_2, 0xEBEEDF1A, 0x08DA08FB, 0x06E604D5, 0x0EFD1FF9);
	r7 = D(r7, s1_2_2, 0xF61115ED, 0xDF02EE0A, 0x0C030410, 0xFCFDFA11);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xEE00CC03, 0xFC071305, 0xF407E0FE, 0xDF1BBAE9);
	r1 = D(r1, s0_0_0, 0x0012E3F0, 0x0D02FB03, 0x17021106, 0xFE12F9FC);
	r2 = D(r2, s0_0_0, 0xDBE1D8B7, 0x06D64812, 0x22EBA104, 0xF4EDFA18);
	r3 = D(r3, s0_0_0, 0x1CFDFBFE, 0xED0AF6EA, 0x0C49FA21, 0xFCFF0B1A);
	r4 = D(r4, s0_0_0, 0x0B1009F0, 0xF0161F12, 0x0FF82005, 0x1027DAFA);
	r5 = D(r5, s0_0_0, 0xECF6C50B, 0x1CED05FC, 0xFEF6F0E1, 0x17F20508);
	r6 = D(r6, s0_0_0, 0xF2121B1B, 0xF4E5FBF8, 0x0CF003F3, 0x07EA02FE);
	r7 = D(r7, s0_0_0, 0x00EAFC01, 0x0CF4F4DF, 0xDD1BE401, 0x0A081202);
	r0 = D(r0, s0_0_1, 0xDAF61C0C, 0xF71BEDF8, 0xD326F31F, 0xF8CBE60F);
	r1 = D(r1, s0_0_1, 0x080119FD, 0xF611140C, 0x22FA0E12, 0xED19BEDD);
	r2 = D(r2, s0_0_1, 0xE93D15BF, 0xF34505D3, 0x7811C307, 0xFF1526F3);
	r3 = D(r3, s0_0_1, 0x210E10F7, 0xE0ED5415, 0x32E816EA, 0x190E0CDC);
	r4 = D(r4, s0_0_1, 0xF818FB0C, 0x13E9FEEF, 0xD4D1FC09, 0xE919D3FE);
	r5 = D(r5, s0_0_1, 0xDDFBE9F4, 0x230EE402, 0x20F0FB19, 0xFEFBF8FA);
	r6 = D(r6, s0_0_1, 0xF60102F3, 0x350AFBEC, 0x20DC1CFB, 0x08060C08);
	r7 = D(r7, s0_0_1, 0xF5ED00F6, 0xF9191600, 0xE0EADFF8, 0x03F40207);
	r0 = D(r0, s0_0_2, 0x17072BE1, 0xCBE90A07, 0xD1EAF8D5, 0x81FDD807);
	r1 = D(r1, s0_0_2, 0x000C1F03, 0x97FBFBEE, 0x150A01FF, 0x0800B113);
	r2 = D(r2, s0_0_2, 0x5A34F117, 0x06EBD6F7, 0x8102D9E9, 0x0AD11EE5);
	r3 = D(r3, s0_0_2, 0xD2F6FC11, 0x16E90306, 0xDFE419E7, 0x201EFD02);
	r4 = D(r4, s0_0_2, 0xE511FDFE, 0x0FFDE122, 0xF21A0DEB, 0xAFFE0802);
	r5 = D(r5, s0_0_2, 0x1ADE1F08, 0xDCFA25FD, 0xDFF4190C, 0x190A0EFF);
	r6 = D(r6, s0_0_2, 0x0F120FF0, 0x39E60B03, 0x3102F70F, 0x0B0704F7);
	r7 = D(r7, s0_0_2, 0xF0F6FEF3, 0x2BC3FCE5, 0xC5FCF501, 0x0AFDFF12);
	r0 = D(r0, s0_1_0, 0xFCFF1F1D, 0x14F2070E, 0xEFFEE013, 0xFC0EE1CD);
	r1 = D(r1, s0_1_0, 0x11021409, 0x140DE3F9, 0x1D06F209, 0x0AF1060B);
	r2 = D(r2, s0_1_0, 0x02CA231C, 0xF7D44B2C, 0x1802FA12, 0x0FE81517);
	r3 = D(r3, s0_1_0, 0x04FCECF9, 0xF50912FE, 0xEBE911EA, 0xEA01330B);
	r4 = D(r4, s0_1_0, 0x0EFC25FB, 0xF7F03E09, 0x1DE51928, 0x01058120);
	r5 = D(r5, s0_1_0, 0xE2F02C14, 0x09F90F15, 0xFEEBD2F9, 0x100303F4);
	r6 = D(r6, s0_1_0, 0x06072AF9, 0x03E02202, 0xFD1018ED, 0x0214EAED);
	r7 = D(r7, s0_1_0, 0x0E01150C, 0x0D0C270A, 0x06FF270E, 0x0806F801);
	r0 = D(r0, s0_1_1, 0xD8052BF9, 0xF448D002, 0xA3ECF8FF, 0x050AF00F);
	r1 = D(r1, s0_1_1, 0x1A1C1F0E, 0x241FFD08, 0x01E527F9, 0xE714CAE6);
	r2 = D(r2, s0_1_1, 0x002AFC14, 0x11F813EE, 0x230C15ED, 0xC80115E8);
	r3 = D(r3, s0_1_1, 0x1B15E50F, 0xEB0CFB0A, 0xFDEB07F2, 0xE901F9D0);
	r4 = D(r4, s0_1_1, 0xFD0DFB1F, 0xB112E0FE, 0x07F4E504, 0xDA1CE514);
	r5 = D(r5, s0_1_1, 0xADF3B3BA, 0xFCEEE4F3, 0x2EEFFBFF, 0x001B2101);
	r6 = D(r6, s0_1_1, 0xCC171815, 0x29D01001, 0x0CFAF807, 0xF3FE2CF4);
	r7 = D(r7, s0_1_1, 0xF8E8F319, 0xF20B0A07, 0xEEF60DF5, 0x0D000205);
	r0 = D(r0, s0_1_2, 0x3B0605FB, 0xE3E8EFF1, 0x10D4E214, 0xF5DBDBEE);
	r1 = D(r1, s0_1_2, 0xEDFE0E0B, 0xAE1AFDF7, 0x21FAF4F8, 0x0F1CD70F);
	r2 = D(r2, s0_1_2, 0x03EDFF0B, 0x2A1AE9D9, 0xFC02EDFD, 0xE3FAF805);
	r3 = D(r3, s0_1_2, 0xC3231116, 0x2FF004FA, 0x34FE1A05, 0x0A00FAF2);
	r4 = D(r4, s0_1_2, 0x1BF5E204, 0x58FDEB19, 0x02020AE7, 0x81F725DF);
	r5 = D(r5, s0_1_2, 0x290D230B, 0xE300F30A, 0xDCFA1407, 0x32051B00);
	r6 = D(r6, s0_1_2, 0x0DEF0304, 0x581E1214, 0x270BFCFB, 0x2D181D13);
	r7 = D(r7, s0_1_2, 0xFB1B2410, 0xDD0A0A08, 0x20E70DF7, 0x0E07010D);
	r0 = D(r0, s0_2_0, 0x0AFC1BF0, 0x11FCEEFC, 0x0EF611FE, 0x1D061DED);
	r1 = D(r1, s0_2_0, 0x01FCF313, 0x02FB1801, 0x1DF8FE00, 0x00F706FF);
	r2 = D(r2, s0_2_0, 0x0108020D, 0x02F424F3, 0xF8050D05, 0x09F03701);
	r3 = D(r3, s0_2_0, 0x0C02F6FF, 0xF809120A, 0xFE121622, 0x06081EE9);
	r4 = D(r4, s0_2_0, 0xFA0D0A03, 0xFD0535FF, 0x1908F81E, 0x08F5CADE);
	r5 = D(r5, s0_2_0, 0x18F6E20E, 0x0504EEF5, 0x0B080B0E, 0x08FB09FC);
	r6 = D(r6, s0_2_0, 0x010B0C12, 0xE400B6EB, 0xF50BD5FC, 0xE5FF81FC);
	r7 = D(r7, s0_2_0, 0xFDF41113, 0x04081102, 0x0BF91502, 0x0302FBE3);
	r0 = D(r0, s0_2_1, 0xE7F3F3F8, 0x0C13F934, 0x0A1CFA16, 0xF2050503);
	r1 = D(r1, s0_2_1, 0x12000EF8, 0x10F8200C, 0xF401F4FA, 0xFEF508E9);
	r2 = D(r2, s0_2_1, 0x271A1607, 0xCB02E9FA, 0xF3F4F8F9, 0xF9F6F7FF);
	r3 = D(r3, s0_2_1, 0x0F18030F, 0xEC0502F1, 0xE5D78DF8, 0xFF0BE0DB);
	r4 = D(r4, s0_2_1, 0xF40FFB0D, 0xD7FC07E7, 0x04F91B1C, 0xD5F4FAC6);
	r5 = D(r5, s0_2_1, 0x0DE3E73F, 0x1FFA09FB, 0xFDF80A1D, 0xF90AFEFB);
	r6 = D(r6, s0_2_1, 0xEF0316F7, 0x1BFB0FF0, 0xFDF2FB0A, 0xF1FED21B);
	r7 = D(r7, s0_2_1, 0xFB0DF1FE, 0xF1E31EEA, 0x011E0DFB, 0x12FEFB01);
	r0 = D(r0, s0_2_2, 0x0821E7EE, 0xFEF7EA04, 0x2223DC1A, 0x1CF00703);
	r1 = D(r1, s0_2_2, 0x05FA09F4, 0xD9FB1A11, 0x3DFCFA05, 0x1308E6EA);
	r2 = D(r2, s0_2_2, 0xFC21F7F1, 0x11F8F70F, 0x0E090902, 0xFE09EFE7);
	r3 = D(r3, s0_2_2, 0x0B16F8DC, 0xEF1603F7, 0x1811C128, 0xFA02F5E5);
	r4 = D(r4, s0_2_2, 0x11F7FDFF, 0x10190D04, 0xED0C1325, 0xD50908FF);
	r5 = D(r5, s0_2_2, 0x140EFEE0, 0x1BFB04FF, 0xEAF10B05, 0xF4FB0107);
	r6 = D(r6, s0_2_2, 0x060309FF, 0xDD110BE1, 0xEEF6FFFB, 0x930C041E);
	r7 = D(r7, s0_2_2, 0xF7FC17F2, 0x051DF0D3, 0x1108080E, 0xFDFEF3F1);
	r0 = D(r0, s1_0_0, 0x022CF6DE, 0xF8F116FE, 0xFE1F2D05, 0xF9D1ACD1);
	r1 = D(r1, s1_0_0, 0x160EFAFD, 0xFA19EEF0, 0x0517EE20, 0x02051108);
	r2 = D(r2, s1_0_0, 0xFAD6EC53, 0x040BFA1B, 0x00BF04DE, 0xF8102117);
	r3 = D(r3, s1_0_0, 0x12FBF8E1, 0xF6EEFAF3, 0x0CF8EC10, 0x09F60512);
	r4 = D(r4, s1_0_0, 0xF8FBF628, 0x18B2EDE9, 0x050E2016, 0x0821270F);
	r5 = D(r5, s1_0_0, 0x0704370D, 0xFBE31104, 0xF8EBFBDA, 0x02DCF4F6);
	r6 = D(r6, s1_0_0, 0x090A080B, 0xE700FD00, 0x05F8F1EB, 0x0AFDEAF1);
	r7 = D(r7, s1_0_0, 0x03F7FDE9, 0x07FEF91F, 0xFDFCE9FD, 0x0505F617);
	r0 = D(r0, s1_0_1, 0xFE0B0AEB, 0xF41E0B06, 0xFBFE5D10, 0x09D6D403);
	r1 = D(r1, s1_0_1, 0xF3F3E401, 0x08F9F6AE, 0x05F30815, 0x01F9FD00);
	r2 = D(r2, s1_0_1, 0xFD1A244F, 0xF511E426, 0xF2F902A3, 0xEF02F8F6);
	r3 = D(r3, s1_0_1, 0x060C81C7, 0xFCE2B2DF, 0xFF3720D2, 0x0EED0128);
	r4 = D(r4, s1_0_1, 0x000BF3C9, 0x122017DF, 0xFDF1F9F6, 0x0AF91DE0);
	r5 = D(r5, s1_0_1, 0x0EF8FC3D, 0xF9E4FD1A, 0xFFE70CB2, 0x01EB000B);
	r6 = D(r6, s1_0_1, 0x0B0FF006, 0xFCFFF229, 0x07FAF217, 0xF60CEAFE);
	r7 = D(r7, s1_0_1, 0x0CFCFCF0, 0x09D20915, 0x04FA1A06, 0xEE0703E9);
	r0 = D(r0, s1_0_2, 0x00FAFAB1, 0xF20B0CE6, 0x0E0124EB, 0x0812DEE8);
	r1 = D(r1, s1_0_2, 0xFEF9FAFF, 0x0511F9ED, 0x0A00F4F7, 0xF0141EE0);
	r2 = D(r2, s1_0_2, 0x110D0125, 0xFEFFFAEF, 0x071EEDDC, 0x09E21211);
	r3 = D(r3, s1_0_2, 0x041DE61E, 0xF8EED198, 0xF81A00EA, 0x07FBF604);
	r4 = D(r4, s1_0_2, 0xFE18FDEA, 0xF31C04FF, 0xF7070FBD, 0x0404EDF5);
	r5 = D(r5, s1_0_2, 0xF9FE1329, 0xFE11EEEE, 0x0CF5FF07, 0xF606FC04);
	r6 = D(r6, s1_0_2, 0xFAF004F5, 0xF9F20511, 0xF3090A19, 0xF51514F0);
	r7 = D(r7, s1_0_2, 0xE70122D8, 0x0201E811, 0xFFF40AEB, 0xFEFD020F);
	r0 = D(r0, s1_1_0, 0xF0F1210E, 0xF511FC1E, 0x02D763D0, 0xF80FCD24);
	r1 = D(r1, s1_1_0, 0x0700DB01, 0xFE01F7F8, 0xFAF438E7, 0x0241FE01);
	r2 = D(r2, s1_1_0, 0x03F5ED33, 0x05F8012C, 0x01DB26FA, 0xFBEC1EF4);
	r3 = D(r3, s1_1_0, 0xF53FE8EE, 0x08ECF20D, 0xFEEFED83, 0xFEDD1319);
	r4 = D(r4, s1_1_0, 0x0AE7E2E1, 0xFB911D17, 0xF1071DF4, 0xFCE618FA);
	r5 = D(r5, s1_1_0, 0xFFCEAB16, 0x0E02F517, 0x0737F20D, 0x0300F8F7);
	r6 = D(r6, s1_1_0, 0xEC24B7D6, 0xF8010B0E, 0x0AEE100A, 0x0BE80DEF);
	r7 = D(r7, s1_1_0, 0x010F0CE9, 0x0638EE2A, 0xFF12E3DF, 0x00E9071D);
	r0 = D(r0, s1_1_1, 0xF72EEDE6, 0xF9FDD30F, 0xF72AD8DD, 0xF6DBFB3F);
	r1 = D(r1, s1_1_1, 0x0505DE26, 0x00120A10, 0x06151E05, 0x0CECDFDF);
	r2 = D(r2, s1_1_1, 0xF80DFCF8, 0x06BFF218, 0x09DDED02, 0xFB24F8AA);
	r3 = D(r3, s1_1_1, 0xF4948115, 0x04E90104, 0xF7F7FE0A, 0x07EC16F6);
	r4 = D(r4, s1_1_1, 0x13FDFB81, 0xE7F9EC2D, 0xF0E502FE, 0x01F717E4);
	r5 = D(r5, s1_1_1, 0xF52B1ACF, 0xFF1AB71D, 0xFF0D0E2B, 0x04F62A1A);
	r6 = D(r6, s1_1_1, 0xE810080B, 0xEEF10224, 0xFD040401, 0xFD090BD3);
	r7 = D(r7, s1_1_1, 0xF9011728, 0x04D51B0C, 0x05100A01, 0x08073D81);
	r0 = D(r0, s1_1_2, 0x01FFEBE8, 0x0019E915, 0x0108E62B, 0xF0EB181B);
	r1 = D(r1, s1_1_2, 0x06FEC31F, 0x15FBE430, 0x0302F729, 0x08FA0408);
	r2 = D(r2, s1_1_2, 0x0A1D0CF1, 0xFA04FF15, 0x0206E8AA, 0xF7010C04);
	r3 = D(r3, s1_1_2, 0xFDFE817F, 0xF4FF211E, 0xECF5DF34, 0xEFEE0901);
	r4 = D(r4, s1_1_2, 0x100107FF, 0xF52B1511, 0x07F2D6A7, 0xF2EBFFD4);
	r5 = D(r5, s1_1_2, 0x08FEFE1A, 0x011F2012, 0x0BF50223, 0xFBFE19E3);
	r6 = D(r6, s1_1_2, 0x03F30AFB, 0xF9D5F431, 0xF00A1A02, 0x132A2E28);
	r7 = D(r7, s1_1_2, 0xFB0AEDB2, 0x02F8F1F0, 0x0C0F032A, 0xED0111DC);
	r0 = D(r0, s1_2_0, 0xF5D7F8F3, 0x03F50F06, 0x0B1CFE09, 0x12291405);
	r1 = D(r1, s1_2_0, 0x0A17F7F5, 0xF8F40A03, 0xF9010801, 0x11F0F6FC);
	r2 = D(r2, s1_2_0, 0xF7BCE716, 0xF812D6FB, 0x1504200F, 0x090D1410);
	r3 = D(r3, s1_2_0, 0x0104E71B, 0x111F120E, 0x091DE912, 0x1CE60F30);
	r4 = D(r4, s1_2_0, 0xFDE40105, 0x0CA212FE, 0xFCE8321D, 0xFF1C1305);
	r5 = D(r5, s1_2_0, 0xFE16F4EB, 0xFE0EE713, 0x0409FEF4, 0x0DD90BF2);
	r6 = D(r6, s1_2_0, 0x0010EEF8, 0xF51804FD, 0x04040608, 0x05CD130F);
	r7 = D(r7, s1_2_0, 0xEF11F707, 0xF805E2FA, 0xF8F0E115, 0xFDECF8F2);
	r0 = D(r0, s1_2_1, 0x03EDF1F9, 0xFF11F6F0, 0x0BF0E910, 0x030EF6F8);
	r1 = D(r1, s1_2_1, 0xF7F808FE, 0x14FF20F5, 0xFBF3ED07, 0x0B04F6F7);
	r2 = D(r2, s1_2_1, 0x081A2007, 0xF306F4CF, 0x07F8E60A, 0xFB13EDE5);
	r3 = D(r3, s1_2_1, 0x0912F40D, 0x031DF70B, 0xF6D5D718, 0xF807143A);
	r4 = D(r4, s1_2_1, 0x08EF08E6, 0xFFE4D2DE, 0xFBF11207, 0x0E0C3A08);
	r5 = D(r5, s1_2_1, 0x06090C18, 0x1009F60F, 0x0DFA1206, 0xF50410FE);
	r6 = D(r6, s1_2_1, 0xF6FD1B05, 0xFFF2CDC0, 0x061C13DC, 0x0E080626);
	r7 = D(r7, s1_2_1, 0xF5FFFD3F, 0xEBF40FE0, 0xFAF6ED00, 0x020613D9);
	r0 = D(r0, s1_2_2, 0x1818F4F8, 0xFF1A02FE, 0x07F9E800, 0x0EF805FF);
	r1 = D(r1, s1_2_2, 0x03FFF3E5, 0xF9F91EF4, 0x0C0201FD, 0xF30000F5);
	r2 = D(r2, s1_2_2, 0x00FD0B27, 0x0121180B, 0xF6060636, 0x0C070AF0);
	r3 = D(r3, s1_2_2, 0x0C09E912, 0x02F8E108, 0xF7F80D81, 0x0506F016);
	r4 = D(r4, s1_2_2, 0xF5060BF0, 0xF7120717, 0x09091DF6, 0x07F21B16);
	r5 = D(r5, s1_2_2, 0xF307F701, 0x09F30AD6, 0xFC0706E0, 0x080617F7);
	r6 = D(r6, s1_2_2, 0xF4EEDCFB, 0xF814E8FD, 0xF2170F0B, 0xFD09B909);
	r7 = D(r7, s1_2_2, 0x10FC0EF1, 0xFD000814, 0xFDF4ECE9, 0x03FE110B);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF8F908EB, 0xF20AF6FE, 0xF7E3C7D8, 0xF41714D5);
	r1 = D(r1, s0_0_0, 0xF70603F1, 0xE911DC26, 0x05FCEBEF, 0xFB0B151C);
	r2 = D(r2, s0_0_0, 0xC1F404BC, 0x19FB0D0D, 0x0303DD12, 0x0D11E820);
	r3 = D(r3, s0_0_0, 0xE7FCFA26, 0xF1101AE2, 0x1C11EEFC, 0x0DF80610);
	r4 = D(r4, s0_0_0, 0xE4FCEBFE, 0x06EE37F2, 0xFF0DD713, 0xF60C05FE);
	r5 = D(r5, s0_0_0, 0xFB060B06, 0xF8F1C204, 0xE617D7E8, 0x0D081DFD);
	r6 = D(r6, s0_0_0, 0x02040DF9, 0xFC0B15F3, 0x2811E924, 0xF207FB07);
	r7 = D(r7, s0_0_0, 0x1208010E, 0x03FACC13, 0x1B08FDFB, 0x0FFEEEFD);
	r0 = D(r0, s0_0_1, 0x091FE3F3, 0x17F9E1F1, 0xF30A21FC, 0x0F14FD20);
	r1 = D(r1, s0_0_1, 0xEE02FCF4, 0xFFC6FEF5, 0xDF00E8FF, 0x10E5CEF8);
	r2 = D(r2, s0_0_1, 0x10683D2B, 0x10DC25F1, 0xF2FDCD1B, 0x07FEEFFB);
	r3 = D(r3, s0_0_1, 0x1AEC4CEC, 0xDE0F10FF, 0x220C46F9, 0x0EF0E504);
	r4 = D(r4, s0_0_1, 0xFA13F3F8, 0xF1DD070C, 0xFA14E7D9, 0x0220171B);
	r5 = D(r5, s0_0_1, 0x09F92F0A, 0xFD001BFD, 0xFFEA0EF1, 0xF30200EB);
	r6 = D(r6, s0_0_1, 0xFBFBF5FB, 0x0AE22204, 0x19DA2501, 0x15FF0B16);
	r7 = D(r7, s0_0_1, 0xF5F5F6F3, 0xF909DAF7, 0x00F4F6EB, 0x04080803);
	r0 = D(r0, s0_0_2, 0x0BF908F5, 0xFC15EDF2, 0x1D062514, 0x2AED1C06);
	r1 = D(r1, s0_0_2, 0x06EB1BFB, 0x1EB7181A, 0xFDEDF7FE, 0xFC070E05);
	r2 = D(r2, s0_0_2, 0xED1FD4F8, 0x0AFE0B04, 0x05FB03F6, 0x00FE0C0B);
	r3 = D(r3, s0_0_2, 0x09D10505, 0x0728FD15, 0x0CF51C03, 0xFB0BF806);
	r4 = D(r4, s0_0_2, 0x09FB04F2, 0x0BFCF505, 0xF0FE1C01, 0x001208FC);
	r5 = D(r5, s0_0_2, 0x071E1B1F, 0x1E06F9F4, 0xFED7FBFA, 0xFF0AF4F7);
	r6 = D(r6, s0_0_2, 0xF9F9FA02, 0xFE161A00, 0xED12F6F9, 0xF6D1F6F3);
	r7 = D(r7, s0_0_2, 0x00EB100C, 0x1DFBF5D8, 0x08FD18F9, 0x0116ECFF);
	r0 = D(r0, s0_1_0, 0xE4ED27F1, 0x0AF5D713, 0xBFFC19DC, 0xFBF8CD05);
	r1 = D(r1, s0_1_0, 0xE9FBF001, 0x14FCEAED, 0x0DF30A03, 0xF413E511);
	r2 = D(r2, s0_1_0, 0xF5DDFFD2, 0x58F9EC1C, 0x150F0A0B, 0x0D05E1E2);
	r3 = D(r3, s0_1_0, 0x33F7E3FC, 0x0E03ECEC, 0x030337ED, 0x02EE2D07);
	r4 = D(r4, s0_1_0, 0xFCF805FE, 0xFCF0D304, 0x09F9FC18, 0xFB160DF5);
	r5 = D(r5, s0_1_0, 0x191AF018, 0xFC0A0C0E, 0xFB11E70F, 0x0413191F);
	r6 = D(r6, s0_1_0, 0x1BEBE9EC, 0x1A16D913, 0xD6F31206, 0x10EDF5F0);
	r7 = D(r7, s0_1_0, 0xF2FF0009, 0xE910EF1C, 0xDD01FAFA, 0xF5030E00);
	r0 = D(r0, s0_1_1, 0xE1160004, 0x24BFD405, 0xDD1A020C, 0x25030A0D);
	r1 = D(r1, s0_1_1, 0x00F9071B, 0xF0D808E4, 0x0D171EEB, 0x1EFBC700);
	r2 = D(r2, s0_1_1, 0x1EE80111, 0x06EBEA0D, 0xEFCFEBF8, 0xE20812F2);
	r3 = D(r3, s0_1_1, 0x81EA2B29, 0x05192FE4, 0x0E2B7F18, 0xFBFC11DC);
	r4 = D(r4, s0_1_1, 0x0EFC1220, 0x1CECFAFC, 0x1C04F004, 0x20DDD319);
	r5 = D(r5, s0_1_1, 0x2ACBECE3, 0x1D02EB0E, 0x1008EAEE, 0xFB111B1D);
	r6 = D(r6, s0_1_1, 0x0B0210FE, 0xF00841E8, 0xF51010FD, 0xDFD42EFC);
	r7 = D(r7, s0_1_1, 0x1101F804, 0xFCABE719, 0xF90603FE, 0x0CEA13F6);
	r0 = D(r0, s0_1_2, 0xF5EAECFF, 0xFE81D8F6, 0x0D19180F, 0x14E907FD);
	r1 = D(r1, s0_1_2, 0xFFE51115, 0x19D71A0A, 0xF518E507, 0xFF2CE91F);
	r2 = D(r2, s0_1_2, 0x05121702, 0x09E0E8E6, 0xF806F9FD, 0xFC1E0C0A);
	r3 = D(r3, s0_1_2, 0x3C1213EE, 0xE8FD1F0D, 0x0FE61BF6, 0x0E0621F2);
	r4 = D(r4, s0_1_2, 0xFDF610F8, 0x01130A02, 0x0E03E00F, 0xF3EE15FA);
	r5 = D(r5, s0_1_2, 0xFC27160B, 0x01071A06, 0x340D1313, 0x00FE20FB);
	r6 = D(r6, s0_1_2, 0xF5FC0416, 0xFC2803F4, 0xE7D4EEE6, 0x0D8105ED);
	r7 = D(r7, s0_1_2, 0xF8170808, 0x1BD22511, 0x0C150D04, 0x04FAF3FB);
	r0 = D(r0, s0_2_0, 0x06F6010D, 0xEDDF0308, 0xCBFE25CA, 0xD8ED00F2);
	r1 = D(r1, s0_2_0, 0xFFFEF7F4, 0xE7001505, 0xF8F8F91E, 0xEFF1FF0A);
	r2 = D(r2, s0_2_0, 0xEEF313E2, 0x30F6F710, 0x111C05EB, 0xF0100FF2);
	r3 = D(r3, s0_2_0, 0xEEED05F8, 0x01F9E2E8, 0xC7DEE009, 0xE106FC19);
	r4 = D(r4, s0_2_0, 0x0BF8170C, 0x28FC09F6, 0x03FE22EC, 0x1B0617F6);
	r5 = D(r5, s0_2_0, 0xE6F6C4C9, 0x0E0DF9FB, 0xF6F7E905, 0x070107F5);
	r6 = D(r6, s0_2_0, 0xE5EBE411, 0x040BF80E, 0x0F09F417, 0x08053007);
	r7 = D(r7, s0_2_0, 0xFDF6F9FD, 0xF8F10D05, 0xFDEC04FC, 0xEB0A0609);
	r0 = D(r0, s0_2_1, 0x0310F815, 0xF700ED15, 0x240B0919, 0xDA19FEEE);
	r1 = D(r1, s0_2_1, 0x03FCF7EE, 0x09D621E7, 0xEF0E0FF5, 0xBEEFF0DC);
	r2 = D(r2, s0_2_1, 0xE12D10B8, 0xF2F2E4E9, 0x04DEFEF9, 0x0B1E0A03);
	r3 = D(r3, s0_2_1, 0x17FAFEE4, 0x0DFD031B, 0x08DEC905, 0xFE0B13F6);
	r4 = D(r4, s0_2_1, 0xFA201509, 0xECFE080C, 0x1804FCEB, 0xFAF50EEC);
	r5 = D(r5, s0_2_1, 0xF8100A02, 0xE419FEE5, 0xFF00F101, 0x110420ED);
	r6 = D(r6, s0_2_1, 0x030C0FFF, 0x1F29D934, 0x050004E1, 0xC00BE820);
	r7 = D(r7, s0_2_1, 0xFE08F8E3, 0xEE16FFF0, 0x00010A07, 0x0B0D100C);
	r0 = D(r0, s0_2_2, 0x010D060E, 0x0CE5E5F7, 0xFDFBCF24, 0xF9FA1409);
	r1 = D(r1, s0_2_2, 0x0C0F01F1, 0xEFD903F5, 0xFC17F80B, 0xE219E6F7);
	r2 = D(r2, s0_2_2, 0xFBF21DF6, 0x05140FFB, 0xFF12ED06, 0xFB0D03EF);
	r3 = D(r3, s0_2_2, 0x18F01605, 0xFCFAFB14, 0xEC81D2E4, 0xF3041A06);
	r4 = D(r4, s0_2_2, 0xFDFF1AF7, 0xF6EDEDFB, 0xEAF610F8, 0xE81F0B0A);
	r5 = D(r5, s0_2_2, 0x021B04FF, 0x182B0FFE, 0x16FFF5F6, 0x00FA1AFB);
	r6 = D(r6, s0_2_2, 0x08F1FF06, 0xE7E9F9EF, 0xF1F103FD, 0x26F20000);
	r7 = D(r7, s0_2_2, 0x030A0404, 0x1901F6EE, 0x10FAF80E, 0xF6070CF4);
	r0 = D(r0, s1_0_0, 0x120E0DFA, 0xFE0F0701, 0xFA00F601, 0x04F20514);
	r1 = D(r1, s1_0_0, 0x050AFFFF, 0x06000D0A, 0x0FF9E701, 0xEA0B06FE);
	r2 = D(r2, s1_0_0, 0xA6EF1C81, 0x13D4142D, 0xFEED010F, 0xF5E62D0A);
	r3 = D(r3, s1_0_0, 0x08F1EC1D, 0xE30D03E9, 0x0AE3F80E, 0xEAFC0A18);
	r4 = D(r4, s1_0_0, 0xEDEB0505, 0x00ED0010, 0xFB26070B, 0xF61007F6);
	r5 = D(r5, s1_0_0, 0x0D15DEED, 0xF6DCF50E, 0xF40BF3EF, 0xF5060110);
	r6 = D(r6, s1_0_0, 0xEE03ED0D, 0x0C28F721, 0x0EFF09FE, 0x0203F0EF);
	r7 = D(r7, s1_0_0, 0xEF0A04F5, 0x17E0B3FB, 0x080B14EE, 0x09FFFD07);
	r0 = D(r0, s1_0_1, 0xF21FFE1B, 0xE90CFEF7, 0x0F10E503, 0x0CB6F406);
	r1 = D(r1, s1_0_1, 0x091602FB, 0x0517D2E4, 0xF10906F9, 0xFEFC0C0B);
	r2 = D(r2, s1_0_1, 0xC719E2C9, 0xF901F835, 0x10F406F4, 0xE4001CEB);
	r3 = D(r3, s1_0_1, 0x080FDDFB, 0xFF090C1F, 0x06FE0E00, 0xFDF60BFA);
	r4 = D(r4, s1_0_1, 0x0205FC1D, 0x01EFE5E6, 0x0B321F0E, 0x0927E503);
	r5 = D(r5, s1_0_1, 0x10081DFF, 0xF412280A, 0xFC20DDF2, 0xF6F61CFF);
	r6 = D(r6, s1_0_1, 0xF6F20ED9, 0xFB08E909, 0xEEF9D6EC, 0x0BFEFA06);
	r7 = D(r7, s1_0_1, 0x05FD040B, 0x81C3F522, 0xED02F615, 0xED0D23F9);
	r0 = D(r0, s1_0_2, 0x011BE334, 0x0419EB0B, 0x092B0AED, 0xF01E2730);
	r1 = D(r1, s1_0_2, 0xFF03EBF2, 0x0B13F3FB, 0xF108E909, 0x19F2150F);
	r2 = D(r2, s1_0_2, 0x0AF1DBE6, 0x1CB80DFD, 0xFB16DDF7, 0xF6DB06FE);
	r3 = D(r3, s1_0_2, 0x06F355C4, 0x11DBE21F, 0x19F50BEC, 0xFE221708);
	r4 = D(r4, s1_0_2, 0xFCE705F3, 0xF71E11C6, 0x0EE202D5, 0xE93119C9);
	r5 = D(r5, s1_0_2, 0xE7DF0FFD, 0xE70327E7, 0xF2F1C8FF, 0xEFFEF700);
	r6 = D(r6, s1_0_2, 0x08FEFB0E, 0x13E6E108, 0x06EDE601, 0x003E1CDC);
	r7 = D(r7, s1_0_2, 0x02011CFC, 0xD1FFD307, 0x0E12040B, 0xFC02ECF6);
	r0 = D(r0, s1_1_0, 0xFE08071C, 0x0DFAEF18, 0xE3FA1618, 0x12E52FDF);
	r1 = D(r1, s1_1_0, 0x1EF4F405, 0x09F70E0C, 0xF81D04FC, 0x08ECFD0A);
	r2 = D(r2, s1_1_0, 0x020BDCF3, 0xF2E8F1F0, 0xEBEBE60B, 0x0DFBF224);
	r3 = D(r3, s1_1_0, 0x0201E9F8, 0x1FE9F8F8, 0x07D2F9FC, 0xE41BFCD2);
	r4 = D(r4, s1_1_0, 0xEC10FCF9, 0xDDF2F6FD, 0x11E32AF7, 0xF5132603);
	r5 = D(r5, s1_1_0, 0xF0C7F0F0, 0x0E151A08, 0x07F7F903, 0x1DF71100);
	r6 = D(r6, s1_1_0, 0x5108111D, 0xF4FD13F5, 0xE5F30D10, 0xF3F40502);
	r7 = D(r7, s1_1_0, 0x12050A03, 0x31013D13, 0x0502F1E0, 0xEF10FA03);
	r0 = D(r0, s1_1_1, 0x2F09121A, 0x03F5F905, 0x2FFE05E5, 0x17ECE9EE);
	r1 = D(r1, s1_1_1, 0xC035F5DE, 0xE5220709, 0x252909DC, 0xEB13FB00);
	r2 = D(r2, s1_1_1, 0x00F82408, 0xCEEBC40B, 0x04E80B18, 0xED0AE9F6);
	r3 = D(r3, s1_1_1, 0xE0F30E0C, 0xFAF0EDFF, 0x0CDC23DA, 0x3421EEF2);
	r4 = D(r4, s1_1_1, 0x0908EC16, 0x2DD50D3A, 0xC4E416EE, 0x1910051F);
	r5 = D(r5, s1_1_1, 0x30EB1D38, 0x303D461B, 0x10EF271C, 0xE0EF04C6);
	r6 = D(r6, s1_1_1, 0xDE2DDBDB, 0xE72B04D4, 0x29DA031F, 0x1C0727FE);
	r7 = D(r7, s1_1_1, 0x041E1800, 0xBD25D9F8, 0x0BEC0503, 0x1802EE24);
	r0 = D(r0, s1_1_2, 0xF83303CE, 0x190FF9E6, 0xF4E30FCE, 0xD9170605);
	r1 = D(r1, s1_1_2, 0x2EFB093F, 0xFE1CCCF9, 0xF90DDDD6, 0x000CFE22);
	r2 = D(r2, s1_1_2, 0x100410FA, 0x260FE21F, 0xFC2BE706, 0x0BF6141B);
	r3 = D(r3, s1_1_2, 0x0AB21608, 0xF1FCF411, 0xFE34D51E, 0x0A11021F);
	r4 = D(r4, s1_1_2, 0xEEE619DE, 0xDDFE10F5, 0x0BECC80F, 0x002809ED);
	r5 = D(r5, s1_1_2, 0xD9E7F5F3, 0x064DF3D4, 0x010BD2E8, 0x06071407);
	r6 = D(r6, s1_1_2, 0xFEF91FF8, 0xFFD7FB11, 0xFAF109FE, 0xF5DA84FD);
	r7 = D(r7, s1_1_2, 0xF500FBF6, 0xFA2817FD, 0x110BDFF5, 0xFFE213EC);
	r0 = D(r0, s1_2_0, 0xEAE9E4E4, 0xFB04F315, 0x12201A08, 0x141E191E);
	r1 = D(r1, s1_2_0, 0xF815FEFC, 0xF9E10201, 0xE1EEDD24, 0x020CFC0E);
	r2 = D(r2, s1_2_0, 0x02250B1E, 0x032A22E0, 0xFDED0FF0, 0x12D8F7F4);
	r3 = D(r3, s1_2_0, 0xFE0AF507, 0x060E03EE, 0xF44F18FD, 0xF8F2FD15);
	r4 = D(r4, s1_2_0, 0x0DF517FB, 0x06D7FAD0, 0xFA16151C, 0x1AF4E602);
	r5 = D(r5, s1_2_0, 0x22330BFA, 0xE0FB0702, 0x04EAEC16, 0xFAF4F018);
	r6 = D(r6, s1_2_0, 0xE50D070C, 0xEE05FA1B, 0x09F11BEE, 0xFD080A0C);
	r7 = D(r7, s1_2_0, 0x06130103, 0xED0ECDFB, 0x091EE4EE, 0x02FB09FB);
	r0 = D(r0, s1_2_1, 0xC902FFD7, 0xFA0E0516, 0xD42BD0FF, 0xFF1DD1BF);
	r1 = D(r1, s1_2_1, 0xF1FAFA00, 0xF8FE0925, 0x13151A09, 0xF301EADE);
	r2 = D(r2, s1_2_1, 0x2E10001A, 0xF900F9DF, 0x0CF6EAE1, 0xEF2507EB);
	r3 = D(r3, s1_2_1, 0x212B03FB, 0xF50B10EB, 0xDAEABDE5, 0x2105E2FD);
	r4 = D(r4, s1_2_1, 0x0BEC0704, 0x0DE0FE0A, 0xEB06ED0C, 0xF906EEF3);
	r5 = D(r5, s1_2_1, 0xE4EADEBE, 0x0802E4EE, 0xEBF6EDDA, 0x14021421);
	r6 = D(r6, s1_2_1, 0xF6F30BF0, 0x42E72E19, 0xF50F0FFD, 0xF837210F);
	r7 = D(r7, s1_2_1, 0x04FE03FE, 0x03FDD7FE, 0x00F71B04, 0x03FDE7F8);
	r0 = D(r0, s1_2_2, 0x1D14FF07, 0x07F41CD1, 0xF8D6F430, 0xE20207F6);
	r1 = D(r1, s1_2_2, 0x0E2404F9, 0x030EF0F5, 0x07F506F2, 0x2D0A0CDB);
	r2 = D(r2, s1_2_2, 0x101404ED, 0x032BF7CD, 0x0003FC08, 0x0EEBEE1E);
	r3 = D(r3, s1_2_2, 0x001A0018, 0x010A0102, 0xFE09BAF3, 0xF2070F0C);
	r4 = D(r4, s1_2_2, 0x190FED2C, 0xDD261E00, 0x132AE7F2, 0x00ECFC0E);
	r5 = D(r5, s1_2_2, 0xF812F41C, 0x10DDF5FD, 0xD9E4F302, 0xFF020601);
	r6 = D(r6, s1_2_2, 0x09F70A1C, 0xE2212DEC, 0xF3291EE5, 0x06F11E15);
	r7 = D(r7, s1_2_2, 0x05DEFC04, 0xFD22F2E1, 0xECE40513, 0xF9F00BFF);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(3.106e-02, 4.409e-02, -4.422e-03, 2.327e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(3.528e-02, 4.048e-02, 1.516e-02, 1.131e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(1.619e-02, 1.947e-02, 2.070e-02, -4.310e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(2.554e-02, -1.486e-02, 4.149e-02, 1.278e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-8.942e-03, -2.370e-03, -2.123e-02, 4.797e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(1.765e-03, 3.135e-03, 5.294e-04, 3.527e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-1.121e-02, -1.666e-02, 1.408e-02, 1.070e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-2.203e-01, 5.987e-02, 5.258e-03, -3.035e-01);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-4x32-BILINEAR-MPV-NVL-conv2
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x000D07D9, 0xA5F11CE2, 0x080A1DFA, 0x03F7F503);
	r1 = D(r1, s0_0_0, 0x00081604, 0x020C15F7, 0x0C091E05, 0x04230C08);
	r2 = D(r2, s0_0_0, 0x18F919FA, 0x1300EC02, 0xFBF5FCFB, 0xF402EA08);
	r3 = D(r3, s0_0_0, 0x05E318F0, 0xF6E9FBEC, 0x061ECACF, 0xD741FF03);
	r4 = D(r4, s0_0_0, 0x000B10F7, 0xC32E16AB, 0xFD130101, 0x15F31AF2);
	r5 = D(r5, s0_0_0, 0x102902F1, 0x05FB0601, 0x01062503, 0xE9101F14);
	r6 = D(r6, s0_0_0, 0xFFFD0004, 0xFFF5F30B, 0xF8F50C0A, 0x0519F80F);
	r7 = D(r7, s0_0_0, 0x0EF9E012, 0xFC00FD15, 0x1BD4E528, 0xE55FFBF6);
	r0 = D(r0, s0_0_1, 0x0002EBF7, 0xEE24120E, 0xF7EBFAF0, 0x070A0506);
	r1 = D(r1, s0_0_1, 0xEA250226, 0xF50002F8, 0x070811F8, 0xFD0FFA21);
	r2 = D(r2, s0_0_1, 0x12E4F206, 0x09D9D8FA, 0x14F4FE0D, 0x0CD3FCF5);
	r3 = D(r3, s0_0_1, 0x01DD2F04, 0xFE0CFAFF, 0x211007F1, 0x0EFC1DED);
	r4 = D(r4, s0_0_1, 0x0001F825, 0x0FB41304, 0xFA02F8EE, 0x06A4F3E8);
	r5 = D(r5, s0_0_1, 0xF9210F13, 0x09E91CEB, 0xFCEB10F6, 0xFC300ED9);
	r6 = D(r6, s0_0_1, 0xF8EEE20A, 0x0FF413F5, 0xFF0606FF, 0x112A0B17);
	r7 = D(r7, s0_0_1, 0x050FFC22, 0xFFA4EF1A, 0x13C5F7F5, 0xE2FB0AF4);
	r0 = D(r0, s0_0_2, 0xF30BF4FB, 0xF3E4012A, 0x151C0AFE, 0x03F50208);
	r1 = D(r1, s0_0_2, 0x0613F3EB, 0x03F7ECFB, 0x03F611E7, 0x0AF60B04);
	r2 = D(r2, s0_0_2, 0x08E3F808, 0x14F4F1EE, 0x08F2F616, 0xFCD60AF3);
	r3 = D(r3, s0_0_2, 0x10E0F60D, 0x000808F9, 0x111E0F02, 0xFF2A141B);
	r4 = D(r4, s0_0_2, 0xFBF2101A, 0xDCF705F2, 0x071F0C16, 0x12CC040B);
	r5 = D(r5, s0_0_2, 0xF21CF704, 0xF0F10B0B, 0x0BE6060C, 0x0DD90119);
	r6 = D(r6, s0_0_2, 0x1309F5FA, 0xF50705F0, 0xF5F1F1F1, 0x0FFB0FFB);
	r7 = D(r7, s0_0_2, 0x12FAF207, 0xFDB31300, 0xF61DFEF1, 0x031A03FF);
	r0 = D(r0, s0_1_0, 0xF920F6F5, 0x10D731F7, 0xFBF2F5F8, 0xF90D02FB);
	r1 = D(r1, s0_1_0, 0x031001FC, 0xF104F215, 0x1A11E403, 0x002FF91C);
	r2 = D(r2, s0_1_0, 0xF0EA04E4, 0x09EBF40B, 0x05EDE2E6, 0xEDFFEB0A);
	r3 = D(r3, s0_1_0, 0xF0EE13F9, 0x05F6F508, 0x05F7FF0B, 0xEB26F4E3);
	r4 = D(r4, s0_1_0, 0xE11E000F, 0xB507CE2D, 0xECEF04EB, 0xF90FE528);
	r5 = D(r5, s0_1_0, 0xDE181503, 0xE6E7FC1C, 0xF4010902, 0x0210E600);
	r6 = D(r6, s0_1_0, 0xF4060B0F, 0xFAEEF50F, 0xECE80311, 0xF6272A02);
	r7 = D(r7, s0_1_0, 0xF81D0BE9, 0xEEE6EE01, 0x0F33FCE3, 0xECFB071F);
	r0 = D(r0, s0_1_1, 0x0614FE0C, 0xECDAE6F7, 0xFF03EC06, 0xF2FDFB08);
	r1 = D(r1, s0_1_1, 0xE8260EE4, 0xF2FF14ED, 0x11BBFE1A, 0xF71EC3C3);
	r2 = D(r2, s0_1_1, 0x07FCF7D4, 0x1313FDFE, 0x07D1F1E7, 0xEFF8B004);
	r3 = D(r3, s0_1_1, 0x0ACE15D8, 0x1CE80302, 0x2D192313, 0xFB1407F1);
	r4 = D(r4, s0_1_1, 0xE61CFACA, 0x06FA081A, 0xCB1E1B07, 0x01BEFE0E);
	r5 = D(r5, s0_1_1, 0x070AF6B8, 0xFEE403FC, 0xB120150C, 0xC208D6E3);
	r6 = D(r6, s0_1_1, 0xE9E80310, 0xFD21F703, 0xFE1904FC, 0xF50F04F6);
	r7 = D(r7, s0_1_1, 0xF40DF50A, 0xFBF9FCFB, 0xEDFCD012, 0xD30EF600);
	r0 = D(r0, s0_1_2, 0xF9EA01E2, 0xFAF617F9, 0xE50DF50A, 0x03FDFF0C);
	r1 = D(r1, s0_1_2, 0xE22BF1F1, 0x10ECF40A, 0x1CD70703, 0xF9F8F1F8);
	r2 = D(r2, s0_1_2, 0x1C1CF002, 0x07FA03FD, 0xD7B1FAFA, 0x01F8D4F2);
	r3 = D(r3, s0_1_2, 0xEA190A03, 0x0802FBFF, 0xDB0807F9, 0xDE161C0C);
	r4 = D(r4, s0_1_2, 0x110307D8, 0x1EFA0B0D, 0xDF2CF7FC, 0x08D903FB);
	r5 = D(r5, s0_1_2, 0x0F16E81A, 0xF00C0309, 0xE70C0EF8, 0x0F10FC02);
	r6 = D(r6, s0_1_2, 0x0D13ED0B, 0x09FDF4F9, 0x0AEDF0E9, 0x05060103);
	r7 = D(r7, s0_1_2, 0x08000B0D, 0x210CF7FF, 0x1BF5F3D3, 0x16C40715);
	r0 = D(r0, s0_2_0, 0x010DFCEC, 0xD8E72FE9, 0x0DFD0107, 0x0CFEF710);
	r1 = D(r1, s0_2_0, 0x0100ED07, 0x06000303, 0x17F8F914, 0x0D100510);
	r2 = D(r2, s0_2_0, 0xE006FC0A, 0x09FF03F0, 0x04EA0505, 0xFAFA03EF);
	r3 = D(r3, s0_2_0, 0xF101F60D, 0x03FFED04, 0xEB15090B, 0xEBFB0D10);
	r4 = D(r4, s0_2_0, 0xDC1602EA, 0x21FEEADF, 0xD71C0E03, 0xF60DDC0F);
	r5 = D(r5, s0_2_0, 0xEDE3DF06, 0xEF0800F9, 0x08FEFDF3, 0x250BF016);
	r6 = D(r6, s0_2_0, 0xFB060A04, 0xDCF60715, 0xE4FA0812, 0xECF404FD);
	r7 = D(r7, s0_2_0, 0xF4100800, 0xF4FFF6F7, 0x08BF2005, 0xD60ABCFE);
	r0 = D(r0, s0_2_1, 0xF813FDE5, 0xEFE1A401, 0x0E00FEFD, 0x04F6F906);
	r1 = D(r1, s0_2_1, 0xF82126F1, 0xF702F009, 0x06000E0B, 0xFE071AE0);
	r2 = D(r2, s0_2_1, 0xEE060004, 0xF600F2F4, 0xF9A73206, 0x07EEF419);
	r3 = D(r3, s0_2_1, 0xF70F0202, 0xF9FAFAFE, 0x14050709, 0xFB07D602);
	r4 = D(r4, s0_2_1, 0xDB2919D4, 0x120606FF, 0xE01711F4, 0x1D0E011A);
	r5 = D(r5, s0_2_1, 0xE4E10B03, 0x0104F1F9, 0x03FAED03, 0xEDF748E1);
	r6 = D(r6, s0_2_1, 0xFC060712, 0x0620030D, 0x2BEAEA10, 0x09ED031B);
	r7 = D(r7, s0_2_1, 0x0B15F801, 0xD8000604, 0x03AAF502, 0x3F14D50C);
	r0 = D(r0, s0_2_2, 0xF312F8D4, 0x1220F219, 0x060703FD, 0x060306FE);
	r1 = D(r1, s0_2_2, 0xF7F6EE0B, 0x01F7F704, 0x07F1F6FF, 0x24042FE9);
	r2 = D(r2, s0_2_2, 0x0903E905, 0xEF110BF3, 0x20FBF3E9, 0x0E070FFF);
	r3 = D(r3, s0_2_2, 0xEE0CE70A, 0x0408FF03, 0xF515F009, 0xF50DF7F4);
	r4 = D(r4, s0_2_2, 0x04FCF707, 0x03F4FEF0, 0x0909F912, 0x0E1400F6);
	r5 = D(r5, s0_2_2, 0xEADA1730, 0xFF0702F9, 0x0500FA06, 0x08130018);
	r6 = D(r6, s0_2_2, 0xF9150008, 0x050402F4, 0x0C08FC0B, 0x080DFB09);
	r7 = D(r7, s0_2_2, 0x000616FA, 0xF0FFFF04, 0x0EEF032E, 0xF3F526CD);
	r0 = D(r0, s1_0_0, 0xFB06F50D, 0xEED0E6D9, 0x00FEFF03, 0xFDFE0205);
	r1 = D(r1, s1_0_0, 0x08F6F0F8, 0xF61107F7, 0x0FF9FF0E, 0x1A0BD90E);
	r2 = D(r2, s1_0_0, 0x0DE407BA, 0x01052D15, 0x090FECEF, 0xF5EA15F9);
	r3 = D(r3, s1_0_0, 0x03120118, 0x000BF3EB, 0x04021A13, 0xF9EAF9F8);
	r4 = D(r4, s1_0_0, 0x0FFEFCF8, 0xDAEBE5C1, 0x04F6FAF1, 0xF5EF0C08);
	r5 = D(r5, s1_0_0, 0x03E2DEFD, 0x000A15F8, 0x0509EDFC, 0x0C03FAF8);
	r6 = D(r6, s1_0_0, 0x06FC0FF5, 0x10EDF4F8, 0xFBFDDFF8, 0xEEF3F60B);
	r7 = D(r7, s1_0_0, 0xF90B02E5, 0xFC17F6FD, 0xF9140BE9, 0x19F91609);
	r0 = D(r0, s1_0_1, 0x0608DCFC, 0xFDF90C02, 0x07F508FD, 0x0718F101);
	r1 = D(r1, s1_0_1, 0x20051C08, 0x10FF1605, 0xF208FB04, 0x1704E514);
	r2 = D(r2, s1_0_1, 0x03180B08, 0xE90A21F6, 0x010301ED, 0x19111AF1);
	r3 = D(r3, s1_0_1, 0x04E41407, 0x04F8F611, 0xE9EDED02, 0xEEF607E9);
	r4 = D(r4, s1_0_1, 0x0A07E7F1, 0xF00FF6D8, 0x0EF5FAF7, 0xEEFD160D);
	r5 = D(r5, s1_0_1, 0x2A03152D, 0xF70B1F0D, 0xF71514E6, 0x12FC1101);
	r6 = D(r6, s1_0_1, 0x03FBF9F6, 0xFDF716FA, 0x06F51A14, 0x2305DA27);
	r7 = D(r7, s1_0_1, 0x13F2CBF6, 0x1EE7F1F2, 0x0701CAFB, 0x08E201DF);
	r0 = D(r0, s1_0_2, 0xF2F9E3FC, 0xFCF5D704, 0xFFFDF305, 0x0207F7FB);
	r1 = D(r1, s1_0_2, 0x0A02F5F9, 0x0502F7F4, 0x0A0D130C, 0xFF05EAF8);
	r2 = D(r2, s1_0_2, 0x21F802FD, 0x03F71910, 0xFCFE080F, 0x00F717EB);
	r3 = D(r3, s1_0_2, 0xEF150DF0, 0x030700FD, 0x15FB0B0F, 0x0B20FAEE);
	r4 = D(r4, s1_0_2, 0x0D09F70C, 0x00EDE1EE, 0x0001FA00, 0x0910E910);
	r5 = D(r5, s1_0_2, 0x0D0E0802, 0x0305FCFB, 0x0604FC09, 0xEF0B1A0A);
	r6 = D(r6, s1_0_2, 0xFFFAE6FB, 0x0FFBDF02, 0xF9FBF3ED, 0xEEF9E604);
	r7 = D(r7, s1_0_2, 0xFAF3ED0B, 0xF620FA03, 0xF10A0D19, 0x31F1F10E);
	r0 = D(r0, s1_1_0, 0xED13ED07, 0x0013FB01, 0x01E30307, 0xF6F60F33);
	r1 = D(r1, s1_1_0, 0x0F04F01B, 0xE605FBF6, 0xFC010017, 0xF4011D07);
	r2 = D(r2, s1_1_0, 0x0CF1FDF6, 0x00F8FEFC, 0xF2F002F0, 0xFB03F4FC);
	r3 = D(r3, s1_1_0, 0xDE120008, 0x05260200, 0x1EF71CDA, 0x04D5EE02);
	r4 = D(r4, s1_1_0, 0x1AF4F11A, 0x14101327, 0xEB030001, 0xFB0B08FA);
	r5 = D(r5, s1_1_0, 0xF00823F4, 0xF81809BF, 0xE10D0D0F, 0x06E50902);
	r6 = D(r6, s1_1_0, 0xFFF10AEB, 0xE5FD0BED, 0x081408F2, 0x0401F912);
	r7 = D(r7, s1_1_0, 0x0CEA0601, 0xEFFCFCC8, 0x01F1FC0D, 0xF4010325);
	r0 = D(r0, s1_1_1, 0xE9F4E022, 0xF1EC01DD, 0xF20318DE, 0xEDFA0DEE);
	r1 = D(r1, s1_1_1, 0x0BFA1D1F, 0x041109DE, 0x01EFE8F5, 0x2601FEFB);
	r2 = D(r2, s1_1_1, 0xFAFA0FFD, 0x16F61507, 0x08E00E0C, 0x10E9E4FB);
	r3 = D(r3, s1_1_1, 0xFCF42803, 0x0D06EFF4, 0xFEE5CA13, 0xCBD7D8E1);
	r4 = D(r4, s1_1_1, 0x17E5E613, 0xD423EF1A, 0xD0E10FF7, 0x05061BD3);
	r5 = D(r5, s1_1_1, 0x1FEAFCDC, 0x070C1E1D, 0x05240402, 0xDF09FBDC);
	r6 = D(r6, s1_1_1, 0x0EFEFAF8, 0xF51EE225, 0x161D0E0F, 0xECFDEEEE);
	r7 = D(r7, s1_1_1, 0x0DF7E508, 0x020BFB0E, 0x04D70909, 0x120DF5F6);
	r0 = D(r0, s1_1_2, 0xEBF5ECF9, 0x13FE0010, 0xF906FF0E, 0xFC00080C);
	r1 = D(r1, s1_1_2, 0x00E003F4, 0x06F80001, 0x10180711, 0xF5F006CF);
	r2 = D(r2, s1_1_2, 0xF4FCFBFE, 0xF2EB1922, 0x030632FE, 0xF1E9FE00);
	r3 = D(r3, s1_1_2, 0x130803EE, 0xF5090A05, 0x010A1400, 0x1E19F1F3);
	r4 = D(r4, s1_1_2, 0x06F60FF4, 0x08E6D101, 0xE41C14EA, 0x2235130B);
	r5 = D(r5, s1_1_2, 0xDED1EAE7, 0x0B010308, 0x040006ED, 0xEC1DE915);
	r6 = D(r6, s1_1_2, 0xFBF41210, 0xF605FCF4, 0x14011F00, 0xEC0FFDFA);
	r7 = D(r7, s1_1_2, 0x0AFAEB0F, 0x030C0CFD, 0xE2FA07C2, 0x10D90817);
	r0 = D(r0, s1_2_0, 0x03FDF8FF, 0xE6E3EF09, 0x00FD05FA, 0x0C0D0509);
	r1 = D(r1, s1_2_0, 0xEB010006, 0xED110D11, 0x21ED1305, 0xE6F60719);
	r2 = D(r2, s1_2_0, 0x250A1821, 0xFC0C08FF, 0xEE040805, 0xED0602FE);
	r3 = D(r3, s1_2_0, 0xFD1403F1, 0x0E060AFD, 0xE4EE1C12, 0xF4211B0B);
	r4 = D(r4, s1_2_0, 0x04F4FA19, 0x14CB45D2, 0xF0DFF7FC, 0xF3FC10E6);
	r5 = D(r5, s1_2_0, 0xFC251205, 0xFA11FEF8, 0xFE10FB08, 0x1713F222);
	r6 = D(r6, s1_2_0, 0xFC0209F7, 0xF40CFF1A, 0xF40C19FB, 0x09FB0AED);
	r7 = D(r7, s1_2_0, 0xFCFAFDFF, 0xDB320F15, 0x1919F8EC, 0xDDDF1A03);
	r0 = D(r0, s1_2_1, 0xEFF0FE0C, 0xFC1634D9, 0xFD0201FD, 0x050DFEFB);
	r1 = D(r1, s1_2_1, 0xDB0E05F5, 0x0A0D14F7, 0x130E0F06, 0xF70323F7);
	r2 = D(r2, s1_2_1, 0xF5FA10FC, 0xFE10FB02, 0x0C14D30B, 0x17F2E60C);
	r3 = D(r3, s1_2_1, 0xF01EFE0E, 0x030DFBFB, 0xFC050107, 0xFDF9FB18);
	r4 = D(r4, s1_2_1, 0xDCEEFDEA, 0x06EFEEEB, 0xEA021AF7, 0x14090109);
	r5 = D(r5, s1_2_1, 0xFDFCDCEB, 0x0309F606, 0x04FBFA0F, 0xEAF3F417);
	r6 = D(r6, s1_2_1, 0xF411021F, 0xE8FFD802, 0xFD120109, 0x05F5F300);
	r7 = D(r7, s1_2_1, 0xF4F7F1F8, 0x09111309, 0x2000FB0F, 0xE5D9250C);
	r0 = D(r0, s1_2_2, 0xE0FD1B0C, 0x0BE20610, 0xF20307FB, 0x02FE00FF);
	r1 = D(r1, s1_2_2, 0x020913E7, 0x06100102, 0x0D1B0403, 0xD3FAFCE4);
	r2 = D(r2, s1_2_2, 0x07081305, 0xFD00F8FC, 0x0E0EFCF7, 0xFBDEFD1A);
	r3 = D(r3, s1_2_2, 0x02040CF9, 0x0A01FFF9, 0xE800FBF1, 0xDDF50B08);
	r4 = D(r4, s1_2_2, 0xEEF105FA, 0x10F1FB05, 0x04020902, 0xF70EF7F1);
	r5 = D(r5, s1_2_2, 0x07D6090D, 0xFBFFFFF8, 0x050AEC12, 0x011DF6F0);
	r6 = D(r6, s1_2_2, 0xF2150FF5, 0xDFFCE5E7, 0xF2FC0E0B, 0x02FEF100);
	r7 = D(r7, s1_2_2, 0xFDFFFFFD, 0x00F1FFF7, 0xE1EBC224, 0x09FCFE0A);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x09F5080A, 0x0002EA10, 0x1503EF0C, 0x00F8FE16);
	r1 = D(r1, s0_0_0, 0xFEF503F9, 0x0009FF17, 0xF2F30AF8, 0xEEF41F16);
	r2 = D(r2, s0_0_0, 0x30D3F80F, 0xFA09D2FF, 0xFE09F31B, 0xE40EFE01);
	r3 = D(r3, s0_0_0, 0x0C06DF02, 0xFB010102, 0x050813E9, 0x050BEE05);
	r4 = D(r4, s0_0_0, 0xF8FA0704, 0xDFF7F6E1, 0x0C040504, 0xFD0AF0E7);
	r5 = D(r5, s0_0_0, 0x04F1F8E3, 0x06EFE2F7, 0x0B010F04, 0x0BF40AF4);
	r6 = D(r6, s0_0_0, 0x0203ECFD, 0xEF04FE03, 0xF0070E01, 0xF9FD1D16);
	r7 = D(r7, s0_0_0, 0xFEFFFA06, 0x09F41024, 0x10FB1A37, 0xE106E62C);
	r0 = D(r0, s0_0_1, 0x0900FA36, 0x1FE32B19, 0xF803080C, 0x0603F50C);
	r1 = D(r1, s0_0_1, 0x02F410F7, 0x0D11F604, 0xFE0D0205, 0x04191810);
	r2 = D(r2, s0_0_1, 0xFF0EF423, 0x13169EF6, 0x0DF70420, 0x1602E110);
	r3 = D(r3, s0_0_1, 0x10FCF2F1, 0xFAFE0508, 0x1213FAF5, 0x1BDF0D0E);
	r4 = D(r4, s0_0_1, 0xEF04F105, 0x0F030912, 0xE4111207, 0x2DF6E410);
	r5 = D(r5, s0_0_1, 0xF50417EB, 0x0FFDFCFA, 0xF7030314, 0x0EF6FD2D);
	r6 = D(r6, s0_0_1, 0x0401ED01, 0x020A0DE4, 0x0010FE09, 0xF6000D0B);
	r7 = D(r7, s0_0_1, 0xF5F2EC09, 0xF7F7180F, 0x12EDF3FF, 0xFDF8181B);
	r0 = D(r0, s0_0_2, 0x1AEF1725, 0x0B3AF630, 0x000DF938, 0xFFFFFD00);
	r1 = D(r1, s0_0_2, 0xF205EEFB, 0xFC0AFDEC, 0xEEF3F900, 0xEFFCF229);
	r2 = D(r2, s0_0_2, 0xEF00EFD0, 0x1C2EEAEB, 0x1309F726, 0x02FDEC2E);
	r3 = D(r3, s0_0_2, 0x0C09021B, 0x09FEFFEF, 0xF9D00B81, 0x02DDF019);
	r4 = D(r4, s0_0_2, 0x10E7EEEF, 0x142EDE25, 0xEFE20DE1, 0x14E21410);
	r5 = D(r5, s0_0_2, 0xF402EBEE, 0x00FC170E, 0xF1F1FC21, 0x1A05F512);
	r6 = D(r6, s0_0_2, 0x03F506F1, 0xF615FFD9, 0x0019DDDA, 0x01EA023A);
	r7 = D(r7, s0_0_2, 0x02F00EFC, 0x17E101ED, 0x23D9FC1D, 0x00D93171);
	r0 = D(r0, s0_1_0, 0xEE0EFA17, 0x0201F2C2, 0x01F9F9F8, 0x160F1408);
	r1 = D(r1, s0_1_0, 0x0B000100, 0xF90A0402, 0xEBE20505, 0xF2001111);
	r2 = D(r2, s0_1_0, 0x26CAFE15, 0x030000EF, 0xF1FE07FB, 0x01FE07F7);
	r3 = D(r3, s0_1_0, 0xF108F5EF, 0x03FF0E19, 0xE916011E, 0x07F3F8E6);
	r4 = D(r4, s0_1_0, 0xEC0F0210, 0xDE0F08FF, 0x0CF9E717, 0xFE0D1E02);
	r5 = D(r5, s0_1_0, 0x1501D0EE, 0x0CEAD808, 0x020800F6, 0xF40EF20F);
	r6 = D(r6, s0_1_0, 0xFB04FFFE, 0x0811FD09, 0xEC0005FB, 0x0BFD0506);
	r7 = D(r7, s0_1_0, 0xF7070FED, 0xF4241E09, 0x000C27E7, 0xF7F2E500);
	r0 = D(r0, s0_1_1, 0xD7EE1C19, 0xE4BE16E1, 0xFFF9F40A, 0x04270210);
	r1 = D(r1, s0_1_1, 0x05F70B0B, 0x02FBFE4B, 0xD7F30A30, 0xFE07316D);
	r2 = D(r2, s0_1_1, 0x10D614F5, 0xEEF90AF6, 0xF506D41C, 0x07F413D8);
	r3 = D(r3, s0_1_1, 0xF506F122, 0xF607E11D, 0x060BF2D5, 0xB5ED0905);
	r4 = D(r4, s0_1_1, 0xF6F3EE1F, 0x1442FF28, 0xF9FCF0FE, 0xE20BEE1D);
	r5 = D(r5, s0_1_1, 0xF4FB2015, 0x13ABF724, 0x0C002134, 0xBEEC114B);
	r6 = D(r6, s0_1_1, 0x0DFFFBED, 0xF3021B01, 0x09F81629, 0x0517013A);
	r7 = D(r7, s0_1_1, 0x0C0107EE, 0xFFCCF01C, 0x17E80E0D, 0xFAFE1224);
	r0 = D(r0, s0_1_2, 0xF022022D, 0xFC0008D4, 0xF8FC03DC, 0x0A0EFA03);
	r1 = D(r1, s0_1_2, 0xF009E8E1, 0xFE01F9E7, 0x03E9FA48, 0x0B1705D4);
	r2 = D(r2, s0_1_2, 0xF0F8F40D, 0xE5010316, 0xEFEF1AE8, 0x1815ECAF);
	r3 = D(r3, s0_1_2, 0xEC0610FC, 0x03F7F70E, 0xF0E617D9, 0xE3810268);
	r4 = D(r4, s0_1_2, 0xF9E5FEE0, 0x10141672, 0xF71C1B20, 0xF6E11BED);
	r5 = D(r5, s0_1_2, 0x28D23BEC, 0x02EA071C, 0x1A070E22, 0xFA09F260);
	r6 = D(r6, s0_1_2, 0xE306F412, 0x0608FC52, 0x0307E8FA, 0xF0FE0A38);
	r7 = D(r7, s0_1_2, 0xF8F00122, 0x03F7EE0A, 0x0720FA42, 0x09DB182F);
	r0 = D(r0, s0_2_0, 0x082DEF11, 0xEF140E1D, 0xF90BF90A, 0xFD0C0008);
	r1 = D(r1, s0_2_0, 0xF2FA000E, 0xFDFD03FF, 0xECE90F00, 0x1DFC1615);
	r2 = D(r2, s0_2_0, 0xF6D91BE0, 0xF7FD09F6, 0x020412F5, 0xFB001B13);
	r3 = D(r3, s0_2_0, 0xFD0E110F, 0x00FFFCE4, 0x051D1212, 0x051C2228);
	r4 = D(r4, s0_2_0, 0x00E6ECDE, 0xC8F8F6D6, 0x0EFD0E14, 0xFC12040D);
	r5 = D(r5, s0_2_0, 0x00003A41, 0x12FE1103, 0xF3F5FBF8, 0x020EEC09);
	r6 = D(r6, s0_2_0, 0xFE01FF04, 0xF70A080C, 0xF8F71B02, 0x000301D1);
	r7 = D(r7, s0_2_0, 0x08030213, 0x10E81511, 0xFC11F719, 0x01E2E2F1);
	r0 = D(r0, s0_2_1, 0xEB06EF40, 0x1409ECCD, 0xF50815DC, 0x0C130011);
	r1 = D(r1, s0_2_1, 0x08FF0D2E, 0xFD1DF606, 0xF8D6EE2A, 0xF8F01EDE);
	r2 = D(r2, s0_2_1, 0x12E71EF8, 0x0BF2FB1B, 0x210C1316, 0x0902F4EF);
	r3 = D(r3, s0_2_1, 0x070A0C0B, 0xFC0DF357, 0x0D1FE5B2, 0xFD0D00F4);
	r4 = D(r4, s0_2_1, 0x08CBE9EB, 0xF8D1C198, 0x0203F9C1, 0xE320E629);
	r5 = D(r5, s0_2_1, 0x11F4F62F, 0xF5F511F3, 0x04FA05FB, 0xEF1D02E9);
	r6 = D(r6, s0_2_1, 0x0813000F, 0xFCF9E6FC, 0x0003ED45, 0xF10EF3DA);
	r7 = D(r7, s0_2_1, 0x0E0AFE0A, 0xE4F10A15, 0x11DBEFFF, 0xEF0C09C7);
	r0 = D(r0, s0_2_2, 0xF5EF1520, 0xF908F5D9, 0xF6FA000A, 0xFE02F4F9);
	r1 = D(r1, s0_2_2, 0x09FA09EF, 0x0506FFE2, 0xF7F1FA0B, 0x21FBFE59);
	r2 = D(r2, s0_2_2, 0xE5140CAA, 0xF6171508, 0x0823F350, 0xE50AF381);
	r3 = D(r3, s0_2_2, 0xFBFF029D, 0x0203FCF8, 0xF60DE111, 0x19EB0903);
	r4 = D(r4, s0_2_2, 0x10E80108, 0x19FEF920, 0x0AEC05DE, 0xFC220B23);
	r5 = D(r5, s0_2_2, 0xDB10D801, 0x01FE0BFB, 0xFBF503CB, 0x09F702C9);
	r6 = D(r6, s0_2_2, 0x010B10D7, 0xDE0CE5AC, 0xFE0DFAF6, 0x09FA0804);
	r7 = D(r7, s0_2_2, 0xF90C06F2, 0x0CF9FCBF, 0xCBF300A9, 0x1601F403);
	r0 = D(r0, s1_0_0, 0x13F21505, 0x1FE9F4E7, 0xFF0FFA03, 0x04FC09FD);
	r1 = D(r1, s1_0_0, 0xFCDF0AD3, 0xF918FD11, 0xF0C5F1EB, 0xEBDD0213);
	r2 = D(r2, s1_0_0, 0xEEF306F2, 0x14F4F408, 0x2D19F9F6, 0xECFB1B0F);
	r3 = D(r3, s1_0_0, 0x0B0F0A29, 0xF5170302, 0x04E30019, 0x18181838);
	r4 = D(r4, s1_0_0, 0x0CECF3D0, 0xD4B32548, 0xF419EC0F, 0x0210081A);
	r5 = D(r5, s1_0_0, 0x101705EE, 0x06150600, 0xFBFDF319, 0x062CFED6);
	r6 = D(r6, s1_0_0, 0xFD070409, 0x06F0F3FC, 0x11FF04F6, 0x01F30700);
	r7 = D(r7, s1_0_0, 0x01FD01ED, 0xF9F71101, 0xF917000F, 0xEDE0CF1A);
	r0 = D(r0, s1_0_1, 0x16F9F20A, 0x2DC606E1, 0xEDFAF300, 0xFF06FEF6);
	r1 = D(r1, s1_0_1, 0xFCE9F9F2, 0xF210FC00, 0x25E30F02, 0x06ECFFE5);
	r2 = D(r2, s1_0_1, 0xF01E00F8, 0xF9FC100B, 0x0101010F, 0x17D6F923);
	r3 = D(r3, s1_0_1, 0x06090505, 0x0D0607FB, 0xF5F2030E, 0xE91E1115);
	r4 = D(r4, s1_0_1, 0x00E40FD9, 0xF62A0907, 0xEC03F1FB, 0xCB0B14F3);
	r5 = D(r5, s1_0_1, 0xF2F7F3FB, 0xF6050800, 0xF411FB06, 0xFA17F732);
	r6 = D(r6, s1_0_1, 0x1605F701, 0xF3DAE90A, 0x04D60105, 0xF2FBFF08);
	r7 = D(r7, s1_0_1, 0x09F8EA0A, 0x071D0A10, 0x33DE13FD, 0x17F1BCDB);
	r0 = D(r0, s1_0_2, 0x06D509E7, 0xFA20FF19, 0xF209020C, 0x06090608);
	r1 = D(r1, s1_0_2, 0x00F3F0F6, 0x0707FBF8, 0xE1E401FC, 0x1DF11302);
	r2 = D(r2, s1_0_2, 0xF208F7F6, 0xFADDF0F4, 0x1C25FC09, 0xFF090C16);
	r3 = D(r3, s1_0_2, 0xFC1CFF0D, 0xF903FF07, 0xEF0BF100, 0x0A23FC0D);
	r4 = D(r4, s1_0_2, 0xD2F30304, 0x1FD40E27, 0x0508F8F7, 0x12130F05);
	r5 = D(r5, s1_0_2, 0xDAF6EE03, 0xFE0FFAF9, 0xF3F0F6FB, 0x151804FC);
	r6 = D(r6, s1_0_2, 0x0B1AF50C, 0x020405FD, 0x17E20FFF, 0xF2080CF8);
	r7 = D(r7, s1_0_2, 0xEEF60A05, 0x041E1303, 0xF5BB1007, 0x0E0CADA0);
	r0 = D(r0, s1_1_0, 0x1DFD1AFB, 0x1914F916, 0xF911E312, 0x04150010);
	r1 = D(r1, s1_1_0, 0xEAFCEED8, 0x150204FA, 0xEDEDFB1B, 0x051AF6C6);
	r2 = D(r2, s1_1_0, 0xFF1A050F, 0x070F0311, 0xF618F0FB, 0x07110F08);
	r3 = D(r3, s1_1_0, 0x0B17F516, 0x0A08FFEC, 0xD007BBEE, 0x0B2BB810);
	r4 = D(r4, s1_1_0, 0xFDFAF696, 0xF6AFDF11, 0x12130226, 0x00240D19);
	r5 = D(r5, s1_1_0, 0xE5081729, 0xFF170F01, 0xFBF0F3E0, 0xF70B0926);
	r6 = D(r6, s1_1_0, 0x070D080A, 0x2B1805F3, 0x070AFFF5, 0xE2E60906);
	r7 = D(r7, s1_1_0, 0xF9FF0FE1, 0x0B1818F7, 0xDA05100C, 0xF5F79E0A);
	r0 = D(r0, s1_1_1, 0x19FC0A19, 0x0101180B, 0xEE08DA17, 0xF808FCFC);
	r1 = D(r1, s1_1_1, 0x190AFEFB, 0x10F014FD, 0x0AF01720, 0xEA04EEDF);
	r2 = D(r2, s1_1_1, 0x08E0EBEC, 0x06F8CCE1, 0xED1C14EF, 0x14FA140B);
	r3 = D(r3, s1_1_1, 0xFA17E408, 0xF91A0ADA, 0xF418E7DF, 0x0821BE13);
	r4 = D(r4, s1_1_1, 0x14F7F5D3, 0xD924E1FA, 0x021A01FF, 0xD41A0E30);
	r5 = D(r5, s1_1_1, 0x02EAD90D, 0xF30CE0FD, 0x13091415, 0x09F2BCE8);
	r6 = D(r6, s1_1_1, 0x2014FFED, 0xEE151609, 0xE7F518F9, 0x04F7EFE2);
	r7 = D(r7, s1_1_1, 0x000116DB, 0x040406EC, 0xFDFFF71B, 0x2FDBEEA1);
	r0 = D(r0, s1_1_2, 0x350CED05, 0xE10ED0E7, 0xE60505FA, 0xF10409FC);
	r1 = D(r1, s1_1_2, 0xF9F40808, 0x05FBF909, 0xF8E6EE00, 0x05EDEB18);
	r2 = D(r2, s1_1_2, 0x1E0F04F1, 0x08FEF7EA, 0xD60E09F5, 0x1DF6F9FC);
	r3 = D(r3, s1_1_2, 0xFC1DE60B, 0x00020C05, 0xF9092F13, 0xE51501FE);
	r4 = D(r4, s1_1_2, 0xFEE7F2F5, 0xE2FE0715, 0x0F0D120B, 0xF81AF1E8);
	r5 = D(r5, s1_1_2, 0x1E1E0227, 0xFE04FEEC, 0xFFFA150E, 0xF314AFF8);
	r6 = D(r6, s1_1_2, 0xFC0EF71C, 0xF81D030B, 0x0D00E202, 0xF30D08FE);
	r7 = D(r7, s1_1_2, 0xF20E0FF6, 0x0710F104, 0x04EAF937, 0x0002D8C8);
	r0 = D(r0, s1_2_0, 0x060607E1, 0x1409E9FD, 0xF10409F3, 0x06FF0AF9);
	r1 = D(r1, s1_2_0, 0x07FBE0F0, 0xFF010307, 0x0AFA9203, 0x0F11DCF1);
	r2 = D(r2, s1_2_0, 0x05F740FC, 0x09FCFAFB, 0x1101E81C, 0xF3220ADC);
	r3 = D(r3, s1_2_0, 0xFD06FF00, 0xF3FB12ED, 0x12FBFF1C, 0x06EEF7FE);
	r4 = D(r4, s1_2_0, 0xF4FAE4C0, 0xFA08E5DE, 0xFC180B20, 0xFD1903E8);
	r5 = D(r5, s1_2_0, 0x0AF3EFDB, 0xF2050FF5, 0xECFFFB0A, 0xF910AD19);
	r6 = D(r6, s1_2_0, 0x02000704, 0xE8071308, 0xFB0F11FF, 0xF6EF06FC);
	r7 = D(r7, s1_2_0, 0x04F80906, 0xFD1C3213, 0x0E0C100D, 0xFD11E8F8);
	r0 = D(r0, s1_2_1, 0x0FF1F681, 0xE4F933C1, 0xE50E0503, 0x070304FF);
	r1 = D(r1, s1_2_1, 0xFAFC3812, 0xF2091A10, 0x2D03E2E9, 0xE9E114FC);
	r2 = D(r2, s1_2_1, 0xFB0CBA01, 0xE70DFBE6, 0xF009E8CA, 0x0FEC250D);
	r3 = D(r3, s1_2_1, 0x02092913, 0x0DF9F2D9, 0x15FDED06, 0x0418F903);
	r4 = D(r4, s1_2_1, 0xFF15E4E9, 0x0D23F7FD, 0xF0E6F3F5, 0xFDF212E6);
	r5 = D(r5, s1_2_1, 0x0AF7F9F5, 0x09F4F401, 0xFBEBFE0C, 0x00F39908);
	r6 = D(r6, s1_2_1, 0x0205F408, 0xE30505EF, 0xFBF8F2BB, 0x1508E207);
	r7 = D(r7, s1_2_1, 0x000CF202, 0xF3F41615, 0xE50B0EE4, 0xF1F4B9A7);
	r0 = D(r0, s1_2_2, 0xF504040B, 0xF516FB11, 0xFFF9FCFC, 0xFAFC03FB);
	r1 = D(r1, s1_2_2, 0xF4F8EA25, 0xF70700F7, 0xF5F1E5FA, 0x100400FB);
	r2 = D(r2, s1_2_2, 0xE80DF7FD, 0xFFF806FA, 0x0FEA09F8, 0x020101FA);
	r3 = D(r3, s1_2_2, 0xE3F9FF0F, 0xF6FBFBFB, 0x0A050B12, 0xFA10FCE2);
	r4 = D(r4, s1_2_2, 0x15F4E40D, 0x05F308F1, 0x1311E8FF, 0xFA1015E9);
	r5 = D(r5, s1_2_2, 0xF32DFFB6, 0x08FDFE02, 0xF705FE15, 0xEA01C914);
	r6 = D(r6, s1_2_2, 0xEF070715, 0xEE130A0F, 0xEEFD091A, 0x05FF01F2);
	r7 = D(r7, s1_2_2, 0xF2FE11E5, 0xFCFFF0E2, 0xE701102D, 0xF50516D9);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFF0AF8EC, 0x08E0F41C, 0xFF05FEFE, 0x0701F007);
	r1 = D(r1, s0_0_0, 0x19040303, 0x06FEF10B, 0x16EB0611, 0x09EA0900);
	r2 = D(r2, s0_0_0, 0x110F0900, 0xFBFF0C00, 0x0408FCF6, 0xFCFDF8EB);
	r3 = D(r3, s0_0_0, 0xFBFCEEDE, 0x030C09FE, 0xCD1204EE, 0x0D0302F6);
	r4 = D(r4, s0_0_0, 0xFB0C0501, 0xF93306D4, 0xFBFEFDF0, 0x011BE1D1);
	r5 = D(r5, s0_0_0, 0xEAF700E3, 0xF911FCE9, 0xEDEF08FA, 0x080A07F2);
	r6 = D(r6, s0_0_0, 0xFA07F90B, 0x1DE8FAF0, 0xFD09081C, 0xECFE0914);
	r7 = D(r7, s0_0_0, 0x0907FF0D, 0x0810E501, 0xFE10DBF4, 0x14142BF2);
	r0 = D(r0, s0_0_1, 0x05E7D1C8, 0xFDF4E0E1, 0xF5F00909, 0xFCFD0901);
	r1 = D(r1, s0_0_1, 0xE6FBDEE8, 0xDF0E09FA, 0xF3EF0E1A, 0x0CF70005);
	r2 = D(r2, s0_0_1, 0x0CF281E1, 0xFA21EE03, 0x01E8F8F6, 0x011DFC07);
	r3 = D(r3, s0_0_1, 0xF702B7F3, 0xF8F8210C, 0x1AF62E03, 0x140CDB02);
	r4 = D(r4, s0_0_1, 0x06DFF223, 0xD21637F1, 0x1BF6F6ED, 0xF727E1EA);
	r5 = D(r5, s0_0_1, 0xF5E7D003, 0xEFEC01F0, 0xC20BFEFA, 0xA9190103);
	r6 = D(r6, s0_0_1, 0xFA09FAF7, 0xF0F70EE5, 0xDC000400, 0x1BE5FC0F);
	r7 = D(r7, s0_0_1, 0x0404FD0B, 0x21F8AE02, 0x2029F40A, 0x1BF2FF1A);
	r0 = D(r0, s0_0_2, 0x04E818F6, 0x0A080FED, 0xFDFAC1F9, 0x0303FC03);
	r1 = D(r1, s0_0_2, 0xFE0BF0FE, 0x0D02050D, 0x050928FE, 0x2BE301F5);
	r2 = D(r2, s0_0_2, 0xE70BFC04, 0x24F90EF8, 0xD9EECEF8, 0x20D0DEF4);
	r3 = D(r3, s0_0_2, 0xEDF3CFFD, 0xFB0DFBF2, 0xCBF1DCF7, 0xFAE9C1F9);
	r4 = D(r4, s0_0_2, 0x06FDEA05, 0xF5FC33E3, 0xEB0899F7, 0x3CF6DBE8);
	r5 = D(r5, s0_0_2, 0xD0FCA6F4, 0xED07F7FC, 0xC40405FF, 0x0E0D0100);
	r6 = D(r6, s0_0_2, 0x22F7FC08, 0x0CFCE7FE, 0x26171CFF, 0x0EF0FEFF);
	r7 = D(r7, s0_0_2, 0x01F4FAF9, 0xEB06C2EE, 0x37E7CB04, 0xDA19E240);
	r0 = D(r0, s0_1_0, 0x060016E0, 0x01000B0B, 0xFD01EEFC, 0x0AFCF2E5);
	r1 = D(r1, s0_1_0, 0x04020AF6, 0x05070EFF, 0xF1E017DE, 0xFD102B00);
	r2 = D(r2, s0_1_0, 0x2302F7EE, 0xFBF80AFD, 0x10FE181B, 0x0EEE13FC);
	r3 = D(r3, s0_1_0, 0x0BEEFA13, 0x00EA1118, 0x03E6F805, 0xFD0AF10D);
	r4 = D(r4, s0_1_0, 0x02F21323, 0x002EF11C, 0xFE0C0009, 0xFAFA0817);
	r5 = D(r5, s0_1_0, 0x0DFFF718, 0xFFF8FC1C, 0x070C0502, 0xFF03FFF8);
	r6 = D(r6, s0_1_0, 0xFFFFFCF4, 0xE6F6FBFD, 0x05F012FA, 0xF80B0DFE);
	r7 = D(r7, s0_1_0, 0x10FAF3EE, 0xE21AFBF1, 0xE001F1E2, 0xED13E9F7);
	r0 = D(r0, s0_1_1, 0xF2F0FEBC, 0x0A1A0A02, 0x11051E22, 0x0E01F909);
	r1 = D(r1, s0_1_1, 0xE81C03FA, 0xF9F20DE3, 0x0F03ED05, 0xE7FF0116);
	r2 = D(r2, s0_1_1, 0x20F2BB08, 0x06FA0805, 0xE41301F6, 0x1B08E00A);
	r3 = D(r3, s0_1_1, 0xFE02160C, 0xFC12E60F, 0xF1FC190F, 0x31E5DD06);
	r4 = D(r4, s0_1_1, 0xF41A010B, 0xE3CFE411, 0x1CF1ED0C, 0xDFDEF300);
	r5 = D(r5, s0_1_1, 0x2A3515FC, 0x1A022201, 0x01F60E02, 0x0D09F8FC);
	r6 = D(r6, s0_1_1, 0xF9F80714, 0x25031D06, 0x140B1EE6, 0xF3050B0B);
	r7 = D(r7, s0_1_1, 0xEC13F700, 0xE0DBCF05, 0xFBF6BCEA, 0x33D60F18);
	r0 = D(r0, s0_1_2, 0xE7E320C2, 0xEDDD17E8, 0x0402E508, 0x08FAEE00);
	r1 = D(r1, s0_1_2, 0xF9030E0F, 0xFE001AFB, 0x0CFC1BEF, 0xEBF20E0B);
	r2 = D(r2, s0_1_2, 0xFD191308, 0xF207040F, 0xF4080920, 0xFBFB1DF1);
	r3 = D(r3, s0_1_2, 0xFDE6F4FE, 0x0CF708F8, 0x240EFF03, 0xE7E9DDFD);
	r4 = D(r4, s0_1_2, 0x0613C90D, 0x06D51AF9, 0xF11F98FF, 0x0CF8C3F4);
	r5 = D(r5, s0_1_2, 0x14E790FE, 0x0AFCE6F5, 0xFD0E000C, 0x03EEED03);
	r6 = D(r6, s0_1_2, 0x02FEE4F1, 0xF7FEE30C, 0xEA0027FD, 0x10F7FBFE);
	r7 = D(r7, s0_1_2, 0xFFFB0701, 0x0B0AC10B, 0xEADAFC03, 0xF3092AE3);
	r0 = D(r0, s0_2_0, 0xF80802EE, 0x0320F7FE, 0xF6010AF0, 0xF30503FA);
	r1 = D(r1, s0_2_0, 0x070AFBFB, 0x06EB0AF5, 0xEFFD04F0, 0xDF0FFAE9);
	r2 = D(r2, s0_2_0, 0x02F90501, 0x0EED0706, 0xF10306FD, 0x0A0C0A07);
	r3 = D(r3, s0_2_0, 0xFE0B0305, 0x06FDF502, 0x25DBFA09, 0x0C11090A);
	r4 = D(r4, s0_2_0, 0x0F1902DF, 0xF833FE12, 0x0B10E9EF, 0xF01FFE29);
	r5 = D(r5, s0_2_0, 0x051AFA08, 0x02120316, 0x16FA08FD, 0xD9080917);
	r6 = D(r6, s0_2_0, 0x000DFF07, 0x080E0B00, 0x1202FE04, 0x0506FDF2);
	r7 = D(r7, s0_2_0, 0xFE0505FB, 0x0017060F, 0xF210FE09, 0xF6F01FEB);
	r0 = D(r0, s0_2_1, 0xF7FEEE9A, 0x0FF720FE, 0xFD150419, 0xF106F11D);
	r1 = D(r1, s0_2_1, 0x07F613F3, 0x10F4FD0C, 0x17F515D7, 0x22F6DC0D);
	r2 = D(r2, s0_2_1, 0xE9FCEE00, 0x021F0102, 0xEF040314, 0xF511170A);
	r3 = D(r3, s0_2_1, 0x02020AF2, 0x00F4FBF8, 0xFC03DDF9, 0xEBF3080A);
	r4 = D(r4, s0_2_1, 0xFBFDF5E4, 0xF00A2912, 0x0DFF0808, 0xD0012A20);
	r5 = D(r5, s0_2_1, 0x1E28DA01, 0x0607FC08, 0x20F6FEF7, 0x33FFFDE1);
	r6 = D(r6, s0_2_1, 0xF0FB04FA, 0xC4080005, 0xED052304, 0x05FEF1F0);
	r7 = D(r7, s0_2_1, 0xD8F41406, 0x08E4EFF6, 0xB9061DFE, 0xF41EFE03);
	r0 = D(r0, s0_2_2, 0xFBE1FAE8, 0x03DD3DF3, 0xFA0511EA, 0xFC02FEFD);
	r1 = D(r1, s0_2_2, 0x11EC11FF, 0x040CF402, 0x00050BED, 0xFC080FFF);
	r2 = D(r2, s0_2_2, 0x00F4FF17, 0x09081A08, 0x3CF30FF0, 0x01020605);
	r3 = D(r3, s0_2_2, 0xF9FD120C, 0x04FEFBEE, 0x0702FCFF, 0x15FCF1F6);
	r4 = D(r4, s0_2_2, 0x1101E6F0, 0x30DFFDF5, 0xEB0ED9FE, 0x07080924);
	r5 = D(r5, s0_2_2, 0xE6F7F305, 0xFDFEFD05, 0x00FF0AF4, 0xFCFCD505);
	r6 = D(r6, s0_2_2, 0xFF0DEC0D, 0xE800F10F, 0x0AFA1407, 0xF505F70B);
	r7 = D(r7, s0_2_2, 0x0DFDF6EE, 0xF7FDC906, 0xDDE4241E, 0x32E80BF6);
	r0 = D(r0, s1_0_0, 0xFB22F608, 0xFE160DE1, 0x06FDF602, 0x01050305);
	r1 = D(r1, s1_0_0, 0xFC1AF2E6, 0x1607E202, 0x07FAF80A, 0x0CFDF904);
	r2 = D(r2, s1_0_0, 0xF7E20C0B, 0x01050B09, 0x08050CF3, 0xEF010CFA);
	r3 = D(r3, s1_0_0, 0xF905EAF3, 0x080501FE, 0xF9F721FF, 0x10F3C8FD);
	r4 = D(r4, s1_0_0, 0xFFF91B13, 0xF1C7E709, 0x0707FEE9, 0xFEF0EBFB);
	r5 = D(r5, s1_0_0, 0xF507EAD4, 0xFD0502F6, 0x02F3EA0B, 0x2D0D15FE);
	r6 = D(r6, s1_0_0, 0x07FEF8FE, 0x0106FEFA, 0xFDF0F6F1, 0x0E010913);
	r7 = D(r7, s1_0_0, 0x080C120A, 0x0FFE070B, 0x18EB0F11, 0x140CF411);
	r0 = D(r0, s1_0_1, 0xF61BFC08, 0xFAF508FE, 0x19FA080B, 0x02FF0813);
	r1 = D(r1, s1_0_1, 0x1CFF01F5, 0x1BE9FBF1, 0x04F508FB, 0xF1FC1893);
	r2 = D(r2, s1_0_1, 0x1721090C, 0xB606F7F7, 0xF0FD091F, 0xCF0515FF);
	r3 = D(r3, s1_0_1, 0x0B03CECD, 0xDC040125, 0xDE0D0EF3, 0x0E02FD08);
	r4 = D(r4, s1_0_1, 0xEFE41116, 0xF3E019E4, 0x20FF04C4, 0x01F3EE02);
	r5 = D(r5, s1_0_1, 0x0CF6FEF4, 0xFBF8050F, 0x44DFFED1, 0x09F7F82A);
	r6 = D(r6, s1_0_1, 0xED13090A, 0x170EF60C, 0xFBFAFD0D, 0xF90F0DEC);
	r7 = D(r7, s1_0_1, 0xD2120C15, 0xE307FD16, 0xD112F8F9, 0x0ED7F711);
	r0 = D(r0, s1_0_2, 0xF715F4F2, 0xFF10FD07, 0x07010811, 0xF40F0404);
	r1 = D(r1, s1_0_2, 0x080FF4FC, 0x0709F0DB, 0xFCEC0205, 0x0E08DDF3);
	r2 = D(r2, s1_0_2, 0x0FF6014F, 0xFB08F123, 0xFA18152B, 0xEB05FCF1);
	r3 = D(r3, s1_0_2, 0x2B02F923, 0x140F040C, 0x21ED1DFA, 0xF910FEE2);
	r4 = D(r4, s1_0_2, 0xF9F1120E, 0xEF2A0DB7, 0x111507B0, 0xFA0B0A23);
	r5 = D(r5, s1_0_2, 0x042C06F0, 0xF9FE09FD, 0x0EF60DFF, 0x0AF5F6F1);
	r6 = D(r6, s1_0_2, 0xF206F2F6, 0x00030DF7, 0xFE04F5EB, 0xF608030E);
	r7 = D(r7, s1_0_2, 0xEA02F5CF, 0xE7FE0A30, 0x05F0F2FE, 0xDAF12F1A);
	r0 = D(r0, s1_1_0, 0x0E1013F8, 0x00FCFCDB, 0x000ACC07, 0x20EDE709);
	r1 = D(r1, s1_1_0, 0x09061807, 0x00FA0810, 0xFDF3081E, 0xEDDFDA03);
	r2 = D(r2, s1_1_0, 0xFDF7F3F0, 0xE3010900, 0x1CFE00EE, 0x06FD01F6);
	r3 = D(r3, s1_1_0, 0xED01B801, 0xF3F6070A, 0xFD120402, 0xEDFFDB0A);
	r4 = D(r4, s1_1_0, 0x070E2610, 0xE7AB1326, 0x00EFF103, 0x200CE515);
	r5 = D(r5, s1_1_0, 0x11DA1922, 0xFA202601, 0xFB1BFD01, 0xFE10EC00);
	r6 = D(r6, s1_1_0, 0x0AFA00FB, 0x00F9FDF9, 0xFD1504EE, 0x0504ED06);
	r7 = D(r7, s1_1_0, 0x130C18FE, 0x2DF8F00A, 0x240AD70F, 0xF7FE1308);
	r0 = D(r0, s1_1_1, 0x1BF30808, 0xDDF3F6CB, 0xD4130915, 0xE4080C2C);
	r1 = D(r1, s1_1_1, 0x1DC3FB13, 0xF81B10FD, 0x215606D6, 0xF0062913);
	r2 = D(r2, s1_1_1, 0x121ADE11, 0x0E0B1002, 0xF6FA15BB, 0xF507E615);
	r3 = D(r3, s1_1_1, 0x12028102, 0x0FEB0110, 0xF0FCE306, 0x0A0AF8F8);
	r4 = D(r4, s1_1_1, 0xF4E11414, 0xFDC6F214, 0xE71AF4EC, 0xEC04E4F2);
	r5 = D(r5, s1_1_1, 0xF8FADFFA, 0xFDF80F24, 0xDAF10C01, 0x0A020212);
	r6 = D(r6, s1_1_1, 0x0E011008, 0x12F9E71E, 0x15F4E00A, 0xFDFE1100);
	r7 = D(r7, s1_1_1, 0x1BD60E14, 0x28FCE00C, 0x27DDFB14, 0xBD0007FC);
	r0 = D(r0, s1_1_2, 0xFF151EED, 0xFFF8E0F8, 0x02FEFBF4, 0x09FFFF0F);
	r1 = D(r1, s1_1_2, 0x09070328, 0xFEFE07EC, 0xF6EEF83B, 0xFD1FE60E);
	r2 = D(r2, s1_1_2, 0x18F4FE27, 0x10D30B02, 0x00D9ECF4, 0xFA21F701);
	r3 = D(r3, s1_1_2, 0x2108F817, 0x04FDF41A, 0x0EF0F4FE, 0x19FB09FE);
	r4 = D(r4, s1_1_2, 0xFEFBF8F5, 0xEDD8F6C5, 0x2009F3CB, 0xEAFEEFD2);
	r5 = D(r5, s1_1_2, 0xFC1C163D, 0x16EEF90A, 0xF10A0EFA, 0xEAFDDB22);
	r6 = D(r6, s1_1_2, 0x3E14F40F, 0xFDF61A17, 0xE215F312, 0x091003F6);
	r7 = D(r7, s1_1_2, 0x120605E9, 0x0B0ED622, 0xFA11FC09, 0xCFFB35F7);
	r0 = D(r0, s1_2_0, 0x0A11FD0F, 0x00FB06F2, 0xF7F4FE02, 0x02FBE305);
	r1 = D(r1, s1_2_0, 0xFC11F8FB, 0xEE02FE03, 0x09EFF901, 0x1005F520);
	r2 = D(r2, s1_2_0, 0xF51408FB, 0x08F8F606, 0x00F6FBFF, 0x150F08FF);
	r3 = D(r3, s1_2_0, 0x06F20104, 0x100CFE0A, 0xD5F502ED, 0xFBF60709);
	r4 = D(r4, s1_2_0, 0x19F80FFF, 0x17D5D710, 0x0BDD150C, 0x160A080D);
	r5 = D(r5, s1_2_0, 0xF6F20C09, 0xFEE40811, 0x00F60602, 0x0F0CDF0C);
	r6 = D(r6, s1_2_0, 0xFCF6FD03, 0xF50FFBFD, 0xFA0EFDFE, 0x02FD12F0);
	r7 = D(r7, s1_2_0, 0xFE0A0AFA, 0xECF1DE0F, 0xE107D0E2, 0x281514FB);
	r0 = D(r0, s1_2_1, 0x03F02220, 0x0F0D18F5, 0xF5FC0E02, 0x0FF8120C);
	r1 = D(r1, s1_2_1, 0xFB06EB0A, 0xF112E5F3, 0xF2EC0A12, 0xF70B1D04);
	r2 = D(r2, s1_2_1, 0xF9F5FE12, 0xF90BFA08, 0xE1E9CAF9, 0x19EA0D07);
	r3 = D(r3, s1_2_1, 0x0BF3FB04, 0x04FC0400, 0xF70AF0FB, 0x0502021E);
	r4 = D(r4, s1_2_1, 0x11F90B0B, 0x161600F3, 0xFC160803, 0xF6FA1216);
	r5 = D(r5, s1_2_1, 0x03DDFD0C, 0x08EF0B0D, 0xFD12F4FD, 0xFB0E02F2);
	r6 = D(r6, s1_2_1, 0xFF00FC07, 0x1A14EAF1, 0xE6F50009, 0x01F5F800);
	r7 = D(r7, s1_2_1, 0x09FAFD08, 0x04150CFF, 0x0EDA21D4, 0xFE13FEFF);
	r0 = D(r0, s1_2_2, 0x0A1C1302, 0x1DEA07F3, 0x01FD0EFD, 0x04F909FF);
	r1 = D(r1, s1_2_2, 0xF308F802, 0x03F80308, 0xECEEE10A, 0x0606050F);
	r2 = D(r2, s1_2_2, 0x0BF315FC, 0x0CF703FB, 0xFD27B5E3, 0xFE040EEB);
	r3 = D(r3, s1_2_2, 0x10000A04, 0x0206F7FC, 0x11FAF0FA, 0x1AF50E03);
	r4 = D(r4, s1_2_2, 0xF80CF601, 0x04011706, 0xEEFD0201, 0x01FBD908);
	r5 = D(r5, s1_2_2, 0x16F723C8, 0x0304F803, 0x02FEF005, 0x12FD0422);
	r6 = D(r6, s1_2_2, 0xF9FA0403, 0xF5060AE4, 0xFDEFE702, 0x010EF7FF);
	r7 = D(r7, s1_2_2, 0x000A02E5, 0x12F71813, 0x18060AE8, 0x091FF70E);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x15FAF608, 0x151018E5, 0x00FBF9F9, 0xFAFC0406);
	r1 = D(r1, s0_0_0, 0x01040F01, 0x08FC050D, 0xEF11EEFD, 0xFA070E0F);
	r2 = D(r2, s0_0_0, 0xD90D28FB, 0xFAF00509, 0xFD060402, 0x00F40F0A);
	r3 = D(r3, s0_0_0, 0xEBF602EA, 0x0B0108FD, 0x01FB0B0C, 0xEA021FFE);
	r4 = D(r4, s0_0_0, 0xF710F1FC, 0xEB0522CF, 0xFDFD08FC, 0x0CF604FE);
	r5 = D(r5, s0_0_0, 0xE9120B10, 0xF205FBF3, 0x0BFAE7F5, 0xB10FDCF9);
	r6 = D(r6, s0_0_0, 0xFEFA0DFD, 0x0EF20700, 0x1EFB1A01, 0xF526F606);
	r7 = D(r7, s0_0_0, 0x010300FC, 0x07100710, 0xEFF6EE06, 0xCD0F0DF2);
	r0 = D(r0, s0_0_1, 0x25F7C5FA, 0x19E2EC0E, 0x04FE0703, 0x050312FE);
	r1 = D(r1, s0_0_1, 0xF509BA02, 0x130CFD16, 0xEA01C4FF, 0x00FE0F28);
	r2 = D(r2, s0_0_1, 0x04EBE3D8, 0x02D01604, 0x040210FE, 0xFAFB17E2);
	r3 = D(r3, s0_0_1, 0x1BFC11DA, 0xFE01F805, 0xEAF8FF07, 0xD00719F3);
	r4 = D(r4, s0_0_1, 0xC8FBE4EA, 0x240AE4EC, 0xFB0A30F7, 0x29F51BFE);
	r5 = D(r5, s0_0_1, 0xDEFB24FA, 0xFCF6F6ED, 0x06F5E60F, 0xBCF4F402);
	r6 = D(r6, s0_0_1, 0x0F0217F9, 0x0701EE07, 0x02FECA16, 0xEE16ED0F);
	r7 = D(r7, s0_0_1, 0xF9021CFA, 0x200100E8, 0x16F2F917, 0xE0FC15EB);
	r0 = D(r0, s0_0_2, 0x0806FC10, 0x08F90D15, 0xFAFC0403, 0xFB06FDFE);
	r1 = D(r1, s0_0_2, 0x01FC1801, 0x0A0015F9, 0x020EECED, 0x07EF0F03);
	r2 = D(r2, s0_0_2, 0x06F6F889, 0x12E4BF02, 0xFFE70DFB, 0x0C052A00);
	r3 = D(r3, s0_0_2, 0xFCFB09D8, 0x00FFFA0A, 0xED2217FE, 0xF6F6E0D2);
	r4 = D(r4, s0_0_2, 0xD61901FA, 0x17F02500, 0xF2F61DFC, 0x0DEA04F5);
	r5 = D(r5, s0_0_2, 0xEBF22F06, 0xF808FAF8, 0x03FD0EDB, 0xEF0DEC13);
	r6 = D(r6, s0_0_2, 0xFA0200FD, 0x0E08FB14, 0x10FD1D03, 0xEF08141B);
	r7 = D(r7, s0_0_2, 0x0812E117, 0x05EE04D2, 0x06FEF320, 0xED0F8204);
	r0 = D(r0, s0_1_0, 0xEC1203FE, 0xF41035EE, 0x26FD010E, 0xFEFBF70C);
	r1 = D(r1, s0_1_0, 0xF80703FE, 0x08FEFA02, 0x1308211A, 0xF3EDFB0D);
	r2 = D(r2, s0_1_0, 0x14E0F6E9, 0x0CE31D0D, 0x01072908, 0xD50400FF);
	r3 = D(r3, s0_1_0, 0xF0F1FFFC, 0xFA0400F9, 0xE3EF27E2, 0x81EF17D6);
	r4 = D(r4, s0_1_0, 0xE819FA07, 0xF1132D01, 0xB30B19F6, 0x12E3FD03);
	r5 = D(r5, s0_1_0, 0xE2FB1DDD, 0xE9FEE3EF, 0x01FCFFF4, 0xBD022210);
	r6 = D(r6, s0_1_0, 0xF8EC0101, 0x1BF7EE0F, 0xFFE80DF5, 0xDA05EC0A);
	r7 = D(r7, s0_1_0, 0xFF0B0108, 0x020A06FD, 0x1F0DE50E, 0xF1061300);
	r0 = D(r0, s0_1_1, 0xF705F815, 0x03F5E0F7, 0x0F05EAD6, 0x050B0318);
	r1 = D(r1, s0_1_1, 0x1C240E04, 0x0D0BE20D, 0x09EB0E21, 0x0C09EED2);
	r2 = D(r2, s0_1_1, 0x0FFEFDB5, 0x0E90F713, 0xFBF734FE, 0xF3ECD9EB);
	r3 = D(r3, s0_1_1, 0x08AC00D2, 0xF0F7F931, 0x10E90D0B, 0xB5F890D6);
	r4 = D(r4, s0_1_1, 0xDE281313, 0x1201D413, 0xFBFA09C8, 0x0AACC40F);
	r5 = D(r5, s0_1_1, 0xDEFE09BD, 0xF3F00BE4, 0x0C24E8DC, 0x86FED61A);
	r6 = D(r6, s0_1_1, 0xFEF90B09, 0x1BFE311C, 0xF6E81512, 0xFC0DE90D);
	r7 = D(r7, s0_1_1, 0x031201FC, 0x08F7F9FA, 0xD408192C, 0xE1F2E90E);
	r0 = D(r0, s0_1_2, 0xF3F90FE8, 0xE70BF4E8, 0xFBEDFDF1, 0xFD09FD0B);
	r1 = D(r1, s0_1_2, 0x0307F619, 0x06F42216, 0x01FDF4C6, 0x05FAD91A);
	r2 = D(r2, s0_1_2, 0xFC0CF6F5, 0x09FF101D, 0x0AFC05AA, 0x05CE01D5);
	r3 = D(r3, s0_1_2, 0x04E5FCE6, 0xFD0AF1FB, 0x0C0E090D, 0xE8E6E1C3);
	r4 = D(r4, s0_1_2, 0xE61BF9F2, 0x07F72610, 0xF8F7EDEC, 0xF2E7B687);
	r5 = D(r5, s0_1_2, 0xF70BEACA, 0x010FECE5, 0x080F0811, 0xD9D89CD9);
	r6 = D(r6, s0_1_2, 0xFADFEB05, 0xFBF4E509, 0x0AEBF40B, 0xEF11EC01);
	r7 = D(r7, s0_1_2, 0x040FECFF, 0xDFE0F2D8, 0x00F0EC13, 0xD8F80EF0);
	r0 = D(r0, s0_2_0, 0x0AF70202, 0x07C30D0C, 0xD105FF06, 0xF100FCF9);
	r1 = D(r1, s0_2_0, 0xF10F0605, 0x02050809, 0xF6050609, 0xF0FEF905);
	r2 = D(r2, s0_2_0, 0xEB07FAF8, 0xF804F2FB, 0xECEEFC05, 0xF916E204);
	r3 = D(r3, s0_2_0, 0xFAF3EFF6, 0xF70FE5FD, 0xEAC4AB13, 0xEAF205DD);
	r4 = D(r4, s0_2_0, 0xDA210601, 0x15D413F9, 0xDE1308FA, 0xFDF7F909);
	r5 = D(r5, s0_2_0, 0xEEF8D0F5, 0xFC1AEFF0, 0x02F7FA05, 0xFDF50507);
	r6 = D(r6, s0_2_0, 0xFAF106FF, 0x00F9E9F8, 0x06FAEFFD, 0xFE02E9F6);
	r7 = D(r7, s0_2_0, 0xF40406FE, 0x0AECF3FB, 0x0ADA0DF2, 0xC227F821);
	r0 = D(r0, s0_2_1, 0x13E9020E, 0xFFE8DB12, 0x08DE0F0E, 0x020DF8F8);
	r1 = D(r1, s0_2_1, 0xE222F1EE, 0xFCE0E5FA, 0xF8131005, 0xE21A00FE);
	r2 = D(r2, s0_2_1, 0xFB0F0D06, 0x03FADFFA, 0xC806B2E2, 0x13EE1615);
	r3 = D(r3, s0_2_1, 0xFC05F1FE, 0x0316FA02, 0x09D31BFE, 0x0BEA17F2);
	r4 = D(r4, s0_2_1, 0xF33CFD0B, 0xF1F80932, 0xFBF808D3, 0x0BF3080C);
	r5 = D(r5, s0_2_1, 0xEA12F4DF, 0x010001F7, 0x02E00607, 0xD61ED6F2);
	r6 = D(r6, s0_2_1, 0xF4FF0001, 0x01F60702, 0xEED806EF, 0x0DE62316);
	r7 = D(r7, s0_2_1, 0x0711FD04, 0xF2D8EAD8, 0x16E5F30A, 0xC5111209);
	r0 = D(r0, s0_2_2, 0xF909E91D, 0xE7F5052A, 0x0ADD0502, 0xFD000102);
	r1 = D(r1, s0_2_2, 0xF60603ED, 0x10F50D1C, 0xFDF9F7F4, 0xF80F0F07);
	r2 = D(r2, s0_2_2, 0x070BE7FB, 0x0202F111, 0x10B81494, 0x0BF91B37);
	r3 = D(r3, s0_2_2, 0xFEE6F200, 0x00FEFCFC, 0xFC01F910, 0x04DFEF02);
	r4 = D(r4, s0_2_2, 0xFA2B13EC, 0x020B0F09, 0xFBF709FB, 0x21AE0EF2);
	r5 = D(r5, s0_2_2, 0xE9051BF1, 0xFAF8FDF1, 0x0505FEE9, 0xF405E8D2);
	r6 = D(r6, s0_2_2, 0x04FBEDF5, 0xF20FF6F2, 0xFA040E10, 0xE81CE50C);
	r7 = D(r7, s0_2_2, 0xFB16EC02, 0x0DF5FCE0, 0x1208F415, 0xF243FD05);
	r0 = D(r0, s1_0_0, 0xFAF01200, 0xF913D210, 0x4113FF1D, 0xEE02F708);
	r1 = D(r1, s1_0_0, 0x02090B0B, 0xFAF7FC06, 0x1008FB23, 0x1CF70417);
	r2 = D(r2, s1_0_0, 0x14F4061C, 0xEEF915F9, 0x13052103, 0xF3040EF1);
	r3 = D(r3, s1_0_0, 0xF2E7F2EF, 0x080205F0, 0xE2051400, 0xEFF8FDFE);
	r4 = D(r4, s1_0_0, 0x081101E9, 0xD728F5B3, 0xFF0FFCF8, 0xECF1210F);
	r5 = D(r5, s1_0_0, 0xD3F6FCF6, 0xF70201ED, 0x0902FE08, 0x0604F91A);
	r6 = D(r6, s1_0_0, 0xF6F9F401, 0x2707F90B, 0x11F8FBF7, 0x2909F017);
	r7 = D(r7, s1_0_0, 0xF70B0403, 0x1F060114, 0x0FE4F80E, 0xF01202FC);
	r0 = D(r0, s1_0_1, 0xDF031812, 0x160134EB, 0x44FAFD11, 0xF9F401FA);
	r1 = D(r1, s1_0_1, 0xFA0B01F5, 0xE9F9FF06, 0xDEF8EEFE, 0xFAF723E6);
	r2 = D(r2, s1_0_1, 0x81F62EFD, 0xE6FDE9E6, 0xF0FBF50E, 0xF3FDE8F7);
	r3 = D(r3, s1_0_1, 0xE50013EE, 0xFF0F0605, 0xECF5D221, 0x0DFBEDEA);
	r4 = D(r4, s1_0_1, 0x010FF114, 0x810C2FE0, 0xFBF525F9, 0xF0E30804);
	r5 = D(r5, s1_0_1, 0x05061402, 0xFA0C04FA, 0x16002407, 0x13EAFEDF);
	r6 = D(r6, s1_0_1, 0x06FDEEFA, 0x0FFB0312, 0xF9F9F00C, 0x28EDF91D);
	r7 = D(r7, s1_0_1, 0x29ECD8FF, 0xF9FF1907, 0x30DC0F0A, 0xF316F1F0);
	r0 = D(r0, s1_0_2, 0xFA0A1911, 0x20EC111B, 0x1EF50206, 0x06000303);
	r1 = D(r1, s1_0_2, 0x16FDF5F6, 0x0307FCFB, 0xF9F4DAFA, 0xFEF4FF0D);
	r2 = D(r2, s1_0_2, 0x00040706, 0xE10DF902, 0xF51004FF, 0xF6FCF3FD);
	r3 = D(r3, s1_0_2, 0x16F51801, 0x02F9040D, 0x14062108, 0x10FE06F4);
	r4 = D(r4, s1_0_2, 0xE5EBE0EA, 0x5EFA0FF9, 0xDEF703EF, 0x0A05291C);
	r5 = D(r5, s1_0_2, 0x05F41612, 0xEA050102, 0xFF0DFD0E, 0xDEE102F6);
	r6 = D(r6, s1_0_2, 0x0BFF0DF4, 0x10032EFF, 0x0FF71ADD, 0x0AF90206);
	r7 = D(r7, s1_0_2, 0xF20102F9, 0x040E0A09, 0xDEFEFEE6, 0x101AEF21);
	r0 = D(r0, s1_1_0, 0xEE0413E9, 0x0414D601, 0x47F00915, 0x04EC20F4);
	r1 = D(r1, s1_1_0, 0xFA060CF7, 0xFA0D0909, 0xFCFF11C1, 0xFAF20211);
	r2 = D(r2, s1_1_0, 0xFA04DBE3, 0x05EFFA18, 0xF0E5E519, 0xF8F1FE0A);
	r3 = D(r3, s1_1_0, 0xE823E804, 0x0F06E7FF, 0xFB06D3F7, 0xFD26E70F);
	r4 = D(r4, s1_1_0, 0xE500F819, 0x2D1610DC, 0xFC0705FA, 0x01200AD3);
	r5 = D(r5, s1_1_0, 0xFDF90025, 0xFF20DD07, 0xFC1617FF, 0xF5F91DEA);
	r6 = D(r6, s1_1_0, 0xEF0EF4FB, 0x0E01EC02, 0x0302F80E, 0x1603F816);
	r7 = D(r7, s1_1_0, 0xE8FE0F0B, 0xFFF20CFC, 0xF5EDFD06, 0x0F0F2BE8);
	r0 = D(r0, s1_1_1, 0x81FA16F6, 0xFF102009, 0x5E061C24, 0x0CF6F604);
	r1 = D(r1, s1_1_1, 0xE3F121F5, 0xF5F40E00, 0x341C064C, 0x1BDA3A09);
	r2 = D(r2, s1_1_1, 0xCE5104E7, 0xCFFDDE00, 0xFC00F8EE, 0xF416D505);
	r3 = D(r3, s1_1_1, 0x12DF28F5, 0xF2181BFC, 0xEFF50B22, 0x0E1D0512);
	r4 = D(r4, s1_1_1, 0xDEF01223, 0xDBF4EEFD, 0x3103EDFE, 0x1027CCE6);
	r5 = D(r5, s1_1_1, 0xE215F3FC, 0x171B0805, 0x03FAEDEC, 0x15F515F8);
	r6 = D(r6, s1_1_1, 0x1CFC15EE, 0x0B040603, 0xDC0327F9, 0x34E12F08);
	r7 = D(r7, s1_1_1, 0xE31303FB, 0xEDE401EC, 0xFAE31DCA, 0x21110C00);
	r0 = D(r0, s1_1_2, 0x15F2080A, 0x0EEFF3F8, 0x1FF5171D, 0xFDFF0EF8);
	r1 = D(r1, s1_1_2, 0x05F9DEFA, 0x10FC0E06, 0xEEDDE806, 0xF9E603FE);
	r2 = D(r2, s1_1_2, 0x220B0412, 0x320ACCFC, 0xEC0D22E7, 0x09FCDA00);
	r3 = D(r3, s1_1_2, 0x0DF11F00, 0x08030CFF, 0x1A030E03, 0xF0F921EB);
	r4 = D(r4, s1_1_2, 0xF2FDF0EF, 0x1F1712EE, 0xF5FE0112, 0x04E42C0D);
	r5 = D(r5, s1_1_2, 0x46EBF6FA, 0xD710F8F8, 0x07F907F3, 0xE41306F5);
	r6 = D(r6, s1_1_2, 0x091F1207, 0x0FFF0DF0, 0x18F2FF0D, 0x0AEBFE04);
	r7 = D(r7, s1_1_2, 0xED0DFAF7, 0xD8D61EED, 0x12F21213, 0x0507F5EE);
	r0 = D(r0, s1_2_0, 0x20F675E5, 0x05F9FB0B, 0x2C0DD814, 0x0D02F1FC);
	r1 = D(r1, s1_2_0, 0x12F81B0D, 0xFCEF0BFA, 0x10F9CCEC, 0x29F20C11);
	r2 = D(r2, s1_2_0, 0x310C0B03, 0x0AFC1E03, 0xF31C000B, 0x0FF7F2F2);
	r3 = D(r3, s1_2_0, 0xF4FA1CFE, 0xFF010109, 0x0F1E81F8, 0xF82B9E04);
	r4 = D(r4, s1_2_0, 0x0E0C120B, 0xF2147C37, 0xEA11F105, 0x0BF41B0E);
	r5 = D(r5, s1_2_0, 0xDD1447F0, 0x0105D90E, 0x11F01F07, 0xEBFAF604);
	r6 = D(r6, s1_2_0, 0x00F91203, 0x0B01DEF1, 0x10FFED08, 0xF9F1200A);
	r7 = D(r7, s1_2_0, 0x0806E401, 0x0108C419, 0x180E9525, 0x1ADA081A);
	r0 = D(r0, s1_2_1, 0x100711C8, 0xFDFEFAFE, 0x1E112F0D, 0x0DEC1A04);
	r1 = D(r1, s1_2_1, 0xF1F51203, 0x041207FE, 0x15FFFDFE, 0x2412FB02);
	r2 = D(r2, s1_2_1, 0xFB13EE01, 0xD30B2705, 0xF327ADF3, 0x1309DB19);
	r3 = D(r3, s1_2_1, 0x08E01813, 0xF50D04FD, 0xE0050CEE, 0xF8F4C618);
	r4 = D(r4, s1_2_1, 0x2B04DF01, 0x4D04041B, 0x11FFE2ED, 0x03CE20F7);
	r5 = D(r5, s1_2_1, 0x191734F6, 0x14080908, 0xFDFE0804, 0xFEF09626);
	r6 = D(r6, s1_2_1, 0x0FF5EBFE, 0x28F93AFF, 0xFB180CF9, 0x08FB03FC);
	r7 = D(r7, s1_2_1, 0x0D0A2405, 0x0AF8DFF6, 0x27D0FFFE, 0xDCE4E0F2);
	r0 = D(r0, s1_2_2, 0x30F02700, 0x1818D5F9, 0x2C00020C, 0xFEFA2505);
	r1 = D(r1, s1_2_2, 0xF7FDED1E, 0xF6E711EF, 0xD1E90FF2, 0x15F817F8);
	r2 = D(r2, s1_2_2, 0x13F01A00, 0x0BF9020D, 0x00F0261B, 0x02F1FBF2);
	r3 = D(r3, s1_2_2, 0x0BDB0515, 0xFAFA0E00, 0x0DFF37F8, 0x1A0A0901);
	r4 = D(r4, s1_2_2, 0xEB1EA021, 0xFDFE5212, 0x04FFD608, 0xE6E81C02);
	r5 = D(r5, s1_2_2, 0xBB301A01, 0xFE0B1416, 0xFE000610, 0x08EF1B09);
	r6 = D(r6, s1_2_2, 0x08F913F7, 0xED0437E5, 0x0EF91509, 0xE4EFFAF3);
	r7 = D(r7, s1_2_2, 0xFF0A0DF9, 0xFA09F10C, 0x0CE51EEC, 0x03F8CFF7);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-9.327e-02, 2.401e-02, -2.588e-01, -2.255e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-1.248e-02, 1.628e-02, -5.771e-02, -7.264e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(2.254e-03, -2.393e-03, 5.602e-02, -7.147e-03);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(1.428e-02, -1.940e-02, -1.758e-02, 5.994e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(9.641e-03, -7.094e-04, 4.529e-02, 1.219e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-3.049e-03, 2.608e-02, -4.768e-02, 2.519e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(3.448e-02, -1.226e-02, -1.553e-02, -4.700e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-1.205e-02, 4.385e-02, -5.630e-03, -2.489e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-4x32-BILINEAR-MPV-NVL-conv3
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x05FAE3F4, 0xF9FEFE0E, 0x0A0A06F5, 0xFBD90204);
	r1 = D(r1, s0_0_0, 0x0312FD0B, 0x041AE202, 0x031702FB, 0xF90612FF);
	r2 = D(r2, s0_0_0, 0x01FFF804, 0x0524FA0D, 0x0704FC0E, 0xFE2C0E21);
	r3 = D(r3, s0_0_0, 0x0111E509, 0xFF1E02F2, 0x0602FDFB, 0x14FFFBE1);
	r4 = D(r4, s0_0_0, 0x04EA0906, 0x0801DCFA, 0x00FAFFFA, 0xFB23EF01);
	r5 = D(r5, s0_0_0, 0xFAF210FA, 0xF5F4F3F5, 0x07FBE8F6, 0xFCFA0D03);
	r6 = D(r6, s0_0_0, 0xEFF14D10, 0xFA0CF601, 0x0ADB0523, 0x031BDEF6);
	r7 = D(r7, s0_0_0, 0x08FFF12D, 0xFBFFF217, 0x00F01706, 0x070C01F6);
	r0 = D(r0, s0_0_1, 0x16400206, 0x0601FF05, 0xFA0DEBFD, 0x19D41109);
	r1 = D(r1, s0_0_1, 0x0827F50D, 0xE123F310, 0xFA0D210A, 0x160502F7);
	r2 = D(r2, s0_0_1, 0x03F6FFFF, 0xF8361702, 0xFB0EF81B, 0x014117F3);
	r3 = D(r3, s0_0_1, 0xFD1110F5, 0xDC1DE603, 0xFBF4F311, 0xFA20DB1F);
	r4 = D(r4, s0_0_1, 0xFAEDFA0B, 0x12F4E317, 0x02050604, 0xEDF50307);
	r5 = D(r5, s0_0_1, 0x0113FFF8, 0x0FD802F8, 0xF708FBFE, 0x14090301);
	r6 = D(r6, s0_0_1, 0x2A220BF3, 0x0717DD0B, 0x0805FEB5, 0xF61413FE);
	r7 = D(r7, s0_0_1, 0x0A19EB01, 0xF7000115, 0xED2D12DC, 0x0037E2F9);
	r0 = D(r0, s0_0_2, 0xFD280E14, 0xF3FEF905, 0xE70A160A, 0x08FC1104);
	r1 = D(r1, s0_0_2, 0x00FCE500, 0x0D0B0AE7, 0xF80DF0FD, 0x0114FDF4);
	r2 = D(r2, s0_0_2, 0x0BFAFC05, 0x0921030B, 0x01FCFF12, 0xEC44FFEC);
	r3 = D(r3, s0_0_2, 0x07EFFB00, 0xE615E0F8, 0xE2E0FA01, 0xF80B1708);
	r4 = D(r4, s0_0_2, 0xFF0BF900, 0xFB15FEF1, 0xFAFDFD02, 0x06C609F4);
	r5 = D(r5, s0_0_2, 0x05EBF7F8, 0x1D0B1717, 0xF8E3E901, 0x101801FC);
	r6 = D(r6, s0_0_2, 0x0EFFFC16, 0x0D23FE07, 0x11F704F0, 0xEA20E20A);
	r7 = D(r7, s0_0_2, 0xEDEF0808, 0x0201FA11, 0xFDF90E00, 0x1517EF09);
	r0 = D(r0, s0_1_0, 0xF61EF719, 0x00CEFBF5, 0xFB1D05C8, 0xFCFBF704);
	r1 = D(r1, s0_1_0, 0x05DE0006, 0x0407F3F5, 0x08FBF80E, 0x0020E5FC);
	r2 = D(r2, s0_1_0, 0xFF04EF0F, 0xFC26FB08, 0xFBF301F7, 0xF63209EC);
	r3 = D(r3, s0_1_0, 0x030C0309, 0x0510DBFE, 0x070F0104, 0x002D0DE6);
	r4 = D(r4, s0_1_0, 0x0C15FA12, 0x0A30F81E, 0xFD210205, 0x01F30CF1);
	r5 = D(r5, s0_1_0, 0xFCE7FF09, 0x040101FF, 0xF909EB01, 0xFC0901FD);
	r6 = D(r6, s0_1_0, 0x06F01C26, 0x0708F4FF, 0xFEFF17C1, 0xFF1606FE);
	r7 = D(r7, s0_1_0, 0x031CFFFE, 0x0803EF3D, 0x02C81D02, 0x041A0212);
	r0 = D(r0, s0_1_1, 0xEDD6EEBD, 0x1F03ECED, 0x0F050BF9, 0xD91E16FA);
	r1 = D(r1, s0_1_1, 0x22E8E2E9, 0xD502FC2A, 0xF581ECC9, 0xF1AFEE12);
	r2 = D(r2, s0_1_1, 0xF5D609DE, 0x047FF8D3, 0xE9C71633, 0x005E0CB2);
	r3 = D(r3, s0_1_1, 0x0A231314, 0xE9080431, 0x10170400, 0xEAE8B7BE);
	r4 = D(r4, s0_1_1, 0xD6B200F3, 0x121BFF13, 0x180512F9, 0x13FD01FF);
	r5 = D(r5, s0_1_1, 0x22EB1803, 0x1D2DF51F, 0xE5D4F011, 0x02C80506);
	r6 = D(r6, s0_1_1, 0x0DA7E0C2, 0xC79AF63F, 0xF1F81A26, 0xFF1F1BFE);
	r7 = D(r7, s0_1_1, 0x07CB10E1, 0xEECEFA1F, 0x28171BD1, 0xF2B8E805);
	r0 = D(r0, s0_1_2, 0xE481F3E4, 0x030B0110, 0xF7D718FD, 0x0FFA0AFC);
	r1 = D(r1, s0_1_2, 0x190BFC08, 0x2D1F0DE2, 0x1211FFEF, 0x15F304FE);
	r2 = D(r2, s0_1_2, 0x0D08F906, 0xD44AECE3, 0x0FFBFC13, 0xE5290BCE);
	r3 = D(r3, s0_1_2, 0x090B01FB, 0x12349D05, 0xB4E1EDF1, 0xE9810FFF);
	r4 = D(r4, s0_1_2, 0xFB03F517, 0xF3F403FD, 0xF6F40006, 0x1DF6F6E7);
	r5 = D(r5, s0_1_2, 0x090A0204, 0xE10A160E, 0xFEDAF903, 0x4014FEF3);
	r6 = D(r6, s0_1_2, 0xF61801E0, 0x17230F12, 0x28DB0A30, 0xFADDF3EB);
	r7 = D(r7, s0_1_2, 0xF2F0FAFB, 0xFB09FF10, 0xDBF411E2, 0x0AFCFAFC);
	r0 = D(r0, s0_2_0, 0xF7F605ED, 0xFEFBE2FF, 0x02FA0A10, 0x120105F2);
	r1 = D(r1, s0_2_0, 0x0409F1FF, 0x01E0E60D, 0x03F8FE06, 0x0104E60A);
	r2 = D(r2, s0_2_0, 0xFAF80F03, 0x0320071A, 0xFEFD0916, 0xFE040A0C);
	r3 = D(r3, s0_2_0, 0x00E6E9F0, 0x040414F8, 0xFF050A00, 0x07C7FD0B);
	r4 = D(r4, s0_2_0, 0x0511ED14, 0x031A2D02, 0xF7060302, 0xF9FB0AF5);
	r5 = D(r5, s0_2_0, 0xFD02EF00, 0x0C05F5F4, 0x02070102, 0x0506F8FD);
	r6 = D(r6, s0_2_0, 0x0C210009, 0xFBFAEBFF, 0xFBF7100C, 0x04020C01);
	r7 = D(r7, s0_2_0, 0xFDF9020B, 0xFFEF0604, 0xFD0D0B05, 0x0721F901);
	r0 = D(r0, s0_2_1, 0x081C221F, 0xFDF8FC02, 0xF9DD120E, 0x151A14FC);
	r1 = D(r1, s0_2_1, 0x06F1EA03, 0xFE09F4F3, 0x05FBF7EF, 0xF816FE02);
	r2 = D(r2, s0_2_1, 0x2A00EF0F, 0xFC310C0F, 0x05071419, 0xFF130409);
	r3 = D(r3, s0_2_1, 0x03EEF7F9, 0xF609F3EF, 0xFBFFF400, 0x04FAFF29);
	r4 = D(r4, s0_2_1, 0x010C1010, 0x05F90B00, 0xFE0209F9, 0x02F7140A);
	r5 = D(r5, s0_2_1, 0xE8F7F607, 0xF6F9ED04, 0x0AEDF816, 0x07FF07F7);
	r6 = D(r6, s0_2_1, 0x04D70408, 0xE202E6F3, 0xF91710EF, 0xFF0AF9F6);
	r7 = D(r7, s0_2_1, 0xF8E80A02, 0xFE170204, 0xFFF6010C, 0x1625EB08);
	r0 = D(r0, s0_2_2, 0x0AEAFB13, 0xFC0EFB06, 0xFC050315, 0xFD0B0004);
	r1 = D(r1, s0_2_2, 0xFDEFF803, 0x0E1817D8, 0x04000717, 0xF6FCEF06);
	r2 = D(r2, s0_2_2, 0x00F8FB08, 0x0212FC07, 0x081A1422, 0xFF13020F);
	r3 = D(r3, s0_2_2, 0x060702F9, 0xFAFEECFD, 0x1AEBF5F6, 0xFE180BF7);
	r4 = D(r4, s0_2_2, 0xEEE9EEE9, 0x1407FCF3, 0x00060100, 0xFE0AFAFD);
	r5 = D(r5, s0_2_2, 0xFFF7F30E, 0xFEEC04F6, 0x081AE511, 0x120C0005);
	r6 = D(r6, s0_2_2, 0xF51320F2, 0x06110902, 0xF8FF060D, 0xF8F32416);
	r7 = D(r7, s0_2_2, 0xFB02EE06, 0x03010907, 0xFBDD0007, 0x070AF5F3);
	r0 = D(r0, s1_0_0, 0x1804F6E7, 0x03F8090B, 0x13ECFCF9, 0xF6FA08F9);
	r1 = D(r1, s1_0_0, 0xFAFA0902, 0x0EF2F611, 0x11150E18, 0x0006FEF3);
	r2 = D(r2, s1_0_0, 0x0B0A03FD, 0x08F2FC07, 0x05F7FC04, 0x12EDFC00);
	r3 = D(r3, s1_0_0, 0x0D0E0217, 0x03F8F0F4, 0x05FC01F8, 0x1AF2E8F8);
	r4 = D(r4, s1_0_0, 0x020803FD, 0xF7FF03EB, 0xFF01FEFA, 0x12FFF7F9);
	r5 = D(r5, s1_0_0, 0xFD020AFC, 0xFCF806E9, 0xFCFD030F, 0x05FF09FD);
	r6 = D(r6, s1_0_0, 0x060032DA, 0xFBF00C09, 0x040910EB, 0x1CFAF31B);
	r7 = D(r7, s1_0_0, 0x0CEC0105, 0xFCF70313, 0x0A07F803, 0xF9060B10);
	r0 = D(r0, s1_0_1, 0x051EEC05, 0x07F3F0FA, 0x09170FFF, 0x06FD0001);
	r1 = D(r1, s1_0_1, 0x03F60808, 0xF30BF5FE, 0x130EF80B, 0x00F0E20C);
	r2 = D(r2, s1_0_1, 0x0608FEFA, 0x09EC0CF4, 0x0AF8FC0B, 0x2481F61B);
	r3 = D(r3, s1_0_1, 0x01EDFB01, 0x20F3EC13, 0xF2FBFAF0, 0x05040117);
	r4 = D(r4, s1_0_1, 0xFB0B0E03, 0xF80CF315, 0x0009F600, 0x040CEEFD);
	r5 = D(r5, s1_0_1, 0xFC0B030D, 0xF2F823EC, 0x0FFEE9FE, 0x030B0007);
	r6 = D(r6, s1_0_1, 0xFADEDCFB, 0xE1F800F2, 0x03E7F902, 0xFFE8040F);
	r7 = D(r7, s1_0_1, 0x02F90503, 0x010D0E06, 0x16E606FB, 0xFEF908F6);
	r0 = D(r0, s1_0_2, 0x420803FE, 0x02FBF7F7, 0x031D0D11, 0xFCF3FAFE);
	r1 = D(r1, s1_0_2, 0xEEF3FAF6, 0x14F5F6F0, 0x04EC0916, 0xF9FAFCF3);
	r2 = D(r2, s1_0_2, 0x0C0305FF, 0x12E7F8FC, 0x0605FBFA, 0x11C1000A);
	r3 = D(r3, s1_0_2, 0x0D080B08, 0xE42104E3, 0xF7FAFBE8, 0xE2F9180C);
	r4 = D(r4, s1_0_2, 0x0502FA06, 0xECFD0015, 0x0D030A03, 0x0CF10000);
	r5 = D(r5, s1_0_2, 0x06F707FF, 0x0701F8FF, 0x030DF0FA, 0xFA06FAFB);
	r6 = D(r6, s1_0_2, 0xF602F3E3, 0xFAF5F9F7, 0xFA0006F5, 0x28001802);
	r7 = D(r7, s1_0_2, 0x1AF7040B, 0x0A06F5FC, 0x1FFB04FB, 0x0BFDFA02);
	r0 = D(r0, s1_1_0, 0x15DB06FD, 0xF802FFE3, 0x08FAEFEE, 0xF303E1E1);
	r1 = D(r1, s1_1_0, 0xF8FF0DF2, 0x19040615, 0x16F8ED07, 0xEF050A02);
	r2 = D(r2, s1_1_0, 0xF1F4F218, 0x11D6FC05, 0x070FF20B, 0xFF0900FE);
	r3 = D(r3, s1_1_0, 0xFFF4F4FF, 0x1920EDE0, 0xF7F7EAFF, 0x0C0AE626);
	r4 = D(r4, s1_1_0, 0xF402F216, 0xFCF8FA01, 0x03F606FF, 0x0BF610FC);
	r5 = D(r5, s1_1_0, 0xEEFF04EF, 0xE5010DCE, 0xFC08F811, 0xF70009F3);
	r6 = D(r6, s1_1_0, 0x0D030CFC, 0xFEFE0104, 0x00EAF7F4, 0x13FA00F3);
	r7 = D(r7, s1_1_0, 0x08F1FD1C, 0x0E01FA09, 0x00FBF502, 0xF7FCF91A);
	r0 = D(r0, s1_1_1, 0xD6C21A14, 0xF00ADCF8, 0xF201D8FE, 0xEB131EE6);
	r1 = D(r1, s1_1_1, 0xF8F2E505, 0x1BF5FE26, 0xEA02D009, 0xE5E9FE0F);
	r2 = D(r2, s1_1_1, 0x07E51C1B, 0x18FA02F8, 0x0204E311, 0x19F1F1EC);
	r3 = D(r3, s1_1_1, 0xFDF001F5, 0x0EE4FE14, 0xEDF214E6, 0xD2EEBFF6);
	r4 = D(r4, s1_1_1, 0xF0EE060E, 0x1CCCEBF5, 0xF9FD0619, 0x11E41721);
	r5 = D(r5, s1_1_1, 0x19CE0007, 0xFB0A05C0, 0xF220D4F0, 0xF900FB1D);
	r6 = D(r6, s1_1_1, 0x06C7B711, 0xD430F4E9, 0xE511F8D4, 0x1DE0FC0D);
	r7 = D(r7, s1_1_1, 0x09CAF707, 0x03D9F704, 0x24C001E9, 0xF209F1F2);
	r0 = D(r0, s1_1_2, 0x3CFF00F9, 0x00080102, 0x0EFAFB18, 0xF3FF0206);
	r1 = D(r1, s1_1_2, 0xEA0DF8E6, 0x02EFFAF4, 0x06C1E8F1, 0xFDD9E3E8);
	r2 = D(r2, s1_1_2, 0xFAFCFD01, 0xFB0BFC08, 0xF906EF15, 0xECCC0110);
	r3 = D(r3, s1_1_2, 0xFFFB0307, 0xDCFEF2F8, 0x05250B03, 0x12DECD13);
	r4 = D(r4, s1_1_2, 0x091DFE06, 0xF80315FD, 0x14EAFE0A, 0x05E514E0);
	r5 = D(r5, s1_1_2, 0x05E7F4FD, 0xE0FA07F5, 0x04F40719, 0xF4EEF8F9);
	r6 = D(r6, s1_1_2, 0x0CED1FDF, 0xEB100205, 0x1FF1E602, 0x04EBF7FD);
	r7 = D(r7, s1_1_2, 0x1BF1E105, 0x0E0502FA, 0x11040DF8, 0xEE0D04F8);
	r0 = D(r0, s1_2_0, 0x3CF90B0C, 0xF3FC020A, 0x14FDFC14, 0x0D0608F8);
	r1 = D(r1, s1_2_0, 0xF9000201, 0x0BF8FD00, 0x0C0E0CFF, 0x06FDFCF9);
	r2 = D(r2, s1_2_0, 0xFEFF00F2, 0x17FBF608, 0x0100FCFB, 0x0E00FF01);
	r3 = D(r3, s1_2_0, 0x02FD0DF4, 0x0608E8EE, 0x0604FF01, 0x06F6E810);
	r4 = D(r4, s1_2_0, 0x10F8F805, 0x1A01040E, 0xFCFB06FD, 0x01F80708);
	r5 = D(r5, s1_2_0, 0x0200F4FE, 0x09030BE9, 0xF7FDFB06, 0x04FE0305);
	r6 = D(r6, s1_2_0, 0x03EEFB05, 0x00F80000, 0xE50506F2, 0x0FFEFBF3);
	r7 = D(r7, s1_2_0, 0x11FDFA11, 0xFFFC0300, 0xF8FF0410, 0x0C0707FD);
	r0 = D(r0, s1_2_1, 0x0800EFFB, 0xF405FDF7, 0x08F6FF12, 0xEC0130FC);
	r1 = D(r1, s1_2_1, 0x05010A01, 0xF50CF3F5, 0x1DEEFE19, 0x031906FB);
	r2 = D(r2, s1_2_1, 0x040017FA, 0xFDE1F8F2, 0xFE060801, 0xF6E5FF20);
	r3 = D(r3, s1_2_1, 0xF5FAF2F0, 0x0F111AF1, 0x01F908FE, 0x1104FFF8);
	r4 = D(r4, s1_2_1, 0xF5E706F6, 0x1610DAF7, 0xFA00FB04, 0xFF030A01);
	r5 = D(r5, s1_2_1, 0x14030007, 0xF30301F4, 0x16E7E311, 0x1203030D);
	r6 = D(r6, s1_2_1, 0x0EFE03F7, 0xF314F8FD, 0xEEE90619, 0x191B0F0A);
	r7 = D(r7, s1_2_1, 0x08FEF90D, 0x060BF4F6, 0x0AE5F5FD, 0xF3F0F8ED);
	r0 = D(r0, s1_2_2, 0x2DF8EDFD, 0x110D0100, 0xF301F804, 0x03FF0504);
	r1 = D(r1, s1_2_2, 0x03F908FF, 0x0F04E80F, 0x07F30306, 0x07FDFAF8);
	r2 = D(r2, s1_2_2, 0xFB020E00, 0x12EE0002, 0xFFF6FE05, 0x0708EEFB);
	r3 = D(r3, s1_2_2, 0xFE0C0B01, 0xE40E19E3, 0xF70404FC, 0xE813F4F2);
	r4 = D(r4, s1_2_2, 0x12F90503, 0xF9F8F5F2, 0x0FF3F907, 0x00EEF703);
	r5 = D(r5, s1_2_2, 0xFCFFFF03, 0xF3F8F700, 0x0EFD09FE, 0x0DEEFEF1);
	r6 = D(r6, s1_2_2, 0xF3CBF3F2, 0x0AF9F6FC, 0x01F7F211, 0x01F71419);
	r7 = D(r7, s1_2_2, 0x110400FA, 0x0408F8FE, 0xFCF8030D, 0x010500FF);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFDF910F8, 0xF8FBFD04, 0xECFB13EF, 0xF7010E02);
	r1 = D(r1, s0_0_0, 0x0AF9FDFA, 0xF9FA220B, 0x14F302F0, 0xFFFFEDF8);
	r2 = D(r2, s0_0_0, 0xFE02FBF8, 0x07F0F0F4, 0x0C020F02, 0x1803D802);
	r3 = D(r3, s0_0_0, 0x020802FB, 0x07F9F3FA, 0xFBF4FD04, 0xEFF6F40C);
	r4 = D(r4, s0_0_0, 0x09E705FF, 0xEC0DF40A, 0xFEFB0003, 0x0E0103F8);
	r5 = D(r5, s0_0_0, 0x0AF1F703, 0xFC0002F9, 0xFF00F300, 0x0703FEFD);
	r6 = D(r6, s0_0_0, 0xDE04F302, 0x000C0309, 0x9FE5FEFD, 0xD30C1907);
	r7 = D(r7, s0_0_0, 0xF1E5F6FF, 0x08F4FDFD, 0x09F80104, 0x0613FBEA);
	r0 = D(r0, s0_0_1, 0x0DCD05F2, 0xFF0BF500, 0xDF0418EE, 0xF605FAFC);
	r1 = D(r1, s0_0_1, 0xFE0EFEF6, 0xFB06D607, 0x19FFEC02, 0x14FFEAF1);
	r2 = D(r2, s0_0_1, 0x0E0505FF, 0xF40F0100, 0x020501FD, 0x2C2402F9);
	r3 = D(r3, s0_0_1, 0xF407E1FB, 0x1EFC0AFA, 0xFFF602FE, 0x06ECDEDE);
	r4 = D(r4, s0_0_1, 0x0CFA0603, 0x2304F9F7, 0xF802F900, 0x1212E402);
	r5 = D(r5, s0_0_1, 0x0108E7EC, 0xE6070308, 0x0CF31200, 0x0DFF02FF);
	r6 = D(r6, s0_0_1, 0x191203EB, 0xF90BF809, 0xF131FDF9, 0xF419E70C);
	r7 = D(r7, s0_0_1, 0x0A02FE02, 0x08FAFD01, 0xFB07FEF3, 0x060307FC);
	r0 = D(r0, s0_0_2, 0x11F700FC, 0x05F6080A, 0x01000103, 0xFB06FB07);
	r1 = D(r1, s0_0_2, 0xEE021305, 0xEE1E0612, 0x06F3E202, 0xF3010BFF);
	r2 = D(r2, s0_0_2, 0x040004FC, 0x05FAFDFC, 0x08F10701, 0x0F0FF9F9);
	r3 = D(r3, s0_0_2, 0x0210F3FA, 0x0D1A1404, 0x0A02050C, 0x13D4FEF8);
	r4 = D(r4, s0_0_2, 0x0005FF07, 0x00EFFCFC, 0x10F706FC, 0x081AFF09);
	r5 = D(r5, s0_0_2, 0xFBFF0509, 0xFD080504, 0x0AE9FBFF, 0xEE0500FD);
	r6 = D(r6, s0_0_2, 0xE71A10F8, 0xF6FD0407, 0xEFF5F403, 0xF8130304);
	r7 = D(r7, s0_0_2, 0x0BF4FBF7, 0xFB0600FF, 0x070CF5FA, 0xFCF9F6FA);
	r0 = D(r0, s0_1_0, 0xE8E9150B, 0xEBF2050E, 0xF4E22602, 0xEAFD1FFC);
	r1 = D(r1, s0_1_0, 0x03F0F8EC, 0xF4070EFE, 0xF81222F8, 0x0F0CFBFA);
	r2 = D(r2, s0_1_0, 0xF10EFAFA, 0xF115FAFF, 0xEDFE1205, 0xFAEA02F2);
	r3 = D(r3, s0_1_0, 0xD90A0EF0, 0x05041506, 0xF2EE05FA, 0xF0E63B01);
	r4 = D(r4, s0_1_0, 0xEEF000E8, 0x01040603, 0xFDFF0303, 0x0D09F6FF);
	r5 = D(r5, s0_1_0, 0x01E9F308, 0xFEFDFC01, 0xECF9150D, 0xFA02ED01);
	r6 = D(r6, s0_1_0, 0xE812CEF9, 0xBC0E0D19, 0xFAEE35FC, 0x1EEE0600);
	r7 = D(r7, s0_1_0, 0xEAF825EB, 0x02FA15E7, 0x02F2E0F6, 0xEDFC00F4);
	r0 = D(r0, s0_1_1, 0xFEF502D4, 0x0E111008, 0xF6BA091D, 0xEC0C1205);
	r1 = D(r1, s0_1_1, 0x27071E09, 0xC8F9EBE2, 0xD8ECC610, 0xEFF5F3FE);
	r2 = D(r2, s0_1_1, 0xFBF5E7F9, 0xF7FDF21B, 0xF900080B, 0x0DEDF8F1);
	r3 = D(r3, s0_1_1, 0xDBF217FA, 0xE30BF8F7, 0x13F3F107, 0xFDDDE315);
	r4 = D(r4, s0_1_1, 0xDFDCE303, 0xDAF300ED, 0xFDFE07F1, 0x15322FE6);
	r5 = D(r5, s0_1_1, 0xF7FE13EB, 0xFD0A0B0D, 0xECE8D613, 0x02F7F204);
	r6 = D(r6, s0_1_1, 0x0EF630D6, 0xCC040322, 0xE4FFFF08, 0x2F3505DF);
	r7 = D(r7, s0_1_1, 0x19E8EB0B, 0x0DFFFAFA, 0x181C36BB, 0xFCF2F7FD);
	r0 = D(r0, s0_1_2, 0x1105FCFB, 0xEEFC070A, 0x0B1409DF, 0x0109070D);
	r1 = D(r1, s0_1_2, 0x00E80D1B, 0xF9E1F1BA, 0x06E1F3FD, 0x07FFF7F8);
	r2 = D(r2, s0_1_2, 0xF905FFFC, 0x03F206B9, 0xF70200F5, 0xFBDA0AF8);
	r3 = D(r3, s0_1_2, 0xFE020404, 0xE208EF08, 0x130A1219, 0xE1221DF4);
	r4 = D(r4, s0_1_2, 0x08040FFC, 0xFA050710, 0x0F02FD0B, 0xF50305EF);
	r5 = D(r5, s0_1_2, 0x06DEF5EA, 0xFE040AFC, 0xFF1000F5, 0xF8FDFBFA);
	r6 = D(r6, s0_1_2, 0xF7010003, 0xFF020A08, 0xFCF407FC, 0xEFDF0EFB);
	r7 = D(r7, s0_1_2, 0x1A14F7F5, 0xFF0801F3, 0x08FC1208, 0xFD01100F);
	r0 = D(r0, s0_2_0, 0xFCE9F3CF, 0xFC060609, 0xF60111EE, 0x0304ED03);
	r1 = D(r1, s0_2_0, 0xFDFF0AFA, 0xF2080514, 0xE3FC07F9, 0x07F80300);
	r2 = D(r2, s0_2_0, 0xF906FAF5, 0x02F700DE, 0x07F1F3EF, 0xFDFAFADE);
	r3 = D(r3, s0_2_0, 0xFBF6FE02, 0xF9081313, 0xFC00F8F2, 0xE62F02EA);
	r4 = D(r4, s0_2_0, 0xF805F9EF, 0x15F5160B, 0x0501FFFE, 0x07FAFDE7);
	r5 = D(r5, s0_2_0, 0x07FD1814, 0x0D03F309, 0xFB000108, 0xF9FB0603);
	r6 = D(r6, s0_2_0, 0x05160A04, 0x0BF0F615, 0x0CF0EB04, 0xF406FB11);
	r7 = D(r7, s0_2_0, 0xF5F717F0, 0x040403EE, 0xF0F9FDF2, 0x00F206F3);
	r0 = D(r0, s0_2_1, 0x08181DF4, 0x0AFAF005, 0x0215F4CB, 0x00F3EE25);
	r1 = D(r1, s0_2_1, 0x12FEEBFF, 0x02E82511, 0xE817DEE9, 0x05070100);
	r2 = D(r2, s0_2_1, 0xF6EEF607, 0x12F5F515, 0xFFFBE9F9, 0x0BFB0AEF);
	r3 = D(r3, s0_2_1, 0xF5F70612, 0xF524E2DF, 0xF3FFF6FA, 0x0114FDC5);
	r4 = D(r4, s0_2_1, 0xE7D8F2F4, 0xFB0D29FB, 0xFCFE0EF6, 0x11FD05EB);
	r5 = D(r5, s0_2_1, 0x010B05DE, 0x1AFEFA33, 0xEB130CFB, 0xF70102EF);
	r6 = D(r6, s0_2_1, 0x0509F9DC, 0xF507021C, 0x04C6C9FD, 0x04250503);
	r7 = D(r7, s0_2_1, 0xF01511DE, 0xFE1408EF, 0x100808F7, 0xFDFFFAFC);
	r0 = D(r0, s0_2_2, 0xF10D0500, 0x09F70707, 0xFD09FFFA, 0x07000907);
	r1 = D(r1, s0_2_2, 0x0AEEF709, 0xF3ED11F9, 0x0703F6FA, 0x04FD04F7);
	r2 = D(r2, s0_2_2, 0x02FF00F9, 0xFC060503, 0x0EFD09ED, 0xFCFC09D7);
	r3 = D(r3, s0_2_2, 0xFFFDFEFE, 0x0A050215, 0x0FFFFF0D, 0xFBFB0213);
	r4 = D(r4, s0_2_2, 0x16FA05F8, 0xFDF2EA12, 0x06FA0FFD, 0xF9F3E71A);
	r5 = D(r5, s0_2_2, 0xFDFD06FD, 0xFD06FF03, 0x12EFDBEC, 0x01F2F8F1);
	r6 = D(r6, s0_2_2, 0xF4E4D9F8, 0x06FB01FE, 0x080611EF, 0xE00807E6);
	r7 = D(r7, s0_2_2, 0x01040509, 0xF9FBFF0A, 0x02EFE503, 0x03ED0215);
	r0 = D(r0, s1_0_0, 0xDE0009FB, 0x08FF00F3, 0xEBF6080B, 0x04FC09F0);
	r1 = D(r1, s1_0_0, 0x080500F6, 0x01F60305, 0xF70B10FC, 0x0A1100F1);
	r2 = D(r2, s1_0_0, 0x00FF05FF, 0xFB09F5F9, 0xFEF900FE, 0x0A0E04E5);
	r3 = D(r3, s1_0_0, 0x08FC0BFB, 0xFF08EAFE, 0x0A07030B, 0xECFC070D);
	r4 = D(r4, s1_0_0, 0xFC03040C, 0x04FB06E9, 0xFEF9FE12, 0x13F9F4ED);
	r5 = D(r5, s1_0_0, 0xF207FC12, 0xF8FC01FF, 0xFE060EF4, 0x05FEFBF7);
	r6 = D(r6, s1_0_0, 0xF42B01FD, 0xFFF80DFF, 0xFB12110D, 0xF5040201);
	r7 = D(r7, s1_0_0, 0x0EF20412, 0x0601070B, 0x0F11F401, 0xFBFA0FF5);
	r0 = D(r0, s1_0_1, 0x03FEFBFB, 0xFEFAF606, 0x03DFECF9, 0xF6080AFD);
	r1 = D(r1, s1_0_1, 0x03FD07FB, 0xC2EFF513, 0x0212110E, 0xF50D14F7);
	r2 = D(r2, s1_0_1, 0x0BFD0904, 0x0609F0FA, 0x04FB00F3, 0x15FCBAF7);
	r3 = D(r3, s1_0_1, 0x01171AFD, 0xFF0F0FED, 0xFDFF02FE, 0xE0D8FC0A);
	r4 = D(r4, s1_0_1, 0xF3031202, 0xF8150200, 0x0103ED04, 0x0AFE0108);
	r5 = D(r5, s1_0_1, 0xF209FBFC, 0x04F1F9F6, 0x12F30905, 0xFD0002FF);
	r6 = D(r6, s1_0_1, 0xEF0803FB, 0xFDFE100E, 0xFFE0F503, 0xB11BF310);
	r7 = D(r7, s1_0_1, 0x0F0DF2FA, 0x000904FF, 0x1BF7F302, 0x0FDF1A01);
	r0 = D(r0, s1_0_2, 0xD6CD0308, 0x0DF800FB, 0x0FFDE5F8, 0xEE03F6FA);
	r1 = D(r1, s1_0_2, 0x0DEDFA03, 0x01F0F803, 0xD0350DFA, 0x06F90202);
	r2 = D(r2, s1_0_2, 0x07FF0BFE, 0x01FA0400, 0x100B00FE, 0x070AFFFD);
	r3 = D(r3, s1_0_2, 0xFAFE0DF0, 0x05F5E7F6, 0xFEEDEE08, 0x15100BF4);
	r4 = D(r4, s1_0_2, 0xE4F7F50E, 0xCC0410FA, 0xF6FC1201, 0x17FAFADF);
	r5 = D(r5, s1_0_2, 0x06FDF7FD, 0xFB16FD06, 0x071B010D, 0x0B04F1F9);
	r6 = D(r6, s1_0_2, 0x1CFCFCF5, 0x00FA070A, 0xE8140108, 0xD5F00A14);
	r7 = D(r7, s1_0_2, 0x050007F7, 0xFBF7FF06, 0x0BFAFAF9, 0xF4E7100D);
	r0 = D(r0, s1_1_0, 0xACE8E3F4, 0x1903091E, 0x14FBDEFA, 0x0508F40A);
	r1 = D(r1, s1_1_0, 0x0C0AFA10, 0xE4FE0BFC, 0x26FFF8FF, 0xD80F070D);
	r2 = D(r2, s1_1_0, 0x0E0005F5, 0xCE0DF4CB, 0xFE0002FC, 0xFF08ECFD);
	r3 = D(r3, s1_1_0, 0x210105F5, 0xFC0704D1, 0x0211FFF9, 0x1BEDFDE8);
	r4 = D(r4, s1_1_0, 0x0604020B, 0xF5070717, 0x0AFA00FD, 0xF903FFE9);
	r5 = D(r5, s1_1_0, 0x1CFC0903, 0x02FEF807, 0x17F7FCFD, 0xF208011C);
	r6 = D(r6, s1_1_0, 0xCB1AFA33, 0xFBFC0302, 0xF80808C3, 0xE20D0E01);
	r7 = D(r7, s1_1_0, 0x09F9FFEF, 0x0505FBEE, 0x0D0FF4E5, 0xF3030619);
	r0 = D(r0, s1_1_1, 0xD40EEB04, 0x03F7CE03, 0x1218E531, 0x0811F804);
	r1 = D(r1, s1_1_1, 0xE9F80902, 0xE5FB00F4, 0x021D04E9, 0xF9071B0D);
	r2 = D(r2, s1_1_1, 0xFB07F4F9, 0xFD0BD20E, 0x02022316, 0x0601D419);
	r3 = D(r3, s1_1_1, 0xFD05EF02, 0xD10A1414, 0x060905E8, 0xF4FC16F4);
	r4 = D(r4, s1_1_1, 0x010604FF, 0x03181EFB, 0xFF0DDBF6, 0xFB07E8D4);
	r5 = D(r5, s1_1_1, 0xF806F8F4, 0x1605EBEC, 0xE8120F3B, 0xF9031818);
	r6 = D(r6, s1_1_1, 0xF2111817, 0x01EE32FD, 0x0B08EB10, 0xF4F310E2);
	r7 = D(r7, s1_1_1, 0x0E1A08EF, 0x02063A03, 0x0C09F0F5, 0xFBE4290C);
	r0 = D(r0, s1_1_2, 0xA0F4FEDC, 0x1CFAEEF7, 0x03F72017, 0x050C06FE);
	r1 = D(r1, s1_1_2, 0x0FF8E106, 0xBCF8ECEE, 0xF200FF21, 0xEB03040F);
	r2 = D(r2, s1_1_2, 0x0D061105, 0xFA07FC06, 0xEFF30BF4, 0xE803F70E);
	r3 = D(r3, s1_1_2, 0x120A0D0F, 0x8C03ED02, 0x0D0005DB, 0xC7F02000);
	r4 = D(r4, s1_1_2, 0xDFEF0AF8, 0xFBD6FA04, 0xF3022000, 0x0809E4F0);
	r5 = D(r5, s1_1_2, 0xFB07050E, 0x0914F205, 0xF0D609E4, 0xF90CFA0B);
	r6 = D(r6, s1_1_2, 0xF10DF4EA, 0x0205F5F8, 0x19F90DF1, 0xD8020F09);
	r7 = D(r7, s1_1_2, 0x01EA2909, 0xF2FBFA03, 0x1F0AF2E2, 0xF3F8DF0A);
	r0 = D(r0, s1_2_0, 0xCCF2F801, 0x1305FE01, 0xE60A0910, 0x1D12F6FF);
	r1 = D(r1, s1_2_0, 0xF3FF0402, 0xEE020505, 0xFC15FBFF, 0xD6FFF708);
	r2 = D(r2, s1_2_0, 0x000801F5, 0xF004FBF3, 0xDF01F8F8, 0x0011FBFA);
	r3 = D(r3, s1_2_0, 0x22FB0701, 0x07FB00FD, 0x051003FB, 0xCAE50A1F);
	r4 = D(r4, s1_2_0, 0xF70503E9, 0xF10708D8, 0x0BFA0003, 0x220C00F0);
	r5 = D(r5, s1_2_0, 0x09050208, 0x0E06020D, 0xF2F904F9, 0xD5080206);
	r6 = D(r6, s1_2_0, 0xB30E19E3, 0xF6000D09, 0x330DE621, 0x000BF7EB);
	r7 = D(r7, s1_2_0, 0xEF030DE7, 0xE9F503EB, 0x141C11E2, 0xF0FA10FF);
	r0 = D(r0, s1_2_1, 0xCAB50BFF, 0x0E0EEF0D, 0x0405FB08, 0x081EE703);
	r1 = D(r1, s1_2_1, 0xFBFE0204, 0xF61801F9, 0xD410F302, 0xFF0100FC);
	r2 = D(r2, s1_2_1, 0xFCEF0410, 0xF3FBF508, 0xF003FA11, 0xF905EF0F);
	r3 = D(r3, s1_2_1, 0x08110FF0, 0xF8D2FFDD, 0x11130E0C, 0xF2E9E432);
	r4 = D(r4, s1_2_1, 0xF6FB0109, 0xFB151CEA, 0xF70A0502, 0x1503EC0D);
	r5 = D(r5, s1_2_1, 0xEE0017F0, 0x171205C8, 0x070D18FF, 0xFF0C04F8);
	r6 = D(r6, s1_2_1, 0x1321F508, 0x1DFA03ED, 0xE91EE227, 0xF2FCEBF7);
	r7 = D(r7, s1_2_1, 0x0801040F, 0x05010109, 0xFEFE01FE, 0xF6EEFE0F);
	r0 = D(r0, s1_2_2, 0xD7EEF024, 0xFEFCFE07, 0xEE09F40C, 0x09160EF1);
	r1 = D(r1, s1_2_2, 0x07F40104, 0xE9FB1102, 0xE217F903, 0x03090605);
	r2 = D(r2, s1_2_2, 0xF9000413, 0xF3EC0E0C, 0x05050614, 0xFBFFF01A);
	r3 = D(r3, s1_2_2, 0x0A0FFF01, 0x11F6E8DF, 0x080CEBE7, 0xEEF9F21D);
	r4 = D(r4, s1_2_2, 0xF20C1600, 0xF916F9E5, 0xF6FC1403, 0x1303EEFA);
	r5 = D(r5, s1_2_2, 0xF90BF5FD, 0x101D00DD, 0xF5041A1F, 0x0AFE0C20);
	r6 = D(r6, s1_2_2, 0xE7FB0B01, 0x070E09FD, 0x031C10EF, 0x1308F9FB);
	r7 = D(r7, s1_2_2, 0x0710F50B, 0xFE01FBFE, 0xF912E7EF, 0xF7F60D0A);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF1DC16DB, 0x0703F3FB, 0x2400F722, 0xFB080606);
	r1 = D(r1, s0_0_0, 0x0C050107, 0xF80308F8, 0xF8EF1007, 0xF1F6EC05);
	r2 = D(r2, s0_0_0, 0xFCFA0503, 0xE9FAEF09, 0x110AFA17, 0x08F0EF14);
	r3 = D(r3, s0_0_0, 0xF40812F5, 0xD90BE506, 0x0FFCFB0E, 0x170B1F06);
	r4 = D(r4, s0_0_0, 0xFFFF0C06, 0xFAF31810, 0xF903F7FE, 0xFFFCF2F8);
	r5 = D(r5, s0_0_0, 0x03F5EA01, 0x03F7F411, 0x05F50BFD, 0xF300030A);
	r6 = D(r6, s0_0_0, 0xEAB2EB07, 0x0400FC0A, 0x12E9EF11, 0xE71025F6);
	r7 = D(r7, s0_0_0, 0x040AF40E, 0xFD0E03F7, 0x0CFC04EF, 0x07FB0B09);
	r0 = D(r0, s0_0_1, 0xFB02FCF5, 0xFF09050C, 0xF701111E, 0xF705060C);
	r1 = D(r1, s0_0_1, 0x08F1091F, 0xECC4FEDD, 0x030014E9, 0xFFECFFE7);
	r2 = D(r2, s0_0_1, 0x100E0103, 0x0DF50AFE, 0x03FDFE06, 0x030006DA);
	r3 = D(r3, s0_0_1, 0x06FFFA0B, 0x21E303FA, 0x0602F40A, 0xEFF30B04);
	r4 = D(r4, s0_0_1, 0x0AF70EE7, 0xED02F805, 0xFC0BFBFC, 0x0501F9F5);
	r5 = D(r5, s0_0_1, 0xF0F5EBEC, 0xF8060B18, 0xFF05FE17, 0xFF0004F8);
	r6 = D(r6, s0_0_1, 0x05F623F3, 0x00F70000, 0x000EEC09, 0xE1C413F1);
	r7 = D(r7, s0_0_1, 0x02E1F3FC, 0xF5F41A01, 0x010FE419, 0x06F20DFE);
	r0 = D(r0, s0_0_2, 0x26FE270D, 0xFA0BF906, 0xF21CF303, 0x05FC06FA);
	r1 = D(r1, s0_0_2, 0xF613FD13, 0xFCF3CBC9, 0xFEF2FFFE, 0x0BF30CD4);
	r2 = D(r2, s0_0_2, 0xFE03F403, 0x05EA0409, 0x07FDFEFE, 0xF4F52CE0);
	r3 = D(r3, s0_0_2, 0x01F701FA, 0x15FCDA08, 0xFC0CFF18, 0xD8F410F5);
	r4 = D(r4, s0_0_2, 0x08F9FC13, 0x0DF306F0, 0x09FEFCF7, 0x0C29E803);
	r5 = D(r5, s0_0_2, 0x130317EA, 0xFD0105E2, 0xF102EA16, 0x00010AF4);
	r6 = D(r6, s0_0_2, 0xF2FF0BCC, 0xF2F1140A, 0xDFFA09F0, 0x11EBF8E2);
	r7 = D(r7, s0_0_2, 0xFB021F08, 0x0011FF15, 0xFC2100FD, 0xE7F5F311);
	r0 = D(r0, s0_1_0, 0xDFF6171B, 0xF7ED1008, 0xEA1BCDE7, 0x121A1729);
	r1 = D(r1, s0_1_0, 0xF4FC07F3, 0x130FED0A, 0xE01721F1, 0xFB040F0E);
	r2 = D(r2, s0_1_0, 0xF5FF1009, 0xF8F6FB22, 0xF908FAF4, 0xF5011C00);
	r3 = D(r3, s0_1_0, 0x11020720, 0x1B0CE9C6, 0x05120409, 0xEF300CDE);
	r4 = D(r4, s0_1_0, 0xF3FAFC10, 0x1010F908, 0x03FFFC05, 0x16FA0A0E);
	r5 = D(r5, s0_1_0, 0xE7F701FF, 0x10F50A18, 0xF616F7FF, 0xEFFD0CF9);
	r6 = D(r6, s0_1_0, 0xE2F611F8, 0x12F50207, 0x0CFD0C0A, 0xFE08160F);
	r7 = D(r7, s0_1_0, 0xE313EFE8, 0xE90402F2, 0xF1000BFE, 0xF0FBFCEA);
	r0 = D(r0, s0_1_1, 0xE2F33FCD, 0x091E03FB, 0xFCF5D8DF, 0x0F1C1616);
	r1 = D(r1, s0_1_1, 0xF5EA04F3, 0xD7F31806, 0xF7E3330B, 0xF2F7200E);
	r2 = D(r2, s0_1_1, 0xE6EA16FE, 0xF50603EF, 0xF2F1F903, 0xF60B14E0);
	r3 = D(r3, s0_1_1, 0x03251803, 0xC70706EA, 0xF71025FC, 0x0C0528F0);
	r4 = D(r4, s0_1_1, 0xE1FE0DEF, 0xFEE3030D, 0xF90CF6F0, 0xEE0A0A01);
	r5 = D(r5, s0_1_1, 0xDFD812E2, 0x15030D3B, 0xD600E0FF, 0xFAFA0AF2);
	r6 = D(r6, s0_1_1, 0xDFB804F6, 0x06EF2823, 0xEAFFD401, 0xC300373F);
	r7 = D(r7, s0_1_1, 0xF6D207E1, 0xF5EE0F00, 0x0018F2CA, 0x00F913F9);
	r0 = D(r0, s0_1_2, 0x150A361C, 0xF500EB0C, 0x0FECE1F1, 0xFB0020F4);
	r1 = D(r1, s0_1_2, 0xFE00FA0C, 0xF50728EB, 0xEC1135CB, 0xEFFC2F0B);
	r2 = D(r2, s0_1_2, 0xF4FAFC10, 0x06F80CF5, 0xFAF6ECFA, 0xFBFE420E);
	r3 = D(r3, s0_1_2, 0xE40D1FF4, 0xFE08FE18, 0x090DFAFF, 0xF0051C04);
	r4 = D(r4, s0_1_2, 0x17E7F709, 0x0A1C14EB, 0x000302F4, 0x191E0D03);
	r5 = D(r5, s0_1_2, 0x10010E0A, 0x00F916EF, 0xE9F6E5FC, 0x05EE08FB);
	r6 = D(r6, s0_1_2, 0x09FF1FEF, 0xF2F720FE, 0xF717F4EC, 0xE00A17D3);
	r7 = D(r7, s0_1_2, 0xEFFC170D, 0xFAFA02FB, 0x1B1EE010, 0xFEF304F7);
	r0 = D(r0, s0_2_0, 0xF4E331CC, 0xFCF2DE2D, 0x01F91D1A, 0x02F410DC);
	r1 = D(r1, s0_2_0, 0xF8000513, 0x0C132801, 0xFDF209F7, 0xF904F4F9);
	r2 = D(r2, s0_2_0, 0x0800F904, 0xEEFC0C02, 0xFF030502, 0xF306F50F);
	r3 = D(r3, s0_2_0, 0x03ECCA15, 0x0A0D0D28, 0x01FF00FD, 0x02DFBC4B);
	r4 = D(r4, s0_2_0, 0xFF08FDEF, 0x0C070DF5, 0xFCF600F9, 0x0005D80E);
	r5 = D(r5, s0_2_0, 0x0BF2E919, 0xFEE901D7, 0xFAF4191E, 0x02F90C06);
	r6 = D(r6, s0_2_0, 0x080CE5F3, 0x01F4FDFA, 0xF4D60EE3, 0xFFE725F2);
	r7 = D(r7, s0_2_0, 0xFC011201, 0xFD050F07, 0xFF06F005, 0x0B05F9F1);
	r0 = D(r0, s0_2_1, 0xFE2469E9, 0x04F0EFF7, 0xE7F81FF8, 0x15F3E806);
	r1 = D(r1, s0_2_1, 0xF5FDFFFF, 0x1A0C000E, 0x06FAF020, 0x08011009);
	r2 = D(r2, s0_2_1, 0x0A230401, 0xFAE80C13, 0x021504E5, 0x0602F9F4);
	r3 = D(r3, s0_2_1, 0x09FAD90D, 0x04F414E3, 0xFFEEE912, 0xD2F425F0);
	r4 = D(r4, s0_2_1, 0xEEF32104, 0xEBC00DF6, 0x0502F105, 0xF602D4F5);
	r5 = D(r5, s0_2_1, 0x14FF1002, 0x21F8F1FA, 0xEE03FA18, 0xF0FF0006);
	r6 = D(r6, s0_2_1, 0xD3B020FE, 0x16FB13F7, 0x0DF7EF12, 0x200A07EC);
	r7 = D(r7, s0_2_1, 0xFCFB13F5, 0x050F1603, 0xEBF91FFC, 0xFB0923FE);
	r0 = D(r0, s0_2_2, 0xF30D3608, 0x04FCF30B, 0xE806FF02, 0x0AFEFD0A);
	r1 = D(r1, s0_2_2, 0x08FA1208, 0xC20707FA, 0xE5FEFBF3, 0xE5FC1804);
	r2 = D(r2, s0_2_2, 0xEEFEED01, 0x08F813F2, 0xED03090D, 0xFAFBD806);
	r3 = D(r3, s0_2_2, 0xFFFFE0F8, 0x1C0E2F24, 0x0EF321FE, 0xD904FA11);
	r4 = D(r4, s0_2_2, 0x07FEEDF7, 0x0E0303ED, 0xED07DDF8, 0x1D07EF0C);
	r5 = D(r5, s0_2_2, 0x010000FC, 0x02F0E90D, 0xDC000CEC, 0xEF01110A);
	r6 = D(r6, s0_2_2, 0x14161E19, 0xFF070FF7, 0x0BE9F001, 0x01E81505);
	r7 = D(r7, s0_2_2, 0xEB02F5FF, 0x0009F301, 0x2706C1FF, 0xFDFF06F4);
	r0 = D(r0, s1_0_0, 0xFB27E21A, 0x0B000E07, 0x11F4EE03, 0x0F02FBF8);
	r1 = D(r1, s1_0_0, 0x06F1030D, 0x071FF106, 0xEA010904, 0xF30AFAFA);
	r2 = D(r2, s1_0_0, 0xF4FE0012, 0xDBFF17D7, 0x06050100, 0xF80D04F9);
	r3 = D(r3, s1_0_0, 0xFBFF0410, 0x1118F523, 0x0801FB0D, 0x000A030F);
	r4 = D(r4, s1_0_0, 0xEF02FEFA, 0x000D06E5, 0x00000103, 0x01FBFB1E);
	r5 = D(r5, s1_0_0, 0xF6FBF7F6, 0x14F5F613, 0x030A0B04, 0xFEFD03F4);
	r6 = D(r6, s1_0_0, 0xFBF6FFD8, 0x04F200FA, 0x3307DC12, 0xFB06FA06);
	r7 = D(r7, s1_0_0, 0xF7FBFEF9, 0x05F4F704, 0xE9E8FDF1, 0xF3FE01F6);
	r0 = D(r0, s1_0_1, 0xD1F81726, 0x0401FEFF, 0xFDC80B1B, 0x0203FBE9);
	r1 = D(r1, s1_0_1, 0x06F1FF0C, 0xFA001C29, 0xDD0B03EF, 0xDA21EEFC);
	r2 = D(r2, s1_0_1, 0x0CFDFF0A, 0xF102010C, 0xF601000D, 0xE5000209);
	r3 = D(r3, s1_0_1, 0x19FBFEEC, 0xE9150C3E, 0x090AF519, 0xD7E5F634);
	r4 = D(r4, s1_0_1, 0xE604F4FA, 0xFB0903CB, 0xF7F4FE07, 0x1601F308);
	r5 = D(r5, s1_0_1, 0xEA0311F4, 0xFCF905EE, 0x0001FF03, 0xED0008FC);
	r6 = D(r6, s1_0_1, 0xED0DF8AD, 0xFB12FA0D, 0xF3FA1CF1, 0xE3EE1CE3);
	r7 = D(r7, s1_0_1, 0xF0FB0125, 0x04F70517, 0x16F6EF0D, 0xEF03FA16);
	r0 = D(r0, s1_0_2, 0xE91D06FF, 0xFE070DF3, 0xFFE3F11F, 0x0E0DF6EB);
	r1 = D(r1, s1_0_2, 0x0EF80A09, 0xDFFDEFF7, 0x10F4F502, 0xE303020F);
	r2 = D(r2, s1_0_2, 0xFCFF08FE, 0xFD0AFE0D, 0xED02F81B, 0xF208FA0B);
	r3 = D(r3, s1_0_2, 0x14FF0AF9, 0xE600122E, 0x1100F7F4, 0xD8000943);
	r4 = D(r4, s1_0_2, 0xEC05FEF2, 0x090AF0D6, 0x03020201, 0x11F70006);
	r5 = D(r5, s1_0_2, 0xFF000CFD, 0x090CF9E7, 0xDE0FF8FF, 0xF1F90C03);
	r6 = D(r6, s1_0_2, 0xF9150216, 0xF501E6E3, 0x16F5FDC4, 0x24EC1804);
	r7 = D(r7, s1_0_2, 0x02FDF313, 0x09FEF8FD, 0x16F7F4FE, 0xEDFDF3F6);
	r0 = D(r0, s1_1_0, 0x1E1CF1F3, 0x0EF60F22, 0x07F518F7, 0x06F00303);
	r1 = D(r1, s1_1_0, 0x10000DFC, 0x0E0CFBF5, 0xF303FBCE, 0x07F5F111);
	r2 = D(r2, s1_1_0, 0xFB0AFDF9, 0xE910F10C, 0xF6050405, 0xF90706DF);
	r3 = D(r3, s1_1_0, 0x0AF80A06, 0x031DEBE9, 0x000FF9FD, 0x21102805);
	r4 = D(r4, s1_1_0, 0xFE10F7F1, 0xFCFBF3DE, 0x05F6FD06, 0xFDFCFF02);
	r5 = D(r5, s1_1_0, 0xEC0601DB, 0x0CFD03FC, 0x0B140608, 0xFEF909F1);
	r6 = D(r6, s1_1_0, 0x05EA15DF, 0x0EFD0012, 0x1BF40D36, 0x151BE2EA);
	r7 = D(r7, s1_1_0, 0xFC0309F1, 0xFC01FDFF, 0xD7F6FC06, 0x0F1D01E9);
	r0 = D(r0, s1_1_1, 0x0A0D141D, 0x230ADE17, 0x03D408E8, 0x11E4FFE7);
	r1 = D(r1, s1_1_1, 0x03FF1209, 0xAC110DF5, 0xE8FEF706, 0xFDF8F006);
	r2 = D(r2, s1_1_1, 0xFD1F030A, 0xFC0DFF00, 0xF7FE0402, 0xFA20EFDB);
	r3 = D(r3, s1_1_1, 0x0DDE04F6, 0xFA24E0EE, 0x12FF1201, 0x07F20212);
	r4 = D(r4, s1_1_1, 0xEFE706CE, 0xF6CB0016, 0xF9261305, 0x1816E519);
	r5 = D(r5, s1_1_1, 0xDD28EBE6, 0xF50CF7EF, 0xE6E20709, 0x16FAEFF2);
	r6 = D(r6, s1_1_1, 0xFA2AE7D5, 0x00A4E8FB, 0xC400071C, 0xFA0BD9ED);
	r7 = D(r7, s1_1_1, 0xFB180DF6, 0xF7050C00, 0x1A1B0702, 0xF1DEFDF0);
	r0 = D(r0, s1_1_2, 0x101903FD, 0xF90E0405, 0x1CE7141E, 0x0905F0F2);
	r1 = D(r1, s1_1_2, 0xF507CEF9, 0x0FF7B2ED, 0x0908E705, 0x011FEF08);
	r2 = D(r2, s1_1_2, 0xFAF9FD01, 0xED100801, 0xED00FF15, 0xFB09E700);
	r3 = D(r3, s1_1_2, 0xFC01F0F2, 0x1E120915, 0x15F6330B, 0x27F4FB28);
	r4 = D(r4, s1_1_2, 0x08F323EF, 0x1AC613E7, 0x03030006, 0x020DCFFF);
	r5 = D(r5, s1_1_2, 0xFC16EDFB, 0x0908EBE2, 0x00F1F113, 0x0111E8FB);
	r6 = D(r6, s1_1_2, 0xFBF8F717, 0xF5F4FCFE, 0x10FCD3E5, 0xF4E0FFE5);
	r7 = D(r7, s1_1_2, 0x160B1214, 0x0BFB0A03, 0x0AF214F8, 0xFEF120F6);
	r0 = D(r0, s1_2_0, 0xE9DAF8ED, 0x0B18EC0E, 0xEB03F515, 0x1CD51FFD);
	r1 = D(r1, s1_2_0, 0x04FEFC07, 0x1605FCFB, 0xEC100E0C, 0xFAF90D02);
	r2 = D(r2, s1_2_0, 0xF2FCF80A, 0xF6090CED, 0x01000408, 0xEC0C08F9);
	r3 = D(r3, s1_2_0, 0x20C80F0B, 0xFBFB150C, 0x0F00F60B, 0xDF0BF030);
	r4 = D(r4, s1_2_0, 0x04F0F6E8, 0x1DE90CE1, 0xFBFDFFFA, 0x1006FA00);
	r5 = D(r5, s1_2_0, 0xF41CF91B, 0x11EF0A00, 0xF7FC0608, 0xE3F70002);
	r6 = D(r6, s1_2_0, 0xD30AFD26, 0x0405FA0D, 0x15D616F1, 0x0E19F507);
	r7 = D(r7, s1_2_0, 0xE0F7F10B, 0x02ED0601, 0x070CE912, 0xFD0801F8);
	r0 = D(r0, s1_2_1, 0x1812FEEB, 0x06F6F403, 0x0908F0F8, 0x0BC21AFC);
	r1 = D(r1, s1_2_1, 0x080F0703, 0xE2200D08, 0x1909EE17, 0xEB13FD09);
	r2 = D(r2, s1_2_1, 0x061701F8, 0x0EE305ED, 0xFB0800FB, 0x13F70205);
	r3 = D(r3, s1_2_1, 0x1CC30204, 0xEB01FD07, 0x18FAFB03, 0xEA16CCF3);
	r4 = D(r4, s1_2_1, 0xF71B1FEC, 0x1EC412FD, 0xF5FA0308, 0x19F51E06);
	r5 = D(r5, s1_2_1, 0x11FEF00D, 0x02E00AFB, 0xEF20CD01, 0xF306F3FA);
	r6 = D(r6, s1_2_1, 0xE0C408E8, 0x0BFF0300, 0xF7E2FD21, 0x04B32211);
	r7 = D(r7, s1_2_1, 0x0EF40000, 0x0C1BFEFB, 0x1EF1F0FA, 0xF73512F1);
	r0 = D(r0, s1_2_2, 0x020B0F12, 0xFF080D05, 0xF904160C, 0x010DF500);
	r1 = D(r1, s1_2_2, 0x06ED1101, 0x11DBD1EF, 0x19D72402, 0xF91AF6F3);
	r2 = D(r2, s1_2_2, 0xFDF80CFF, 0xFF03FEFB, 0xF40BFC09, 0xFE02FFF8);
	r3 = D(r3, s1_2_2, 0x08F9F803, 0xF60CE8E7, 0x07F600FD, 0xEA051508);
	r4 = D(r4, s1_2_2, 0xF6ED0C07, 0x0DD3E8FD, 0xFA0A0004, 0x1E06DCFC);
	r5 = D(r5, s1_2_2, 0x021A05FC, 0x0D07FAF4, 0xFDF5040E, 0xF7F1F0F9);
	r6 = D(r6, s1_2_2, 0x110AEB08, 0x00FBEEFC, 0x1FFD090F, 0xFDCB0407);
	r7 = D(r7, s1_2_2, 0xFB0F09FB, 0xFA06FA00, 0x11E7ED11, 0xECE70BFB);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x370907F2, 0x08F209FC, 0x04FA05DC, 0x06FA1116);
	r1 = D(r1, s0_0_0, 0x070400ED, 0xF7F01317, 0x04DFF501, 0x021CF8F9);
	r2 = D(r2, s0_0_0, 0xF9FF0700, 0x0301FD01, 0xFE0004F4, 0xEE0FEDF3);
	r3 = D(r3, s0_0_0, 0x0CEB0508, 0x0011FC18, 0x04080613, 0xFCF916ED);
	r4 = D(r4, s0_0_0, 0x080FFC0F, 0x0DF2FE0A, 0xFF010BF9, 0xEB0703FD);
	r5 = D(r5, s0_0_0, 0xEEF211DB, 0x00FB00FF, 0x09E300E2, 0xFE0209FB);
	r6 = D(r6, s0_0_0, 0xE6210DF2, 0x0AE805EC, 0xF5C90ED9, 0x08E2F31A);
	r7 = D(r7, s0_0_0, 0x0AEB10EF, 0x07E7F7F4, 0xE3180CEE, 0x12F1F9F4);
	r0 = D(r0, s0_0_1, 0xF505B2FF, 0xF9D90CF6, 0xD4FCF8F2, 0xFFF20311);
	r1 = D(r1, s0_0_1, 0x05E605F6, 0xE128F6FF, 0x07D5E40A, 0x0DE30604);
	r2 = D(r2, s0_0_1, 0x000D05FF, 0xF503FFF0, 0x08F40700, 0x0CFC0AFE);
	r3 = D(r3, s0_0_1, 0xFA070800, 0xFC11FB07, 0xFBFFEDFB, 0xFAE22CFB);
	r4 = D(r4, s0_0_1, 0x0A02EEFD, 0xF6D8E712, 0xF90902FE, 0xF202080C);
	r5 = D(r5, s0_0_1, 0x04E526FB, 0xF9ED0A06, 0xFAF9F311, 0x00F1FFFE);
	r6 = D(r6, s0_0_1, 0x0FF10213, 0xFEE8F4F7, 0xF8C71F03, 0xF41DF1F2);
	r7 = D(r7, s0_0_1, 0xF307EBEF, 0x0706F7F6, 0xF1E81AF8, 0x06E8E5FD);
	r0 = D(r0, s0_0_2, 0x2403FB08, 0x0500FC05, 0xF7F119F2, 0x03F9040A);
	r1 = D(r1, s0_0_2, 0x02F90AEE, 0x2825F1F7, 0x0109F5E8, 0xFF1EE8F4);
	r2 = D(r2, s0_0_2, 0x0003FEFC, 0x0505FEEE, 0xFC0005FB, 0x12130F04);
	r3 = D(r3, s0_0_2, 0x0BF80C01, 0x030D02F5, 0x00E31711, 0x13FF1506);
	r4 = D(r4, s0_0_2, 0x03F9130C, 0x14FDF606, 0x08FF01FC, 0xFE1B03F6);
	r5 = D(r5, s0_0_2, 0xF716F6F7, 0x06020204, 0x0CF10B07, 0xFC01FBF0);
	r6 = D(r6, s0_0_2, 0xFD10F5F8, 0x02FEFDFB, 0x0412FD07, 0x0CEB0907);
	r7 = D(r7, s0_0_2, 0x03F40AFB, 0x05F809FA, 0xF3FE10F8, 0x01F511FD);
	r0 = D(r0, s0_1_0, 0x18EF31E8, 0xFFEA0DF8, 0x06321410, 0xF90B0D18);
	r1 = D(r1, s0_1_0, 0xFE070404, 0x0FE914F8, 0xF7070F01, 0x01ECFF15);
	r2 = D(r2, s0_1_0, 0xFEFAF90D, 0x0F0C0B13, 0xFC050D11, 0x06100AFE);
	r3 = D(r3, s0_1_0, 0xFAF3FBDF, 0xEDF2FCE9, 0xFA080CF3, 0x12F21400);
	r4 = D(r4, s0_1_0, 0x00F41310, 0x090A07E1, 0xFDFCFFF7, 0xF00C04F6);
	r5 = D(r5, s0_1_0, 0xF8F600F4, 0x020008E8, 0x06F6070C, 0x05041100);
	r6 = D(r6, s0_1_0, 0xF6F207F5, 0xF9E7FA22, 0xF9DCF329, 0x0003FA27);
	r7 = D(r7, s0_1_0, 0xF40703F9, 0xF905F502, 0xF328F807, 0x10DE1116);
	r0 = D(r0, s0_1_1, 0xD6DC0026, 0xF5F801F2, 0x0C0410F1, 0xF7FDF411);
	r1 = D(r1, s0_1_1, 0xEDEFFE1E, 0xFA0BF815, 0xDD170503, 0x061CED20);
	r2 = D(r2, s0_1_1, 0x08E50FFE, 0x1BDA0607, 0xF9F1100A, 0x211C0AFB);
	r3 = D(r3, s0_1_1, 0xF6EEDEEB, 0x1723CD06, 0x08030527, 0xCB20EF06);
	r4 = D(r4, s0_1_1, 0xFF1CFB02, 0x0005F7F5, 0x01EF020E, 0xFEFEF5F9);
	r5 = D(r5, s0_1_1, 0x1FDE0BF7, 0xF2FE0401, 0xF40B1003, 0x0D0EF704);
	r6 = D(r6, s0_1_1, 0x2F0C0C1C, 0x0410F309, 0xF4FFE304, 0xE61AF81A);
	r7 = D(r7, s0_1_1, 0x09E0F516, 0xFD1901FB, 0x050208CC, 0xF6FBFAFD);
	r0 = D(r0, s0_1_2, 0xF3F80904, 0xFEFA05FB, 0x130AF510, 0xFB031006);
	r1 = D(r1, s0_1_2, 0xFFFA04FB, 0xE5F40DE0, 0xFDE6F8F9, 0x020E0808);
	r2 = D(r2, s0_1_2, 0x000109F6, 0x170B01F8, 0x02FD0D09, 0x0B000D02);
	r3 = D(r3, s0_1_2, 0xFC00FF0B, 0xF30CFA07, 0xEE0B0114, 0xE8F2ECF4);
	r4 = D(r4, s0_1_2, 0xFAF601FD, 0xE9FE0A01, 0x02FA0AFE, 0x070B06E4);
	r5 = D(r5, s0_1_2, 0x08FA0DEF, 0x00042015, 0xF7F909ED, 0x0101FEF9);
	r6 = D(r6, s0_1_2, 0xE734E8EB, 0xFE00E907, 0xFD1D0BF6, 0xFD1F04F1);
	r7 = D(r7, s0_1_2, 0x05FE0707, 0xF5FE0203, 0x1202F9DE, 0x01F0F206);
	r0 = D(r0, s0_2_0, 0x030F03FC, 0xFD05010E, 0xE6FF0713, 0x0214FACD);
	r1 = D(r1, s0_2_0, 0x040604FC, 0x0803FDFF, 0xF8ED1102, 0xFA0BFAFD);
	r2 = D(r2, s0_2_0, 0xFD0305E8, 0x0B0CFA07, 0xFBFF03F1, 0xF603FC10);
	r3 = D(r3, s0_2_0, 0x0AEA07F7, 0xE104EB0D, 0x000AFE09, 0xE4060233);
	r4 = D(r4, s0_2_0, 0xF719FAF5, 0x00F50104, 0xF9F703FD, 0x0AF50509);
	r5 = D(r5, s0_2_0, 0xF9FCFD07, 0x030CF308, 0x04FC0817, 0xFEFC0304);
	r6 = D(r6, s0_2_0, 0x1308E923, 0x0BEF030A, 0xFE0D10F6, 0xFD0FFC04);
	r7 = D(r7, s0_2_0, 0xF7FAFF13, 0xFDFB02FE, 0x07F5FF13, 0x0B0800F9);
	r0 = D(r0, s0_2_1, 0xA1E4FBF3, 0x0EE60AFA, 0x0B18FB19, 0x020C0BF5);
	r1 = D(r1, s0_2_1, 0x0206F5FE, 0xEDF905F8, 0xE601F513, 0xF7F70307);
	r2 = D(r2, s0_2_1, 0xFDE6F9EE, 0x1512FC11, 0x03ED09FF, 0x0202F311);
	r3 = D(r3, s0_2_1, 0xFB0205F8, 0x150D110A, 0xFB07FF06, 0x1ECC3208);
	r4 = D(r4, s0_2_1, 0x05EEF70D, 0xEC26ED12, 0x05F8F9FD, 0x050807E7);
	r5 = D(r5, s0_2_1, 0xFA02F816, 0x0608F215, 0x06FBF60C, 0xFAF9F806);
	r6 = D(r6, s0_2_1, 0xF82EF106, 0xF9F8FE10, 0x1909F2F4, 0xFCDB0CE7);
	r7 = D(r7, s0_2_1, 0xEF140706, 0x000007F4, 0x06110301, 0xF1FCF6FC);
	r0 = D(r0, s0_2_2, 0xE7060C12, 0xFEFFFAFE, 0x0C091508, 0x0F05F507);
	r1 = D(r1, s0_2_2, 0xFCF80B02, 0xF6E7FDF7, 0x09F91914, 0xFE05F905);
	r2 = D(r2, s0_2_2, 0xFD01F9FB, 0x17020F06, 0x01FBF40C, 0x06F50208);
	r3 = D(r3, s0_2_2, 0x02FAF9FD, 0x0E0103FA, 0x0E04080C, 0x1A0EF7F9);
	r4 = D(r4, s0_2_2, 0x03FB110F, 0x07FC0401, 0x0501FCFC, 0xFFFD07F4);
	r5 = D(r5, s0_2_2, 0xFC030201, 0x0A180510, 0xF7EF030A, 0xFF0407F4);
	r6 = D(r6, s0_2_2, 0xD5041D09, 0x0A01FCFE, 0x14FB0910, 0xF7F9F815);
	r7 = D(r7, s0_2_2, 0x060918EF, 0x02FC0300, 0x05FF0D0C, 0x03F405F2);
	r0 = D(r0, s1_0_0, 0x03142001, 0x16EB0201, 0xF8BE0801, 0x0E0EFEFC);
	r1 = D(r1, s1_0_0, 0x0CF2FE06, 0xD90300F8, 0x01000BF5, 0xF10E1304);
	r2 = D(r2, s1_0_0, 0xF4080500, 0x05F902EB, 0xEEF3F9F5, 0x14FA0304);
	r3 = D(r3, s1_0_0, 0x16F50503, 0xF51913DE, 0x0BF60B03, 0x09A91302);
	r4 = D(r4, s1_0_0, 0xED08FEF8, 0xF803FAFA, 0xF8080801, 0xF6FAFA05);
	r5 = D(r5, s1_0_0, 0x150E1111, 0xE00E05FB, 0x0EECFB07, 0x03FEFC02);
	r6 = D(r6, s1_0_0, 0xBC0E040B, 0xFAF7F9F9, 0xF2D709F9, 0xF1D4FFFD);
	r7 = D(r7, s1_0_0, 0xE4E6F307, 0xFAF3E704, 0x16F3F614, 0xF7E4FF03);
	r0 = D(r0, s1_0_1, 0x05130D0E, 0xFF0705FE, 0x0CBB1506, 0x0C0305ED);
	r1 = D(r1, s1_0_1, 0xDBD7FCF6, 0x210D0C0E, 0x1EEAFFEF, 0xE2F701F4);
	r2 = D(r2, s1_0_1, 0xF1F8F8FE, 0xFBE20A0E, 0x0DF40302, 0xDAB20FF3);
	r3 = D(r3, s1_0_1, 0x1B1805FC, 0xEC0307F3, 0xF3F70CEA, 0xFDCE1A09);
	r4 = D(r4, s1_0_1, 0xF1EAFBF6, 0x19F10EED, 0x1205010D, 0xED0B05F7);
	r5 = D(r5, s1_0_1, 0xE1F20404, 0xE80EFD04, 0x11FCF1F5, 0xFEF3FEFB);
	r6 = D(r6, s1_0_1, 0xECD807DB, 0x0F011306, 0x0A0B0512, 0x2B02011E);
	r7 = D(r7, s1_0_1, 0x0DE60101, 0x02FD030D, 0xD8F7F1EF, 0xEAD2F4F7);
	r0 = D(r0, s1_0_2, 0xF7F70100, 0x0D19FB0B, 0x04B7020C, 0xFCFA08FA);
	r1 = D(r1, s1_0_2, 0x13190C0B, 0x14FBE802, 0x0FF50C07, 0x0608F804);
	r2 = D(r2, s1_0_2, 0xF0FD04FD, 0xECFFF80A, 0x15F202F8, 0xF714EF10);
	r3 = D(r3, s1_0_2, 0x1106FEFF, 0xEE0EFE03, 0xECF817F9, 0x16C215F2);
	r4 = D(r4, s1_0_2, 0xC9F302FA, 0xF3E812EA, 0xF6FCFB02, 0x1908F30B);
	r5 = D(r5, s1_0_2, 0x011AFA14, 0xF6090AFF, 0xECE6FBE8, 0x1205FA0A);
	r6 = D(r6, s1_0_2, 0x3B09F506, 0x07ED0DF6, 0x0DFCFE01, 0xE4EBCBF8);
	r7 = D(r7, s1_0_2, 0xF8F90104, 0x03020204, 0x0629000F, 0xE9FD0AF3);
	r0 = D(r0, s1_1_0, 0xF5F2FCEA, 0xFAF2110D, 0x05FCF2EE, 0xFEF901E4);
	r1 = D(r1, s1_1_0, 0xF0F9FE0D, 0x02F40DED, 0xE701130B, 0xEC060B06);
	r2 = D(r2, s1_1_0, 0x0405F5F2, 0x0411FDE5, 0x02FC07FB, 0xDAFC020F);
	r3 = D(r3, s1_1_0, 0x08D9F6F3, 0xF2EEF40B, 0xF509FDF9, 0xE802CE0B);
	r4 = D(r4, s1_1_0, 0xFC0F01E4, 0x070605FE, 0xF30E0108, 0x1404FA0F);
	r5 = D(r5, s1_1_0, 0xF0110916, 0x0C09FB08, 0xDA14F4EB, 0x07F2EE07);
	r6 = D(r6, s1_1_0, 0xCBD4172B, 0x06F8F9F6, 0xB6CAF9F3, 0x30EEF2E7);
	r7 = D(r7, s1_1_0, 0xEA06E300, 0xF418F9FB, 0x16090A18, 0xF9E207F6);
	r0 = D(r0, s1_1_1, 0x1400171C, 0x09050DFE, 0xF5FE050C, 0x1AF902EB);
	r1 = D(r1, s1_1_1, 0x11110FE6, 0xE8F60240, 0xB9CBFDEF, 0xE207FC0F);
	r2 = D(r2, s1_1_1, 0xE6EC14F1, 0x0D19F1E3, 0xFEEE04FB, 0x0EF508FB);
	r3 = D(r3, s1_1_1, 0x14F302F0, 0x062AF510, 0xFDF704F2, 0xE335FD08);
	r4 = D(r4, s1_1_1, 0xF51C1304, 0x02CCF001, 0xFD020CF1, 0xEEFEF2FA);
	r5 = D(r5, s1_1_1, 0xF11A0006, 0xF70705E3, 0x05E107F3, 0x05F4F017);
	r6 = D(r6, s1_1_1, 0xEA06F1DF, 0x00F9EEFD, 0x32C61DE4, 0xDCDEFDD9);
	r7 = D(r7, s1_1_1, 0xFCFAFB21, 0xF216F804, 0x0725EBC5, 0x03E4FC17);
	r0 = D(r0, s1_1_2, 0xDE10F8D5, 0xF5C41F11, 0x151A0200, 0x01FD0AF1);
	r1 = D(r1, s1_1_2, 0x04E218FC, 0x13C5E70A, 0x421434FB, 0xEC0DF9EC);
	r2 = D(r2, s1_1_2, 0xFE0102F6, 0x02FFE400, 0xF7FC05F9, 0xD408FFFB);
	r3 = D(r3, s1_1_2, 0x0FFCEEF0, 0xF4240FFB, 0x001528F9, 0xC2EE0CF3);
	r4 = D(r4, s1_1_2, 0xE8FFFFFB, 0x2007EF13, 0xF9FAECFC, 0x0CDBF8F9);
	r5 = D(r5, s1_1_2, 0xF817F4FF, 0xE6150EE4, 0x1ADF090A, 0xFCE4E0F4);
	r6 = D(r6, s1_1_2, 0x04D4E4E2, 0x050C0E01, 0x0CCE19F3, 0x09F0E8F9);
	r7 = D(r7, s1_1_2, 0x0E16D7EE, 0x0003FF03, 0xFC021F09, 0xF9F11602);
	r0 = D(r0, s1_2_0, 0xE0FB1004, 0xE7F60FF5, 0x27F7100B, 0x0505FCD0);
	r1 = D(r1, s1_2_0, 0x00FE0AFF, 0xEC0915FE, 0x381C0C07, 0xDD0303FA);
	r2 = D(r2, s1_2_0, 0x0DEDFCFF, 0x07F50BFC, 0x03F60BF0, 0x03F70602);
	r3 = D(r3, s1_2_0, 0x17FFEDEA, 0x29180500, 0x15FF05FD, 0x2BD731F8);
	r4 = D(r4, s1_2_0, 0xE809F5F5, 0x09150101, 0xFAFAFC12, 0xEAF10007);
	r5 = D(r5, s1_2_0, 0xD50314F9, 0xCCED0400, 0x1AE1FAEE, 0xFB02F6FB);
	r6 = D(r6, s1_2_0, 0x8127DCE8, 0x160BF0EA, 0x00F4FA09, 0x01E8FDFE);
	r7 = D(r7, s1_2_0, 0x17F30710, 0x14FDF70A, 0xC9F3010F, 0x09FBFA05);
	r0 = D(r0, s1_2_1, 0x1523F917, 0xF8FC1DFE, 0xF7FB0117, 0x0A191FE1);
	r1 = D(r1, s1_2_1, 0xFE020206, 0xE8F7EC07, 0x1BEB0B07, 0xDB120FF2);
	r2 = D(r2, s1_2_1, 0xF710F412, 0x0DFE0C00, 0x04180609, 0xF7ED0B09);
	r3 = D(r3, s1_2_1, 0x0CD609EF, 0x211308E0, 0xF8F70F0B, 0xD0DC0BEE);
	r4 = D(r4, s1_2_1, 0xEE1D0E05, 0x1EE41102, 0xFDF40230, 0xF405F0F9);
	r5 = D(r5, s1_2_1, 0xFAFAED0B, 0xDC101ED1, 0xEDF30C0F, 0x1BFDF3FD);
	r6 = D(r6, s1_2_1, 0x060912D1, 0xFEE000DA, 0x10250731, 0x3708F8FB);
	r7 = D(r7, s1_2_1, 0xEFE30313, 0xF20304F6, 0xE3F9EB05, 0xD903FCF3);
	r0 = D(r0, s1_2_2, 0x1B0FF3FB, 0x09F30102, 0x11EEDCEF, 0xFEE9EBED);
	r1 = D(r1, s1_2_2, 0x01090E0A, 0xF8F0DF0D, 0x04E5E4FC, 0xEAFE0F05);
	r2 = D(r2, s1_2_2, 0x030113FF, 0xF408FFFB, 0xEB05F1FA, 0xECFDFD01);
	r3 = D(r3, s1_2_2, 0x05F5FDFE, 0x0FF90D03, 0x05FF0DF1, 0x11CAFA0F);
	r4 = D(r4, s1_2_2, 0xFB03E2E6, 0x2002EFDC, 0xF80BFA13, 0xFB120A00);
	r5 = D(r5, s1_2_2, 0xEEFA0E00, 0xE4FD0AF7, 0x29FBE9EB, 0x0B05E7FE);
	r6 = D(r6, s1_2_2, 0xF607CC08, 0x06F90BFE, 0xF81E08FC, 0xF2F3FD00);
	r7 = D(r7, s1_2_2, 0xFFEEEBFA, 0xF9000C10, 0xF60E07F9, 0xF7DFFB11);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-2.492e-02, 1.134e-02, -2.384e-02, -4.481e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-9.361e-04, -1.693e-02, -2.926e-02, -6.919e-03);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(2.179e-02, -1.371e-01, 1.898e-03, -9.253e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(1.243e-02, -4.098e-02, -2.741e-02, -4.585e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(5.969e-03, 2.068e-02, 1.108e-02, -4.698e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(2.436e-02, -2.398e-02, 1.595e-02, 1.046e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-5.644e-02, 1.169e-02, -2.423e-02, -2.174e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(6.427e-05, 1.949e-02, -1.149e-02, 4.856e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-4x32-BILINEAR-MPV-NVL-conv4
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFEF7FDFD, 0x05FC22FF, 0x03FD0007, 0x07060508);
	r1 = D(r1, s0_0_0, 0x20080AFD, 0x0B0405EB, 0x0400F403, 0x0102FAF8);
	r2 = D(r2, s0_0_0, 0xFCFAFC02, 0x0AFE0106, 0xF600FE08, 0xF8EEF819);
	r3 = D(r3, s0_0_0, 0xFD00FF0C, 0xFB050302, 0xFF01FD04, 0x08F7F3F9);
	r4 = D(r4, s0_0_0, 0xF816FDFD, 0x00F92702, 0x060401FF, 0x000103F3);
	r5 = D(r5, s0_0_0, 0x04EE0615, 0xFF00FB04, 0x01040A06, 0x06FD01FB);
	r6 = D(r6, s0_0_0, 0x04010402, 0xF2FDF703, 0xFDF3EFF0, 0x0202FD0C);
	r7 = D(r7, s0_0_0, 0x0408FE00, 0x0507FC01, 0xF8C0FCFE, 0xF103FB00);
	r0 = D(r0, s0_0_1, 0xFEED1104, 0xDFF3FE07, 0x06EEF9EB, 0xF600FBFC);
	r1 = D(r1, s0_0_1, 0x03F7F2FE, 0x080AF305, 0xFCFBFFF4, 0xDC07FC0E);
	r2 = D(r2, s0_0_1, 0xF4FEFEFB, 0xFAF704FF, 0xF20501FF, 0x2DCCD4B2);
	r3 = D(r3, s0_0_1, 0xEB0E0102, 0x0BFDF5EF, 0xF802F7F8, 0x0601F809);
	r4 = D(r4, s0_0_1, 0xFE06FBFD, 0xFBFEEE03, 0xE50CF807, 0x2A04FB00);
	r5 = D(r5, s0_0_1, 0xF2E1F1FD, 0x06FD0106, 0xF9E2FFEB, 0x17F804F4);
	r6 = D(r6, s0_0_1, 0xF706FA02, 0xEEFDF609, 0xE6EAC946, 0xD8FC0702);
	r7 = D(r7, s0_0_1, 0xF90505FB, 0x0FF5FBF5, 0xD8FBE62C, 0xC308F61B);
	r0 = D(r0, s0_0_2, 0x03EFE403, 0xECF3C32B, 0xF2100906, 0xFFE4CEF0);
	r1 = D(r1, s0_0_2, 0x060AEE0B, 0x0200F8FA, 0xFAFCFB05, 0x11EEDFF7);
	r2 = D(r2, s0_0_2, 0xFAFCFE00, 0x0003F8F7, 0xFF00FA07, 0xE8EC2048);
	r3 = D(r3, s0_0_2, 0xF8FD07FE, 0xFEFAF80D, 0x0CFDEE02, 0xFE060D0D);
	r4 = D(r4, s0_0_2, 0x0908EFF5, 0x030BF323, 0x0AF808FC, 0x02FEF6FF);
	r5 = D(r5, s0_0_2, 0xF3F3DEFF, 0x09EFEEEE, 0xF807F3FD, 0x00F3F8FE);
	r6 = D(r6, s0_0_2, 0xF80E000B, 0xEF131906, 0x17F208F4, 0xFE0204FE);
	r7 = D(r7, s0_0_2, 0x06FBEBFA, 0xEE02090C, 0x1BDF1A2D, 0xD6FEF501);
	r0 = D(r0, s0_1_0, 0xFC02FC03, 0x00ED100A, 0x0206D9F1, 0xF9040210);
	r1 = D(r1, s0_1_0, 0xE903DF1D, 0xF5FAF6F8, 0xFB00F8FB, 0x010106F0);
	r2 = D(r2, s0_1_0, 0x05000506, 0xFEFE0308, 0x0007F8FA, 0x0AFBE3FA);
	r3 = D(r3, s0_1_0, 0x01FC0A00, 0x0306F3FD, 0x00FE01FF, 0x0DF5E10E);
	r4 = D(r4, s0_1_0, 0xF0050700, 0x0401DA0D, 0xFF09F101, 0x0AFF040B);
	r5 = D(r5, s0_1_0, 0x07F2F606, 0x0400F101, 0xF6F8FDF4, 0x05FA05FD);
	r6 = D(r6, s0_1_0, 0x0007FCFF, 0xF6FA03FB, 0x031BFBB3, 0xF3FEFEF9);
	r7 = D(r7, s0_1_0, 0xFDF315FC, 0xFAFFE705, 0xE0160712, 0xFEE4FA00);
	r0 = D(r0, s0_1_1, 0x0EF600F1, 0xE3BAFF02, 0x02E0F214, 0x02F9E4E6);
	r1 = D(r1, s0_1_1, 0xA001020E, 0xEC0C0610, 0x0CE5EEF2, 0x03EDF609);
	r2 = D(r2, s0_1_1, 0x01FC0807, 0x00EEEBF2, 0xFAFC03FC, 0xFD04FCAC);
	r3 = D(r3, s0_1_1, 0xF8F70304, 0x02F703FB, 0x06010101, 0x02F8F102);
	r4 = D(r4, s0_1_1, 0xF101080D, 0x11E00B05, 0x01F50200, 0xC9FC2AEB);
	r5 = D(r5, s0_1_1, 0xF8F6FD13, 0xFBF109FB, 0x03E00005, 0x0C000EFA);
	r6 = D(r6, s0_1_1, 0xF502F3FA, 0xDFE7010D, 0x18CF813F, 0x3603D711);
	r7 = D(r7, s0_1_1, 0x0AFD05FF, 0xFEF909D1, 0x1907F7DD, 0xF4E30E0B);
	r0 = D(r0, s0_1_2, 0x07F70D0B, 0xDDA32715, 0xF8E1F0DD, 0x060607FD);
	r1 = D(r1, s0_1_2, 0xF816130C, 0x050DF7F5, 0xF7F4F708, 0xF811EAE6);
	r2 = D(r2, s0_1_2, 0xEF021406, 0x0EF80302, 0xF8FFF5FF, 0x0E1BFD3B);
	r3 = D(r3, s0_1_2, 0xFCFFF50B, 0x0CF90F0F, 0x0AFBF0F9, 0x0AFD0D0B);
	r4 = D(r4, s0_1_2, 0xF00C2207, 0xFBDC0110, 0x04EEE1E6, 0xFA00E207);
	r5 = D(r5, s0_1_2, 0xE9F5ECFE, 0x0BF0F903, 0xFAF5030A, 0x05FC0AFD);
	r6 = D(r6, s0_1_2, 0xFCE103E8, 0xEEF4F3F7, 0xFA11F1B7, 0x04FA18FB);
	r7 = D(r7, s0_1_2, 0xFEE209FC, 0x0CF40B06, 0xA80FB1FD, 0xF0DF020E);
	r0 = D(r0, s0_2_0, 0xFD010201, 0xF0A5F0EF, 0xF702100F, 0xFCFEFF0D);
	r1 = D(r1, s0_2_0, 0xF6EE2AFD, 0xF903FBEB, 0xFC020604, 0x0901FEF6);
	r2 = D(r2, s0_2_0, 0x00FBF70B, 0x00FE0104, 0xFEFBFB01, 0x1DEB9C1E);
	r3 = D(r3, s0_2_0, 0x02FCF4FF, 0x02F9F102, 0xFCFB0706, 0x1201E001);
	r4 = D(r4, s0_2_0, 0x081FD108, 0x05FD0C0C, 0xF8F5F608, 0x0602F7FD);
	r5 = D(r5, s0_2_0, 0x02F902FB, 0xFAFF0B0B, 0xFF0601FB, 0xFEFEFEFF);
	r6 = D(r6, s0_2_0, 0x01F9F905, 0x01F405FC, 0xFC0507D8, 0xF9FC0AFE);
	r7 = D(r7, s0_2_0, 0x08F1F5F5, 0x07F7E108, 0x818CD019, 0x04FF05FB);
	r0 = D(r0, s0_2_1, 0xF803010F, 0xEAF0F2F6, 0x020BE8F3, 0x060101E5);
	r1 = D(r1, s0_2_1, 0xCFB5F41C, 0x0102FC41, 0xFB09FB08, 0xFAFAFF21);
	r2 = D(r2, s0_2_1, 0x00FF05FE, 0xFDFF0A08, 0xFA040201, 0xE0001781);
	r3 = D(r3, s0_2_1, 0x10F4FCFD, 0x010801F9, 0x05030203, 0xF609EE13);
	r4 = D(r4, s0_2_1, 0xD7F3FE07, 0xF0F0FE09, 0xFBFEF9FC, 0xFB080203);
	r5 = D(r5, s0_2_1, 0xFAFE05F7, 0xFBEFF6F6, 0xFA040315, 0x02F6F9FF);
	r6 = D(r6, s0_2_1, 0x05FD030B, 0x0CFC0509, 0x17F4CC4F, 0xFFFDFFFF);
	r7 = D(r7, s0_2_1, 0xFCFCEEF7, 0xFC0609F1, 0x81812323, 0x08F5FB00);
	r0 = D(r0, s0_2_2, 0xFD010102, 0xF5ECE7ED, 0x07F804FC, 0x03FBF90E);
	r1 = D(r1, s0_2_2, 0xE3CFE618, 0xF8FDFBF8, 0x07F602F3, 0xFF06F2F9);
	r2 = D(r2, s0_2_2, 0xF5FA02FC, 0x0AFC05F0, 0x0103FE04, 0x1403F53D);
	r3 = D(r3, s0_2_2, 0xF601FE03, 0x03FA070C, 0x0EF7FB00, 0x0CFB0804);
	r4 = D(r4, s0_2_2, 0x02ECE407, 0xFEEE01FE, 0x06F60000, 0x0401FB08);
	r5 = D(r5, s0_2_2, 0x0903F3FE, 0x00FB01FB, 0xF90000FB, 0xFAFB02FE);
	r6 = D(r6, s0_2_2, 0x0501F505, 0x03F9FFFE, 0xF20108FA, 0xFDFC02F7);
	r7 = D(r7, s0_2_2, 0xF40503FD, 0x0BFA070E, 0x81810019, 0x00F800FC);
	r0 = D(r0, s1_0_0, 0xFE00F1EC, 0xF62DF707, 0x1109EE01, 0x0DF50607);
	r1 = D(r1, s1_0_0, 0xF70B0305, 0xEEFFF805, 0x0305E0EE, 0xFD020302);
	r2 = D(r2, s1_0_0, 0x0302F804, 0x0FFAF6F7, 0xFC040003, 0x0CED11DB);
	r3 = D(r3, s1_0_0, 0x0A030305, 0xFD0AFE01, 0x01F800FF, 0x0BEDFEF5);
	r4 = D(r4, s1_0_0, 0x0E08F403, 0xFC27F310, 0x060800FB, 0xFDFF0309);
	r5 = D(r5, s1_0_0, 0xFC110402, 0x0104F802, 0x0013F700, 0x00F2FE07);
	r6 = D(r6, s1_0_0, 0x09FFFE01, 0xF7F808FB, 0xF7FF0AED, 0x0201F6FA);
	r7 = D(r7, s1_0_0, 0x030B0406, 0x07F406F5, 0x15FEF2F6, 0xF1F10D02);
	r0 = D(r0, s1_0_1, 0x08F814EB, 0xF2130D0A, 0xFEFEF504, 0xF6FA0E05);
	r1 = D(r1, s1_0_1, 0xF90E04FB, 0xF8070000, 0x17FAF2FB, 0xFFF204FE);
	r2 = D(r2, s1_0_1, 0x00F9FF05, 0xFDEAFFFE, 0xFFFDFFFE, 0xD3F6E2C3);
	r3 = D(r3, s1_0_1, 0x08010A09, 0xFF0002F5, 0x03FBF200, 0xF704F20B);
	r4 = D(r4, s1_0_1, 0xF504FD01, 0xF100F207, 0x0300FF07, 0xF601FB09);
	r5 = D(r5, s1_0_1, 0x0FDFF7E2, 0x06050406, 0x020A0DFF, 0xFA0802FC);
	r6 = D(r6, s1_0_1, 0x020EF702, 0x0E0DFF05, 0xF80500D3, 0x0BF6FBFE);
	r7 = D(r7, s1_0_1, 0xFA050105, 0xF012ECF6, 0x15EA1927, 0xD9F6FE10);
	r0 = D(r0, s1_0_2, 0x0309FB02, 0xE034EA0A, 0x0B090D01, 0xF60AF1E8);
	r1 = D(r1, s1_0_2, 0xF211FCFE, 0xF70BF500, 0xF800010A, 0xFD02EBF8);
	r2 = D(r2, s1_0_2, 0x0106FCFF, 0xFD0200F4, 0xFD02FDFC, 0xFB051AFD);
	r3 = D(r3, s1_0_2, 0x07FC0100, 0x03EFF60A, 0xF6FFF7F6, 0x01FA05FC);
	r4 = D(r4, s1_0_2, 0xFFFDFF06, 0xFE05FE06, 0x020DFBF7, 0xFE00FE0C);
	r5 = D(r5, s1_0_2, 0xEDF00801, 0xFD06FA00, 0xFDFF04FC, 0xF9FF0004);
	r6 = D(r6, s1_0_2, 0xFF060BFC, 0x0A020900, 0x00F504F6, 0x03FE01FE);
	r7 = D(r7, s1_0_2, 0xF50303F4, 0x0B011108, 0xF8181610, 0x0A050007);
	r0 = D(r0, s1_1_0, 0x030104FA, 0x26D904F0, 0x06EAF4FE, 0x000B0702);
	r1 = D(r1, s1_1_0, 0xEED524FA, 0xE8FF150C, 0x0BF6F902, 0xF20E10FB);
	r2 = D(r2, s1_1_0, 0x11FEFD04, 0xF407F104, 0xF90504FB, 0x10E412C4);
	r3 = D(r3, s1_1_0, 0x1012F6FB, 0x00F1FF01, 0x09FD0100, 0xEFFF13FD);
	r4 = D(r4, s1_1_0, 0x01F7120D, 0x12F7FBFC, 0xFE0DF503, 0x09FBF40A);
	r5 = D(r5, s1_1_0, 0xEF09050A, 0xF8F9FE08, 0x3005FDFC, 0x050805FD);
	r6 = D(r6, s1_1_0, 0xFC0901FC, 0x030E0216, 0x14FF1007, 0xF30306F7);
	r7 = D(r7, s1_1_0, 0x11F2FF10, 0xFFF01507, 0x187F8119, 0x09F8EC08);
	r0 = D(r0, s1_1_1, 0xF50B07F8, 0x35DC2CF5, 0x390405DB, 0x0E1D0EF0);
	r1 = D(r1, s1_1_1, 0x2DE01D15, 0x0EFB03F1, 0x0D0A17F3, 0xEA1C0FE9);
	r2 = D(r2, s1_1_1, 0xEBF9F70F, 0x21000AFA, 0xFDF607F0, 0xF1F419FE);
	r3 = D(r3, s1_1_1, 0x0500F507, 0x021518FD, 0xF4F80303, 0xEDF3FC10);
	r4 = D(r4, s1_1_1, 0x0FF10206, 0x28FD1CE8, 0xF91B17F6, 0x1B0A16C9);
	r5 = D(r5, s1_1_1, 0xBBFF1F10, 0xFE100607, 0x2921FC08, 0x0A0AF8FF);
	r6 = D(r6, s1_1_1, 0xFBF8F8FE, 0xF004F3F9, 0x081009C4, 0xDBF3E034);
	r7 = D(r7, s1_1_1, 0x0C0814F6, 0xEBFEED03, 0x2133F1EE, 0x1B0A15FA);
	r0 = D(r0, s1_1_2, 0xFF06FFEC, 0x1AFA04D7, 0xF507EB05, 0xFAFBFCF5);
	r1 = D(r1, s1_1_2, 0x23E20B03, 0x04F7F902, 0x2005EEF5, 0x02F70203);
	r2 = D(r2, s1_1_2, 0x03FF0107, 0x12F50EF0, 0xFFF9FE03, 0x0715EFFE);
	r3 = D(r3, s1_1_2, 0xF8100010, 0xF5FFF604, 0x05FA05F7, 0x0BFD04FE);
	r4 = D(r4, s1_1_2, 0x0102FAFE, 0x0D1BFFF7, 0x02F3FBFE, 0xF5F8FD0E);
	r5 = D(r5, s1_1_2, 0xE6E9E10A, 0x0206FD06, 0x0E0E0400, 0xF9030804);
	r6 = D(r6, s1_1_2, 0xFA04FBEA, 0x010EF0F0, 0xEFF90606, 0x040306F9);
	r7 = D(r7, s1_1_2, 0x0BF1F500, 0xF80F08FD, 0xDBCC12E3, 0x0B09FDF2);
	r0 = D(r0, s1_2_0, 0xF9FB0003, 0x0E06F70A, 0x05FFFA02, 0x08070402);
	r1 = D(r1, s1_2_0, 0x2A28D300, 0xF312320F, 0xFB02FA02, 0x0D0AFFF5);
	r2 = D(r2, s1_2_0, 0xFEF4DE00, 0xFC02FBFD, 0x03F8EE03, 0x15F324F5);
	r3 = D(r3, s1_2_0, 0x0106F9FB, 0x01FEF501, 0x03FB02FF, 0x110507FD);
	r4 = D(r4, s1_2_0, 0x0CB8F6F2, 0xF90709FE, 0x0911F60C, 0xFBFDF103);
	r5 = D(r5, s1_2_0, 0x05F7FFFB, 0xF60FF709, 0xFDF300FF, 0x0205F802);
	r6 = D(r6, s1_2_0, 0x0DF7FB04, 0xFEFFF10B, 0x18071F1B, 0x02FF07FC);
	r7 = D(r7, s1_2_0, 0x22F9F7FB, 0xFE0A1703, 0x040FF4D9, 0xEF05FB03);
	r0 = D(r0, s1_2_1, 0x05F6FE03, 0x292BDEF1, 0x1F0208F7, 0x05120D07);
	r1 = D(r1, s1_2_1, 0x083ADCEC, 0xE6FE1D17, 0x14FFF9FF, 0xFA0FF7F7);
	r2 = D(r2, s1_2_1, 0x0F010203, 0x090100FC, 0xF602FBFE, 0x1824E9F6);
	r3 = D(r3, s1_2_1, 0x05FE0A04, 0xF5050402, 0x1B01FFF9, 0x10F1DAF1);
	r4 = D(r4, s1_2_1, 0x3102DEF4, 0x210AF2FB, 0x06E9E60E, 0xF4F5030B);
	r5 = D(r5, s1_2_1, 0xFDF1F4FC, 0x12F5E4FB, 0x03FBF601, 0x1008FA00);
	r6 = D(r6, s1_2_1, 0x00070007, 0x02FD1402, 0x0D1614F3, 0x0D05F6F8);
	r7 = D(r7, s1_2_1, 0x260FD7FD, 0x14FDE8F9, 0x0634F234, 0xF701FA04);
	r0 = D(r0, s1_2_2, 0x03F9FDFF, 0x1019FA0E, 0x2102FCEB, 0x0307F1FA);
	r1 = D(r1, s1_2_2, 0xFB4D00F2, 0xF8FF0206, 0x0F0602FA, 0x0C050104);
	r2 = D(r2, s1_2_2, 0xFC03F207, 0x0102FD07, 0xFDFEFA04, 0xEA12170B);
	r3 = D(r3, s1_2_2, 0x0AFDFAF7, 0x0508FD02, 0x0805FBFA, 0xEF05080F);
	r4 = D(r4, s1_2_2, 0x0C24EF08, 0xFD1FF700, 0xF6100406, 0xFFFDF803);
	r5 = D(r5, s1_2_2, 0xE2070308, 0xF9020B02, 0xFEFDFCFE, 0x050104FE);
	r6 = D(r6, s1_2_2, 0xFD00FF08, 0xFAFC0305, 0x070C0408, 0xF9FF0601);
	r7 = D(r7, s1_2_2, 0x0502060B, 0xFF030F04, 0xAA2536FE, 0xF2FE0106);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF9020D09, 0xF90CFBE9, 0x05FB0310, 0x180AF9FE);
	r1 = D(r1, s0_0_0, 0xFE0204FC, 0x0BFBF4FD, 0x01F4FF06, 0x0301F100);
	r2 = D(r2, s0_0_0, 0x080006FB, 0xFF00FB05, 0x0DFC0B04, 0xFEE617F9);
	r3 = D(r3, s0_0_0, 0x01FC03FB, 0x08FDFA01, 0x03FE0301, 0x04F60C03);
	r4 = D(r4, s0_0_0, 0x02F80510, 0x04141506, 0x07F8FC01, 0xED03F8F8);
	r5 = D(r5, s0_0_0, 0x210E0C09, 0x01FC0404, 0x0E110506, 0xFB0700FF);
	r6 = D(r6, s0_0_0, 0x0800FC02, 0xFEFBF6FC, 0x0BFDFBFB, 0x1AFE0A0C);
	r7 = D(r7, s0_0_0, 0xFFFE06FD, 0x07FD06FB, 0x21F7F9FD, 0x0810FAFB);
	r0 = D(r0, s0_0_1, 0xFA10161F, 0xFF0CF606, 0x14130AF9, 0x06001A0D);
	r1 = D(r1, s0_0_1, 0x0D01F70A, 0xF1F90A03, 0x0518170C, 0x08FB1A00);
	r2 = D(r2, s0_0_1, 0xFE050400, 0x00011608, 0x03010EFB, 0x201908EF);
	r3 = D(r3, s0_0_1, 0x01FF0706, 0x010D0AEF, 0xFFFE140E, 0xF6FA10F4);
	r4 = D(r4, s0_0_1, 0xF0FDFA06, 0xFC110BEA, 0xFE030A0A, 0xF807EA1A);
	r5 = D(r5, s0_0_1, 0x196748F1, 0x030802FF, 0x12220E10, 0x0507F80A);
	r6 = D(r6, s0_0_1, 0xFC020507, 0x02111208, 0x1C0419FB, 0x03FC34E9);
	r7 = D(r7, s0_0_1, 0x040A0DFF, 0x101A06F3, 0xFDFF231C, 0x181002FE);
	r0 = D(r0, s0_0_2, 0x070A0BFC, 0x163405E2, 0xF9F50B08, 0x08FFF1EF);
	r1 = D(r1, s0_0_2, 0x0D0FF6FF, 0x0CFCED05, 0x10FC0C01, 0xF2FE03F3);
	r2 = D(r2, s0_0_2, 0xFDFA0401, 0x0706F8FB, 0x00F808FB, 0xF928FBE4);
	r3 = D(r3, s0_0_2, 0xF4F80E03, 0x04FF0604, 0xF5FE05F5, 0xFEFBF502);
	r4 = D(r4, s0_0_2, 0x11F9FB01, 0xEEF51400, 0x040A07FD, 0xF1FF05F9);
	r5 = D(r5, s0_0_2, 0x050250FA, 0x0A09FB09, 0x091708FD, 0x050C0B01);
	r6 = D(r6, s0_0_2, 0x05F707F9, 0x0AFB03FE, 0xFA07FFF4, 0x05FE0F0A);
	r7 = D(r7, s0_0_2, 0xFD180605, 0xFE010F00, 0x07C40C02, 0x1A0AFA00);
	r0 = D(r0, s0_1_0, 0x13F50904, 0x29050E09, 0x10F2FFFA, 0x05FCF800);
	r1 = D(r1, s0_1_0, 0xF316FDF2, 0x0EDE09EA, 0x12FDFAFE, 0x07F10A0D);
	r2 = D(r2, s0_1_0, 0x0C050200, 0x020BFB01, 0xFEF70AF7, 0xF7FED807);
	r3 = D(r3, s0_1_0, 0x04070404, 0x030103FF, 0x06040001, 0x0AFEFF0E);
	r4 = D(r4, s0_1_0, 0x2BFBECED, 0x0BDB0A00, 0x01FB0A01, 0xEB23EC06);
	r5 = D(r5, s0_1_0, 0x290A1EF8, 0xFE0105F2, 0xFCE10F03, 0xFC050411);
	r6 = D(r6, s0_1_0, 0xFAF90004, 0x1EFDFCF6, 0x1FFE0504, 0x16E118FC);
	r7 = D(r7, s0_1_0, 0x09100A16, 0xF910F6FE, 0xE20B381C, 0x05010101);
	r0 = D(r0, s0_1_1, 0xF1EE0902, 0xFA26811B, 0xDE11F423, 0xD105260B);
	r1 = D(r1, s0_1_1, 0x00201E13, 0x03E42720, 0xEAF70A04, 0xF617DB05);
	r2 = D(r2, s0_1_1, 0x130312E9, 0xFAE80FEF, 0xF6040CF3, 0xA8D781E6);
	r3 = D(r3, s0_1_1, 0x0B15EBF1, 0xDA0B0FF7, 0x08E7120B, 0x0701EFF2);
	r4 = D(r4, s0_1_1, 0x0F062A0C, 0xA9F3D01F, 0x0727DCF9, 0xFB0CCCD9);
	r5 = D(r5, s0_1_1, 0xFF3AF0FB, 0x0315100E, 0xBFDB1906, 0xF704F71F);
	r6 = D(r6, s0_1_1, 0x190407FF, 0xF701E6FB, 0xA9158117, 0xF8FE7428);
	r7 = D(r7, s0_1_1, 0xFD04F632, 0x07F7E808, 0x1D1CC416, 0x9BFCF00C);
	r0 = D(r0, s0_1_2, 0x05ED030E, 0x100D040D, 0x2FFDC7E3, 0x00FEFDFB);
	r1 = D(r1, s0_1_2, 0xF904F907, 0x04FDF405, 0x0200F407, 0x02FAF8FF);
	r2 = D(r2, s0_1_2, 0x0CF50D00, 0x14F7080B, 0xFFFD0007, 0x0C0D09FA);
	r3 = D(r3, s0_1_2, 0x020210E9, 0x0CF50A09, 0x0B0119FD, 0xF8F7020B);
	r4 = D(r4, s0_1_2, 0xDF08160B, 0x2128020E, 0x08F7EE08, 0xF309EC0C);
	r5 = D(r5, s0_1_2, 0xF1F4CE0B, 0x0AF305FE, 0xFB01F900, 0x04FA0FFE);
	r6 = D(r6, s0_1_2, 0xFD0F9F09, 0x0C0EFC03, 0x0EFFF0F4, 0x00F632FA);
	r7 = D(r7, s0_1_2, 0xE8E81908, 0xF5F60EFE, 0xEE24641B, 0xE6F7100A);
	r0 = D(r0, s0_2_0, 0x0600FC00, 0x1201FAF8, 0xF00707FB, 0x1EF6F2FD);
	r1 = D(r1, s0_2_0, 0x312AFDFF, 0x0908E007, 0xEF0909FC, 0x12EA0102);
	r2 = D(r2, s0_2_0, 0x0404F502, 0xFB030101, 0xFBF90901, 0xED0D1B00);
	r3 = D(r3, s0_2_0, 0x04FB0103, 0xFE02FFFF, 0x07060200, 0xFDF50BFE);
	r4 = D(r4, s0_2_0, 0xF4E80105, 0x0EFCF801, 0xF30409FE, 0xF0FCF40B);
	r5 = D(r5, s0_2_0, 0xDC060304, 0x0A00F606, 0x14FEFC08, 0x05030701);
	r6 = D(r6, s0_2_0, 0x09FD06FF, 0x15FD0606, 0x17FDFCFC, 0x1BFE0BFF);
	r7 = D(r7, s0_2_0, 0x09FE10FD, 0xFB040805, 0x9D120AF2, 0x1A00F601);
	r0 = D(r0, s0_2_1, 0x0EFB0405, 0xDB031504, 0x19FA0BF8, 0xFE0C0BFC);
	r1 = D(r1, s0_2_1, 0xC91881F6, 0x1F120DFE, 0x10FAFEFE, 0x031801FD);
	r2 = D(r2, s0_2_1, 0x06FD09FD, 0x1308E6FB, 0xFEFFF602, 0xD90A23FC);
	r3 = D(r3, s0_2_1, 0x04F8F210, 0x0301F5FF, 0x01F712FD, 0xDC1000F2);
	r4 = D(r4, s0_2_1, 0xE216220B, 0x081E0A00, 0xF7F60802, 0xF9FBEE0A);
	r5 = D(r5, s0_2_1, 0xAEFDEF05, 0xDFFD0C02, 0x16F7FB08, 0x090209FC);
	r6 = D(r6, s0_2_1, 0xCE0208FB, 0xF4F9FF05, 0xEC0933FF, 0x0E082903);
	r7 = D(r7, s0_2_1, 0x031013FE, 0x09F80F03, 0xD3028EC7, 0x100401FD);
	r0 = D(r0, s0_2_2, 0x04FB0502, 0x2D11EE07, 0xF602060D, 0x05010203);
	r1 = D(r1, s0_2_2, 0x361308E9, 0x0EFAF1FC, 0xF7040903, 0x04F70505);
	r2 = D(r2, s0_2_2, 0x08FE17F3, 0x0F0302FF, 0x01FBFB03, 0x051302EA);
	r3 = D(r3, s0_2_2, 0x00F6FE0A, 0x110802FE, 0xFCFF1205, 0x08FF0301);
	r4 = D(r4, s0_2_2, 0x21F7FDF0, 0x020C14F3, 0x18FE0A00, 0xF1F8FE0B);
	r5 = D(r5, s0_2_2, 0xD3FFF306, 0x120006FC, 0x0A010205, 0x01000BFB);
	r6 = D(r6, s0_2_2, 0xF6F602FD, 0x01FAFD06, 0xF3FC1706, 0x060504FC);
	r7 = D(r7, s0_2_2, 0x09FFF2FB, 0x0103FBFF, 0xBCFD0FE0, 0x17FBF600);
	r0 = D(r0, s1_0_0, 0xF6030304, 0x1100EFFA, 0x040E0B0A, 0x01FBEB06);
	r1 = D(r1, s1_0_0, 0xF4FD07F7, 0xF2FF0CFD, 0x010B0B00, 0x08F8F90D);
	r2 = D(r2, s1_0_0, 0xF9FEFBFC, 0xFFFC00FF, 0xFEFEF804, 0xCEF6101F);
	r3 = D(r3, s1_0_0, 0xFC00FEFD, 0x0102FA03, 0xF802FB03, 0x04F8FE0B);
	r4 = D(r4, s1_0_0, 0xEA060801, 0xFE00F213, 0x04FDFD02, 0xFA0D08FA);
	r5 = D(r5, s1_0_0, 0xFAE8F608, 0xF906F905, 0x0505F107, 0xFB0000FA);
	r6 = D(r6, s1_0_0, 0xFDFBFEFE, 0x07F3FC04, 0x1D00E3FD, 0x06F1F705);
	r7 = D(r7, s1_0_0, 0xFEFB0301, 0x02FA0602, 0x30F9E9E8, 0xFAFEED08);
	r0 = D(r0, s1_0_1, 0xF309F400, 0xE7F7F7D1, 0xF5F8ECF4, 0x12FFD301);
	r1 = D(r1, s1_0_1, 0x0B0200FD, 0x0D070208, 0x0002F704, 0xFEF5EE06);
	r2 = D(r2, s1_0_1, 0xFC00F502, 0x0200F8FF, 0xFC02F504, 0xBBE31AF0);
	r3 = D(r3, s1_0_1, 0xEBFCFC02, 0xF3F3FA06, 0x0104FF06, 0xFEFBFFE0);
	r4 = D(r4, s1_0_1, 0xFDF9FDF8, 0x07F600D3, 0xFB050607, 0x02F7FDEF);
	r5 = D(r5, s1_0_1, 0xF20EF70D, 0xEFFF05F5, 0x0C04F206, 0x07F9FB00);
	r6 = D(r6, s1_0_1, 0x1900FE0A, 0xF7020504, 0xD0EF002E, 0x030AFF06);
	r7 = D(r7, s1_0_1, 0xF405FFF3, 0xEDF8F809, 0xFE1CBFFA, 0xECFEE603);
	r0 = D(r0, s1_0_2, 0xFA03FDF2, 0x1E0AF7DC, 0xBDFE05FA, 0xFFFC0A0B);
	r1 = D(r1, s1_0_2, 0x0E070A06, 0x12040402, 0xF6FAFEF4, 0x0102FE01);
	r2 = D(r2, s1_0_2, 0x04FDFB08, 0xF903F7FF, 0x0700FE04, 0xF6010D24);
	r3 = D(r3, s1_0_2, 0xE5FF0006, 0xF2F40801, 0x0603FDFA, 0xFF00F904);
	r4 = D(r4, s1_0_2, 0x1AFC02F7, 0xEEF8FEE1, 0x010302F8, 0x000402FB);
	r5 = D(r5, s1_0_2, 0x0906FFFE, 0x0A030106, 0xFB020007, 0xF5FFFD01);
	r6 = D(r6, s1_0_2, 0xF00003F7, 0xFCFAF1F7, 0xB4FF12F0, 0xFDFEF903);
	r7 = D(r7, s1_0_2, 0x140CFBEC, 0xF8FAF703, 0xD60B0BC8, 0x0FF8F300);
	r0 = D(r0, s1_1_0, 0x0A06F306, 0xBDE2E6E2, 0x0C04F602, 0xF9FEF107);
	r1 = D(r1, s1_1_0, 0xE1FDE6F2, 0xFBFC09F5, 0x1004F407, 0xE90AF101);
	r2 = D(r2, s1_1_0, 0xF9FDF4FA, 0xFDF305FE, 0xF913FD02, 0x282CF805);
	r3 = D(r3, s1_1_0, 0xFB09F8FF, 0x0B08FD04, 0xF802F603, 0xEE00F6E6);
	r4 = D(r4, s1_1_0, 0xF704CEF1, 0x8105F8E4, 0xE5170100, 0x01D1F7FD);
	r5 = D(r5, s1_1_0, 0xEE00F5ED, 0xF90F0201, 0x0501FFE5, 0x00FA00FB);
	r6 = D(r6, s1_1_0, 0xEC04FEFD, 0x1B0DEA06, 0xEA10A902, 0xFE2E04FF);
	r7 = D(r7, s1_1_0, 0x0FF5F5F9, 0x0FFCFD0C, 0x18000117, 0x180BF9FE);
	r0 = D(r0, s1_1_1, 0x18FD00F0, 0xF1230AD9, 0xF31EFFD2, 0xF20DDCEB);
	r1 = D(r1, s1_1_1, 0xD30FF1C7, 0x00031DEF, 0xFD11FDE4, 0xF508EEFE);
	r2 = D(r2, s1_1_1, 0xE7FDF4FC, 0x11F9FA03, 0x0009F805, 0xEEE912D9);
	r3 = D(r3, s1_1_1, 0xF0FBF1EC, 0xFAF00000, 0xF60BF7F4, 0x03F4FBEF);
	r4 = D(r4, s1_1_1, 0xE219FFDE, 0xE01BF4D7, 0x0E07F202, 0x0231FC13);
	r5 = D(r5, s1_1_1, 0xE70801EC, 0xF6FB0106, 0x210101F3, 0xEFFE07F0);
	r6 = D(r6, s1_1_1, 0x0814F902, 0x0601FFF4, 0x06F4DEEB, 0x05CEFDE3);
	r7 = D(r7, s1_1_1, 0xFFFD02EE, 0xEFEF07EC, 0xDCF7CE81, 0xEF0A05DF);
	r0 = D(r0, s1_1_2, 0xFB02FEF3, 0xC6150A14, 0xF8F0E0E5, 0xE10C0D08);
	r1 = D(r1, s1_1_2, 0xE400EFCB, 0xFA0B0803, 0xDE02F3DB, 0xE408000D);
	r2 = D(r2, s1_1_2, 0xEAF7F901, 0xED02E0EE, 0xF3010005, 0xBE13FBEE);
	r3 = D(r3, s1_1_2, 0xFFFAF7F1, 0xFAEF01EF, 0xE705EBFC, 0x00FEFF03);
	r4 = D(r4, s1_1_2, 0xE20201F2, 0xD918ECBB, 0xF104FD0D, 0xFF0203FF);
	r5 = D(r5, s1_1_2, 0xF7FB0714, 0x0A00F8FE, 0x0802FCFD, 0x08FCFDFE);
	r6 = D(r6, s1_1_2, 0xFB02F003, 0x0D01F9FA, 0xFB0203F6, 0x05FEF8FD);
	r7 = D(r7, s1_1_2, 0x060108F5, 0x0601F3F9, 0x40E4FA81, 0x020705F2);
	r0 = D(r0, s1_2_0, 0xFDFFFA00, 0x2E17FF07, 0x030AF50A, 0x0202EF05);
	r1 = D(r1, s1_2_0, 0x0E1EE4CC, 0xF5FC0DE8, 0x0101FA01, 0xFE0D03FC);
	r2 = D(r2, s1_2_0, 0xF3F6FAF8, 0xFEF40000, 0x0306F705, 0x0D0DF1E6);
	r3 = D(r3, s1_2_0, 0xF1FFFE02, 0x05020304, 0xFCFEFA01, 0x1D08F6FA);
	r4 = D(r4, s1_2_0, 0xC50AF8BD, 0x06FDF60A, 0x1412FA04, 0xFE000300);
	r5 = D(r5, s1_2_0, 0x0802F613, 0xEDFDFBFF, 0xFEFEFB0D, 0xFF02FE06);
	r6 = D(r6, s1_2_0, 0x120EF802, 0xF1F6FFED, 0x1D0FE6FC, 0x02FBFB02);
	r7 = D(r7, s1_2_0, 0x1E1302FB, 0x04F2F7FE, 0xCDF9DBB4, 0x0703FFFE);
	r0 = D(r0, s1_2_1, 0x0301F908, 0x0600EFF2, 0x1401EC03, 0xF703EAFF);
	r1 = D(r1, s1_2_1, 0x07F2E7BF, 0xE6FB12FF, 0x10FEF50E, 0xFA04FDF8);
	r2 = D(r2, s1_2_1, 0xF5FCFBEF, 0x0BF8EEFF, 0xF501F8F9, 0xE3E30CD6);
	r3 = D(r3, s1_2_1, 0xF608FAD8, 0xF6FAF1FB, 0x0BF8F4F8, 0x01EDF8ED);
	r4 = D(r4, s1_2_1, 0xE5F0E7D4, 0x0804F103, 0xE0060BEC, 0xFDFEF6F5);
	r5 = D(r5, s1_2_1, 0x0AF8FBFD, 0x07030AFC, 0xFD02F001, 0x03F9050A);
	r6 = D(r6, s1_2_1, 0xF508FEF2, 0x090904E3, 0x0AF9EAE0, 0xFE00000F);
	r7 = D(r7, s1_2_1, 0x07F7E912, 0xFBF7FFE9, 0x1914C41D, 0x1001FF00);
	r0 = D(r0, s1_2_2, 0xFDFDFC02, 0x05FFF309, 0xF912F7DA, 0x08FDFFF6);
	r1 = D(r1, s1_2_2, 0x2BF0DFDB, 0x050606F9, 0x0703FCF5, 0xFBFDF206);
	r2 = D(r2, s1_2_2, 0x00F5F3F5, 0x01FCF4E7, 0xFFFF0103, 0xF3160FE0);
	r3 = D(r3, s1_2_2, 0xF703FBF3, 0xFAF8FBFC, 0x0704F7EB, 0x09FB01F9);
	r4 = D(r4, s1_2_2, 0x1BFFDFD0, 0x0DF4FBFE, 0x0D02F801, 0xFDFEFA03);
	r5 = D(r5, s1_2_2, 0xFEFF0107, 0xFE00F5FC, 0xF9FFFA05, 0x02FCFA01);
	r6 = D(r6, s1_2_2, 0x02000505, 0x0A06F905, 0xF9F513ED, 0x0502FCFB);
	r7 = D(r7, s1_2_2, 0xFBFAF8FE, 0xFCFF01FA, 0x83F1E081, 0x05FEF003);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFCF7FDFC, 0x05F8DEFE, 0xF1F8FEFB, 0x03000306);
	r1 = D(r1, s0_0_0, 0xFFF20BF7, 0xFEF106E3, 0xF804FDFA, 0xFFFE00FD);
	r2 = D(r2, s0_0_0, 0x03FEFF07, 0x04F6FF04, 0xF90EF8F7, 0xFCF702E7);
	r3 = D(r3, s0_0_0, 0xFD080301, 0xFF00FDF8, 0xFBFCFF02, 0x01F4FC1F);
	r4 = D(r4, s0_0_0, 0x04F40B05, 0xFCE6ED05, 0xFCFBFF02, 0x020B091B);
	r5 = D(r5, s0_0_0, 0xFE08030A, 0xFB00F8FE, 0xD6E0D30C, 0x03FCFD02);
	r6 = D(r6, s0_0_0, 0xFFF80204, 0xFA05FBF6, 0xCC09EFD6, 0xFBF8FEE7);
	r7 = D(r7, s0_0_0, 0xFE09F613, 0x01FC0416, 0x00DB0500, 0xEC19FCEF);
	r0 = D(r0, s0_0_1, 0x02DBF206, 0xFDF7B7E4, 0x04050422, 0xD511F1FC);
	r1 = D(r1, s0_0_1, 0xFA06FBFF, 0x01F603F9, 0xFFEDFD12, 0xED100B0E);
	r2 = D(r2, s0_0_1, 0x04FAFF0D, 0xF70F070C, 0xFB0D0013, 0x14F9D4FC);
	r3 = D(r3, s0_0_1, 0xFD0A010A, 0x00FA021C, 0xF801FE0D, 0xFC11FA13);
	r4 = D(r4, s0_0_1, 0xFAEB06F4, 0xFEF4EF00, 0xF7FE02FE, 0x09EAF8CC);
	r5 = D(r5, s0_0_1, 0x09120318, 0xF8FB00FB, 0xDEDEC704, 0xFBEA02F1);
	r6 = D(r6, s0_0_1, 0xFD0202FA, 0xFE1BFB06, 0xF2F1E52A, 0xFB160F27);
	r7 = D(r7, s0_0_1, 0x08FAF3F0, 0x0909FD0E, 0x12E221F4, 0xF31BFC0C);
	r0 = D(r0, s0_0_2, 0xFEF1FDFE, 0x0A00FBD6, 0x04F70011, 0x0CED00EA);
	r1 = D(r1, s0_0_2, 0x09F4FFF7, 0x00F500E7, 0x010B0704, 0x0BFDFFDE);
	r2 = D(r2, s0_0_2, 0x02FD000E, 0xFBFAEFFF, 0xFF0200FD, 0xE7070323);
	r3 = D(r3, s0_0_2, 0x0202020C, 0x0100FD1C, 0xFEF8F2F8, 0x03F907F5);
	r4 = D(r4, s0_0_2, 0xFC04FF05, 0x0803F70A, 0xFE02FEFF, 0xFE0607FB);
	r5 = D(r5, s0_0_2, 0xF903F8F5, 0x00F8FCF9, 0x04F6F6F9, 0x02F5FC06);
	r6 = D(r6, s0_0_2, 0xF005F811, 0xF90CFD07, 0x03FDEE0A, 0x02FC0003);
	r7 = D(r7, s0_0_2, 0xFDF5FAE8, 0xFAFB0514, 0xFBDCEFF5, 0xFB12FDFF);
	r0 = D(r0, s0_1_0, 0xFE07F9FF, 0xC705EDEA, 0xF109010D, 0xFAFA0305);
	r1 = D(r1, s0_1_0, 0xFD0FF313, 0x061C08FC, 0x0303FD03, 0xE80DF6E9);
	r2 = D(r2, s0_1_0, 0xFD00FE08, 0x0EFC0200, 0xFF16F3F9, 0x0109120C);
	r3 = D(r3, s0_1_0, 0xF6F1FCFE, 0x0506FCF5, 0x05FFFE07, 0xEFFC0502);
	r4 = D(r4, s0_1_0, 0xF0F4070C, 0x0517F7F8, 0xF106F2FB, 0x06DA0212);
	r5 = D(r5, s0_1_0, 0xFADE02FD, 0x0207F915, 0x0809F0EB, 0xF4F7FD08);
	r6 = D(r6, s0_1_0, 0xFA04FFF5, 0xEC1DF402, 0xC112FDE1, 0xF82402EF);
	r7 = D(r7, s0_1_0, 0xF5ECF4F4, 0xF6F61101, 0x9149A810, 0xF405F7F3);
	r0 = D(r0, s0_1_1, 0x051202EF, 0xFAEDE716, 0xF2E7F9E8, 0xE6210FF4);
	r1 = D(r1, s0_1_1, 0x1002120C, 0xF517FF1E, 0xF205FFF7, 0x08FF1207);
	r2 = D(r2, s0_1_1, 0xFB210812, 0xEC230308, 0x0EED0903, 0x05D4F3FE);
	r3 = D(r3, s0_1_1, 0x0DEC020A, 0xFEE60700, 0xEE190007, 0x0EFB03FC);
	r4 = D(r4, s0_1_1, 0xF5190541, 0xE6FFDBC2, 0xD0FBEC01, 0xF00B0D2E);
	r5 = D(r5, s0_1_1, 0xD0DF0D1B, 0xF1E9F1EF, 0x081202E4, 0x11010004);
	r6 = D(r6, s0_1_1, 0xD709EBEF, 0x03F300EE, 0x05D22615, 0x13FCF8D6);
	r7 = D(r7, s0_1_1, 0xF4F4DFF0, 0x16FB04FA, 0xA34C8121, 0x09E7FFF0);
	r0 = D(r0, s0_1_2, 0x0C06FD00, 0x093103F3, 0x0A040A1F, 0x02FA04F3);
	r1 = D(r1, s0_1_2, 0x07FA0C02, 0xF002FBDD, 0x15DE021F, 0x06FEFBE8);
	r2 = D(r2, s0_1_2, 0x0010011E, 0xF9E60341, 0x05FAFDF6, 0xFC0E1027);
	r3 = D(r3, s0_1_2, 0x000A0107, 0x08010513, 0xF8F3FA18, 0x02FEFC07);
	r4 = D(r4, s0_1_2, 0xFEE80E03, 0x06FB01FD, 0x0AF2F3FE, 0x08F9FEEA);
	r5 = D(r5, s0_1_2, 0xEFF1FCEE, 0x05FDFC13, 0x090700FC, 0x0109020A);
	r6 = D(r6, s0_1_2, 0x0ADCFEF2, 0x0EFBFDEF, 0x060604ED, 0xF801061C);
	r7 = D(r7, s0_1_2, 0x050BF204, 0xFA08011C, 0x2F210A05, 0x0BF200F2);
	r0 = D(r0, s0_2_0, 0xFD020305, 0x01E9EF04, 0x0B02FCFC, 0xFA01FD02);
	r1 = D(r1, s0_2_0, 0x90F0CDE6, 0x06F61006, 0x0904FF03, 0xE70FFCF2);
	r2 = D(r2, s0_2_0, 0x0403FCFF, 0x0405FF02, 0x0007FEFB, 0x190F27F6);
	r3 = D(r3, s0_2_0, 0x0207FCFF, 0x040C0100, 0xFE03FC01, 0xFD06FDF9);
	r4 = D(r4, s0_2_0, 0x0500E7F6, 0xFEFFFE04, 0xED00F400, 0x010100FE);
	r5 = D(r5, s0_2_0, 0x00FAFEFD, 0xF6F1F603, 0xF9030308, 0x02FCF704);
	r6 = D(r6, s0_2_0, 0xF305F8FE, 0x0206FEFC, 0xC709FBFE, 0xFF000402);
	r7 = D(r7, s0_2_0, 0x08FEFFFD, 0xF9051202, 0xE5F88156, 0x0304FC04);
	r0 = D(r0, s0_2_1, 0xF1FDFE03, 0x0D0911EF, 0x030103FB, 0xF1030D01);
	r1 = D(r1, s0_2_1, 0xEAE4E4DE, 0xFCFE0D01, 0x0100FEFC, 0x02EE1200);
	r2 = D(r2, s0_2_1, 0xFCED0208, 0x08FDFD01, 0x04010102, 0x22FE07EC);
	r3 = D(r3, s0_2_1, 0xFD06FCFC, 0x06030702, 0x0A08FFFD, 0x1D060E04);
	r4 = D(r4, s0_2_1, 0x03D80504, 0x06F8F0F6, 0x12FFF1F5, 0x04FB03FC);
	r5 = D(r5, s0_2_1, 0xFAE90005, 0x130702FA, 0xECF7FC05, 0x010404FC);
	r6 = D(r6, s0_2_1, 0x03FAF6FE, 0x0DFFF3FD, 0xFBFC2A0B, 0xFDFC0000);
	r7 = D(r7, s0_2_1, 0x05FD07FA, 0x19070903, 0xDFF435D8, 0x02F9FB05);
	r0 = D(r0, s0_2_2, 0xFA010102, 0x01F202F1, 0x0DFFFC0D, 0x0AFF0301);
	r1 = D(r1, s0_2_2, 0x0219FA02, 0x000204E8, 0x09030208, 0x0405FAFB);
	r2 = D(r2, s0_2_2, 0x06FF0605, 0x05080B02, 0x0203FC01, 0xCE0B1504);
	r3 = D(r3, s0_2_2, 0x09FFF902, 0x03FB0507, 0x06070105, 0xF9000409);
	r4 = D(r4, s0_2_2, 0xFE130D09, 0x0EFDFCFA, 0xFBF401FE, 0x02FEFE04);
	r5 = D(r5, s0_2_2, 0xFEFF0307, 0xFBFA04F7, 0x01FEFFFB, 0x00FFFFFE);
	r6 = D(r6, s0_2_2, 0xFCFCF806, 0x0100FB02, 0x0E0803F0, 0xFC0007FC);
	r7 = D(r7, s0_2_2, 0xFF0003FE, 0x03FE0705, 0xDAF8CC1D, 0xFFFEFA08);
	r0 = D(r0, s1_0_0, 0xFEFE0304, 0xFD0FD9DD, 0x0503F9F7, 0xFE0B07FF);
	r1 = D(r1, s1_0_0, 0xF5EDEE0F, 0x06FFF903, 0x0AF803FB, 0xFD111002);
	r2 = D(r2, s1_0_0, 0x06040900, 0x01FD03FC, 0x0E060EFE, 0x1003C2F4);
	r3 = D(r3, s1_0_0, 0x0D1007F7, 0xFF01FE09, 0x04030EFF, 0x0605E702);
	r4 = D(r4, s1_0_0, 0xF30902F1, 0xEDE9D803, 0x02110D05, 0xEFF3F400);
	r5 = D(r5, s1_0_0, 0x1E0AFDFF, 0xFDFF0507, 0xF80AD4F9, 0xEC06EA03);
	r6 = D(r6, s1_0_0, 0xFA030B02, 0x16120600, 0x29FBFAFB, 0x0E100901);
	r7 = D(r7, s1_0_0, 0xF4EDF2FD, 0xFEF9DD00, 0x1230FDF9, 0x1314F700);
	r0 = D(r0, s1_0_1, 0xFFF0FC02, 0xFDEFEFFD, 0x080408FC, 0x08E2EB01);
	r1 = D(r1, s1_0_1, 0x07F7F3FA, 0xF706F813, 0x1104FC03, 0xF6F4F4F5);
	r2 = D(r2, s1_0_1, 0x040109FA, 0x000205ED, 0xFC0B06FD, 0x30FDD4FD);
	r3 = D(r3, s1_0_1, 0xF3F60AF5, 0x1002DFFF, 0xF909FFF8, 0xF90209EB);
	r4 = D(r4, s1_0_1, 0x0C1A050F, 0x16EDFB0B, 0xFD00F3FD, 0x0806EA16);
	r5 = D(r5, s1_0_1, 0xC90B090A, 0xFD14E40A, 0x0805F516, 0x100FE517);
	r6 = D(r6, s1_0_1, 0x0912FBF9, 0xF5FFFFF6, 0x0BF1C4E5, 0xF8FA13EF);
	r7 = D(r7, s1_0_1, 0xF4F0E903, 0x1DE1F403, 0xEFF3E9F0, 0xEAE70504);
	r0 = D(r0, s1_0_2, 0x02F4FF0D, 0x07F020FC, 0xEBFAF4F2, 0x01F3F405);
	r1 = D(r1, s1_0_2, 0x00F80301, 0x0008FB00, 0xF6E801EA, 0x0402F607);
	r2 = D(r2, s1_0_2, 0x04040407, 0x05F90102, 0x03FFFE03, 0x0C03CBF6);
	r3 = D(r3, s1_0_2, 0xFD030700, 0xFFF001F6, 0x0700FD06, 0x01020007);
	r4 = D(r4, s1_0_2, 0x0517F807, 0xFFF904F8, 0xFE07FAFC, 0x0304FF02);
	r5 = D(r5, s1_0_2, 0xFEEF020B, 0x0605F703, 0xFAF80C03, 0x0001FA06);
	r6 = D(r6, s1_0_2, 0xFC0004FC, 0xFBE907EB, 0xF0F5FE0C, 0xFDFB00FF);
	r7 = D(r7, s1_0_2, 0x0809EE12, 0xEFFAFFFB, 0xD6E11302, 0xFEEEFEEF);
	r0 = D(r0, s1_1_0, 0x13FD010A, 0x2BE3CCD9, 0x1DFF0100, 0x081F06FD);
	r1 = D(r1, s1_1_0, 0x09160BDE, 0x080001F4, 0x0B03FEFF, 0x14EFFC10);
	r2 = D(r2, s1_1_0, 0xFE040104, 0xFE0DFFF8, 0x0802FC0A, 0x24E3A3CD);
	r3 = D(r3, s1_1_0, 0xED00F807, 0x03F4020C, 0x021005FF, 0x0800E0E7);
	r4 = D(r4, s1_1_0, 0x051DF418, 0x13F81203, 0x0002EB0A, 0xE90FF301);
	r5 = D(r5, s1_1_0, 0x0E010700, 0xFE0AE005, 0x03DC0402, 0x0E10F4F7);
	r6 = D(r6, s1_1_0, 0x0D04FB02, 0xFF01FAFE, 0x2F94F107, 0x19EF0905);
	r7 = D(r7, s1_1_0, 0xFD0BFBE9, 0x0CFCF0DF, 0xD5E258FC, 0xF007FFFB);
	r0 = D(r0, s1_1_1, 0xF303000D, 0xC0B4AA0C, 0x09FBF4F3, 0x0306F204);
	r1 = D(r1, s1_1_1, 0xD1F9EBE7, 0xD0F9FBEF, 0x0600FC00, 0x03FAFCEE);
	r2 = D(r2, s1_1_1, 0x20000306, 0x3CE5FDFF, 0x0B06FCF9, 0x0D81F20D);
	r3 = D(r3, s1_1_1, 0x12F9FD26, 0x20E0F2DA, 0x22EAF9FC, 0x0DF40712);
	r4 = D(r4, s1_1_1, 0xE3B4F7EE, 0xE4ABEC04, 0x2515CA10, 0x1E052CF1);
	r5 = D(r5, s1_1_1, 0xE20319E6, 0x1BFE8304, 0xD907F10F, 0x03F1F102);
	r6 = D(r6, s1_1_1, 0x0E11EB16, 0x0BEA0007, 0x09EFCFA4, 0xEBF6D219);
	r7 = D(r7, s1_1_1, 0x07E3C7ED, 0x16D8EA1D, 0x0B1081EA, 0x03EDF500);
	r0 = D(r0, s1_1_2, 0x0005FA02, 0xEDE4C6DD, 0x0FE50D07, 0x0BF2E10A);
	r1 = D(r1, s1_1_2, 0xEAE806F2, 0x030703FA, 0x0BEB0204, 0x02FAFB12);
	r2 = D(r2, s1_1_2, 0xEFFD07EE, 0xF9FCF904, 0x05030302, 0x15ECFAD1);
	r3 = D(r3, s1_1_2, 0xFF05000F, 0xF608F906, 0x05F7FF04, 0xFB0E0401);
	r4 = D(r4, s1_1_2, 0x00EF0004, 0xF7D9F103, 0xFDFBF2F8, 0xFFF7FE01);
	r5 = D(r5, s1_1_2, 0x00F512F0, 0xF204EDEC, 0xEFFEFBF7, 0xF303FCF5);
	r6 = D(r6, s1_1_2, 0x05FDEE04, 0x10F2EFFC, 0x01DE040A, 0x02090102);
	r7 = D(r7, s1_1_2, 0xF306F6ED, 0xFA06FCF4, 0x0B006711, 0xFD01F307);
	r0 = D(r0, s1_2_0, 0x000303F6, 0x00EFFC03, 0xF21201FD, 0x03000604);
	r1 = D(r1, s1_2_0, 0xF1F1DE11, 0x0E08FDE0, 0xF90101FD, 0x11FAFC0C);
	r2 = D(r2, s1_2_0, 0xFA0105FC, 0xF10505FC, 0xFE07FFFC, 0x08FDE4EA);
	r3 = D(r3, s1_2_0, 0x0B00010A, 0xFD0B0002, 0xFC0400FD, 0xF6FB02FC);
	r4 = D(r4, s1_2_0, 0x000B0DF3, 0xFE0209FC, 0x0912FBF5, 0xF7F70209);
	r5 = D(r5, s1_2_0, 0xFCFC0109, 0x0F0900F2, 0x05FE08FB, 0x0603FEFF);
	r6 = D(r6, s1_2_0, 0x010BFC04, 0xF8F50CF0, 0x09E6FEFE, 0x020404F4);
	r7 = D(r7, s1_2_0, 0xFDF4FCFF, 0xFA0508F8, 0x2CE481D6, 0x07F90401);
	r0 = D(r0, s1_2_1, 0x06FE02FC, 0xF8FFF714, 0x0400F909, 0x01F9FFE9);
	r1 = D(r1, s1_2_1, 0x05E7F21F, 0xF30D0112, 0x0202FF06, 0x08F0E3ED);
	r2 = D(r2, s1_2_1, 0x0DFC0AF8, 0xFBF705F5, 0x00FAFDF9, 0xEE06E3F7);
	r3 = D(r3, s1_2_1, 0xF5F70001, 0x03FA02FE, 0x04F60601, 0x0CF6F3F2);
	r4 = D(r4, s1_2_1, 0x0E04110E, 0xFBF7FD08, 0xF200FF00, 0x06F6010D);
	r5 = D(r5, s1_2_1, 0xF90602FF, 0xEE05F10A, 0x06FC0AF9, 0xFC08FF06);
	r6 = D(r6, s1_2_1, 0xFF0200E7, 0xFAF900F0, 0xFAFD06D4, 0xF60401F9);
	r7 = D(r7, s1_2_1, 0xF509FA03, 0x0D01E501, 0xD9328110, 0x00FEFC06);
	r0 = D(r0, s1_2_2, 0x070505FE, 0x07EB1FFC, 0x020A03FB, 0x0104DA04);
	r1 = D(r1, s1_2_2, 0xFBE50007, 0xF6030408, 0xFA0801FF, 0xF905F304);
	r2 = D(r2, s1_2_2, 0x0CFE0405, 0x090505FA, 0x0102F803, 0xF604C5FD);
	r3 = D(r3, s1_2_2, 0x06FFFA00, 0xF802F5FE, 0x0402F9FD, 0xF9080307);
	r4 = D(r4, s1_2_2, 0xF1070B01, 0xFB040509, 0xFBFFEBFA, 0x0601F8FF);
	r5 = D(r5, s1_2_2, 0xFF01FDFC, 0x00FF0A01, 0x09020BFA, 0x00010DFD);
	r6 = D(r6, s1_2_2, 0xFC05EDFB, 0xFB00F6F3, 0xF1FFE303, 0xFAFE0A01);
	r7 = D(r7, s1_2_2, 0x01FF0EEA, 0xF504F9FD, 0xD0358104, 0xFE050106);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFDEBF701, 0x15E90205, 0xFD02FAF5, 0xFBF8FEF9);
	r1 = D(r1, s0_0_0, 0x0FF6FE03, 0x040600FD, 0xFD05FF07, 0xFBF8FC07);
	r2 = D(r2, s0_0_0, 0x01F80002, 0xF6FE06EE, 0xFFF90101, 0x09F6F1D5);
	r3 = D(r3, s0_0_0, 0xFA02FFFF, 0xFBFB0303, 0x00FB00FF, 0x09F70414);
	r4 = D(r4, s0_0_0, 0x05F5F9F2, 0x08C5FDE7, 0xFFFCFF04, 0xFE0701FF);
	r5 = D(r5, s0_0_0, 0xF6FAF606, 0xFEFB000C, 0xF3DBFDEC, 0xFAFAFEF6);
	r6 = D(r6, s0_0_0, 0x0200FC00, 0x040CFD07, 0x0215F32C, 0xFE03FEFE);
	r7 = D(r7, s0_0_0, 0x03040607, 0xFF0706E7, 0xE93A0FFC, 0xF8F8F707);
	r0 = D(r0, s0_0_1, 0xF7E7F7FE, 0x08E4F90B, 0xEFF9FF21, 0x0AFFFA14);
	r1 = D(r1, s0_0_1, 0x0CF90414, 0x02FE0900, 0xEBFDF70B, 0x1208FBD2);
	r2 = D(r2, s0_0_1, 0x00FAFCF8, 0xF9F4F623, 0x060002F6, 0x0EDEE73E);
	r3 = D(r3, s0_0_1, 0x020302F3, 0x04FEFB05, 0x07F3FAFE, 0xF9F80106);
	r4 = D(r4, s0_0_1, 0x05EA0214, 0xFFE802EF, 0xF5020405, 0x0302FD04);
	r5 = D(r5, s0_0_1, 0xF1FE0210, 0xFAFF01FB, 0xFCE8F1FF, 0x07F1F3F3);
	r6 = D(r6, s0_0_1, 0xFCFB050B, 0xFC0600FA, 0x2407FDFA, 0xFE03FDF7);
	r7 = D(r7, s0_0_1, 0x0AF4020C, 0x09F2FA16, 0xD32A1F13, 0xFCFBFEE5);
	r0 = D(r0, s0_0_2, 0xFFE7F9F7, 0x26ECFCEA, 0x0200FEE3, 0xFDF90507);
	r1 = D(r1, s0_0_2, 0x10F3F903, 0x0402FE01, 0x03F804EA, 0x06F70BFE);
	r2 = D(r2, s0_0_2, 0x01FBF801, 0x06F4FF1E, 0x02FA03FD, 0x1E97EAEF);
	r3 = D(r3, s0_0_2, 0x0204030B, 0xFCF3FCFB, 0x06F2FF18, 0x0503FE05);
	r4 = D(r4, s0_0_2, 0x0BF106FB, 0x080BFFF9, 0x0CF2FE0F, 0xFE02FAF1);
	r5 = D(r5, s0_0_2, 0xF3040016, 0x09EBFF09, 0x08F3FDF9, 0x02F9FFFA);
	r6 = D(r6, s0_0_2, 0xFBFC01FA, 0xF2060007, 0xFFCE050A, 0xFD00030B);
	r7 = D(r7, s0_0_2, 0x02E9020D, 0xFBFA0103, 0x8208FFC6, 0xFCFCFBFE);
	r0 = D(r0, s0_1_0, 0xF5FCF7F9, 0xEECED5B0, 0xE5000A01, 0xFEFFFEFE);
	r1 = D(r1, s0_1_0, 0xD607EE1C, 0xF9080A16, 0xFAFC05F5, 0xF5FCF906);
	r2 = D(r2, s0_1_0, 0xF7EF04EA, 0xFE010B03, 0xFF02F405, 0x07F90203);
	r3 = D(r3, s0_1_0, 0xFCEFFFF8, 0xFDFF010F, 0xFAF601F9, 0x03F408EA);
	r4 = D(r4, s0_1_0, 0xE8CEF5EF, 0xCFCDFF0D, 0xF6F00510, 0x040810FB);
	r5 = D(r5, s0_1_0, 0x0708FEE7, 0xFAF70202, 0x02EFF9F6, 0xF8F904EA);
	r6 = D(r6, s0_1_0, 0xF3F80700, 0x07FBFE0B, 0x1C06F0FE, 0xFC02ED07);
	r7 = D(r7, s0_1_0, 0xFBEE03F0, 0x021002F0, 0xC6810381, 0xFCFFFC11);
	r0 = D(r0, s0_1_1, 0x04FEF40F, 0x08149AFC, 0xE8F8F5C7, 0x0BECDD29);
	r1 = D(r1, s0_1_1, 0xF509D0D4, 0xEF0CEBD8, 0x01FB0700, 0xFDE6CEE1);
	r2 = D(r2, s0_1_1, 0xF8F6F70D, 0xF2FCE1EE, 0x06FBF9F3, 0x080DA2E7);
	r3 = D(r3, s0_1_1, 0xFCF3F308, 0xFBFEFDF4, 0x02F1E503, 0xFFE80B07);
	r4 = D(r4, s0_1_1, 0x03E9E1C9, 0xD1F0E3FD, 0xF1F7E3F1, 0xF2FFDCF9);
	r5 = D(r5, s0_1_1, 0xEF031BFF, 0x0BF1E7FC, 0x07F8CEFC, 0x04F2F6F8);
	r6 = D(r6, s0_1_1, 0xF6FCF005, 0xEE05EFF1, 0x08E4C3C9, 0x0D042A09);
	r7 = D(r7, s0_1_1, 0x00ECDEEB, 0x07FADE13, 0xE5170384, 0x07FA0AD4);
	r0 = D(r0, s0_1_2, 0xF3FB07FF, 0x03DC0C1F, 0xFEEF0715, 0x04F00113);
	r1 = D(r1, s0_1_2, 0xF10A0707, 0x07050006, 0xF3EE0006, 0x01FE0B0D);
	r2 = D(r2, s0_1_2, 0xFBFDF8E6, 0xF9FDEEFB, 0xFFFB06FF, 0x02DFDCDE);
	r3 = D(r3, s0_1_2, 0x03F402EC, 0xF6F5FFEC, 0x02EEF703, 0xFEF6F812);
	r4 = D(r4, s0_1_2, 0xFFF0FA0D, 0xE9EAF900, 0x03FC05F0, 0x0A05060A);
	r5 = D(r5, s0_1_2, 0x0C03FF1D, 0xF5F602E6, 0x0CF4F6FA, 0xFBFAFCF6);
	r6 = D(r6, s0_1_2, 0x00F00402, 0x01F60509, 0x00EC14F6, 0xFBFFF4FC);
	r7 = D(r7, s0_1_2, 0x00EFFDFF, 0xFFFD04DC, 0x2750FF3C, 0x11FF0714);
	r0 = D(r0, s0_2_0, 0x00FD04FD, 0x1F1BF916, 0x00FAFCF2, 0xFE03FEFD);
	r1 = D(r1, s0_2_0, 0x3992EDF5, 0x040011D4, 0x01FF00FE, 0x0D07ED04);
	r2 = D(r2, s0_2_0, 0xFCFC0E01, 0xFF060704, 0xFCFD04FC, 0xDDDEF7D6);
	r3 = D(r3, s0_2_0, 0xFD0206FE, 0x00FF01FC, 0x00F802FF, 0xFEFA021E);
	r4 = D(r4, s0_2_0, 0xDDF9FBCA, 0x22FF0002, 0xE6FDF7FB, 0xF8040C0D);
	r5 = D(r5, s0_2_0, 0x0B0BFD09, 0xFAF904E7, 0x0D030503, 0xFDFB00F8);
	r6 = D(r6, s0_2_0, 0x0001F601, 0xDCF11103, 0x1F05FC06, 0x0803F7F5);
	r7 = D(r7, s0_2_0, 0xFD02F509, 0xEDFF08F9, 0x1081F930, 0xFF010504);
	r0 = D(r0, s0_2_1, 0xFFF60304, 0x20FFE500, 0x1404FC15, 0xF5F6000C);
	r1 = D(r1, s0_2_1, 0x2FE2BEDD, 0xF3010301, 0x0800FE04, 0xF5F30ADF);
	r2 = D(r2, s0_2_1, 0xF0FA0BDF, 0xF1FC0BFB, 0xFEF70AF8, 0x2A04EA27);
	r3 = D(r3, s0_2_1, 0xFCFA0BE7, 0xF9F503F2, 0x01F8FDFD, 0xF5FAF924);
	r4 = D(r4, s0_2_1, 0xD707DCF9, 0x3906F806, 0x0BF80FF0, 0x060611EC);
	r5 = D(r5, s0_2_1, 0x020AF407, 0x02FCFE00, 0x15040403, 0xF900F1FE);
	r6 = D(r6, s0_2_1, 0xF0F707FC, 0x00F614F8, 0xEFDBFACB, 0xFE03EF13);
	r7 = D(r7, s0_2_1, 0x08FFEF1A, 0x10F2090C, 0xF2DA81D6, 0x08FBFD08);
	r0 = D(r0, s0_2_2, 0xFEFDF901, 0x270F0015, 0xCCF2FCED, 0xEDFAFE0A);
	r1 = D(r1, s0_2_2, 0x25BA0A13, 0x0705FA1D, 0xF70402F2, 0xFFF90107);
	r2 = D(r2, s0_2_2, 0xFEFA02FA, 0x08FFF91A, 0x01FD0506, 0x03DBEE86);
	r3 = D(r3, s0_2_2, 0x02F609F8, 0xFCFC040D, 0xF9FAFDFB, 0xFDFDFEF9);
	r4 = D(r4, s0_2_2, 0xF2D405EF, 0x1EFEF0F0, 0x00FA00F4, 0x040005F5);
	r5 = D(r5, s0_2_2, 0xFB07FEF2, 0x0A01FDF2, 0x02000005, 0xFFFEFEFE);
	r6 = D(r6, s0_2_2, 0xFFF7040C, 0x0000080D, 0xFDEA0915, 0xFD02FAFF);
	r7 = D(r7, s0_2_2, 0x0BFEFFE6, 0xF7FB04D3, 0xFD819B27, 0x0E040406);
	r0 = D(r0, s1_0_0, 0x04000202, 0xF0100305, 0xFAF10200, 0xF8000802);
	r1 = D(r1, s1_0_0, 0xFF01F31E, 0x0305F80F, 0xF9FE05F6, 0xF9FD0906);
	r2 = D(r2, s1_0_0, 0xFC00FE08, 0x0003F915, 0xFD0101F9, 0x06F90F12);
	r3 = D(r3, s1_0_0, 0xFA0803F7, 0xFEFF05FE, 0xFCFFFF0C, 0xFBF30510);
	r4 = D(r4, s1_0_0, 0xFDFF0702, 0x00FEFE09, 0x01020100, 0x02FCF2FC);
	r5 = D(r5, s1_0_0, 0xF6070D11, 0xFE01FE04, 0xFDEF000D, 0x04FAF90E);
	r6 = D(r6, s1_0_0, 0x01FF0201, 0xFF030C05, 0xEF0011F5, 0xF9010F02);
	r7 = D(r7, s1_0_0, 0xF1F900FD, 0xF5FAFCFF, 0xB322F620, 0xF0051102);
	r0 = D(r0, s1_0_1, 0x04F31608, 0x26F1E12D, 0xF9F30E0B, 0xEBFBFCFF);
	r1 = D(r1, s1_0_1, 0x0501ED10, 0xFE00FD03, 0xF7DC090E, 0x02FEE703);
	r2 = D(r2, s1_0_1, 0xFF040005, 0xFAFFF7FD, 0xF900FF05, 0xFBE62117);
	r3 = D(r3, s1_0_1, 0xF606FDEF, 0xFBE3FE05, 0x0305FD05, 0xF00F00F5);
	r4 = D(r4, s1_0_1, 0xFB14FA14, 0xFE0BFF0D, 0xF70705F9, 0x02FA09FF);
	r5 = D(r5, s1_0_1, 0xF20C0E05, 0xF608EF07, 0x0BEE021F, 0x0F05FD06);
	r6 = D(r6, s1_0_1, 0xFA050EFF, 0xFA00F9F8, 0xF8030520, 0xF802F704);
	r7 = D(r7, s1_0_1, 0x05E9FA08, 0xF9060605, 0x9A010BE6, 0xDE00E50B);
	r0 = D(r0, s1_0_2, 0x05F406F7, 0xF311D308, 0xF003EFFC, 0xF3000C0B);
	r1 = D(r1, s1_0_2, 0x03FFF9FE, 0x0302F2FD, 0xE9FEF200, 0xF8031402);
	r2 = D(r2, s1_0_2, 0x05000104, 0x0605FFFE, 0x02030807, 0xF607E400);
	r3 = D(r3, s1_0_2, 0x02FDFFFA, 0xF308F20C, 0x07030BFB, 0x08FE03FF);
	r4 = D(r4, s1_0_2, 0x00FC0DFC, 0xF705FAF0, 0xF104F508, 0xFB010105);
	r5 = D(r5, s1_0_2, 0xFD0EFAE2, 0xF9FA0704, 0xF405EA01, 0xFDFEFE04);
	r6 = D(r6, s1_0_2, 0xEE01E603, 0xF2F5FC04, 0xE800FC06, 0x02FEFC02);
	r7 = D(r7, s1_0_2, 0x05FCF60A, 0xF108EA02, 0xBEF82135, 0xEC07FF0E);
	r0 = D(r0, s1_1_0, 0xF9FF0501, 0x12D51605, 0xED07F700, 0xF606FE07);
	r1 = D(r1, s1_1_0, 0xF41608EB, 0xF7040AF1, 0xF601FCFF, 0xF6040FF9);
	r2 = D(r2, s1_1_0, 0xFB00FE0C, 0x0003F817, 0x01FC03FA, 0xEAFFF910);
	r3 = D(r3, s1_1_0, 0x00F9FE04, 0xFBFD00FD, 0xFD02FC0C, 0xE7FE0314);
	r4 = D(r4, s1_1_0, 0xEBEB0BF2, 0x00FB01EC, 0xF20704FB, 0xFB03FD0F);
	r5 = D(r5, s1_1_0, 0xFDF41003, 0xF800F800, 0xF8EDFF13, 0x00FEFC0E);
	r6 = D(r6, s1_1_0, 0xF3040400, 0xF7F9030D, 0xE9001CFB, 0x00FA07E9);
	r7 = D(r7, s1_1_0, 0x02F80512, 0x0005FB06, 0x139221DC, 0xFBFB07FB);
	r0 = D(r0, s1_1_1, 0xFCF5F20E, 0xF59D1CD5, 0xEAE5F9FB, 0xD8EBD817);
	r1 = D(r1, s1_1_1, 0xE90AE6D6, 0xFBFFFDF6, 0xFEEDEF0D, 0xE4E20B08);
	r2 = D(r2, s1_1_1, 0xF2F9FE02, 0xFAF9FBE5, 0xFBF81411, 0xFD8F1A34);
	r3 = D(r3, s1_1_1, 0x03DA1400, 0xF7F20419, 0xEDEFF5FA, 0x0BF120F1);
	r4 = D(r4, s1_1_1, 0xEC09FBFC, 0xF6CF18E9, 0xF2EFEA1E, 0x090A30E8);
	r5 = D(r5, s1_1_1, 0xF4110DC7, 0xF9ED0609, 0xE9F61200, 0xF7E90D03);
	r6 = D(r6, s1_1_1, 0xF5F8EE08, 0xF1DCF821, 0xC1C10711, 0xF0F4D512);
	r7 = D(r7, s1_1_1, 0xE9E105FE, 0xF4C40EFE, 0x09BF0A09, 0x07F408FA);
	r0 = D(r0, s1_1_2, 0xFAF513F3, 0xF7F301D3, 0xEDD719F1, 0x06E020D7);
	r1 = D(r1, s1_1_2, 0xE70B09EE, 0xFE01F5FE, 0xE7D415D4, 0x0BEC05F5);
	r2 = D(r2, s1_1_2, 0xF307FD08, 0xDD02290A, 0x05F70005, 0xE30D08FA);
	r3 = D(r3, s1_1_2, 0xF8090DFF, 0xEB080B0B, 0xFF002DFC, 0xFF050008);
	r4 = D(r4, s1_1_2, 0xFB11E708, 0x0AD401C5, 0xF9F60DFA, 0x05F60505);
	r5 = D(r5, s1_1_2, 0xFE0D10FA, 0xEF04000D, 0xF9F90AF7, 0xF703FE0A);
	r6 = D(r6, s1_1_2, 0xF9F31B06, 0x0FF8F9FE, 0x01E9EE08, 0xF401FDFD);
	r7 = D(r7, s1_1_2, 0xF4F9FB0C, 0xE9060309, 0x0FF90ADF, 0x05EBFFE1);
	r0 = D(r0, s1_2_0, 0xFF0105FB, 0xF7F9FC1B, 0x01000DF6, 0xFE0101FE);
	r1 = D(r1, s1_2_0, 0xFDF8061E, 0xFFFF050D, 0xFFFC08F9, 0x02F804F9);
	r2 = D(r2, s1_2_0, 0xFEFDFF09, 0xFAFF0109, 0x01FE0505, 0xF7F7EE01);
	r3 = D(r3, s1_2_0, 0x00FFFD05, 0xFF00FEFF, 0xFE010308, 0x02F9F5FD);
	r4 = D(r4, s1_2_0, 0x04140BF4, 0xFD0204FE, 0xF2FC030E, 0xFFFFFF00);
	r5 = D(r5, s1_2_0, 0xFFFD000A, 0xF9000405, 0xFB010EFD, 0xFDFF0206);
	r6 = D(r6, s1_2_0, 0xFBFD0607, 0xF8010BF5, 0xF8F6F7FC, 0xFEFB0102);
	r7 = D(r7, s1_2_0, 0x01010013, 0xF901F709, 0x9F120B1E, 0xFCFF01FC);
	r0 = D(r0, s1_2_1, 0x000209FB, 0xFD04FE0D, 0xF3F80304, 0xF0F10308);
	r1 = D(r1, s1_2_1, 0xFDBEFB32, 0x020407FD, 0xFCFE0400, 0xFAEA0E02);
	r2 = D(r2, s1_2_1, 0xFAF503F1, 0xFF09FAF8, 0x00F108FD, 0xF2D8052B);
	r3 = D(r3, s1_2_1, 0xFCFF01F9, 0xFDE50307, 0xFFFEFB02, 0x01E11BE9);
	r4 = D(r4, s1_2_1, 0xF7E015F6, 0xFEFEE626, 0x01C912F3, 0xF8FB0FFA);
	r5 = D(r5, s1_2_1, 0xF80203FB, 0xF7EF0A0F, 0xFB0C03FB, 0xFD02F90C);
	r6 = D(r6, s1_2_1, 0xFEED0E08, 0x040303F7, 0xF2E70207, 0x0100FD0E);
	r7 = D(r7, s1_2_1, 0xF808060D, 0xF4F403F9, 0xF8D4E813, 0x000101FE);
	r0 = D(r0, s1_2_2, 0xFF010AFD, 0xFF000007, 0xE7F806E6, 0xEC0313F1);
	r1 = D(r1, s1_2_2, 0x0F04FD16, 0x0203F8FA, 0xF3FDFA04, 0xF9060507);
	r2 = D(r2, s1_2_2, 0xFCFB0CFC, 0xFAFCFC05, 0x00FE0605, 0x00FD03EA);
	r3 = D(r3, s1_2_2, 0x01FFF9F1, 0xF904FC05, 0xF4FF0AFF, 0xF1FC0504);
	r4 = D(r4, s1_2_2, 0xE60007FC, 0xFD00FB1A, 0xF5FE0113, 0xF9FD010B);
	r5 = D(r5, s1_2_2, 0xF8040E05, 0x0300FC05, 0x010907FE, 0x0401FDFD);
	r6 = D(r6, s1_2_2, 0xFF03FE0A, 0xFEF9FF04, 0xF90C150B, 0x03FFFCF6);
	r7 = D(r7, s1_2_2, 0xFB0709FC, 0x0205F902, 0xBBDBE913, 0xFCFE0509);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-8.257e-03, -4.439e-02, -2.220e-02, -1.479e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-1.358e-02, -1.352e-02, -1.643e-02, -1.792e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-6.261e-03, -1.355e-02, -8.171e-03, -3.570e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-7.519e-03, 5.537e-03, -1.795e-02, -9.032e-03);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-3.499e-02, -2.688e-02, -1.140e-02, -3.714e-03);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(3.052e-03, -8.653e-03, -2.264e-02, -1.635e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-1.102e-02, -7.713e-03, -1.750e-02, -5.669e-04);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-1.947e-02, -2.163e-03, -1.162e-01, -1.449e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-4x32-BILINEAR-MPV-NVL-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv4
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv4_pt;
			r = conv4_gather(p, 0);
			g = conv4_gather(p, 1);
			b = conv4_gather(p, 2);
			a = conv4_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv4_pt;
			r = conv4_gather(p, 0);
			g = conv4_gather(p, 1);
			b = conv4_gather(p, 2);
			a = conv4_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0;
	vec4 f0;
	r0 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFE060000, 0x01F90001, 0x00030000, 0x00000000);
	r0 = D(r0, s0_0_1, 0x01FDFF00, 0x00060000, 0x0100FF00, 0x00FEFF00);
	r0 = D(r0, s0_0_2, 0x00FFFF00, 0xFF01FE00, 0x0000FE00, 0x0000FE00);
	r0 = D(r0, s0_1_0, 0xEB0FF805, 0x0606FCFF, 0xF1E20603, 0x05080303);
	r0 = D(r0, s0_1_1, 0xF508ED0E, 0x1AE0F311, 0xFB071902, 0x0D0C0E04);
	r0 = D(r0, s0_1_2, 0x0100F800, 0xFF03EF04, 0x00000700, 0xFFFF1400);
	r0 = D(r0, s0_2_0, 0x03FE00F8, 0xFE000100, 0xFB0400F5, 0x00FDFFFC);
	r0 = D(r0, s0_2_1, 0xFF0001FA, 0x010000F1, 0xFAF8000C, 0x0C08FFFE);
	r0 = D(r0, s0_2_2, 0x00FE0100, 0x000201FF, 0x000001FF, 0x00000106);
	r0 = D(r0, s1_0_0, 0x0204000C, 0x02020003, 0x02FF00F3, 0x00FF00FC);
	r0 = D(r0, s1_0_1, 0x0B000719, 0xEEFEFF17, 0xFE0004E9, 0xFDFF00EA);
	r0 = D(r0, s1_0_2, 0xFF000403, 0x07000A0C, 0x010003FC, 0x050006F3);
	r0 = D(r0, s1_1_0, 0xF6D400FF, 0x010700FF, 0xFB0800FF, 0x01FC0000);
	r0 = D(r0, s1_1_1, 0x170BFFFE, 0xF908FFFE, 0x1FFC0201, 0xE60AFE00);
	r0 = D(r0, s1_1_2, 0xFD0000FF, 0xFD01FFFE, 0xFD000101, 0x02000401);
	r0 = D(r0, s1_2_0, 0xFE070000, 0xFF000000, 0xFA0500FF, 0x00080000);
	r0 = D(r0, s1_2_1, 0xFFFC0000, 0x00040000, 0x030C00FF, 0x04DD00FF);
	r0 = D(r0, s1_2_2, 0x00000000, 0xFF000000, 0xFF0100FF, 0xFD0400FF);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFF00FF05, 0xFD000406, 0x0001FDFA, 0xFD000101);
	r0 = D(r0, s0_0_1, 0xE6F700F2, 0x1AF9F8F6, 0xF0FE00FC, 0x1001FFF5);
	r0 = D(r0, s0_0_2, 0x03020001, 0xFE0100FC, 0x03000000, 0xFF000000);
	r0 = D(r0, s0_1_0, 0xFDF70F05, 0xFEFFF901, 0xFDFA1410, 0xFE00FD06);
	r0 = D(r0, s0_1_1, 0xE40CF503, 0x20F90908, 0xE4FCF9FB, 0x1EEFF50C);
	r0 = D(r0, s0_1_2, 0x01030000, 0x010DFEFF, 0x01040001, 0x0009FFFB);
	r0 = D(r0, s0_2_0, 0x00010000, 0xFC000000, 0x00FDFF02, 0xFC00FD00);
	r0 = D(r0, s0_2_1, 0xEE03FF00, 0x0F030001, 0xE50DFB01, 0x1B050802);
	r0 = D(r0, s0_2_2, 0x03FF0000, 0x0001FF00, 0x03010000, 0x0007FF00);
	r0 = D(r0, s1_0_0, 0x020803F6, 0x01FB01FE, 0x01020002, 0x01FF0100);
	r0 = D(r0, s1_0_1, 0xEEFEFEFE, 0x040AFCF6, 0xFDFF0003, 0xFF01FF04);
	r0 = D(r0, s1_0_2, 0x01000000, 0x02FF0201, 0x00000000, 0x03000101);
	r0 = D(r0, s1_1_0, 0x02F3160A, 0x00F70002, 0x01010FFF, 0x00F50102);
	r0 = D(r0, s1_1_1, 0xFE0B0305, 0x0806E00F, 0xEB0500EB, 0x0A16EDEF);
	r0 = D(r0, s1_1_2, 0x080000FF, 0xF20203FE, 0x05000002, 0xFA0003FB);
	r0 = D(r0, s1_2_0, 0x00FEFF00, 0x00010300, 0x01F70903, 0x00FE0101);
	r0 = D(r0, s1_2_1, 0x00010001, 0x01FFFE00, 0x04040206, 0x04FBED06);
	r0 = D(r0, s1_2_2, 0xFF00FF00, 0x02010000, 0x02000000, 0xFA020102);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFF080509, 0x00FE05FF, 0x00FDFDFC, 0x0000FE01);
	r0 = D(r0, s0_0_1, 0xFDE100F5, 0xFD0E000E, 0x000800FF, 0x0007FEF0);
	r0 = D(r0, s0_0_2, 0x000301FE, 0xFF0301F1, 0x00FE0003, 0x00FA0005);
	r0 = D(r0, s0_1_0, 0xFDEEECFE, 0x0003FCFF, 0xFD0A0EFC, 0x000402FF);
	r0 = D(r0, s0_1_1, 0xF708F4FB, 0xF70CE3FA, 0xF70F0F17, 0xF7D61906);
	r0 = D(r0, s0_1_2, 0x00FF0207, 0xFDFD0204, 0x00FF00F7, 0xFD080208);
	r0 = D(r0, s0_2_0, 0x00020100, 0x00FF0100, 0xFF0001FF, 0x00000000);
	r0 = D(r0, s0_2_1, 0x00000400, 0x00000100, 0xFDFDFAFF, 0xFD0602FF);
	r0 = D(r0, s0_2_2, 0x000001FF, 0x000004FF, 0x0000FE00, 0xFF00F8FE);
	r0 = D(r0, s1_0_0, 0x02FEFFFF, 0x00FFFE00, 0x0000FE00, 0x0000FF00);
	r0 = D(r0, s1_0_1, 0x08FE08FF, 0x06FE11FF, 0x01000500, 0x0000FE00);
	r0 = D(r0, s1_0_2, 0x01FFFF00, 0x04FFF6FF, 0xFF000200, 0x01000000);
	r0 = D(r0, s1_1_0, 0x09020CFF, 0x0101FF00, 0x06FE0CFF, 0x0000FD00);
	r0 = D(r0, s1_1_1, 0xF21CFDFB, 0x080DE8FC, 0x0BF8E0FE, 0x10F91BFE);
	r0 = D(r0, s1_1_2, 0xFF000101, 0xF40E07FF, 0x00010200, 0xFEFFFDFF);
	r0 = D(r0, s1_2_0, 0xFF00FCFE, 0x00FF0300, 0x0202FDFE, 0x01000000);
	r0 = D(r0, s1_2_1, 0xFD0803FD, 0xFD0500FB, 0xF0EB07F9, 0xF7F6F8F9);
	r0 = D(r0, s1_2_2, 0x01FEFF01, 0x00020001, 0x00FF0001, 0xFAF60200);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0100FFFE, 0x00020105, 0x00FD0105, 0x00030101);
	r0 = D(r0, s0_0_1, 0x0310FA06, 0x03F2FBEB, 0x000701FF, 0x00F901FE);
	r0 = D(r0, s0_0_2, 0x00FEFD02, 0x0100FA02, 0x00FF01FF, 0x00000101);
	r0 = D(r0, s0_1_0, 0x0302FF1A, 0x0000FDF1, 0x0304F3DE, 0x000000FF);
	r0 = D(r0, s0_1_1, 0x0A1C17F9, 0x0AE5120F, 0x0A1AF10B, 0x0AE9E511);
	r0 = D(r0, s0_1_2, 0x00000100, 0x04FE07FD, 0x00FF01FF, 0x04FEFE02);
	r0 = D(r0, s0_2_0, 0x000100FD, 0x00000200, 0x01010706, 0x00010308);
	r0 = D(r0, s0_2_1, 0x0007FEFF, 0x00F9FEFE, 0x031301FD, 0x03EC07FA);
	r0 = D(r0, s0_2_2, 0x00FE0000, 0x0002FF00, 0x00FF0000, 0x010100FE);
	r0 = D(r0, s1_0_0, 0x02CC01FF, 0x01D900FF, 0x003901FF, 0x002A00FF);
	r0 = D(r0, s1_0_1, 0x01CDFC08, 0x01C90701, 0x003B01FD, 0xFF3C00FE);
	r0 = D(r0, s1_0_2, 0x01DB0102, 0x01D2FD09, 0x00250101, 0x002FFEFF);
	r0 = D(r0, s1_1_0, 0xF30604FE, 0x0002FF04, 0x03F6020E, 0xFF03FF01);
	r0 = D(r0, s1_1_1, 0xF000E9E8, 0xE50316E7, 0x0303EA0E, 0x08F2171E);
	r0 = D(r0, s1_1_2, 0xFF000102, 0xFD02FFFB, 0xFF0201FC, 0xFF05FEFD);
	r0 = D(r0, s1_2_0, 0x00000202, 0x01000000, 0x060005F8, 0x0200FFFA);
	r0 = D(r0, s1_2_1, 0xFD000003, 0xFD000003, 0x1200F903, 0x100007FD);
	r0 = D(r0, s1_2_2, 0x01000100, 0x0000FF01, 0xFF000100, 0x0401FF02);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-1.099e-08, -2.303e-08, -3.166e-09, -5.492e-09);
	f0 = tanh(f0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(f0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(f0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(f0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(f0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
