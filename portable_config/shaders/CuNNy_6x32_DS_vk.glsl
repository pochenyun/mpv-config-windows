// CuNNy 6x32 BILINEAR MPV NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-6x32-BILINEAR-MPV-NVL-in
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(LUMA_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0)) + vec2(0.5)) * LUMA_pt).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2, r3, r4, r5, r6, r7;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0); r3 = V4(0.0); r4 = V4(0.0); r5 = V4(0.0); r6 = V4(0.0); r7 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(-1.567e-01, 2.936e-02, 5.505e-02, 7.938e-02) * s0_0_0;
	r1 += V4(-9.838e-02, 1.574e-01, 6.567e-02, 7.153e-02) * s0_0_0;
	r2 += V4(-3.133e-01, -4.548e-02, -1.208e-01, -1.386e-02) * s0_0_0;
	r3 += V4(1.195e-01, -4.260e-02, 1.813e-02, 1.519e-01) * s0_0_0;
	r4 += V4(1.308e-02, 9.839e-02, 1.155e-01, 1.436e-02) * s0_0_0;
	r5 += V4(1.108e-01, 2.323e-02, 6.412e-02, -8.686e-03) * s0_0_0;
	r6 += V4(9.139e-03, 5.758e-03, 1.472e-04, -7.396e-02) * s0_0_0;
	r7 += V4(7.839e-03, -3.193e-01, -2.062e-02, 4.950e-02) * s0_0_0;
	r0 += V4(3.455e-02, 3.203e-01, 4.711e-02, 4.194e-02) * s0_0_1;
	r1 += V4(-7.897e-02, -1.674e-01, -3.662e-01, -1.847e-01) * s0_0_1;
	r2 += V4(6.063e-02, -1.001e-02, -6.107e-02, -4.243e-02) * s0_0_1;
	r3 += V4(-1.778e-02, 1.597e-01, 2.686e-01, 2.260e-01) * s0_0_1;
	r4 += V4(-4.748e-02, -8.232e-02, 1.396e-01, 3.954e-03) * s0_0_1;
	r5 += V4(3.223e-01, 6.137e-02, 9.292e-02, -2.378e-02) * s0_0_1;
	r6 += V4(3.229e-02, 5.016e-02, -5.339e-02, -1.965e-02) * s0_0_1;
	r7 += V4(-4.285e-02, 3.034e-02, -4.777e-02, -8.470e-02) * s0_0_1;
	r0 += V4(-1.614e-02, 7.842e-04, -8.276e-02, 8.375e-02) * s0_0_2;
	r1 += V4(-3.654e-03, 1.589e-02, -3.680e-02, -2.007e-02) * s0_0_2;
	r2 += V4(2.016e-02, 5.483e-02, 1.409e-01, 5.285e-02) * s0_0_2;
	r3 += V4(-1.023e-01, -2.501e-02, -7.052e-02, 1.558e-01) * s0_0_2;
	r4 += V4(3.162e-02, -5.994e-02, -2.979e-03, -3.571e-02) * s0_0_2;
	r5 += V4(-5.345e-02, -3.457e+00, -1.291e-01, 5.814e-03) * s0_0_2;
	r6 += V4(-7.916e-02, -3.664e-02, 5.557e-02, 2.826e-02) * s0_0_2;
	r7 += V4(2.130e-02, -1.281e-02, -1.067e-01, 3.918e-02) * s0_0_2;
	r0 += V4(2.908e-02, -2.111e-02, 1.598e-01, -1.179e+00) * s0_1_0;
	r1 += V4(-2.300e-01, -1.772e-01, -1.140e-01, -1.175e-01) * s0_1_0;
	r2 += V4(3.681e-01, 2.585e-01, -4.501e-02, 5.069e-02) * s0_1_0;
	r3 += V4(2.417e-01, 4.564e-02, -1.531e-02, -1.256e-01) * s0_1_0;
	r4 += V4(-3.675e-02, -1.626e-01, 1.947e-02, -2.043e-02) * s0_1_0;
	r5 += V4(-1.111e-01, -2.375e-02, 3.036e-01, 3.211e-02) * s0_1_0;
	r6 += V4(3.019e-02, -9.602e-03, -2.338e-02, -2.756e-01) * s0_1_0;
	r7 += V4(-5.350e-02, 1.979e-01, 5.070e-03, -4.679e-02) * s0_1_0;
	r0 += V4(2.368e-01, 3.577e-02, -4.336e-02, -2.549e-01) * s0_1_1;
	r1 += V4(1.841e-01, 1.522e-01, 1.881e-01, -1.880e-01) * s0_1_1;
	r2 += V4(-1.642e-02, -2.378e-01, 1.144e-01, -1.891e-01) * s0_1_1;
	r3 += V4(3.080e-02, -2.331e-01, 1.616e-01, -1.617e-01) * s0_1_1;
	r4 += V4(-2.725e-01, -8.910e-02, -6.891e-01, 3.475e-01) * s0_1_1;
	r5 += V4(-1.508e-01, 3.334e-02, -1.826e-01, -1.098e-01) * s0_1_1;
	r6 += V4(-2.060e-01, -1.330e-02, -2.468e-01, 3.002e-02) * s0_1_1;
	r7 += V4(-3.774e-01, -2.645e-02, -2.749e-02, 2.241e-01) * s0_1_1;
	r0 += V4(9.492e-03, 3.689e-02, 1.684e-01, 2.854e-02) * s0_1_2;
	r1 += V4(-2.579e-03, 4.769e-02, 1.549e-01, 1.447e-01) * s0_1_2;
	r2 += V4(-1.460e-01, 2.525e-02, 6.610e-03, 1.060e-01) * s0_1_2;
	r3 += V4(-2.603e-01, 3.526e-02, -3.025e-01, -1.323e-01) * s0_1_2;
	r4 += V4(-9.788e-02, 4.150e-01, 1.763e-01, 8.946e-02) * s0_1_2;
	r5 += V4(-2.263e-02, -1.792e-01, 7.495e-02, 1.881e-01) * s0_1_2;
	r6 += V4(2.280e-01, -1.362e-01, 2.675e-01, 3.166e-01) * s0_1_2;
	r7 += V4(-9.497e-02, -6.753e-04, -1.096e-01, -3.045e-04) * s0_1_2;
	r0 += V4(-1.274e-02, -8.000e-03, 1.057e-02, -9.082e-01) * s0_2_0;
	r1 += V4(9.643e-02, -1.229e-02, 6.187e-02, 4.089e-02) * s0_2_0;
	r2 += V4(-3.551e-02, -5.327e-02, 9.649e-02, 2.189e-03) * s0_2_0;
	r3 += V4(2.515e-02, -3.181e-02, -1.731e-03, -9.926e-03) * s0_2_0;
	r4 += V4(2.036e-02, 2.869e-02, 3.029e-02, -8.443e-02) * s0_2_0;
	r5 += V4(7.655e-03, 2.911e-02, 1.780e-02, -3.137e-02) * s0_2_0;
	r6 += V4(2.124e-01, -1.768e-02, 1.745e-02, -9.020e-03) * s0_2_0;
	r7 += V4(1.735e-01, 1.007e-01, 3.456e-02, 1.011e-01) * s0_2_0;
	r0 += V4(-5.462e-02, -3.488e-01, 1.181e-01, -1.679e-02) * s0_2_1;
	r1 += V4(1.745e-01, 5.934e-02, -2.034e-02, 7.005e-02) * s0_2_1;
	r2 += V4(-2.065e-01, 1.039e-02, -1.284e-01, 3.584e-01) * s0_2_1;
	r3 += V4(-2.714e-02, 1.430e-01, 3.989e-02, -7.834e-02) * s0_2_1;
	r4 += V4(3.578e-01, -2.214e-02, 1.971e-02, -2.547e-01) * s0_2_1;
	r5 += V4(-1.479e-01, 1.284e-02, -1.373e-01, -1.850e-01) * s0_2_1;
	r6 += V4(-5.001e-02, 2.555e-03, -1.422e-01, -2.083e-02) * s0_2_1;
	r7 += V4(2.966e-01, 2.290e-02, -1.428e-02, -2.881e-01) * s0_2_1;
	r0 += V4(-1.217e-01, -3.962e-02, 2.136e-02, 3.844e-02) * s0_2_2;
	r1 += V4(-4.012e-02, -4.853e-02, 6.067e-02, -6.134e-02) * s0_2_2;
	r2 += V4(9.644e-02, 4.572e-03, -3.373e-02, -3.390e-01) * s0_2_2;
	r3 += V4(-1.016e-02, -3.266e-02, -1.007e-01, -2.988e-02) * s0_2_2;
	r4 += V4(3.271e-02, -3.037e-01, 2.131e-02, -5.539e-02) * s0_2_2;
	r5 += V4(5.164e-02, 1.013e-01, -7.211e-02, 1.350e-01) * s0_2_2;
	r6 += V4(-1.694e-01, -1.857e-03, 1.229e-01, 2.849e-02) * s0_2_2;
	r7 += V4(7.200e-02, 1.067e-02, 2.332e-01, -5.176e-01) * s0_2_2;
	r0 += V4(-7.977e-03, -8.061e-03, -1.548e-01, 5.183e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(6.312e-03, -2.571e-03, -4.212e-02, 5.260e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(1.180e-03, 1.309e-02, 1.642e-02, -4.075e-03);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r2));
	r3 += V4(1.157e-02, 1.234e-02, -3.202e-03, -2.491e-03);
	r3 = max(r3, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r3));
	r4 += V4(2.700e-02, -3.738e-04, 1.812e-03, 1.477e-02);
	r4 = max(r4, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r4));
	r5 += V4(7.876e-03, 3.137e-02, -5.969e-02, 1.516e-02);
	r5 = max(r5, V4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), vec4(r5));
	r6 += V4(9.354e-04, 8.765e-02, 5.154e-03, 1.426e-03);
	r6 = max(r6, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), vec4(r6));
	r7 += V4(2.008e-03, 7.456e-03, -1.211e-02, 2.675e-02);
	r7 = max(r7, V4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), vec4(r7));
}

//!DESC CuNNy-6x32-BILINEAR-MPV-NVL-conv1
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFF172000, 0x00000109, 0x1CF70506, 0xE60BDAE4);
	r1 = D(r1, s0_0_0, 0xFAFAFB09, 0x150105FD, 0x15ED0600, 0x030BFD02);
	r2 = D(r2, s0_0_0, 0x1209FD11, 0xE9FCF405, 0xFB02DA0D, 0xFFF80CF5);
	r3 = D(r3, s0_0_0, 0x00140FFA, 0xF0FBF91E, 0x04FCF6EA, 0xF90C0508);
	r4 = D(r4, s0_0_0, 0xDBF80316, 0xF20DE607, 0x060715F4, 0xF30507F8);
	r5 = D(r5, s0_0_0, 0x25F500E8, 0xFF140F1C, 0xEFFBF3F6, 0x0A06F3F9);
	r6 = D(r6, s0_0_0, 0x1BA910CB, 0x13F7E4F4, 0xE1F31525, 0x0B03F203);
	r7 = D(r7, s0_0_0, 0xE702F315, 0x1205FBE7, 0x0BFFF9F4, 0x1205FBF8);
	r0 = D(r0, s0_0_1, 0x1301EFF7, 0x350515F8, 0x0605D624, 0xE6F981FC);
	r1 = D(r1, s0_0_1, 0xFF05F1E9, 0xF202E612, 0xF4060EFE, 0x3113FB0B);
	r2 = D(r2, s0_0_1, 0xFAF91F21, 0x17F60815, 0x0A010B03, 0xE9FB0C08);
	r3 = D(r3, s0_0_1, 0x160DFD13, 0x26FCFFFA, 0x140A10FA, 0xFEF1280C);
	r4 = D(r4, s0_0_1, 0x14050FFA, 0xDAFD12F1, 0xC103ECFC, 0xBFEDF810);
	r5 = D(r5, s0_0_1, 0x16E40CF3, 0xEBECD900, 0x08FD27EB, 0x0E040903);
	r6 = D(r6, s0_0_1, 0x13071C00, 0xEE1033F6, 0xED1311DD, 0x0311F4EF);
	r7 = D(r7, s0_0_1, 0x0AF80702, 0x20FDF60A, 0x1908D808, 0x1B0902F2);
	r0 = D(r0, s0_0_2, 0x05FE06F0, 0xF80807F6, 0x5C09EEF5, 0x04FF19F1);
	r1 = D(r1, s0_0_2, 0xDE0AFBF1, 0xF7FDFCF1, 0x0609EE2F, 0x241801FE);
	r2 = D(r2, s0_0_2, 0x0202D8EF, 0xAF020FEE, 0x14FEF701, 0xF400F8F7);
	r3 = D(r3, s0_0_2, 0xE9F90DF9, 0x1BFEF8FE, 0x0FF30DEB, 0xD90104F5);
	r4 = D(r4, s0_0_2, 0xDCF8F3EA, 0xB7F9FBED, 0x1802E231, 0xEBFAE92A);
	r5 = D(r5, s0_0_2, 0x1ADFEDC0, 0xFF06F10A, 0x0EFEFAFA, 0xFDFE02FD);
	r6 = D(r6, s0_0_2, 0x180B19F0, 0x81FAEC14, 0xF2F60C09, 0x260C05F9);
	r7 = D(r7, s0_0_2, 0xEEFE07E3, 0x0DFBFF1B, 0xC3F805FC, 0xF103E3FC);
	r0 = D(r0, s0_1_0, 0x020D17F6, 0xF2F5EC03, 0xD4FAF8DF, 0xE60605CF);
	r1 = D(r1, s0_1_0, 0x23E9E5F7, 0x10050200, 0x0E032BED, 0xED0EFD0A);
	r2 = D(r2, s0_1_0, 0x00F70CE5, 0x08050910, 0xE6EFE701, 0x020301FC);
	r3 = D(r3, s0_1_0, 0x030CDCFD, 0xD40BEFF3, 0x160713DD, 0xF7F4F90F);
	r4 = D(r4, s0_1_0, 0x0EF5F5ED, 0xE500F0F9, 0xFDFCF207, 0xDF19F902);
	r5 = D(r5, s0_1_0, 0x2DE5E5D5, 0xEAFFF003, 0x1B00ECFE, 0xE60C00FA);
	r6 = D(r6, s0_1_0, 0xFED2F8E7, 0x18100414, 0x2004EFED, 0x0A0D161B);
	r7 = D(r7, s0_1_0, 0x10F1DA0B, 0xFEF6FDF6, 0x0003EBEA, 0x14F50A0D);
	r0 = D(r0, s0_1_1, 0xE4F5EDFB, 0xFBF4DBFD, 0xDC030206, 0xDF0B810B);
	r1 = D(r1, s0_1_1, 0xE216FD11, 0x2CF00F08, 0xFB09CAF1, 0xDD1D1104);
	r2 = D(r2, s0_1_1, 0x2205FF01, 0x2BF4010B, 0xEB0DFB18, 0x1300F9F3);
	r3 = D(r3, s0_1_1, 0x23FDCE03, 0x0CEF03F7, 0xF7FF14F4, 0xF8031BF6);
	r4 = D(r4, s0_1_1, 0x1E0004F0, 0xF519FDDE, 0xFB11FA09, 0x3000DAF1);
	r5 = D(r5, s0_1_1, 0x1B1010F9, 0x0CFDFD01, 0xE30943EF, 0xF0F81BF6);
	r6 = D(r6, s0_1_1, 0x0F0804F9, 0x17FA0506, 0x22011AD2, 0xE4E8D2F0);
	r7 = D(r7, s0_1_1, 0xCA001818, 0x1712121E, 0x250BF8F5, 0xFDF11706);
	r0 = D(r0, s0_1_2, 0xB605FFF7, 0xFA031400, 0x30FDD003, 0x810018AE);
	r1 = D(r1, s0_1_2, 0x20F41411, 0x1BFA12FB, 0x0BFB14F1, 0x81181104);
	r2 = D(r2, s0_1_2, 0xAEF1FFFC, 0xFEFD0C01, 0x20100FE2, 0xE2090910);
	r3 = D(r3, s0_1_2, 0xE5FC1703, 0x4AF7F1EC, 0x02FBF7F8, 0x1405061B);
	r4 = D(r4, s0_1_2, 0xD506F113, 0x3F040100, 0x080E1928, 0xE40DFB14);
	r5 = D(r5, s0_1_2, 0xE4E8F7B9, 0xF0FD1D15, 0x2BFAED05, 0x22F601FC);
	r6 = D(r6, s0_1_2, 0xC8FCF2EC, 0x81FC26EC, 0x0D02F91F, 0xDF07E0E3);
	r7 = D(r7, s0_1_2, 0x08FBF9F2, 0xCBF9F8F6, 0xE30B04FD, 0x0712F7F0);
	r0 = D(r0, s0_2_0, 0x070107FE, 0x0707F002, 0xF009FCFA, 0x1DFCF9EF);
	r1 = D(r1, s0_2_0, 0xFFFAFBF6, 0xFFFEF905, 0xDFFA220B, 0x11070100);
	r2 = D(r2, s0_2_0, 0xD9FB120F, 0x0915FB20, 0x030219F7, 0x0B05060C);
	r3 = D(r3, s0_2_0, 0x1BE8F9FE, 0x02FE0803, 0xE9F723F9, 0xF20C09F5);
	r4 = D(r4, s0_2_0, 0x03040804, 0xF5FF01DE, 0xE6F0F3E4, 0x05F201FB);
	r5 = D(r5, s0_2_0, 0x21012627, 0xD802EFF5, 0xF10CF405, 0x14071217);
	r6 = D(r6, s0_2_0, 0x1AF5F902, 0xDA08D915, 0xE407FB06, 0xF1FE0BF5);
	r7 = D(r7, s0_2_0, 0x0D0A20FA, 0xF7FA0EF3, 0xFAF313F6, 0xE8000DFB);
	r0 = D(r0, s0_2_1, 0x3404FAF2, 0x1FFB15F0, 0xE7FE1DF4, 0xF7FBEFFD);
	r1 = D(r1, s0_2_1, 0xF4FD1205, 0x090B0FE4, 0xCEFFE8CA, 0xEB0D0E0A);
	r2 = D(r2, s0_2_1, 0xFD06E7FD, 0x0E0714F6, 0xF7F9FCE5, 0x03FE01FE);
	r3 = D(r3, s0_2_1, 0x03F1D4E9, 0x07FC9104, 0x0B0204E7, 0x12F907F3);
	r4 = D(r4, s0_2_1, 0x0201FFFF, 0x02E914F9, 0x1CFC4A00, 0xF6FCD6FC);
	r5 = D(r5, s0_2_1, 0xF6ECF00E, 0xE7F6E0C7, 0xF6F7160D, 0xF3FFE8EF);
	r6 = D(r6, s0_2_1, 0x1615F2F8, 0x0EFCFC04, 0xDD0325EE, 0x0FF309EE);
	r7 = D(r7, s0_2_1, 0x0B1014F5, 0xFA01FBEB, 0x00FDE4EB, 0xFBF2FE14);
	r0 = D(r0, s0_2_2, 0x19F410FC, 0xF309FD1A, 0x03FCE4EB, 0xD8FA111E);
	r1 = D(r1, s0_2_2, 0xCA0DFCE3, 0xFF060104, 0x1D01070B, 0xFE14F7FE);
	r2 = D(r2, s0_2_2, 0xFB0C1B1E, 0x12030CF4, 0x1BF91C11, 0x0B001003);
	r3 = D(r3, s0_2_2, 0xE90E1A09, 0x07EC1C36, 0x3005F718, 0x1400030A);
	r4 = D(r4, s0_2_2, 0x1C0AFEFF, 0x110512FF, 0x2BF2DCE1, 0xC8FF2218);
	r5 = D(r5, s0_2_2, 0xFDF2EDE3, 0xFE070C14, 0xE204F7F6, 0xE9FCFEFA);
	r6 = D(r6, s0_2_2, 0xF00405FE, 0xE0F7F9F7, 0xFEF30DF4, 0xEDF7F01D);
	r7 = D(r7, s0_2_2, 0x0D03EBFB, 0xF109FC16, 0xD3FCF3FA, 0x4005FAEC);
	r0 = D(r0, s1_0_0, 0xB8F9FBF2, 0xE101F406, 0xE21DE5F0, 0x0FF210F2);
	r1 = D(r1, s1_0_0, 0xF2E5F50B, 0xEE02F8E7, 0x21F61A12, 0xFF040C08);
	r2 = D(r2, s1_0_0, 0x07EB0A02, 0x1B07ECF7, 0x09FD1D22, 0xFA0D02F5);
	r3 = D(r3, s1_0_0, 0x1B011618, 0xEBE61414, 0xF2251312, 0x06F307FE);
	r4 = D(r4, s1_0_0, 0xFF0F00F2, 0x17F1FF26, 0xFBF00707, 0x12F90203);
	r5 = D(r5, s1_0_0, 0x011011F9, 0x10F710E4, 0x110FFDF2, 0xF915031A);
	r6 = D(r6, s1_0_0, 0xF62DD5F3, 0xEF0FF6E3, 0x10031309, 0x0E110FFB);
	r7 = D(r7, s1_0_0, 0xFDFD2525, 0x06EB04FB, 0x1501FFFE, 0xE5100FFB);
	r0 = D(r0, s1_0_1, 0x1404EE04, 0xF2FCFB1F, 0xF0ECFA04, 0xF322E426);
	r1 = D(r1, s1_0_1, 0x0A0A0012, 0xFC0AF5E4, 0xFBF11ADC, 0xE1FCF600);
	r2 = D(r2, s1_0_1, 0x04E0020A, 0xF8090500, 0xE911ED05, 0xFC06EFE1);
	r3 = D(r3, s1_0_1, 0xFC16FFF1, 0x0A0AF610, 0x36F71B21, 0x0912F5F6);
	r4 = D(r4, s1_0_1, 0x11EAF0FD, 0x040AFF0E, 0xF9EAE20C, 0x14DA03FE);
	r5 = D(r5, s1_0_1, 0x1105C9FF, 0xF8F5D314, 0x14F8FF0D, 0xFCF5F204);
	r6 = D(r6, s1_0_1, 0x0C07F20D, 0xE30118DE, 0xF52FFB04, 0x0E0502F4);
	r7 = D(r7, s1_0_1, 0x09F423F5, 0xFE17072F, 0xFFFB001A, 0x3D0510EA);
	r0 = D(r0, s1_0_2, 0x09E71402, 0x05080709, 0x2F010809, 0xF5FE0ED7);
	r1 = D(r1, s1_0_2, 0xF40215F4, 0x0708FDF9, 0xDB0FEAD4, 0xF003F9F7);
	r2 = D(r2, s1_0_2, 0xDB12EBF0, 0x040001F4, 0x01FAFFD8, 0x13FFFF0D);
	r3 = D(r3, s1_0_2, 0x0AF804F6, 0xFAE7F8F6, 0xFF072802, 0x10FFFC12);
	r4 = D(r4, s1_0_2, 0xFF0CFE09, 0xFE0AFB12, 0xECF9F9E7, 0x071AEB02);
	r5 = D(r5, s1_0_2, 0xF13100D8, 0xF7F62910, 0x0113FD01, 0x0402F9F8);
	r6 = D(r6, s1_0_2, 0x01F90702, 0x0505F6DF, 0x0BECDAF5, 0xEB06FF16);
	r7 = D(r7, s1_0_2, 0x1A0B0BF4, 0x05EDF1CB, 0xE30104F6, 0xB8E7D50E);
	r0 = D(r0, s1_1_0, 0xF01B05F9, 0x130CEF02, 0x08A30B08, 0xFDD5030F);
	r1 = D(r1, s1_1_0, 0xE6FA08FC, 0x260406FC, 0xC3FDFEF5, 0x0B1701F7);
	r2 = D(r2, s1_1_0, 0x25000518, 0x0DF1E900, 0xC4F8ECF6, 0x010AFA0E);
	r3 = D(r3, s1_1_0, 0x043AF70A, 0xECDDF810, 0xF709FE05, 0xFCE4FBF8);
	r4 = D(r4, s1_1_0, 0x15FDF9E6, 0xF433F216, 0xE5F71517, 0x08F2F602);
	r5 = D(r5, s1_1_0, 0x0FF2010E, 0xF8F514FD, 0xEFF504F9, 0xD6180D0E);
	r6 = D(r6, s1_1_0, 0xF2070C23, 0xF5F9FB04, 0x03070FEA, 0xFF13FEEE);
	r7 = D(r7, s1_1_0, 0xED17D019, 0x08CB04FD, 0xC70A02F5, 0x200E08FC);
	r0 = D(r0, s1_1_1, 0x954F01F0, 0x2D0D27F6, 0xE3B6FF08, 0x16C8F4F5);
	r1 = D(r1, s1_1_1, 0xF62AE7BD, 0xFEED2214, 0x0BDB10E0, 0xF608F801);
	r2 = D(r2, s1_1_1, 0xEDF6EAE8, 0xD4FB0605, 0x151DFADB, 0x04CEFA01);
	r3 = D(r3, s1_1_1, 0xCE0DFDCD, 0x23E11916, 0x2AF3FC0E, 0x0902F0EE);
	r4 = D(r4, s1_1_1, 0x1EF30F09, 0xEEF8FE05, 0xF9F3F60F, 0xE3E8F4E7);
	r5 = D(r5, s1_1_1, 0x12FF11FF, 0xEA11D1FB, 0x10F0FEED, 0x17E5F7BC);
	r6 = D(r6, s1_1_1, 0xF51220F2, 0x0DEC1720, 0xEB10140E, 0xDE1C0605);
	r7 = D(r7, s1_1_1, 0x0BF1FD11, 0x0A340DE8, 0x1EF8142A, 0x16A3F802);
	r0 = D(r0, s1_1_2, 0x14D502EE, 0xE30D1401, 0x0848DFD5, 0x0C1811F8);
	r1 = D(r1, s1_1_2, 0x100AE3FB, 0xF7FFE702, 0x07CBDAD8, 0x0F0B040E);
	r2 = D(r2, s1_1_2, 0x021D2312, 0x040A02DD, 0xE403FECA, 0xEA122015);
	r3 = D(r3, s1_1_2, 0xFCF8FCD5, 0xF80013FF, 0xF0FDE9FF, 0x0B1420FC);
	r4 = D(r4, s1_1_2, 0xEB0616F0, 0x28041CFB, 0xFEE83DF5, 0x11F90E03);
	r5 = D(r5, s1_1_2, 0x000FF202, 0x14FEF201, 0xFA0D0C28, 0x030D060D);
	r6 = D(r6, s1_1_2, 0x0E0F07F6, 0xDB12E904, 0x0AFAF706, 0x06080BC8);
	r7 = D(r7, s1_1_2, 0x081DF6F3, 0xF2171108, 0x20FBF7DD, 0xFD0000F2);
	r0 = D(r0, s1_2_0, 0x3BE5FFF5, 0xF8F6E301, 0x00F620EC, 0xF5F9F5F8);
	r1 = D(r1, s1_2_0, 0x0CD0EC01, 0xEB1B0801, 0xF516E709, 0xE0F50508);
	r2 = D(r2, s1_2_0, 0xE8DD1002, 0x1215EA0F, 0x1C080715, 0x0CF304FC);
	r3 = D(r3, s1_2_0, 0x0158F208, 0xEDFCFE05, 0xDA2AF703, 0xF3100003);
	r4 = D(r4, s1_2_0, 0xF704FA0D, 0xFFEB022E, 0x17FA1D09, 0x16F7F102);
	r5 = D(r5, s1_2_0, 0x0EF3F1F8, 0xFA47120E, 0xFDF0F700, 0x1BE30707);
	r6 = D(r6, s1_2_0, 0xD0ABFAE5, 0xF4F3F81E, 0xF5F10EF2, 0xF60FFB12);
	r7 = D(r7, s1_2_0, 0x072BEAE3, 0xEDFEF3F7, 0x1222F904, 0x130010F1);
	r0 = D(r0, s1_2_1, 0xED1CE3EE, 0xFF0AFA02, 0xFEF90122, 0xEB2BF8E5);
	r1 = D(r1, s1_2_1, 0x17132113, 0x1DF7F6F5, 0x35071D04, 0x17EE0AFE);
	r2 = D(r2, s1_2_1, 0x0F0FF815, 0xE51818EF, 0x0A1F2104, 0x07040A01);
	r3 = D(r3, s1_2_1, 0x07F41BC7, 0xFB000BFE, 0xE90101D7, 0x0B08F8EC);
	r4 = D(r4, s1_2_1, 0xF406F70D, 0x05C70317, 0xE71BF909, 0xF8CAF7F9);
	r5 = D(r5, s1_2_1, 0x251B1305, 0x11D7170D, 0xEAE71E0E, 0xE81BFDE9);
	r6 = D(r6, s1_2_1, 0x01CB100C, 0xE8C9F80E, 0x0FC20026, 0x02A5EAE7);
	r7 = D(r7, s1_2_1, 0xF5ECF20F, 0x0504FB03, 0x2F81DCF0, 0x0401EFF7);
	r0 = D(r0, s1_2_2, 0x0EF5F3F0, 0xF803F72D, 0xF3070FC3, 0xFF040C04);
	r1 = D(r1, s1_2_2, 0x0BE5180B, 0x190806E8, 0x08FDF902, 0xEFF9FAFD);
	r2 = D(r2, s1_2_2, 0x0FFCF50E, 0xE9F4FEEE, 0x10BFE50F, 0x00F7F402);
	r3 = D(r3, s1_2_2, 0xFC00E5EF, 0xFE0900E9, 0x030BEAF9, 0xF412FF00);
	r4 = D(r4, s1_2_2, 0x06FAF50A, 0xF3F3E9FB, 0x060BB1E5, 0xD80C1C25);
	r5 = D(r5, s1_2_2, 0x1B2005F3, 0xD303FA2B, 0xF600ED03, 0x020C0605);
	r6 = D(r6, s1_2_2, 0xB6E6F706, 0x380414F5, 0x0328FEF0, 0x0F5401FF);
	r7 = D(r7, s1_2_2, 0xFC050124, 0xF106F805, 0xEC0F1FF6, 0xEFE6021A);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0E06FEF7, 0xCBF620FD, 0x140103B5, 0xC20B1404);
	r1 = D(r1, s0_0_0, 0x0BEF03F1, 0x29F6FDEF, 0x05C8F724, 0x04F1FF04);
	r2 = D(r2, s0_0_0, 0xD9011AF2, 0xE209270A, 0xDBF4EBFE, 0xFA01F2F6);
	r3 = D(r3, s0_0_0, 0xD809FA21, 0x27FBF607, 0xE11304DA, 0x1D00F705);
	r4 = D(r4, s0_0_0, 0x16FDF4FE, 0xDCED02FC, 0xFE1D0F26, 0xFD02FB15);
	r5 = D(r5, s0_0_0, 0xFA020303, 0x10021517, 0x19F30200, 0xF805F20B);
	r6 = D(r6, s0_0_0, 0x81DE0881, 0x730F0102, 0x0E16F612, 0x140EFC09);
	r7 = D(r7, s0_0_0, 0xC306E502, 0x15F60E00, 0x99FBF9F5, 0x2A13F508);
	r0 = D(r0, s0_0_1, 0xEBEBFEE3, 0x010CECFB, 0x3BF8F1FB, 0xEDFEEEDD);
	r1 = D(r1, s0_0_1, 0x02190607, 0x0DFBF223, 0x540C12F7, 0x0E030BFE);
	r2 = D(r2, s0_0_1, 0xD6F507E8, 0x0DF300F4, 0x00190104, 0x1604E7EC);
	r3 = D(r3, s0_0_1, 0xFCF70FF9, 0xE313090F, 0x0D021420, 0xE10EE816);
	r4 = D(r4, s0_0_1, 0x0BFCFDF9, 0xDD08FE0C, 0xF9F51D02, 0xFBFF0D14);
	r5 = D(r5, s0_0_1, 0x0C23FA13, 0xE2EA0C0C, 0xE304062A, 0xD50CFAF1);
	r6 = D(r6, s0_0_1, 0xE00BCBE1, 0x18EFFFE8, 0x05F30EEC, 0xEAF80BFB);
	r7 = D(r7, s0_0_1, 0xFAFF03F9, 0xE31F00F0, 0x070B0EEB, 0xFC0903DA);
	r0 = D(r0, s0_0_2, 0xE6180AFE, 0x08FD0DFA, 0xF914EA03, 0x050200FF);
	r1 = D(r1, s0_0_2, 0x0612F0F5, 0xFE09FA04, 0xF5EFCC02, 0x0609E907);
	r2 = D(r2, s0_0_2, 0xFA260214, 0x0FF7FE0C, 0xF61812FC, 0x05FBE7EA);
	r3 = D(r3, s0_0_2, 0x0900F7F1, 0xDF07001B, 0xFCF110F2, 0xF7F7231B);
	r4 = D(r4, s0_0_2, 0xF603F906, 0xFFFC030D, 0xFE09240C, 0xE4FBF210);
	r5 = D(r5, s0_0_2, 0x430BFCC8, 0x08000F3C, 0xFD02EE06, 0x0CF3F2FB);
	r6 = D(r6, s0_0_2, 0xEB1E1CF3, 0xF81DE8C9, 0xFE0507EA, 0x26F920F4);
	r7 = D(r7, s0_0_2, 0x010BE6F6, 0x06FC1AF6, 0x0F07FDDF, 0x09F3F50B);
	r0 = D(r0, s0_1_0, 0x12030707, 0xF3FAF3EB, 0xBAE0FD1F, 0xFF09FB33);
	r1 = D(r1, s0_1_0, 0x0D0BF6F8, 0xFCEF151E, 0xD3F4F8D9, 0x0306FE11);
	r2 = D(r2, s0_1_0, 0xE016F612, 0x05F20017, 0x4918F9EF, 0xFE0AFE0D);
	r3 = D(r3, s0_1_0, 0x00F713FA, 0x24FD1608, 0xEAECF5E7, 0x00F3080B);
	r4 = D(r4, s0_1_0, 0x10FB0805, 0xFD14F603, 0xD2FBED4A, 0xDFECFD10);
	r5 = D(r5, s0_1_0, 0x1BF00813, 0xFBFCF007, 0xF1050A03, 0xE303FD06);
	r6 = D(r6, s0_1_0, 0x13040315, 0x48D01807, 0xEEED11FF, 0x08030011);
	r7 = D(r7, s0_1_0, 0xC1FAFF03, 0xE4030819, 0x1B0304ED, 0x00F900F2);
	r0 = D(r0, s0_1_1, 0xF1F1F201, 0xD005E7F7, 0xC7F81A40, 0x0DFD0427);
	r1 = D(r1, s0_1_1, 0xFFF52312, 0x0A16FCE8, 0xEBEF1DDA, 0xFC010611);
	r2 = D(r2, s0_1_1, 0x1AEEFDE4, 0x25FEF02D, 0x14E22024, 0x22F10FED);
	r3 = D(r3, s0_1_1, 0xDDFF14EF, 0xFBFA2A48, 0x11F6F309, 0x08091D1F);
	r4 = D(r4, s0_1_1, 0x0C140307, 0x14F710DA, 0xEFF6F6E0, 0x0811F4FE);
	r5 = D(r5, s0_1_1, 0x31EC203E, 0x0A1304FD, 0x13050BF9, 0xFE012A26);
	r6 = D(r6, s0_1_1, 0xDE10464C, 0xD005FCEE, 0x3621FAB3, 0x0F000D01);
	r7 = D(r7, s0_1_1, 0xC523F4F3, 0x1805F8F0, 0x1BF6C429, 0xF2121ECE);
	r0 = D(r0, s0_1_2, 0xF9E811F4, 0xFDFBF4EE, 0x05F9ED25, 0xEA03E00B);
	r1 = D(r1, s0_1_2, 0x09F90BE5, 0xF9021A0E, 0xF7F9E4A4, 0x1A010721);
	r2 = D(r2, s0_1_2, 0x05FEDDE4, 0x0F00E9F5, 0xFAFBFE0F, 0x0B121001);
	r3 = D(r3, s0_1_2, 0x1EF9F9FB, 0xFBF4F1E3, 0x04FBFAFB, 0xF9F1F006);
	r4 = D(r4, s0_1_2, 0x04FA0F1B, 0xE9F202FF, 0xA40D00FE, 0x03E613E4);
	r5 = D(r5, s0_1_2, 0x18083111, 0xF6FBE5E1, 0x06040008, 0x04FF080A);
	r6 = D(r6, s0_1_2, 0xEB0101D4, 0x14EA20E1, 0xFDE4EDCB, 0xD214F004);
	r7 = D(r7, s0_1_2, 0xE1F1F5FB, 0xF117EB8C, 0x0D1715E1, 0xF3E705FB);
	r0 = D(r0, s0_2_0, 0x2B03FDE4, 0xFB000E13, 0xF7101D06, 0x28FCFD17);
	r1 = D(r1, s0_2_0, 0x05FAE6E9, 0x0404FDD6, 0x002C16E1, 0xF5F5FEF8);
	r2 = D(r2, s0_2_0, 0xF2E9E0F3, 0xEB020803, 0x0404EA11, 0x04FC02E3);
	r3 = D(r3, s0_2_0, 0x2408EFFB, 0x0C27E818, 0x1112D9E8, 0xF7FE05E6);
	r4 = D(r4, s0_2_0, 0x03EF08F3, 0xDD1ADB33, 0x0EF5D420, 0xF4F8F1E9);
	r5 = D(r5, s0_2_0, 0xFE00FD12, 0xFBEBF20D, 0x0816F508, 0x0406EB01);
	r6 = D(r6, s0_2_0, 0x10220A35, 0x1B020C14, 0x1B11EF0A, 0xFFF90C02);
	r7 = D(r7, s0_2_0, 0xFFF10518, 0xFAFFEDFD, 0x12FE030D, 0x09FDF416);
	r0 = D(r0, s0_2_1, 0x04F10322, 0x0203F713, 0x03091BF5, 0x15EC0623);
	r1 = D(r1, s0_2_1, 0x1BE9FB13, 0x05F1D71E, 0xFA28FB3B, 0xFD030207);
	r2 = D(r2, s0_2_1, 0xD4070E12, 0xFF02FA00, 0xF9DF0EEE, 0x0F000008);
	r3 = D(r3, s0_2_1, 0xF106FD22, 0xF10AFD01, 0x24F02804, 0xF700E91B);
	r4 = D(r4, s0_2_1, 0x1A0A1421, 0xE913E831, 0xF6C0F9CD, 0xEAF6040C);
	r5 = D(r5, s0_2_1, 0x19FAB200, 0x1015080D, 0xFCF4FB05, 0xF6EF19EB);
	r6 = D(r6, s0_2_1, 0x0DFAF704, 0xE117E4F7, 0x27F806FF, 0x100DFA0F);
	r7 = D(r7, s0_2_1, 0x1DFD0620, 0xF2FAFEEC, 0x07F115CF, 0x0EFFF12A);
	r0 = D(r0, s0_2_2, 0x071DEBCA, 0xF302FE25, 0xF4F2FDB1, 0xF41710D8);
	r1 = D(r1, s0_2_2, 0x18F1F736, 0x10000708, 0x1001F805, 0xFE0306F1);
	r2 = D(r2, s0_2_2, 0x04FD00F7, 0xFBFAE6F7, 0x0AF5F600, 0xF7FB0BF1);
	r3 = D(r3, s0_2_2, 0x0A08FBEC, 0xEFF1F60C, 0x12F6EFFB, 0x0205F016);
	r4 = D(r4, s0_2_2, 0x0406EA0B, 0xFF06F322, 0xA1FC0ACD, 0xEE10E825);
	r5 = D(r5, s0_2_2, 0x32EAF504, 0x1BF51ADD, 0xF50217E7, 0xFF05F0ED);
	r6 = D(r6, s0_2_2, 0xF4FD17DF, 0xF7F9FFF8, 0x080121FA, 0x0EE8E9EF);
	r7 = D(r7, s0_2_2, 0xFCFF0F0D, 0x00F2FCE3, 0x1100FC0C, 0xFA150FEB);
	r0 = D(r0, s1_0_0, 0x14EF10FF, 0xF40EDF19, 0x1A1CF2CE, 0x2304F41F);
	r1 = D(r1, s1_0_0, 0x0FED04F3, 0x14FAF207, 0x00FDFFF3, 0x030B05FC);
	r2 = D(r2, s1_0_0, 0x0CFA011D, 0xFDE6E308, 0xF4100ADB, 0x08F1FDFB);
	r3 = D(r3, s1_0_0, 0x0EF0180A, 0x1508F4F4, 0x00F9F615, 0x04F2EA11);
	r4 = D(r4, s1_0_0, 0x00F20D07, 0x0E170D07, 0xFDF700F6, 0xF40CF914);
	r5 = D(r5, s1_0_0, 0xF00CF009, 0x100800F5, 0xE20FF307, 0xF8091812);
	r6 = D(r6, s1_0_0, 0x160ADBB2, 0xF1FE1CE8, 0xF4E4F916, 0x1C081903);
	r7 = D(r7, s1_0_0, 0x07EB1324, 0xD6020D0A, 0x02E7FA03, 0xF316F804);
	r0 = D(r0, s1_0_1, 0x1E03FA14, 0x12120809, 0x0004F2F9, 0xD6F9E315);
	r1 = D(r1, s1_0_1, 0x15F5F009, 0x0AF70CF6, 0xEEF828C8, 0x0703F1FC);
	r2 = D(r2, s1_0_1, 0x0A0412FD, 0x0908F709, 0xFBFEEF0B, 0x0CF9FDFC);
	r3 = D(r3, s1_0_1, 0x00EC030F, 0xFD0D2DF3, 0xF7F92410, 0x11FAF1FF);
	r4 = D(r4, s1_0_1, 0x10F10D05, 0x0313F5FF, 0x07F4F318, 0xE00C04F4);
	r5 = D(r5, s1_0_1, 0x060912DA, 0x0F1EE9F4, 0x070005F4, 0x07F5FFFD);
	r6 = D(r6, s1_0_1, 0xFDFDAAE7, 0x1729EE04, 0xEFECFD22, 0x020A0FEE);
	r7 = D(r7, s1_0_1, 0x06F3F0F2, 0xE207C912, 0x040608FB, 0xFA10FAFF);
	r0 = D(r0, s1_0_2, 0x100FEA04, 0x13F81110, 0x1504F5EE, 0x12F5F918);
	r1 = D(r1, s1_0_2, 0xFB0413F4, 0x07F7E503, 0xF32904E8, 0x05FE08FB);
	r2 = D(r2, s1_0_2, 0xF409FAFA, 0x03FA0C12, 0xF60301F3, 0x0309F6F2);
	r3 = D(r3, s1_0_2, 0x080804F7, 0xFF051BED, 0x07EE0AFB, 0x04050C10);
	r4 = D(r4, s1_0_2, 0x0308050F, 0x10FAC606, 0x1ED2F5DC, 0x0DED0811);
	r5 = D(r5, s1_0_2, 0x06F109FF, 0x0C132F10, 0xFBFAF906, 0x0001F3FD);
	r6 = D(r6, s1_0_2, 0xFEF9F6F9, 0xF7FEF80A, 0xF9020FFB, 0xF3FB0B0C);
	r7 = D(r7, s1_0_2, 0x05FDEE02, 0x0F0FFA02, 0x06FBFE01, 0xE7051302);
	r0 = D(r0, s1_1_0, 0x030402F4, 0xF8C00DFA, 0x40F015B2, 0xA38D05CB);
	r1 = D(r1, s1_1_0, 0xEFF20420, 0xFBFA151A, 0x0007F407, 0xF900F5F5);
	r2 = D(r2, s1_1_0, 0x01200F18, 0xF82C08ED, 0x0618E41C, 0x17F3F3F3);
	r3 = D(r3, s1_1_0, 0xF717F121, 0xF20AE916, 0x0EE80E03, 0x1721FBEA);
	r4 = D(r4, s1_1_0, 0x0212FDF8, 0xEC12EC0C, 0xDAFB0DD0, 0xF802E205);
	r5 = D(r5, s1_1_0, 0x13F303FC, 0x0619F405, 0xFC1409ED, 0xF8130C14);
	r6 = D(r6, s1_1_0, 0x0EC8EE39, 0xFB1A10F4, 0x12D2F8E5, 0x0611EDE8);
	r7 = D(r7, s1_1_0, 0x10CB14F2, 0xF80A0D12, 0x0B8108C4, 0xEEDEEAFE);
	r0 = D(r0, s1_1_1, 0xF10807FF, 0x030AF9D2, 0xE1F011DC, 0xAFFE09F1);
	r1 = D(r1, s1_1_1, 0x06F9182B, 0xF3FC0200, 0x11A8EFEB, 0xFE0D040D);
	r2 = D(r2, s1_1_1, 0x0710170B, 0x13FD0208, 0x09ED1537, 0xFCEB1610);
	r3 = D(r3, s1_1_1, 0x16FBE529, 0x1D0D1CED, 0x19FBD0F0, 0x200B41F6);
	r4 = D(r4, s1_1_1, 0x11EDE70F, 0x30FE0A15, 0xE1EFF3E5, 0x0D0AEAFF);
	r5 = D(r5, s1_1_1, 0x000DFCDC, 0xFF1007FB, 0x0CFC22EE, 0xF6F50729);
	r6 = D(r6, s1_1_1, 0xF70E2829, 0xF207D9ED, 0xFEF127EF, 0xCFD0EAE2);
	r7 = D(r7, s1_1_1, 0x1B1405F1, 0xFB1437D7, 0x0401E4F2, 0xFAF900F3);
	r0 = D(r0, s1_1_2, 0xF0E70413, 0x020B0EEA, 0xFFF3E105, 0xB5EE061A);
	r1 = D(r1, s1_1_2, 0x10F30208, 0xEBF5170E, 0x0D0125BA, 0xFF030F05);
	r2 = D(r2, s1_1_2, 0xF2FBE711, 0x03F3F9FA, 0x0E0B1A15, 0xF0FD0F18);
	r3 = D(r3, s1_1_2, 0xE3FAFF10, 0x09F002EA, 0xF2F4FB01, 0x1D0E01EF);
	r4 = D(r4, s1_1_2, 0x100119F5, 0xFD1401F3, 0xE0D80FD7, 0x08FEFBF6);
	r5 = D(r5, s1_1_2, 0xEB22FCF4, 0x06FEE6FB, 0x08FBFC04, 0x010803FB);
	r6 = D(r6, s1_1_2, 0x14F71526, 0x010F10E9, 0xF806E0D9, 0x052200D3);
	r7 = D(r7, s1_1_2, 0xFF02EB02, 0xF5F203FF, 0xF6020D14, 0x1AF63607);
	r0 = D(r0, s1_2_0, 0xF901FEFE, 0x16F3F0F3, 0x10E11EFE, 0xFBE700E5);
	r1 = D(r1, s1_2_0, 0x00D1FB0E, 0xF80DF1FB, 0x041AEE1C, 0xF8010207);
	r2 = D(r2, s1_2_0, 0x07E8E8FC, 0x0212F904, 0xF610070E, 0xFE13F509);
	r3 = D(r3, s1_2_0, 0xDEE7150C, 0xE50302E3, 0xF10AEBFF, 0xF8FDF901);
	r4 = D(r4, s1_2_0, 0x17F1F107, 0x280820E0, 0xEE49E5E8, 0xF133FEFD);
	r5 = D(r5, s1_2_0, 0xDA0A04F4, 0xF1FEF705, 0xF6E3FBFE, 0x08160010);
	r6 = D(r6, s1_2_0, 0xE708FCC1, 0xEC1E140A, 0x17F4FFF7, 0x041AFD05);
	r7 = D(r7, s1_2_0, 0x15A004FC, 0xEF11F5FF, 0x0BB30301, 0x0E13EAF0);
	r0 = D(r0, s1_2_1, 0xF7001801, 0x041F09D5, 0xF6FC0018, 0xFC1305E9);
	r1 = D(r1, s1_2_1, 0xF8C4DF11, 0x09070403, 0xEEF0EF0F, 0x091F0DFD);
	r2 = D(r2, s1_2_1, 0xD5F5E203, 0xF10C12D9, 0xFCEAFE03, 0xF203FDF3);
	r3 = D(r3, s1_2_1, 0x0B01EA05, 0xF4DAF604, 0x15F10908, 0x10FEECFD);
	r4 = D(r4, s1_2_1, 0x07ED0415, 0xF614EDE4, 0xF90F2100, 0xFFF10EFB);
	r5 = D(r5, s1_2_1, 0x0219DAF4, 0xF1D60926, 0xF831E1EE, 0xF1FAF326);
	r6 = D(r6, s1_2_1, 0xEE0AE8F9, 0x011A16E0, 0x0AD2F805, 0xF8B2FB12);
	r7 = D(r7, s1_2_1, 0xF3DEF50D, 0x0A07F7EC, 0xE4FE0C0A, 0x0B06EE03);
	r0 = D(r0, s1_2_2, 0x1101E605, 0x010DFC01, 0xDE0A0613, 0xF4050B09);
	r1 = D(r1, s1_2_2, 0x051CFCCF, 0x09020404, 0xE2B6E41E, 0x01FEE902);
	r2 = D(r2, s1_2_2, 0xF1F70911, 0x1402E9EF, 0xF6FFF1E8, 0xF70AFFEF);
	r3 = D(r3, s1_2_2, 0xFCEDFF05, 0xC724F9C2, 0xF0F0FC28, 0x0109F9FB);
	r4 = D(r4, s1_2_2, 0xF418F9FA, 0x000B04F7, 0x0FEC022E, 0xEFF50810);
	r5 = D(r5, s1_2_2, 0x0FE0FCE0, 0xF1F501F3, 0x021600F3, 0xFBF7F3FF);
	r6 = D(r6, s1_2_2, 0xF5200FE2, 0xE8E1E922, 0xFDF50BF6, 0x1805FA02);
	r7 = D(r7, s1_2_2, 0x380B0D02, 0x04FB0307, 0x0AF30501, 0xF502ED20);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0DDC3303, 0xE80404FB, 0xF8F529EC, 0xF2FAC90D);
	r1 = D(r1, s0_0_0, 0x14F40FF5, 0x08FDEBFB, 0xE7ECF103, 0xF7FDF7EF);
	r2 = D(r2, s0_0_0, 0xC2ED0439, 0x0217D4E2, 0xF41EFC02, 0x07FDFCE7);
	r3 = D(r3, s0_0_0, 0x00F900FC, 0xFF03F0E9, 0xF5F9040C, 0x0715F5E4);
	r4 = D(r4, s0_0_0, 0xED050912, 0xE414E12E, 0x13DE1AF6, 0xE4FF0601);
	r5 = D(r5, s0_0_0, 0xB52E0FDC, 0xDC0CD9F0, 0x090212F8, 0xF2050D15);
	r6 = D(r6, s0_0_0, 0x191AFB0C, 0x1E05FBEB, 0x13F417F5, 0x060D0F01);
	r7 = D(r7, s0_0_0, 0xE6FD1D00, 0xFB26FB07, 0xDB1BD9FB, 0x2CDDE6F4);
	r0 = D(r0, s0_0_1, 0x04C91413, 0xCBE01E24, 0x2BF4F4ED, 0x1011C9E9);
	r1 = D(r1, s0_0_1, 0xF1061FD4, 0xFAEB1E19, 0x2C10F9BC, 0xF1F70705);
	r2 = D(r2, s0_0_1, 0x01EDFC00, 0xED0A320C, 0x2D01E7CD, 0x11E7F0FB);
	r3 = D(r3, s0_0_1, 0xFF0406F3, 0x04FE14EB, 0xF9F5D617, 0x42E62BF1);
	r4 = D(r4, s0_0_1, 0xE2FEFD48, 0x0212F5E7, 0x031A1CE9, 0xFB11EBF6);
	r5 = D(r5, s0_0_1, 0xF7F942F7, 0x09E0F7FD, 0xCF070B22, 0xE81CF3F2);
	r6 = D(r6, s0_0_1, 0x1C9EE9ED, 0xDCDBD037, 0xF9FE25E7, 0x1501CE07);
	r7 = D(r7, s0_0_1, 0x0A031818, 0x4606E881, 0xD1371029, 0x01F3E8CD);
	r0 = D(r0, s0_0_2, 0x1AD60B01, 0xF0FBE6FD, 0xEF10F4FC, 0xE2FAFD02);
	r1 = D(r1, s0_0_2, 0x07FF04FB, 0xF1FE1912, 0x20E7F0B9, 0x00F901FE);
	r2 = D(r2, s0_0_2, 0x0DF41405, 0x06ED0408, 0x03F403E5, 0x130B0404);
	r3 = D(r3, s0_0_2, 0x11FBF806, 0xFEF80804, 0xEB01F910, 0xE91AE3EC);
	r4 = D(r4, s0_0_2, 0x151CECF8, 0x04F9DDEA, 0x280E2BF0, 0x1E020A08);
	r5 = D(r5, s0_0_2, 0xDF0C06E4, 0xE505DB22, 0x0110F204, 0x03FDFDFF);
	r6 = D(r6, s0_0_2, 0xFA11F81C, 0xDC0F11FC, 0xF3F10E22, 0x1D070103);
	r7 = D(r7, s0_0_2, 0x0703EFFD, 0xED19210D, 0x1610F4FB, 0x261CE2C9);
	r0 = D(r0, s0_1_0, 0xFCF80903, 0xFD05E209, 0xDCFC000D, 0x03D71E14);
	r1 = D(r1, s0_1_0, 0x19FCC408, 0xE9023DF3, 0xE1031106, 0x0A19EB04);
	r2 = D(r2, s0_1_0, 0xF5E63A15, 0xEDD8E6D8, 0x1CDEBFFC, 0xFAE2CDF8);
	r3 = D(r3, s0_1_0, 0x220AFEEF, 0x09EE19FC, 0xE3F5D8F4, 0xF3E2E201);
	r4 = D(r4, s0_1_0, 0xFC0402DA, 0x2A1F03EE, 0x0903010D, 0xF61BE50C);
	r5 = D(r5, s0_1_0, 0x163769F8, 0xE7CF1707, 0xFD0212F6, 0x0813EC23);
	r6 = D(r6, s0_1_0, 0x29150CFA, 0x170F30DF, 0xFFF3090B, 0xFAFE0CFD);
	r7 = D(r7, s0_1_0, 0xFBFBF801, 0xFC0BFD1D, 0x1007E715, 0xE4E407FC);
	r0 = D(r0, s0_1_1, 0x19F1F906, 0x3304CF10, 0x3BBAFCED, 0x01AB0A00);
	r1 = D(r1, s0_1_1, 0xAEF33924, 0x12FAF5FC, 0xFC02DE2B, 0x11FD14F5);
	r2 = D(r2, s0_1_1, 0xEC210B08, 0x262709E8, 0x051502F2, 0x03E10B01);
	r3 = D(r3, s0_1_1, 0xFEFBFAEE, 0x05313E14, 0x01E509CF, 0xE316E4F6);
	r4 = D(r4, s0_1_1, 0x19F604FA, 0xF6EEDFFD, 0xF52CEE2B, 0x2ED3E2EC);
	r5 = D(r5, s0_1_1, 0xE3400120, 0x3FCEFEBD, 0xE20DFF45, 0xDD0EF40B);
	r6 = D(r6, s0_1_1, 0x1FC50009, 0x180D1E00, 0xFFEA0228, 0xE6FDEDD9);
	r7 = D(r7, s0_1_1, 0xF6E2D81B, 0xECE2EEFA, 0x2B31E6EC, 0xF5071E2E);
	r0 = D(r0, s0_1_2, 0xE4ED11D6, 0x0D211EE9, 0xFFF71517, 0xD80A3CEE);
	r1 = D(r1, s0_1_2, 0x17F90617, 0xEAE60E02, 0x2DD708E8, 0xFDFAFE01);
	r2 = D(r2, s0_1_2, 0x09E52AF6, 0xE0F8DEFB, 0x05F31019, 0x1BEE0209);
	r3 = D(r3, s0_1_2, 0x04F0F6FC, 0xF9121DF9, 0xFBF01AE7, 0xF602FE0B);
	r4 = D(r4, s0_1_2, 0xE70CF403, 0x040BEAFB, 0xF334FEE9, 0xEC1FEB02);
	r5 = D(r5, s0_1_2, 0xFB1D18F9, 0xFEEAE00D, 0xDCF809F6, 0xF9FF04F8);
	r6 = D(r6, s0_1_2, 0x0A041805, 0xC2F108F3, 0x0F07EE02, 0x291A1FD7);
	r7 = D(r7, s0_1_2, 0x1DFA2C18, 0x101A15FB, 0xEAF0F70C, 0xFAF6F708);
	r0 = D(r0, s0_2_0, 0x0EF016EA, 0x0D00F609, 0x0EF30EE8, 0x0E04FFD7);
	r1 = D(r1, s0_2_0, 0x09D1F1EE, 0x0E0B05F7, 0xFBD92108, 0xFCFB0E04);
	r2 = D(r2, s0_2_0, 0x07D4FAF8, 0xFF14FDFB, 0xF0EFF4F8, 0xF30802FF);
	r3 = D(r3, s0_2_0, 0x150E03F9, 0xEE0804E8, 0x00EC030D, 0x0314E8FE);
	r4 = D(r4, s0_2_0, 0x00FBF5E6, 0xE0E10E01, 0xFFDB53FF, 0xE3140D04);
	r5 = D(r5, s0_2_0, 0x032218D9, 0xF1110C0F, 0x04120EFC, 0x24E8130B);
	r6 = D(r6, s0_2_0, 0x0B32E8E4, 0x0F2A0122, 0x0B010FEA, 0x0009FC03);
	r7 = D(r7, s0_2_0, 0xFEF407F1, 0xFAF61017, 0xF40FE60C, 0x040EEAEC);
	r0 = D(r0, s0_2_1, 0xE5FCE309, 0xF6171D06, 0xEF38F7F5, 0x29D3D5EE);
	r1 = D(r1, s0_2_1, 0xFEE6F6F7, 0xFFF6EF01, 0xF1071F10, 0xFEF0FB03);
	r2 = D(r2, s0_2_1, 0xEBE3F904, 0xFAFBFC0D, 0xE9DEEA02, 0xF202F607);
	r3 = D(r3, s0_2_1, 0xF82B05FE, 0x15E70C06, 0xFB3DEBEE, 0xF705FA10);
	r4 = D(r4, s0_2_1, 0xFB0CF301, 0xE80DF2F8, 0xC6E67F0D, 0x05F5FD1A);
	r5 = D(r5, s0_2_1, 0x19C036E7, 0x2115ECF4, 0x07E21AEF, 0xF1ED020F);
	r6 = D(r6, s0_2_1, 0x1BF30FFB, 0x24E9F010, 0x0230F8F7, 0xE91FDEFE);
	r7 = D(r7, s0_2_1, 0x00DCEFF6, 0xF2E71F06, 0x201AFCF6, 0x08F81F00);
	r0 = D(r0, s0_2_2, 0xF4DAFFDF, 0xF507050C, 0x1223100C, 0xF9FDE9E9);
	r1 = D(r1, s0_2_2, 0x17FFFAFD, 0x0DFBEEF6, 0xFFFFFBE6, 0x03FF00FB);
	r2 = D(r2, s0_2_2, 0x10D806FA, 0xE9EE0D0A, 0x02FCFB10, 0xFFE5FDF9);
	r3 = D(r3, s0_2_2, 0x10ED0700, 0xF709FEE5, 0x05101B04, 0x0112F9F9);
	r4 = D(r4, s0_2_2, 0xFEF8F0EC, 0xF0F3F9EB, 0xF11AE21B, 0xE93BF10D);
	r5 = D(r5, s0_2_2, 0xE41AF1EC, 0x0E15E01A, 0x10EFECF9, 0x010803F2);
	r6 = D(r6, s0_2_2, 0xFE03F7FA, 0xEA3C1305, 0xE70A0806, 0xFD1003F9);
	r7 = D(r7, s0_2_2, 0xFE1409EF, 0x0DF8F403, 0x0803FF0E, 0xEFF4F30A);
	r0 = D(r0, s1_0_0, 0x180610E1, 0x0B0F03FD, 0x084303D0, 0x0D27BF2D);
	r1 = D(r1, s1_0_0, 0xD60BEBE8, 0x12E0E5F1, 0xDD002905, 0x05FE10FF);
	r2 = D(r2, s1_0_0, 0xF90B1B06, 0x01FD0013, 0xCA39E6FA, 0xF12FF703);
	r3 = D(r3, s1_0_0, 0xECFDE3F1, 0x0E0DE4F6, 0x14E71224, 0x0E0AE6E7);
	r4 = D(r4, s1_0_0, 0xEF031C06, 0xE11DEA08, 0x15270FF2, 0xF9E3091E);
	r5 = D(r5, s1_0_0, 0xF8E2FCF8, 0xF20421E5, 0xFAF40C24, 0xE1F70608);
	r6 = D(r6, s1_0_0, 0xE16A5BB8, 0x02F2E32D, 0x0CF8F108, 0xE80705ED);
	r7 = D(r7, s1_0_0, 0xE514EB10, 0xFDEB0006, 0x020C1506, 0xFC0D001F);
	r0 = D(r0, s1_0_1, 0xE4D61502, 0x023114F5, 0xEE110911, 0xF3E9F102);
	r1 = D(r1, s1_0_1, 0xF4290106, 0xD203F71A, 0x18FE8112, 0xF4F0070D);
	r2 = D(r2, s1_0_1, 0x0EFEEE00, 0xFA19FC08, 0x00FFF20D, 0x2F211B01);
	r3 = D(r3, s1_0_1, 0xFD030E0E, 0x04F70500, 0xF72A190F, 0xF500140C);
	r4 = D(r4, s1_0_1, 0xFC07F3EB, 0xF9E806E5, 0xF7C1F019, 0x0B1A06FF);
	r5 = D(r5, s1_0_1, 0xE6290B08, 0x00E8ECED, 0x010802F6, 0x15F3EEFF);
	r6 = D(r6, s1_0_1, 0x150A17FB, 0xEDC7F4F2, 0xFD12EF18, 0x00160DF5);
	r7 = D(r7, s1_0_1, 0xFD21FE14, 0x0FE3F60F, 0xED20F4E5, 0x0FFBD5DC);
	r0 = D(r0, s1_0_2, 0xEA012001, 0xDF02FAFC, 0x0907080F, 0xF4F105F7);
	r1 = D(r1, s1_0_2, 0xFEFE130C, 0xF001FAFF, 0x18213816, 0x030E0301);
	r2 = D(r2, s1_0_2, 0xF9FBE913, 0x130627F3, 0xFBE01114, 0xF6F11402);
	r3 = D(r3, s1_0_2, 0x02F5F8F4, 0x14DCFCFE, 0x1A280AF9, 0xFEF5F9EC);
	r4 = D(r4, s1_0_2, 0xFAF4EB07, 0x08FAFEE7, 0xECBB1DE8, 0xEE08FA1C);
	r5 = D(r5, s1_0_2, 0xCAFF0903, 0xFBE2F5F7, 0xF200F9F9, 0x13FEF1F9);
	r6 = D(r6, s1_0_2, 0x011706E0, 0x0EE8F1E3, 0xFD1A161D, 0xFB0B0508);
	r7 = D(r7, s1_0_2, 0xEEF3FCF2, 0xF6E103CF, 0xF8DFFFF6, 0xFCE4FE34);
	r0 = D(r0, s1_1_0, 0x0A011001, 0x1CF60303, 0x04358100, 0x0C318631);
	r1 = D(r1, s1_1_0, 0xEE0A1907, 0x2B0DFE07, 0xE6FA02DA, 0x0CFFDCFE);
	r2 = D(r2, s1_1_0, 0xF7FCFEE7, 0x0BE4FEFE, 0x08D3DBF2, 0xE0E328EF);
	r3 = D(r3, s1_1_0, 0xE6E5D0F6, 0xD9FE040C, 0xDBED44E2, 0xF10115F0);
	r4 = D(r4, s1_1_0, 0x1E022B1B, 0x02E2D403, 0xE3EE0DF8, 0xDFE80A13);
	r5 = D(r5, s1_1_0, 0xEE07300A, 0xEF0B8109, 0xF60DEB13, 0xCDEC1718);
	r6 = D(r6, s1_1_0, 0x082109F6, 0xEBE59D22, 0x121AF212, 0xFF10F6FD);
	r7 = D(r7, s1_1_0, 0x07F40C05, 0xF40612FE, 0x1712F400, 0xF40F0D09);
	r0 = D(r0, s1_1_1, 0xF904E10A, 0xED1922F6, 0xDD2BEE07, 0x1AC80CE6);
	r1 = D(r1, s1_1_1, 0x07FA1A16, 0xD5F20D06, 0xFCF781E3, 0x0522EBF8);
	r2 = D(r2, s1_1_1, 0xFD0104E2, 0xF3DD1807, 0x0A090209, 0xFEEC1003);
	r3 = D(r3, s1_1_1, 0x2A0B1120, 0x11051602, 0x08F41DD8, 0x05091727);
	r4 = D(r4, s1_1_1, 0xE9E82BC9, 0x12D5F8FD, 0x030B1521, 0x07FB15F5);
	r5 = D(r5, s1_1_1, 0x023013F6, 0xE9FC3312, 0x17FB00DF, 0xFC0E08E1);
	r6 = D(r6, s1_1_1, 0x10DD1104, 0xE5D4EBF7, 0x0020FCE3, 0x12F4E10B);
	r7 = D(r7, s1_1_1, 0xF9140414, 0xEE0B253E, 0xF7F421EA, 0x0B003BD6);
	r0 = D(r0, s1_1_2, 0xFBF10E05, 0x08F6FC12, 0x23F8251A, 0xF0E1F0EB);
	r1 = D(r1, s1_1_2, 0xED1DF110, 0xEF04020A, 0x2A0EDA0F, 0xFEF704EE);
	r2 = D(r2, s1_1_2, 0xF412FC11, 0x03D611E1, 0xFFF11004, 0x0501EA0A);
	r3 = D(r3, s1_1_2, 0x02F70D08, 0xFDDC10FF, 0xEA050608, 0x08FDEC05);
	r4 = D(r4, s1_1_2, 0xFE1DE109, 0xFEF6EE03, 0x10F7C2DA, 0x2412F8EF);
	r5 = D(r5, s1_1_2, 0x07E732F7, 0x110FF4E0, 0xEF0DFFF2, 0x1D0906F8);
	r6 = D(r6, s1_1_2, 0xF9F60402, 0x13F816D2, 0xFDE73AEA, 0x16FF0F3B);
	r7 = D(r7, s1_1_2, 0x030AFFF5, 0xF8030A07, 0x171806F3, 0x0EE4E017);
	r0 = D(r0, s1_2_0, 0x082381F8, 0xF1F11414, 0x01FB23F8, 0xFF04E0EF);
	r1 = D(r1, s1_2_0, 0x07FE11F4, 0x0816E9FE, 0x03E9FED4, 0xF500A8FE);
	r2 = D(r2, s1_2_0, 0x120BF8C3, 0xE631E001, 0xF003F60A, 0x0401E903);
	r3 = D(r3, s1_2_0, 0x03D83821, 0xEC096EF9, 0xFCE511D5, 0x05FF01FD);
	r4 = D(r4, s1_2_0, 0xF1EEF5F9, 0x1610A303, 0xF5165C11, 0xFF0411E9);
	r5 = D(r5, s1_2_0, 0xF20B5DEB, 0x0719F40A, 0x0C06040A, 0xE4FCEE08);
	r6 = D(r6, s1_2_0, 0x0916E1F6, 0x1802E719, 0x00FABFF2, 0xF4F7E9F5);
	r7 = D(r7, s1_2_0, 0x28F811FC, 0x0F0610EC, 0x01E258EF, 0xF60A4403);
	r0 = D(r0, s1_2_1, 0x181400F1, 0x12FEE7F0, 0xFA0204F3, 0xF20C1BDE);
	r1 = D(r1, s1_2_1, 0x0E0E30F9, 0xF5E610EC, 0xEEEF0E26, 0x0B001507);
	r2 = D(r2, s1_2_1, 0x0916FD2C, 0x0D15EB16, 0x0AFB0E00, 0x0301F211);
	r3 = D(r3, s1_2_1, 0x080CEE0C, 0xF7021F0C, 0x11F2E217, 0x0F010803);
	r4 = D(r4, s1_2_1, 0x000C1903, 0xF00914FB, 0x06100BD2, 0xFAF63008);
	r5 = D(r5, s1_2_1, 0xF2F331C1, 0x1408CE28, 0x08F9F0D2, 0x06EFEEE6);
	r6 = D(r6, s1_2_1, 0xF60A03F8, 0x03E315D4, 0xF41411D3, 0x130A9CF6);
	r7 = D(r7, s1_2_1, 0x152502DC, 0xFF0DE80C, 0x0C0FF632, 0xFD02F3F0);
	r0 = D(r0, s1_2_2, 0xFFFC0708, 0x0C10EB05, 0x1AF8EB11, 0xF9DD1212);
	r1 = D(r1, s1_2_2, 0xFF0900F6, 0xFBF30500, 0xF91D6830, 0xEFFF0C0C);
	r2 = D(r2, s1_2_2, 0x0000E414, 0xF003FB00, 0x110503F6, 0x02F6E9EE);
	r3 = D(r3, s1_2_2, 0xF1F8F40A, 0xF129DFF6, 0x0E0AE20E, 0x0001F0F9);
	r4 = D(r4, s1_2_2, 0x0D02DE02, 0x0A1CF9FA, 0x0B083A0D, 0x0A11F1E4);
	r5 = D(r5, s1_2_2, 0xFBC336F6, 0xFD01E7FB, 0xF9F4FDF4, 0xFB0B0B16);
	r6 = D(r6, s1_2_2, 0x0E0C0F09, 0x0917F415, 0xF5F423F8, 0x0F13DF18);
	r7 = D(r7, s1_2_2, 0x030B16F9, 0x050CFAEF, 0x00FEF917, 0x04F40E01);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x030E1F10, 0xECF108F8, 0x060B1AF0, 0x0DFBF003);
	r1 = D(r1, s0_0_0, 0x05CBEB17, 0x17F40022, 0x142EF80A, 0x08F80A0F);
	r2 = D(r2, s0_0_0, 0xFC0D0401, 0xF70CF7F2, 0xF0E40102, 0xFF07DAF3);
	r3 = D(r3, s0_0_0, 0x0A05EAFC, 0x13F1FC09, 0x06E2EA06, 0xFD05100B);
	r4 = D(r4, s0_0_0, 0x02FEF4FF, 0xFA2DF905, 0xF600F4CE, 0xFD01E4FC);
	r5 = D(r5, s0_0_0, 0xD830E6EB, 0x21FD0BF7, 0x0003080B, 0xECEEF302);
	r6 = D(r6, s0_0_0, 0xFDD52A81, 0x160DD625, 0xECE8F2DE, 0xF5F90805);
	r7 = D(r7, s0_0_0, 0xEBFBDEF0, 0x10EDEC09, 0x03EB02EC, 0x0D1E16F7);
	r0 = D(r0, s0_0_1, 0x0FE1E617, 0xF70B0CF9, 0xFADAFFDD, 0x1BCDF1F4);
	r1 = D(r1, s0_0_1, 0xFAD7EA0A, 0x150DFBFF, 0x21261E0A, 0x100CF7FF);
	r2 = D(r2, s0_0_1, 0x1220EDD0, 0xF2FAEFE1, 0xE1E91317, 0xFC271BFF);
	r3 = D(r3, s0_0_1, 0xFEFF04FF, 0xF901F816, 0x1D0DED02, 0xFAE0F6FD);
	r4 = D(r4, s0_0_1, 0xFEE7F9F1, 0x1DE60001, 0x11DCFF21, 0x060CF1EC);
	r5 = D(r5, s0_0_1, 0x0136FB1D, 0x07ED2FC7, 0xF72604E6, 0xF1140612);
	r6 = D(r6, s0_0_1, 0x1FEA131A, 0x091ECD1C, 0xE2FAE716, 0x0CF3DCF0);
	r7 = D(r7, s0_0_1, 0x1E1303EA, 0xE9FD0B0C, 0xE6E5ECE6, 0x042C2FFB);
	r0 = D(r0, s0_0_2, 0x0302CB1D, 0x040CEFFA, 0x0BEBDB0B, 0xF534000C);
	r1 = D(r1, s0_0_2, 0xF6060903, 0xF10EFE06, 0x2811EA1A, 0xFF06FE01);
	r2 = D(r2, s0_0_2, 0x1802EEED, 0xF219FE06, 0x0CED0920, 0x0EF4EF12);
	r3 = D(r3, s0_0_2, 0x0107F20D, 0xF510F6E5, 0x11FAFEDC, 0x0CF90404);
	r4 = D(r4, s0_0_2, 0xFB1B1A04, 0x001B351F, 0xF5EB140A, 0x070001ED);
	r5 = D(r5, s0_0_2, 0xE707EE11, 0x07FE0829, 0x0201FE09, 0x0203F5F7);
	r6 = D(r6, s0_0_2, 0xCCF8FE11, 0xF70023FA, 0xF3F4F7F0, 0xF10FF4BF);
	r7 = D(r7, s0_0_2, 0x08210E11, 0xFFE00108, 0x09F703F3, 0xF711EBFE);
	r0 = D(r0, s0_1_0, 0x170E0D1F, 0x143C101E, 0x13F4FC0C, 0xF9E00209);
	r1 = D(r1, s0_1_0, 0xD6811CE6, 0x0310F8F4, 0xDCEFF0F9, 0x08146704);
	r2 = D(r2, s0_1_0, 0x05F43816, 0x181B1702, 0xEC8105E9, 0xF318F9FD);
	r3 = D(r3, s0_1_0, 0xE7810CFE, 0xACEB1D21, 0xE001F704, 0x0D220A02);
	r4 = D(r4, s0_1_0, 0x05010AFE, 0xD707E1F4, 0x172A0014, 0xFADD1B19);
	r5 = D(r5, s0_1_0, 0xE00DF71C, 0xFDFBFFF7, 0x050A04FD, 0xFEDA1AE1);
	r6 = D(r6, s0_1_0, 0xF6DFDFDB, 0xEEE0181E, 0x22FC0614, 0x1A140D05);
	r7 = D(r7, s0_1_0, 0xB18103F8, 0xF5F9D8EA, 0x0FFF640B, 0xEE12E30A);
	r0 = D(r0, s0_1_1, 0xDAF80FFC, 0x13F2FB01, 0xFC2D172F, 0xE9C414D5);
	r1 = D(r1, s0_1_1, 0x1BB31F1D, 0x1415FCF0, 0xEE18FAE1, 0xF7FD16F7);
	r2 = D(r2, s0_1_1, 0xF6F51D12, 0x1923F3E4, 0x16EEF20C, 0x1E34E90D);
	r3 = D(r3, s0_1_1, 0xAF0003E8, 0xD60D0C0A, 0x011DEF14, 0x1EEE0FFA);
	r4 = D(r4, s0_1_1, 0x0507FEF9, 0xE4210AEE, 0x02D81ADA, 0x08FB1E07);
	r5 = D(r5, s0_1_1, 0xF31726F1, 0xF7F70524, 0x111E010D, 0xF5190C28);
	r6 = D(r6, s0_1_1, 0x12FE3016, 0x0922DEEF, 0x1F0D2AFC, 0x27E201FF);
	r7 = D(r7, s0_1_1, 0x93AE1014, 0xF80B0B11, 0xFD81ECEB, 0xF5F20AF1);
	r0 = D(r0, s0_1_2, 0x0E1904F3, 0xFEFCFBF6, 0xC18134F5, 0xEBFA090E);
	r1 = D(r1, s0_1_2, 0x14120FF5, 0x03140F03, 0xF9041512, 0xF802FEF8);
	r2 = D(r2, s0_1_2, 0xF10909E1, 0xF70DF618, 0x0409EF11, 0x27FAFD13);
	r3 = D(r3, s0_1_2, 0x0717F209, 0x151407F3, 0x13070B04, 0xF7F3FA03);
	r4 = D(r4, s0_1_2, 0x14FE0F00, 0xE915110C, 0x25FE163B, 0x03F221F2);
	r5 = D(r5, s0_1_2, 0x17011709, 0x1710EB0B, 0xFE0603FA, 0xE9EA07FD);
	r6 = D(r6, s0_1_2, 0xF0160425, 0x14FC2105, 0x2CD4F220, 0xFA0817F2);
	r7 = D(r7, s0_1_2, 0xCBFFF7EC, 0x24F5F205, 0xE2110213, 0xF1F813FD);
	r0 = D(r0, s0_2_0, 0x08061DEB, 0x08E506FC, 0x07F8EC11, 0x1705E210);
	r1 = D(r1, s0_2_0, 0x06D5000B, 0x0303E7EE, 0x05EEF2EF, 0x000DFD06);
	r2 = D(r2, s0_2_0, 0xFB0CD319, 0x011D11EF, 0xF2FB02EA, 0x130F2707);
	r3 = D(r3, s0_2_0, 0xEFF10F30, 0xFD1AE7F6, 0x1A2211FA, 0x04F8F4FD);
	r4 = D(r4, s0_2_0, 0x0F00EC13, 0xF21BD5E0, 0xB33700CA, 0x251EDCF9);
	r5 = D(r5, s0_2_0, 0x0807E204, 0x0615F9FC, 0x09E5E8EE, 0xF2CC03FF);
	r6 = D(r6, s0_2_0, 0xF6EE17F0, 0xF21447DE, 0xE9F5FFFA, 0xF1141003);
	r7 = D(r7, s0_2_0, 0xEBB3FA1D, 0x10FE0BFE, 0xF9FAF1FF, 0x0BF1CA0C);
	r0 = D(r0, s0_2_1, 0xE12E2CE3, 0xF3F2F0EC, 0xD3FA0404, 0x0610FEE9);
	r1 = D(r1, s0_2_1, 0xE5DBED0F, 0x19FBEAF6, 0x001103FE, 0x1200FAF8);
	r2 = D(r2, s0_2_1, 0xFBE7F821, 0xEC1F1512, 0x0A11F707, 0x09F51FF3);
	r3 = D(r3, s0_2_1, 0xE53CFBD9, 0x0002D0ED, 0xF1FE1406, 0xFBEAECFB);
	r4 = D(r4, s0_2_1, 0xFFF40905, 0x0F20F9F7, 0xF7841AF8, 0xF8F00EFA);
	r5 = D(r5, s0_2_1, 0xF50D0CFC, 0xEC10E305, 0x0BE70C0C, 0xE106F5FA);
	r6 = D(r6, s0_2_1, 0x11044505, 0xFD26F8D0, 0xF9FA2701, 0xECF4051E);
	r7 = D(r7, s0_2_1, 0x81CB262A, 0x0804060A, 0x04F90017, 0xFEF9F718);
	r0 = D(r0, s0_2_2, 0x0211F0F8, 0x0AFB11E9, 0xB5BFE6F9, 0x15271E18);
	r1 = D(r1, s0_2_2, 0x20FCF8E2, 0xF90DFE07, 0xE80BFBFC, 0xF80CE60D);
	r2 = D(r2, s0_2_2, 0x170601FC, 0x0AF60F0B, 0x09F90AE7, 0x0F040702);
	r3 = D(r3, s0_2_2, 0xDD24210F, 0xFF08F616, 0xE7EF030E, 0xFD00F809);
	r4 = D(r4, s0_2_2, 0x1002F00E, 0xFB17E6EB, 0xF4F5FBE9, 0xDE0115F7);
	r5 = D(r5, s0_2_2, 0x1006FFF9, 0x14DDF701, 0xFE09F108, 0x0AFDF9FC);
	r6 = D(r6, s0_2_2, 0x0A12FB0A, 0xF0F1F209, 0x030FF60B, 0x0DDAFEF3);
	r7 = D(r7, s0_2_2, 0x08F5EEFB, 0x0A0416F7, 0xFD06E2FC, 0xFA07F21F);
	r0 = D(r0, s1_0_0, 0x3007FE1C, 0xE112FBF7, 0xF017F838, 0x68F201ED);
	r1 = D(r1, s1_0_0, 0xDB0FF7EB, 0x08270502, 0xF1FBFFFE, 0x5AF50008);
	r2 = D(r2, s1_0_0, 0x22070DD5, 0xD0F4F326, 0xE2EF0ED9, 0xD8F70914);
	r3 = D(r3, s1_0_0, 0x12F3FD09, 0x46E3F2E6, 0x3011030C, 0x11FA030C);
	r4 = D(r4, s1_0_0, 0xF6F70DF2, 0x19F3F5EE, 0x09E2F7E4, 0xF109F00F);
	r5 = D(r5, s1_0_0, 0x3814F917, 0x4E19F8FF, 0xFDF4020B, 0x07F2FB07);
	r6 = D(r6, s1_0_0, 0x2CEEF7E1, 0xCAF70F01, 0xEDE60401, 0x27F3070B);
	r7 = D(r7, s1_0_0, 0x0F010D12, 0x230B00ED, 0xA8ED09FF, 0xF9E709FF);
	r0 = D(r0, s1_0_1, 0x05F310FD, 0x01F2E7E6, 0xBE29F925, 0xA7141AA2);
	r1 = D(r1, s1_0_1, 0x101418F9, 0x16EFF3E4, 0x096FF6FE, 0xCC03FF0F);
	r2 = D(r2, s1_0_1, 0x202C07EF, 0x2BF60600, 0x111DFDD7, 0x34F20BEB);
	r3 = D(r3, s1_0_1, 0x08F804F1, 0x1CEAF7F5, 0xD3EED5E9, 0xF0F20835);
	r4 = D(r4, s1_0_1, 0xEF0FFC27, 0xE60D02F9, 0x2E220826, 0x2303FFEC);
	r5 = D(r5, s1_0_1, 0x26EA013E, 0x1FF80606, 0xEA05F024, 0x0901F612);
	r6 = D(r6, s1_0_1, 0xC7FFD0F3, 0x1A14FA26, 0x381F0A00, 0xC90CFFE3);
	r7 = D(r7, s1_0_1, 0xF8E5FBDE, 0x0A1E0891, 0xBC06F4F7, 0xCE06E40A);
	r0 = D(r0, s1_0_2, 0xF4040407, 0x25FA13DF, 0xDD0BEF07, 0xE8F5EEEC);
	r1 = D(r1, s1_0_2, 0x03F4F628, 0xEF09010C, 0x0813EDA8, 0x0BFA0307);
	r2 = D(r2, s1_0_2, 0x0913F8E0, 0x13FD0E05, 0xFEE8EF0B, 0xE8000012);
	r3 = D(r3, s1_0_2, 0xEB0FF5FF, 0xD3F9CCBE, 0x1013F3E8, 0xF7FBE307);
	r4 = D(r4, s1_0_2, 0x0903030A, 0x0F04DE0B, 0xE9E51A20, 0xEDFA0808);
	r5 = D(r5, s1_0_2, 0x2600BBFA, 0xF501F716, 0x00FD0005, 0xF70504FF);
	r6 = D(r6, s1_0_2, 0xEF10F5FE, 0xE8F517F4, 0x8EF9E5F9, 0xEE02F9D2);
	r7 = D(r7, s1_0_2, 0x1C0E0307, 0x1C15F2BA, 0xEE04190C, 0x061531F9);
	r0 = D(r0, s1_1_0, 0x241D0610, 0xF1010BDC, 0xF1EFE63A, 0x291021F0);
	r1 = D(r1, s1_1_0, 0x510018DB, 0xD7010808, 0x1D17F9F0, 0xF901F806);
	r2 = D(r2, s1_1_0, 0x1E00F9FA, 0x15050E1F, 0x020F19DB, 0x0A05FA22);
	r3 = D(r3, s1_1_0, 0xE64221B5, 0xFFE9EC0F, 0x42070DF9, 0xFADA0C0C);
	r4 = D(r4, s1_1_0, 0x01D506F9, 0x2DF7EAF5, 0x0D2EE707, 0x24FB290B);
	r5 = D(r5, s1_1_0, 0xC6E8FC00, 0x002201ED, 0x05E10309, 0x2003100C);
	r6 = D(r6, s1_1_0, 0x04F00409, 0xCFE203F3, 0xDB040508, 0xF23401CD);
	r7 = D(r7, s1_1_0, 0xE42CEDF0, 0xF9150613, 0x091011E2, 0xFFF202F8);
	r0 = D(r0, s1_1_1, 0x240C071F, 0x0A18EBB4, 0xD60DF51F, 0x5D450681);
	r1 = D(r1, s1_1_1, 0xFE030729, 0x041EF7DB, 0x0DF706FA, 0x05040D04);
	r2 = D(r2, s1_1_1, 0xF1F515F5, 0x2D1AEFFF, 0x0E0EEEFB, 0x1B03FF1C);
	r3 = D(r3, s1_1_1, 0x1C020181, 0xDB03200B, 0xFF02F8ED, 0xF60AFFEC);
	r4 = D(r4, s1_1_1, 0x11F908DF, 0xF5EAF549, 0x14FF0CF7, 0x0FF1F6D2);
	r5 = D(r5, s1_1_1, 0x20FCF226, 0xD3D90809, 0x21F7F841, 0x0E050A17);
	r6 = D(r6, s1_1_1, 0x0204260E, 0x051306E0, 0x31DB1512, 0xFE03F881);
	r7 = D(r7, s1_1_1, 0x2E04F5E1, 0xFF010618, 0x39F7F7A0, 0x140100EC);
	r0 = D(r0, s1_1_2, 0x0005FCE9, 0x0EFBECF3, 0x1F0A09CA, 0xEAF8CAF7);
	r1 = D(r1, s1_1_2, 0xD4EFEB02, 0xFC09FE12, 0xE5CB1202, 0xFB03FF07);
	r2 = D(r2, s1_1_2, 0x1607FA00, 0x1FFFE62A, 0xDC10FF37, 0x100BEDF8);
	r3 = D(r3, s1_1_2, 0x0603FB06, 0xE8FCF806, 0x201F1304, 0x0EF70B01);
	r4 = D(r4, s1_1_2, 0x1A000215, 0x2A0A07F9, 0xFBEE0423, 0x03051AE7);
	r5 = D(r5, s1_1_2, 0x46FCF6DC, 0xF5FFD1DD, 0x090820E4, 0x11F9FE02);
	r6 = D(r6, s1_1_2, 0x17FA0F10, 0xF0FA07E8, 0x04DDF428, 0x0301E881);
	r7 = D(r7, s1_1_2, 0xF7ED0DEF, 0x03E5BC0B, 0x1EFB0ED9, 0x0CFC060F);
	r0 = D(r0, s1_2_0, 0xD90DFC13, 0x06061305, 0x11EAFB04, 0xE8DC0132);
	r1 = D(r1, s1_2_0, 0x07090EFE, 0x00DF190F, 0xEDFEFEF3, 0xFE0CFD08);
	r2 = D(r2, s1_2_0, 0xEB1D000D, 0xDCE8051C, 0x0C040C01, 0xFAF60BF9);
	r3 = D(r3, s1_2_0, 0x011A0902, 0xF905F502, 0x02E91B08, 0xFF01010A);
	r4 = D(r4, s1_2_0, 0xF3021008, 0x22CAF700, 0xCFFBFF19, 0x280512FA);
	r5 = D(r5, s1_2_0, 0xF6FBFE12, 0x03F8F6F8, 0xDC0A0508, 0xE3FB11F3);
	r6 = D(r6, s1_2_0, 0x08FD121C, 0xFC1DF9FF, 0xF600EF19, 0x03FB08F2);
	r7 = D(r7, s1_2_0, 0xDEE0F410, 0xF6F5010B, 0x0CB404F4, 0xE2DE0310);
	r0 = D(r0, s1_2_1, 0x0BEF1009, 0xDDDF0DF5, 0xEA1C08EE, 0xF8FBE92A);
	r1 = D(r1, s1_2_1, 0xF201EC1C, 0xFEEF0EFE, 0x0E240EFB, 0xFB1500FC);
	r2 = D(r2, s1_2_1, 0xDBFD0407, 0xF006E502, 0x05FAE5FD, 0x0A03EA00);
	r3 = D(r3, s1_2_1, 0x05F3B7E6, 0x1614EC1D, 0xF3F3F1FE, 0xFAFFFAF6);
	r4 = D(r4, s1_2_1, 0x1305E60E, 0xE809F91F, 0x08E5F200, 0x2EF6E50A);
	r5 = D(r5, s1_2_1, 0xEE1A1002, 0x1C0EE9F5, 0xFC1E08F3, 0xFB0CF412);
	r6 = D(r6, s1_2_1, 0xFEF21F05, 0xF81C05B5, 0x00FE0FE5, 0x01121008);
	r7 = D(r7, s1_2_1, 0x0B0C071C, 0xFBEDFFF3, 0x0DF117F4, 0x16F61118);
	r0 = D(r0, s1_2_2, 0x0314122E, 0x0A07F6F3, 0x040F10CD, 0x170EE426);
	r1 = D(r1, s1_2_2, 0xFB0D23EE, 0x0004F71C, 0xE8E3EAFC, 0x0BFFFF06);
	r2 = D(r2, s1_2_2, 0x0C0B10F0, 0x1905F104, 0x0EF0FFFA, 0x09010803);
	r3 = D(r3, s1_2_2, 0xF51FD602, 0xDA07190C, 0xF40DFC17, 0x0801020B);
	r4 = D(r4, s1_2_2, 0x0F08100F, 0x1209EB00, 0x0CF1D72C, 0x1DEE11DD);
	r5 = D(r5, s1_2_2, 0x0026FBEA, 0x00FCF9DF, 0xF5151B04, 0x09F8FB02);
	r6 = D(r6, s1_2_2, 0xE7F40506, 0x26E2F104, 0xEDFE0112, 0x100CD4F9);
	r7 = D(r7, s1_2_2, 0xE9F8E119, 0x040EF8FE, 0xFE0DB1EF, 0xF1FAEB06);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-5.527e-02, 2.155e-02, 3.530e-02, 5.968e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(2.521e-02, 2.147e-02, 6.734e-03, -1.815e-01);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(3.341e-04, 4.979e-03, -1.470e-03, -7.695e-03);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(3.577e-02, 2.960e-02, 3.328e-02, 2.367e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(7.329e-03, -3.485e-03, -1.422e-02, 3.407e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-3.772e-02, 3.123e-03, 2.603e-03, -1.225e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-1.223e-01, -5.259e-03, -2.426e-03, 5.600e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(5.094e-02, 1.592e-02, 4.887e-03, 1.561e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-6x32-BILINEAR-MPV-NVL-conv2
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF9FEFF04, 0x140700FC, 0xFD20F625, 0x02F40900);
	r1 = D(r1, s0_0_0, 0xF90CE4FA, 0x03FE09FE, 0x29ED0F05, 0x00FAE81A);
	r2 = D(r2, s0_0_0, 0x1F0A0C03, 0xF614E51F, 0xF70F031C, 0xD8FE05FF);
	r3 = D(r3, s0_0_0, 0xF62713FE, 0xFC08FB0D, 0x0705F812, 0xFB030106);
	r4 = D(r4, s0_0_0, 0x0BE50FF2, 0x07FCF604, 0x191808F5, 0x00D01215);
	r5 = D(r5, s0_0_0, 0x08FFFAFC, 0xED0517E1, 0x21E30604, 0xF708F10C);
	r6 = D(r6, s0_0_0, 0x0C0112EF, 0xEEF31CF9, 0x01F7FF0A, 0xFC171BFC);
	r7 = D(r7, s0_0_0, 0x05FE0BFD, 0xFC0AF701, 0x07E9EAFB, 0xED06FCF1);
	r0 = D(r0, s0_0_1, 0x0FEC0AF8, 0xE910F306, 0xEE05E723, 0x1D1B1406);
	r1 = D(r1, s0_0_1, 0xC5F8DDFD, 0x00FAFC0B, 0xFC21050A, 0xFCE516FF);
	r2 = D(r2, s0_0_1, 0xF4FFFE06, 0xD5E0D203, 0xF80728F5, 0xD50DFC0D);
	r3 = D(r3, s0_0_1, 0x0E0500F0, 0x1AF8FA04, 0xF9FAFCF4, 0x090BFD06);
	r4 = D(r4, s0_0_1, 0xF1FFF911, 0x21022209, 0x07F506EE, 0x0D04F605);
	r5 = D(r5, s0_0_1, 0x05ECE3EC, 0xE900FEF9, 0x28FFD8E3, 0x1705FBEA);
	r6 = D(r6, s0_0_1, 0x280AFF13, 0xE809FB0B, 0x1FFCFBF0, 0xFBF90207);
	r7 = D(r7, s0_0_1, 0xFDE2F409, 0x0FF7080C, 0xFD0700FA, 0xEF000F00);
	r0 = D(r0, s0_0_2, 0x0607000F, 0x07FD11F0, 0xEAC1F9FA, 0x040102F1);
	r1 = D(r1, s0_0_2, 0x031411FD, 0x0201F8FA, 0xEF0EF3E8, 0xF9E911E4);
	r2 = D(r2, s0_0_2, 0x0BF20617, 0x9A28F3F1, 0xE7E602F0, 0x051EF911);
	r3 = D(r3, s0_0_2, 0xF4120C12, 0xFE131207, 0xF805FE08, 0xFAF903FC);
	r4 = D(r4, s0_0_2, 0x00E313F4, 0x150E0403, 0x1E0205F7, 0x1B060F03);
	r5 = D(r5, s0_0_2, 0xF3F701F0, 0x05FE191D, 0x04EE02E7, 0xF7FBE90F);
	r6 = D(r6, s0_0_2, 0x2B1407CF, 0x07002400, 0x1100E1E8, 0x0103EC0B);
	r7 = D(r7, s0_0_2, 0x0A0D1D0F, 0xF7FFEEE6, 0x07F414EF, 0xF5F01E04);
	r0 = D(r0, s0_1_0, 0xFE100204, 0xFC0E0916, 0xFB140009, 0x03E401F5);
	r1 = D(r1, s0_1_0, 0xF3EFD704, 0x01F701FD, 0x17F827CE, 0x01DBFF06);
	r2 = D(r2, s0_1_0, 0xFAFB05FF, 0x0B0005FA, 0x0210F405, 0xE7FDEB02);
	r3 = D(r3, s0_1_0, 0x00F7FA11, 0xF9EF11F0, 0xFA070919, 0xFCFA0104);
	r4 = D(r4, s0_1_0, 0x02FA0109, 0xF61CFD02, 0x08EEF109, 0x0224E5E7);
	r5 = D(r5, s0_1_0, 0x0DECEEEC, 0xF8DEFBF2, 0x0BF1FBE8, 0xFD0108FF);
	r6 = D(r6, s0_1_0, 0x0FD30917, 0xE70409E7, 0xFEE01318, 0xF6F70BF6);
	r7 = D(r7, s0_1_0, 0x05F1F8FD, 0xFEF801F0, 0x18D202F2, 0x1405E9F1);
	r0 = D(r0, s0_1_1, 0xE3F9090E, 0x0D02E509, 0xCE18FA0B, 0x0623FF1C);
	r1 = D(r1, s0_1_1, 0x89E6C1ED, 0x0F03E612, 0x0C28F515, 0x17FEDCF7);
	r2 = D(r2, s0_1_1, 0xF4F9F903, 0xB711EBD1, 0xF002D70E, 0xDB0CFDEB);
	r3 = D(r3, s0_1_1, 0x061A0706, 0xF8DEE708, 0xEBFCFF0D, 0x00FCF4F8);
	r4 = D(r4, s0_1_1, 0xFAFE000E, 0xB0E7C506, 0x0B00FB08, 0xF4EA18EB);
	r5 = D(r5, s0_1_1, 0xF6FAF203, 0xF0080803, 0x2E14EF11, 0x02F90410);
	r6 = D(r6, s0_1_1, 0x060A0710, 0xECF3C2FD, 0xEC04E809, 0xF1020EF5);
	r7 = D(r7, s0_1_1, 0xE5C512F0, 0x11080C1A, 0x130C2600, 0x1006F211);
	r0 = D(r0, s0_1_2, 0x0AFAF1FB, 0x10EEF5F3, 0xE4F20BFE, 0x04FC12FA);
	r1 = D(r1, s0_1_2, 0x0B02F702, 0x06FF06F8, 0xE6EB02E1, 0x0605F619);
	r2 = D(r2, s0_1_2, 0xF6F5FF0B, 0xE9FB2806, 0xF9FF0DF9, 0xF90C1402);
	r3 = D(r3, s0_1_2, 0xDDFC03F3, 0xF8FFFCFC, 0xFFECFEF9, 0xFB0013F0);
	r4 = D(r4, s0_1_2, 0xF9FDF424, 0xF3EE1619, 0x00F4E406, 0x1418FD23);
	r5 = D(r5, s0_1_2, 0xF3EE080E, 0x1110FB0F, 0x0113E908, 0x0803FFFA);
	r6 = D(r6, s0_1_2, 0x00F2FEE7, 0xF1EBE9FF, 0xEC081101, 0xF2E9FBFD);
	r7 = D(r7, s0_1_2, 0xFF1D2D16, 0x2200B7F7, 0x16130C0B, 0x0415F102);
	r0 = D(r0, s0_2_0, 0xFBF5FBFD, 0x0CFA0204, 0xDC010909, 0xFEF1F1E0);
	r1 = D(r1, s0_2_0, 0x16E92017, 0xF90BFFFA, 0x03EF11F8, 0x021E08F0);
	r2 = D(r2, s0_2_0, 0x04090F00, 0xE4ED0EEC, 0xF8F5FB03, 0xFDFEFEF6);
	r3 = D(r3, s0_2_0, 0x0CD91BFC, 0xF7111B08, 0x0111FF0D, 0x0403060B);
	r4 = D(r4, s0_2_0, 0xF20A0C14, 0x230ADEFF, 0x14FB1103, 0xF3F9EFF9);
	r5 = D(r5, s0_2_0, 0xFB040003, 0x180BEB04, 0x11E719F8, 0xF1040407);
	r6 = D(r6, s0_2_0, 0x020AF301, 0xF8E60619, 0x0C11FDF6, 0x0DFA120F);
	r7 = D(r7, s0_2_0, 0xF9DAF5FA, 0xECF02208, 0x05120E06, 0x0010F409);
	r0 = D(r0, s0_2_1, 0x10F6F4EE, 0xE607E707, 0xDFEE15EE, 0x1FF1F7F5);
	r1 = D(r1, s0_2_1, 0x1CF2EF0C, 0xF7F309F0, 0xFBFCFEF9, 0x1521FD0F);
	r2 = D(r2, s0_2_1, 0x0DF30F0F, 0x81FC061D, 0xE5EA0705, 0xE8FC05FC);
	r3 = D(r3, s0_2_1, 0x0710FB02, 0x0FFC0215, 0xF2F0FC0C, 0xFEFDFE06);
	r4 = D(r4, s0_2_1, 0x100A0FFC, 0x03EE0C20, 0x171326F8, 0x04FD0420);
	r5 = D(r5, s0_2_1, 0x0EF90005, 0x06030219, 0x2927150F, 0xE9FCF404);
	r6 = D(r6, s0_2_1, 0xFDF710F4, 0x0006E114, 0x0BF91BE3, 0xFC03F617);
	r7 = D(r7, s0_2_1, 0xFFF602F0, 0x1A0BEE0B, 0x070704F5, 0xEB0803FE);
	r0 = D(r0, s0_2_2, 0xFA01F807, 0x15FEFC0A, 0x0BE2030F, 0x05EB1808);
	r1 = D(r1, s0_2_2, 0xF0F5E702, 0x021A09FE, 0xF60CFF0E, 0x07131111);
	r2 = D(r2, s0_2_2, 0xF7101DF7, 0xE0BB07F7, 0xFC070913, 0x0103F102);
	r3 = D(r3, s0_2_2, 0xF1FE09F4, 0xE913F905, 0xFA0401FF, 0xFCF5F404);
	r4 = D(r4, s0_2_2, 0x100509FC, 0x1402F601, 0x04F3F808, 0xE0FC18FB);
	r5 = D(r5, s0_2_2, 0xFBF11015, 0x0D130205, 0xFB0CED19, 0xFBF1FCE9);
	r6 = D(r6, s0_2_2, 0xF8FFFB12, 0xE9F4DD09, 0x1216FB08, 0x07F7011B);
	r7 = D(r7, s0_2_2, 0x0611FCFF, 0xFFF5DDE2, 0xFD18F60F, 0xF2090209);
	r0 = D(r0, s1_0_0, 0x10F904FD, 0xF7FEFEE8, 0xF8F82118, 0x0D00F207);
	r1 = D(r1, s1_0_0, 0xFEF20FFE, 0xF70AF9FE, 0xFCEAFFEB, 0xF70316F4);
	r2 = D(r2, s1_0_0, 0xFAF90A04, 0x01F8FF0A, 0x04F4FDFC, 0xFD03D8FB);
	r3 = D(r3, s1_0_0, 0xFEFCFDF5, 0x02F502FA, 0x0D0B03F8, 0xF500FAFD);
	r4 = D(r4, s1_0_0, 0x0211F708, 0x0403F9F7, 0x0628EAF6, 0xF60D030D);
	r5 = D(r5, s1_0_0, 0x0C01120E, 0xFEFBF1D9, 0x0E0402FD, 0xFAFFFD04);
	r6 = D(r6, s1_0_0, 0x09F201F7, 0xFDF40909, 0x09FFF9FA, 0xFDF7EE04);
	r7 = D(r7, s1_0_0, 0xFCFF0D06, 0xF81D07EF, 0x00FA0DF4, 0x0818FFFD);
	r0 = D(r0, s1_0_1, 0xFA080708, 0x0A00FBF9, 0xFB07E81E, 0xFBF0F914);
	r1 = D(r1, s1_0_1, 0x0DF51B02, 0x05050C0E, 0x080A0206, 0x10170EF0);
	r2 = D(r2, s1_0_1, 0xFBFB02F2, 0xCC070F08, 0x0709F5DE, 0xFCD8FAD3);
	r3 = D(r3, s1_0_1, 0x16FD1ADA, 0x180603F5, 0x2CEA07F6, 0xF701F6F6);
	r4 = D(r4, s1_0_1, 0xFA10FD03, 0xF5FB28C7, 0xFD15E71C, 0x0501F6EE);
	r5 = D(r5, s1_0_1, 0x080FDD0F, 0x0D04F1F9, 0xEC080B12, 0x040F0406);
	r6 = D(r6, s1_0_1, 0x0D1EFC11, 0x090D0307, 0x0F33CC22, 0x000D1521);
	r7 = D(r7, s1_0_1, 0xFE07FF05, 0xF3F306E9, 0xFCFC0308, 0xF61214FC);
	r0 = D(r0, s1_0_2, 0x0A06F70A, 0x01FEED0D, 0xFCF6FA21, 0x08FDFA03);
	r1 = D(r1, s1_0_2, 0x0218F608, 0xFB00FE0A, 0x0915FC03, 0x02030C15);
	r2 = D(r2, s1_0_2, 0xFE0CECF6, 0xFBEEFFF9, 0xF90B0FFB, 0x042211AC);
	r3 = D(r3, s1_0_2, 0x0100FF14, 0xFFF002EA, 0x1715FAF8, 0x09040903);
	r4 = D(r4, s1_0_2, 0xFA01F9F9, 0xFDF90B0F, 0xEC100A05, 0x020800F9);
	r5 = D(r5, s1_0_2, 0xF60C0809, 0xF7070800, 0x0505EF14, 0x0307F70F);
	r6 = D(r6, s1_0_2, 0x160C0ADB, 0xF5FF10F3, 0xFB1710F7, 0xF3FFF205);
	r7 = D(r7, s1_0_2, 0xFD0EEFEE, 0x0C09F3FA, 0xF800F40B, 0x040DFDFD);
	r0 = D(r0, s1_1_0, 0xF91DF1FE, 0x02160907, 0x0009FFFD, 0x03E908F7);
	r1 = D(r1, s1_1_0, 0x03F92014, 0x070CFF03, 0x07B703FC, 0x038BFDEF);
	r2 = D(r2, s1_1_0, 0xEE25F70D, 0x0AC0F70D, 0xF10AF4EB, 0x00E81703);
	r3 = D(r3, s1_1_0, 0x06EE05FE, 0xEF13F2F3, 0x1D1EFA02, 0xF3080509);
	r4 = D(r4, s1_1_0, 0xE80D0F1C, 0xFFE910FC, 0x0903031A, 0x16FCE725);
	r5 = D(r5, s1_1_0, 0xFC00F100, 0xF7F2FBEA, 0x01E90C00, 0xFE1702ED);
	r6 = D(r6, s1_1_0, 0x02D30107, 0xEB140527, 0xFBED0002, 0x0FDF0804);
	r7 = D(r7, s1_1_0, 0x00EF0914, 0x0D5EF1DD, 0xF3E1E406, 0x0205F803);
	r0 = D(r0, s1_1_1, 0x1415F2F9, 0xF0ED0803, 0x10F7DD0A, 0x09080500);
	r1 = D(r1, s1_1_1, 0x0602F722, 0xF9FEFDF0, 0xF2211814, 0xF481EC14);
	r2 = D(r2, s1_1_1, 0xF81615FC, 0xF205F3E7, 0x0613F8CF, 0x06F1EF03);
	r3 = D(r3, s1_1_1, 0xE71907E7, 0x05F6FA0E, 0x19E7F508, 0xEB01F225);
	r4 = D(r4, s1_1_1, 0x11FAD5E5, 0x03F3FB04, 0x14BEF2CE, 0x00F6E409);
	r5 = D(r5, s1_1_1, 0xF708E1F5, 0xF7EBF9ED, 0x16310BEA, 0x19250F06);
	r6 = D(r6, s1_1_1, 0xF314F10D, 0x100CC4FB, 0xF91CFC3A, 0x031E00FE);
	r7 = D(r7, s1_1_1, 0x12F4E2E8, 0xEF030709, 0x1A070503, 0xF6EE0DE4);
	r0 = D(r0, s1_1_2, 0xEE0A0712, 0xFEF0F50F, 0x05130A29, 0x1C05F70E);
	r1 = D(r1, s1_1_2, 0xF2E5F713, 0x020AFD01, 0xF0E904F7, 0xF7DB042A);
	r2 = D(r2, s1_1_2, 0x00FAFFF1, 0xFEFCFCFB, 0x041DF9EC, 0xF2DF1413);
	r3 = D(r3, s1_1_2, 0xF6F50144, 0x0AEADCF4, 0x17F2040D, 0xF50007F9);
	r4 = D(r4, s1_1_2, 0xFC190EEC, 0xF83E2CF1, 0x0A2704E6, 0xFA070FB7);
	r5 = D(r5, s1_1_2, 0x05030AF9, 0x06E3F702, 0xF3F71314, 0x070BDAFE);
	r6 = D(r6, s1_1_2, 0xE9FCF605, 0x0C0E0907, 0xF62B14B4, 0x01041502);
	r7 = D(r7, s1_1_2, 0xFE033582, 0x06F2F91E, 0x070901F6, 0x070316FB);
	r0 = D(r0, s1_2_0, 0xFF07F7ED, 0xF715050C, 0x05F102FA, 0xFAEFF5EE);
	r1 = D(r1, s1_2_0, 0xF23AF519, 0x06FCF712, 0x111109FC, 0x09810D04);
	r2 = D(r2, s1_2_0, 0x06CAF9FB, 0x1223FB1E, 0x04050B04, 0x031CFEFF);
	r3 = D(r3, s1_2_0, 0x0CC6F814, 0xFBFC0510, 0x06060D0D, 0xEEFB0201);
	r4 = D(r4, s1_2_0, 0x0112F5F9, 0x1026FE1D, 0x03F30E02, 0x110B0C11);
	r5 = D(r5, s1_2_0, 0xEEFF0AF3, 0xF9121906, 0xFF50FC0F, 0xF8F5F9FA);
	r6 = D(r6, s1_2_0, 0x03F30007, 0x04D104F9, 0x0F0B04FF, 0x020211F4);
	r7 = D(r7, s1_2_0, 0xF8FB0010, 0x092BF9F8, 0xEBB70AFC, 0xF812FF14);
	r0 = D(r0, s1_2_1, 0x00F8F1FB, 0x0802E9F7, 0x01F70602, 0x0BED030D);
	r1 = D(r1, s1_2_1, 0xFEF4FC04, 0x040A0802, 0xF603E908, 0xF90EE4EE);
	r2 = D(r2, s1_2_1, 0xFEF4FEF4, 0xF1FCE704, 0xFFF71600, 0x00D60D06);
	r3 = D(r3, s1_2_1, 0xF9D8F400, 0xF600EE09, 0x1CED0A0A, 0xF8F80108);
	r4 = D(r4, s1_2_1, 0xFE1C101F, 0x0BF5F3F9, 0xFE210C04, 0xF8EB0704);
	r5 = D(r5, s1_2_1, 0xFBE4FE01, 0x1CF11528, 0x0100F7FA, 0x0BF6FCFA);
	r6 = D(r6, s1_2_1, 0xFEF90AFD, 0xF1040905, 0x0FC70FF4, 0x0803F900);
	r7 = D(r7, s1_2_1, 0xFEF704F6, 0xFBE0F305, 0x00F8FAFD, 0x05F7FC01);
	r0 = D(r0, s1_2_2, 0xFAFB08F8, 0x0E0CFFFB, 0xF30E05DE, 0xFAFCFAF2);
	r1 = D(r1, s1_2_2, 0x00FCF311, 0x01FFF2FE, 0x0C02FE01, 0x0AEA1303);
	r2 = D(r2, s1_2_2, 0x01E50406, 0x02FF04FA, 0xF9FCFBFE, 0x01101002);
	r3 = D(r3, s1_2_2, 0xFEF00EFA, 0xF5F01C0A, 0x0C13F9F5, 0x02020FFD);
	r4 = D(r4, s1_2_2, 0x0700FDFE, 0xF7EDF1EF, 0xF60902F6, 0xEEDF081A);
	r5 = D(r5, s1_2_2, 0x02FAFCEF, 0xFEFF0905, 0xFE130DEB, 0xF6F5FE08);
	r6 = D(r6, s1_2_2, 0xF6F80B0F, 0x0AEF1312, 0xE5DF111F, 0xF90A1D07);
	r7 = D(r7, s1_2_2, 0x060806E7, 0x08121A04, 0x12040300, 0x01F8E707);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x020AF405, 0xFC0E0105, 0xEEE60FE7, 0x03010BEB);
	r1 = D(r1, s0_0_0, 0x06EB2006, 0xFEFBFCED, 0xE71107E5, 0xE030D909);
	r2 = D(r2, s0_0_0, 0xFD02E6FE, 0x00020304, 0x0E1501FD, 0x0AEB0C03);
	r3 = D(r3, s0_0_0, 0x0E0F0114, 0xF3FD03EB, 0x070D160A, 0xFF050800);
	r4 = D(r4, s0_0_0, 0xED04EF0F, 0x0B1C2D16, 0x0D0B06F0, 0x10F1EF01);
	r5 = D(r5, s0_0_0, 0xECF7F9F1, 0xFF00EE13, 0xFCEBFEE3, 0xF6030A04);
	r6 = D(r6, s0_0_0, 0x0B0DFCFD, 0xE80E0F27, 0xEF11F111, 0x11020706);
	r7 = D(r7, s0_0_0, 0x02F1EC0D, 0xFE0CFFFD, 0xF00DECEB, 0xE804F600);
	r0 = D(r0, s0_0_1, 0x0500F400, 0x07F81BFB, 0xE2F01B01, 0xF9DCFAFC);
	r1 = D(r1, s0_0_1, 0xFE050318, 0x020BF9FB, 0x05070CF8, 0xFD06FBDD);
	r2 = D(r2, s0_0_1, 0xEE09F906, 0xF71BF9F6, 0x0317FBEA, 0x100A06F9);
	r3 = D(r3, s0_0_1, 0xF71FF8F5, 0xF4F815F7, 0xF9050A0F, 0xFB101803);
	r4 = D(r4, s0_0_1, 0xFFF813FF, 0xEB0416F6, 0x0F021CFA, 0xF8E70727);
	r5 = D(r5, s0_0_1, 0x04F01800, 0x0C04FCF2, 0xF6C1EE0B, 0xF71300FC);
	r6 = D(r6, s0_0_1, 0xF3CF0A09, 0x0600F8E7, 0xEABF0E02, 0x02DCE6EC);
	r7 = D(r7, s0_0_1, 0xFB0512F9, 0xEB1AF11A, 0x0B040705, 0x0CF7F7E3);
	r0 = D(r0, s0_0_2, 0xEEE70FE4, 0x0D0507FD, 0xF001F8DE, 0x0D0FF4FC);
	r1 = D(r1, s0_0_2, 0x0201FB0F, 0xF7FDF8FF, 0xECFFFD07, 0x110A15FC);
	r2 = D(r2, s0_0_2, 0xFF03D205, 0x0A35210B, 0x010CE9F0, 0x24F40894);
	r3 = D(r3, s0_0_2, 0x0CF8F5FC, 0x17010C05, 0xF4040AFA, 0xFD0208FF);
	r4 = D(r4, s0_0_2, 0xF5F4FB06, 0xD708F016, 0xEDE2E001, 0x17B90F10);
	r5 = D(r5, s0_0_2, 0xEB05F1FE, 0x0FFBFFFD, 0xFCE0FC08, 0xE300FD01);
	r6 = D(r6, s0_0_2, 0xF8111801, 0xFFFFE9F1, 0xF5B9DFE7, 0xFCE8F9FD);
	r7 = D(r7, s0_0_2, 0xFF02EF07, 0x15FC12EF, 0x0415FC01, 0x06F1F3F4);
	r0 = D(r0, s0_1_0, 0xF9F60804, 0x0A10FD0E, 0x0314F3F5, 0xFB04EC02);
	r1 = D(r1, s0_1_0, 0xCEE220F5, 0x0611FF00, 0x03FC07E4, 0xE7011517);
	r2 = D(r2, s0_1_0, 0x1C0F04FA, 0xEEEC16EF, 0xFB06FDF2, 0xFA110505);
	r3 = D(r3, s0_1_0, 0x0C27FD1D, 0x09FC05F9, 0x1208F3EF, 0xF70812F6);
	r4 = D(r4, s0_1_0, 0xE1F61105, 0xF8FDF407, 0xF103FC09, 0xFBD7FFF8);
	r5 = D(r5, s0_1_0, 0xFCDA02FE, 0xF5EBF5FB, 0xE7BFFFF5, 0x030108FF);
	r6 = D(r6, s0_1_0, 0xFE02EA01, 0xF4ED04EB, 0x01E90EFA, 0x150AFE1C);
	r7 = D(r7, s0_1_0, 0x02040708, 0xE6FB06EA, 0x1FDCFAF4, 0x0CFC0B1A);
	r0 = D(r0, s0_1_1, 0xFF020C0E, 0xFF10F70F, 0x18F9EF01, 0x0EF0F703);
	r1 = D(r1, s0_1_1, 0x05FC0302, 0x1110FD07, 0xF92C1BF6, 0xF1090C05);
	r2 = D(r2, s0_1_1, 0xE61B02D7, 0xF409E4FD, 0x0D240605, 0x1014D016);
	r3 = D(r3, s0_1_1, 0x140015C0, 0xF8E20EF0, 0x090E2004, 0x28F60E18);
	r4 = D(r4, s0_1_1, 0x0FF0EC0B, 0x0FF5C704, 0xCC0A1902, 0x0DC413FD);
	r5 = D(r5, s0_1_1, 0xF0EE120C, 0xFB14050C, 0xF9D609F0, 0x04ED0E00);
	r6 = D(r6, s0_1_1, 0x078E1502, 0xF3F90508, 0x17E81E00, 0x08F7EC07);
	r7 = D(r7, s0_1_1, 0x2FFBFC0D, 0xF8DBE600, 0xDED303F6, 0x0A28090F);
	r0 = D(r0, s0_1_2, 0x10F30304, 0xF5170D05, 0xF9E2FA05, 0x01F9F8EF);
	r1 = D(r1, s0_1_2, 0x0EFC16F7, 0xFD06071F, 0x0415011B, 0x1D37F0F6);
	r2 = D(r2, s0_1_2, 0x05E503FF, 0xF6E8EFF9, 0xF7EC090B, 0x100FF9ED);
	r3 = D(r3, s0_1_2, 0x16FDF1FD, 0xEDDB031C, 0x04F50E0B, 0x08FF15F5);
	r4 = D(r4, s0_1_2, 0xF3CA0311, 0x0A02DC0C, 0xFE0CF2F9, 0xFB81121E);
	r5 = D(r5, s0_1_2, 0xEF0C0213, 0x0A0CF200, 0xDCEFF80C, 0x0D10F4FF);
	r6 = D(r6, s0_1_2, 0xFDFC17F4, 0x14EC16FE, 0x05C60904, 0x0FE707F1);
	r7 = D(r7, s0_1_2, 0xF5FF15FB, 0x08F40A05, 0xEC1B0EF3, 0x030D05EF);
	r0 = D(r0, s0_2_0, 0x0B061208, 0x04FC00FD, 0xF513F709, 0x07FAEF13);
	r1 = D(r1, s0_2_0, 0xEED8F9F9, 0x0901FCFE, 0x13FCFD28, 0xF726F32A);
	r2 = D(r2, s0_2_0, 0xF5FFED0B, 0xFE1416F3, 0xF60700FA, 0xEF121C17);
	r3 = D(r3, s0_2_0, 0xF9DEF7F7, 0x0CF50703, 0xFD051109, 0xF8020706);
	r4 = D(r4, s0_2_0, 0xFE10FBE9, 0x03E21FFB, 0xFBFDE6EF, 0x11F81607);
	r5 = D(r5, s0_2_0, 0xFA0107FC, 0x09F20308, 0xEBE806FB, 0xEE08FEF4);
	r6 = D(r6, s0_2_0, 0x120AF40A, 0xFDFC110F, 0xF9FCF507, 0x1E04E4EC);
	r7 = D(r7, s0_2_0, 0x00F50EF9, 0xDD0E100C, 0xEFF9E614, 0x13FA10F9);
	r0 = D(r0, s0_2_1, 0xFB1209FC, 0xE604080D, 0xFBF0ECFB, 0xF300F408);
	r1 = D(r1, s0_2_1, 0xF6FE0E04, 0xF3FB08F3, 0x07E110F4, 0xE01A07EF);
	r2 = D(r2, s0_2_1, 0x06FBFD08, 0xE20115EB, 0x011B0803, 0xED0F170A);
	r3 = D(r3, s0_2_1, 0xCFDF0504, 0x11ECED04, 0x04010101, 0x1302FF0B);
	r4 = D(r4, s0_2_1, 0x17E7ECFC, 0xF9EA000F, 0x09FEE102, 0xF5DAF306);
	r5 = D(r5, s0_2_1, 0x03060AF7, 0x26D70FED, 0xF4DC0607, 0xEF1BF00C);
	r6 = D(r6, s0_2_1, 0x14FF02E1, 0xFBDCF3F7, 0x0F29F7DE, 0xD8ED090B);
	r7 = D(r7, s0_2_1, 0x06F8EDF4, 0x00231AEF, 0x0B2CFB15, 0xF80D1105);
	r0 = D(r0, s0_2_2, 0xE8FC0AF7, 0xFB20FB03, 0x020A150E, 0x0B12FAFF);
	r1 = D(r1, s0_2_2, 0xF4FD15EE, 0xF3170218, 0xFE051102, 0xEE02F5F2);
	r2 = D(r2, s0_2_2, 0x0600FF05, 0x000D10FD, 0x0B070206, 0xF90513EF);
	r3 = D(r3, s0_2_2, 0x000E1901, 0x0DF8F006, 0xEF070D09, 0xFE0108F5);
	r4 = D(r4, s0_2_2, 0xF0F4FF03, 0x0CF61101, 0x181E0305, 0x06DFFB04);
	r5 = D(r5, s0_2_2, 0x08060EEF, 0x02DB0F0F, 0x0DF5252A, 0xFC120BFA);
	r6 = D(r6, s0_2_2, 0x13040BE1, 0x15F7E9EE, 0x1811171F, 0x0CEB07FC);
	r7 = D(r7, s0_2_2, 0x0B0BFE06, 0x0215EEFB, 0xF0F711F6, 0x0FF7E7FF);
	r0 = D(r0, s1_0_0, 0x060FFBF0, 0xFE07EDFF, 0xDEE50C2A, 0xF908FB09);
	r1 = D(r1, s1_0_0, 0xF5F120F3, 0x04070506, 0xFAEE040A, 0x1807F7FB);
	r2 = D(r2, s1_0_0, 0x0AF70600, 0x0507FC0E, 0xFB050A01, 0x0808FC13);
	r3 = D(r3, s1_0_0, 0x0CF81302, 0xF9090408, 0xFDF3E5FD, 0x0705F6F9);
	r4 = D(r4, s1_0_0, 0x11ECF7F2, 0x0FEADFCA, 0x010B18F5, 0x06EEEB07);
	r5 = D(r5, s1_0_0, 0x041200FF, 0x12F9EDFD, 0x110D0EF2, 0xFD03F3FC);
	r6 = D(r6, s1_0_0, 0x1E1A09FE, 0x05FFF901, 0x151AD3E3, 0xFAFD150B);
	r7 = D(r7, s1_0_0, 0x06F70302, 0x0FF1FD05, 0x070D0701, 0xFF150BEA);
	r0 = D(r0, s1_0_1, 0xF501EC05, 0xEFF5FE0E, 0xFE0CF520, 0x02050924);
	r1 = D(r1, s1_0_1, 0x06F906E4, 0xFA041000, 0x19170CF8, 0x0FEF07FF);
	r2 = D(r2, s1_0_1, 0xF00DF6ED, 0x00180FEC, 0xFF0BF70F, 0xF3F6F907);
	r3 = D(r3, s1_0_1, 0xFCF213EF, 0xF7130C1F, 0x09F6EC05, 0x0506F403);
	r4 = D(r4, s1_0_1, 0xEA1CFA04, 0xF10A0A01, 0x0711F8F5, 0xF7F80B03);
	r5 = D(r5, s1_0_1, 0x130410F9, 0xFC0303DE, 0x031207DB, 0x0408F2FD);
	r6 = D(r6, s1_0_1, 0x1110EAE6, 0x0B1505DA, 0x1BF0CE27, 0xF8F00620);
	r7 = D(r7, s1_0_1, 0x0001F3FA, 0x08EAD90B, 0x0414031B, 0xFEF20614);
	r0 = D(r0, s1_0_2, 0xFFF7EA19, 0x040F0DED, 0xFD1D0A0E, 0x0A070E1D);
	r1 = D(r1, s1_0_2, 0x000EF4EC, 0xFFFF02F4, 0xF7FCFC12, 0xF412EF07);
	r2 = D(r2, s1_0_2, 0x05F1F108, 0xFCF8F8FA, 0x0EEF000E, 0x170204D6);
	r3 = D(r3, s1_0_2, 0xF5FAF4FD, 0x07F3090D, 0x09090100, 0x06FBF8FA);
	r4 = D(r4, s1_0_2, 0x04E6FD0E, 0x0A0CF83B, 0xFF00F418, 0xFE07E717);
	r5 = D(r5, s1_0_2, 0x0117F509, 0x050CDCE0, 0x090A06D6, 0xF8040708);
	r6 = D(r6, s1_0_2, 0xF7FCFC08, 0xFBE4ED10, 0xFBDE18E8, 0xF50C01F1);
	r7 = D(r7, s1_0_2, 0xF7F300E0, 0x1218FD38, 0xFA020317, 0xFE00FA1E);
	r0 = D(r0, s1_1_0, 0x07FE1300, 0x10FAF5FC, 0x08DD0AF9, 0x160111F9);
	r1 = D(r1, s1_1_0, 0xE2E6F71B, 0x080BF503, 0xD8D8240F, 0xF912000E);
	r2 = D(r2, s1_1_0, 0xEE0FEF02, 0x0B04F508, 0x01140F05, 0x01E5F4D9);
	r3 = D(r3, s1_1_0, 0xEE10E905, 0x00ECF711, 0x01F3F612, 0x06FC0101);
	r4 = D(r4, s1_1_0, 0xFEDAFAFF, 0xE6E71EE1, 0x0214CA0A, 0x1AE40DEE);
	r5 = D(r5, s1_1_0, 0x19F0E3FD, 0x101418F9, 0x06F9E8EC, 0x1008FE0E);
	r6 = D(r6, s1_1_0, 0x02F3E2E7, 0xFFD9EA1D, 0xF7F9FF24, 0xFFE7FD0E);
	r7 = D(r7, s1_1_0, 0x03F81308, 0x03F409EF, 0xFE19FF14, 0xFCFFECFF);
	r0 = D(r0, s1_1_1, 0xF9090BFD, 0x19FCCB01, 0x23F51722, 0x08F401ED);
	r1 = D(r1, s1_1_1, 0x0EF1EEDC, 0xFEFC07EA, 0x03F1DBC3, 0xEEED0A31);
	r2 = D(r2, s1_1_1, 0x01F3FB0F, 0xFB0D3F1E, 0x32F4FC01, 0xF7FB04FD);
	r3 = D(r3, s1_1_1, 0x05FDD9FA, 0xDEFE0E33, 0xFB06F50D, 0x25F60A13);
	r4 = D(r4, s1_1_1, 0x30004C12, 0x0309EE1A, 0xC113BA07, 0xE811FDED);
	r5 = D(r5, s1_1_1, 0xF207F9F9, 0x030A0602, 0xF9FBB4F9, 0xE118F7F3);
	r6 = D(r6, s1_1_1, 0xDE06EC1B, 0x13FF1AF1, 0xFE090904, 0xFA08FAFF);
	r7 = D(r7, s1_1_1, 0x17240F17, 0xF1F8F10D, 0x100AF7DF, 0xFDF9F3F8);
	r0 = D(r0, s1_1_2, 0x13FFFFF3, 0x1208050C, 0xF4E0F820, 0xFAFE0101);
	r1 = D(r1, s1_1_2, 0x0318F6F8, 0xF811FAF1, 0x1A0BF1E3, 0x0225F215);
	r2 = D(r2, s1_1_2, 0x0620FAFA, 0x13F517EC, 0xFA07040E, 0x03D200F5);
	r3 = D(r3, s1_1_2, 0xEEECF7FB, 0x010D0A01, 0x160702F8, 0x12FF04FA);
	r4 = D(r4, s1_1_2, 0xEFEE0625, 0xFF0FEDF1, 0x00F80203, 0xE90B18E0);
	r5 = D(r5, s1_1_2, 0xFCF3000F, 0x07F40704, 0xED1600E2, 0x0907050D);
	r6 = D(r6, s1_1_2, 0xF61AFA0D, 0xE82EECEC, 0xBDF705A3, 0xF5E5F301);
	r7 = D(r7, s1_1_2, 0xEBE0F9DA, 0x0F27F3F8, 0x1B0EEBF4, 0xF8EEF016);
	r0 = D(r0, s1_2_0, 0x0503050F, 0x1A01FCFA, 0xF817FDF8, 0x140802FD);
	r1 = D(r1, s1_2_0, 0xFEF9EF01, 0x09FFF90D, 0xF615071A, 0xECFCFA11);
	r2 = D(r2, s1_2_0, 0xF1F20902, 0xF0DEFC06, 0xFC04F901, 0x00F1FE0D);
	r3 = D(r3, s1_2_0, 0x03EDF4FE, 0xE9FF03FE, 0xFB04F7F6, 0xF5FF02FE);
	r4 = D(r4, s1_2_0, 0x1702FCF7, 0xF8EE1506, 0x0C01DD0D, 0xE3EFE7FC);
	r5 = D(r5, s1_2_0, 0xFAF10E07, 0xFEDE0CFF, 0xE5F41A0F, 0xF2FBFAFE);
	r6 = D(r6, s1_2_0, 0xF6EFFEE9, 0x0D0BE001, 0x2F0BF1FF, 0xFA040DF1);
	r7 = D(r7, s1_2_0, 0x00FB10FE, 0x06FFEF0B, 0xE0F4070C, 0xEFFCFFF8);
	r0 = D(r0, s1_2_1, 0xEE1205F1, 0xF709F304, 0xE6FC0C05, 0x2E07FAEC);
	r1 = D(r1, s1_2_1, 0xEF0B05F4, 0x0409FCFA, 0x0909ECF3, 0x15FE0712);
	r2 = D(r2, s1_2_1, 0x1AFAEFFB, 0x09100508, 0x0B030600, 0xE4221CFC);
	r3 = D(r3, s1_2_1, 0x04F30010, 0x1CFBEE12, 0xF8F1FFFB, 0xF8FDF107);
	r4 = D(r4, s1_2_1, 0xEC0D13F0, 0xD6F81010, 0x15F10E0F, 0xF210F5F2);
	r5 = D(r5, s1_2_1, 0xEE0002F1, 0xE8F5F425, 0xF6F80CF7, 0x2809F008);
	r6 = D(r6, s1_2_1, 0xF105EA18, 0x01F7081C, 0xF113E503, 0xFCF6F4E3);
	r7 = D(r7, s1_2_1, 0xD2060209, 0xC50FD11A, 0x0AFC05FA, 0x01081905);
	r0 = D(r0, s1_2_2, 0x031002FE, 0xF0040510, 0x08010ADB, 0xFAFC01F7);
	r1 = D(r1, s1_2_2, 0xFF0902F9, 0x02F106F5, 0x03FFF9FB, 0xF8FF12FD);
	r2 = D(r2, s1_2_2, 0x10F90A04, 0xF1071301, 0x01FFF002, 0xF71102FF);
	r3 = D(r3, s1_2_2, 0xEC0BFFFE, 0x07F405F9, 0x0B010EFC, 0x00070301);
	r4 = D(r4, s1_2_2, 0xFEFFF3FC, 0xFF14CFF7, 0x02EBE403, 0x17050002);
	r5 = D(r5, s1_2_2, 0x00FAFFFD, 0x05ECD91E, 0xEDF6FCFE, 0xEFFF0804);
	r6 = D(r6, s1_2_2, 0x011015FD, 0xE4DDF217, 0xFA0AF929, 0xFAFDE00A);
	r7 = D(r7, s1_2_2, 0x0D0107F6, 0x09FD0A08, 0xFE09030A, 0x00F10418);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFDF00711, 0xF704FFF9, 0xECFC1303, 0xF4D0EAFE);
	r1 = D(r1, s0_0_0, 0xEA1F2EF5, 0x06EFF601, 0x0BF1E7DF, 0x21E10EFA);
	r2 = D(r2, s0_0_0, 0xF7ED04F6, 0x0A0F11EF, 0xFCE6F7F1, 0xEDFF00F8);
	r3 = D(r3, s0_0_0, 0xFC1C13F6, 0xF30E0405, 0xFE0B070A, 0xF40AFA02);
	r4 = D(r4, s0_0_0, 0xE8FAE3FD, 0xF313F912, 0xEA0801FC, 0xDEFF16FF);
	r5 = D(r5, s0_0_0, 0xEC11F30A, 0xFEF9FD0C, 0x010D07FC, 0xFEFCFDFE);
	r6 = D(r6, s0_0_0, 0x0DF3ECEE, 0x0F19FA01, 0x0E2100DE, 0x09FEF3E4);
	r7 = D(r7, s0_0_0, 0x0E1903FF, 0xF3260F0D, 0xF20B0518, 0x090B0DFC);
	r0 = D(r0, s0_0_1, 0x1408F606, 0x03EA02FD, 0x00F510EF, 0x09E2E8FC);
	r1 = D(r1, s0_0_1, 0x1510EC10, 0x11E90604, 0x0AE7EAF7, 0x0B0DEE0B);
	r2 = D(r2, s0_0_1, 0xFC0F0803, 0xF31DF0FD, 0xFFF9FF09, 0x05F801EC);
	r3 = D(r3, s0_0_1, 0x0D111E0C, 0x0D08F7F7, 0xFE030AF9, 0x020509F6);
	r4 = D(r4, s0_0_1, 0xEF29F713, 0xFF1A19FE, 0xFB0408FB, 0x04FE0DFB);
	r5 = D(r5, s0_0_1, 0xFA00F912, 0xEB16E500, 0xE91EFCFF, 0xE4F52002);
	r6 = D(r6, s0_0_1, 0xF9F5D30E, 0xFDEDFA02, 0xD815200D, 0xEB1314D5);
	r7 = D(r7, s0_0_1, 0xF6CCFAFC, 0x1BCCF8FA, 0xFF08F9F7, 0x090B00FC);
	r0 = D(r0, s0_0_2, 0x0DE3FB14, 0xF40504F9, 0xF9FE1BFD, 0x1801FCF9);
	r1 = D(r1, s0_0_2, 0xF605D9FA, 0x08F70907, 0xF2EF0310, 0xAC1A05FA);
	r2 = D(r2, s0_0_2, 0xFFF206F5, 0x0108FAFF, 0xF3F41417, 0x05201B1A);
	r3 = D(r3, s0_0_2, 0x02F3FFE3, 0x1317EA02, 0xF6031802, 0xF00C0EFF);
	r4 = D(r4, s0_0_2, 0xF000FAF6, 0x04F202F6, 0x032FE306, 0x1D0A0112);
	r5 = D(r5, s0_0_2, 0x07FA090E, 0x080EF90C, 0x022504F5, 0x0AEF0403);
	r6 = D(r6, s0_0_2, 0x0619020E, 0x0701EE15, 0x1E1B010A, 0xF0FAFFFF);
	r7 = D(r7, s0_0_2, 0x041404F9, 0x0135F002, 0xEAFC08F4, 0xEDF90214);
	r0 = D(r0, s0_1_0, 0x051205F7, 0xFDF3F3FA, 0x091416FF, 0x05030A1B);
	r1 = D(r1, s0_1_0, 0xFCFA0806, 0xFD130509, 0x1814E4E7, 0x28EDE808);
	r2 = D(r2, s0_1_0, 0xEFDA0AFA, 0x0DF9121A, 0xFE0E0A07, 0x020712FF);
	r3 = D(r3, s0_1_0, 0xFE42F221, 0x08FFF4FD, 0xEC140B02, 0x01F5FC04);
	r4 = D(r4, s0_1_0, 0x0FFC1708, 0x0C370810, 0x040E15F4, 0x0930071C);
	r5 = D(r5, s0_1_0, 0x0212ED05, 0x0301FAFB, 0x00041410, 0x0D001101);
	r6 = D(r6, s0_1_0, 0x00F0E70B, 0xE509FF09, 0xDB1F0001, 0x1AD20409);
	r7 = D(r7, s0_1_0, 0x0C01ECF6, 0x0C1AF2FD, 0x0B130915, 0x06FA001B);
	r0 = D(r0, s0_1_1, 0xEEF5F400, 0x14260BF9, 0xFFDA05C5, 0x0D12F8F2);
	r1 = D(r1, s0_1_1, 0xE6D60B0E, 0xEB0B03F5, 0xE5080416, 0xFBC4F9E7);
	r2 = D(r2, s0_1_1, 0xF716FF14, 0x140A2CF3, 0x17EF2AD9, 0x0B0121DD);
	r3 = D(r3, s0_1_1, 0xF7100D18, 0x1C06051E, 0x03F901EC, 0xF100FEF3);
	r4 = D(r4, s0_1_1, 0x1C17FB00, 0xE8E10DED, 0x022CF224, 0x152FF9F2);
	r5 = D(r5, s0_1_1, 0xFD021003, 0xF50F0F20, 0x1400F803, 0xFDEE0011);
	r6 = D(r6, s0_1_1, 0x0A1501F2, 0x1307FC2A, 0xFBED05B4, 0x2900FAE9);
	r7 = D(r7, s0_1_1, 0xF6EC1112, 0x0AAC0F05, 0x071B0311, 0x062105EE);
	r0 = D(r0, s0_1_2, 0xDFFBF5E8, 0x0EFEFF05, 0x12D6E50D, 0x0618FF00);
	r1 = D(r1, s0_1_2, 0xFC0705F3, 0xED0AFBE7, 0x0E15E8F7, 0x0AE507FA);
	r2 = D(r2, s0_1_2, 0x04E50FFA, 0x0308E00B, 0x10EDE300, 0xE118E8F3);
	r3 = D(r3, s0_1_2, 0xF41A0DDA, 0xFFFD0902, 0xF4FF0AFC, 0x01F40403);
	r4 = D(r4, s0_1_2, 0x080F091C, 0x05E4C80B, 0xFD00F209, 0xD3EDEDEC);
	r5 = D(r5, s0_1_2, 0xF8050B04, 0x0F1E1FF9, 0xFA030DF7, 0x0DF6FFF9);
	r6 = D(r6, s0_1_2, 0xF8FC0206, 0x1110FDFA, 0xD1F4FA0D, 0x05C50FF7);
	r7 = D(r7, s0_1_2, 0xFFEDDD02, 0x0418EA10, 0xF20B1107, 0x0A04FCF8);
	r0 = D(r0, s0_2_0, 0x10F00206, 0x00090604, 0x08F91AEF, 0xF1E0FD0A);
	r1 = D(r1, s0_2_0, 0x2E05F1EC, 0x0BFFEE08, 0xFAE10ADD, 0x111EF412);
	r2 = D(r2, s0_2_0, 0x16F80C0B, 0x0614EBFC, 0x0909FF01, 0xFA11E2F5);
	r3 = D(r3, s0_2_0, 0xF30FC8E8, 0xF60002F0, 0xFE0C0C04, 0x02F10209);
	r4 = D(r4, s0_2_0, 0xFDF7051D, 0x12D8DB0F, 0xFBFB0BEE, 0xFFF201F0);
	r5 = D(r5, s0_2_0, 0x02E8F90C, 0x12F0F6F5, 0xF6F7EA00, 0x01FA0510);
	r6 = D(r6, s0_2_0, 0xEF0D0B07, 0x010113F8, 0x1113040D, 0xF91B1811);
	r7 = D(r7, s0_2_0, 0xFB0B0901, 0x030DF90D, 0xFDF302EB, 0x0309F5FE);
	r0 = D(r0, s0_2_1, 0xF509F90E, 0xFA0A0AFE, 0xFFF20512, 0x0AFE12FD);
	r1 = D(r1, s0_2_1, 0xE3F50209, 0xF80DEC34, 0x01FAEF11, 0xF2EAF7F6);
	r2 = D(r2, s0_2_1, 0x042AF614, 0x15FDE10A, 0xF70AF607, 0xFBEF05F3);
	r3 = D(r3, s0_2_1, 0xFD1609FA, 0x07FEF9EF, 0x0224E6FF, 0x0215F907);
	r4 = D(r4, s0_2_1, 0xF5F0EDF8, 0x2A2BFC01, 0x2414EFF7, 0xEFFDF309);
	r5 = D(r5, s0_2_1, 0xE8EA0310, 0x0303FBE1, 0x19120909, 0xE902EF06);
	r6 = D(r6, s0_2_1, 0x0232FBF7, 0xFC091F0F, 0x0B23FF1C, 0x0319F815);
	r7 = D(r7, s0_2_1, 0x00F10600, 0x0FDBED12, 0x0906FFE1, 0xF3EA1300);
	r0 = D(r0, s0_2_2, 0xFB0A071A, 0x0908040A, 0xFEEFED00, 0x0406F20E);
	r1 = D(r1, s0_2_2, 0xE90C0DF7, 0x00F6200C, 0xE21F010B, 0x072F040F);
	r2 = D(r2, s0_2_2, 0x0A05F3F6, 0x04FF1910, 0xF8120804, 0x17FB020A);
	r3 = D(r3, s0_2_2, 0x14EE070E, 0x03030105, 0x04FB030E, 0x0E0D02FC);
	r4 = D(r4, s0_2_2, 0xFA04F2EF, 0x0004F1F5, 0xF7F80E04, 0xFCEAF215);
	r5 = D(r5, s0_2_2, 0xF5FFF803, 0x1212080F, 0xF506EE0A, 0x00FBEF00);
	r6 = D(r6, s0_2_2, 0xEFDC0AF7, 0xDDEBFEFE, 0x100E2AFE, 0xF7FFE913);
	r7 = D(r7, s0_2_2, 0x0708FCFC, 0xEE0EF7FE, 0x04120C07, 0xFBEFE008);
	r0 = D(r0, s1_0_0, 0x0407F915, 0x06EBF614, 0xECF322F4, 0xFA0007F2);
	r1 = D(r1, s1_0_0, 0xF609E8F8, 0x02FCF9F5, 0xFD01FF08, 0xEB0BD80A);
	r2 = D(r2, s1_0_0, 0xF00109E5, 0xEEE0EA06, 0xF7080AE5, 0x0A141FD2);
	r3 = D(r3, s1_0_0, 0x141FEA19, 0x0806FE09, 0x07FAF250, 0x03FE0705);
	r4 = D(r4, s1_0_0, 0x02E5EF0C, 0xEBF4FDDF, 0x0108FA09, 0x04D6EEFC);
	r5 = D(r5, s1_0_0, 0xFDED0112, 0x1009EFFA, 0x0DEC1606, 0xFC04F2E9);
	r6 = D(r6, s1_0_0, 0x0EE81033, 0xF214F60C, 0x030B0892, 0xF9180700);
	r7 = D(r7, s1_0_0, 0x07FF0B17, 0x0620EE26, 0xFBFFF9E6, 0x0A120CC6);
	r0 = D(r0, s1_0_1, 0xF400E5E6, 0xFF24F920, 0x07F30314, 0xFF0D07EC);
	r1 = D(r1, s1_0_1, 0x0106FCE8, 0xF5F1F4F5, 0x012BE913, 0xDB052321);
	r2 = D(r2, s1_0_1, 0x0300F809, 0xEE160320, 0xDA01FF20, 0xFE160415);
	r3 = D(r3, s1_0_1, 0xF5000909, 0xF90C130A, 0x1006F00F, 0x08050503);
	r4 = D(r4, s1_0_1, 0x0AD917DF, 0xEE130B2A, 0x0123FA03, 0xF5AFEAE2);
	r5 = D(r5, s1_0_1, 0xFDEFFE29, 0xF5F4FCF9, 0x030E1914, 0x0AFB13F4);
	r6 = D(r6, s1_0_1, 0xC0F6F30E, 0x0ACD0EBF, 0xECD7107A, 0x080309ED);
	r7 = D(r7, s1_0_1, 0x01F7ECE7, 0xFEE7E4D3, 0xDF071415, 0x04EE18ED);
	r0 = D(r0, s1_0_2, 0x0305081A, 0x17030AF6, 0xEB0311ED, 0x02F9F102);
	r1 = D(r1, s1_0_2, 0xEAE600FF, 0xFD03FDF3, 0x04FF060E, 0xE513FBFA);
	r2 = D(r2, s1_0_2, 0x0DFAFC04, 0xDD18F124, 0x13FB0304, 0x06DD0BA2);
	r3 = D(r3, s1_0_2, 0xF80608F9, 0x020905F3, 0x14041004, 0x03010A0E);
	r4 = D(r4, s1_0_2, 0xFCF7FE0B, 0xF005E81C, 0xFAF204EA, 0xD4EC1B0E);
	r5 = D(r5, s1_0_2, 0x03090912, 0x00F811F4, 0x0CFF0F0B, 0x03EF0206);
	r6 = D(r6, s1_0_2, 0xDEFEF3D4, 0x0A0AEA21, 0xF6DBE9B0, 0x16010C00);
	r7 = D(r7, s1_0_2, 0x12FD00FB, 0xF6050B06, 0xF5091100, 0xF105FCF5);
	r0 = D(r0, s1_1_0, 0x05F7FB16, 0x04FA1003, 0x04F0EF06, 0x070F0311);
	r1 = D(r1, s1_1_0, 0xFBD009E2, 0xFE080815, 0xFDE81C16, 0xF0EEFCD6);
	r2 = D(r2, s1_1_0, 0xF90F1EFC, 0xFDF2E027, 0xFDF9DE0E, 0xF6FFE11A);
	r3 = D(r3, s1_1_0, 0x0102ED3B, 0x0A0D02F7, 0xF8050AE0, 0x0703F511);
	r4 = D(r4, s1_1_0, 0xFAD70626, 0xF2D3A8E0, 0x02E5FE1A, 0x0BEB040E);
	r5 = D(r5, s1_1_0, 0xFBE4F5EB, 0x1914FFC9, 0x11F90701, 0xF8EBF91A);
	r6 = D(r6, s1_1_0, 0x0515F114, 0x0EF82029, 0xF9FA0AE7, 0xFBFDD7F2);
	r7 = D(r7, s1_1_0, 0xF4FAFBF2, 0x25F82EA1, 0xEF12FF00, 0x051B0C17);
	r0 = D(r0, s1_1_1, 0xEA0B0022, 0x15FD0B08, 0x0D08F2ED, 0xF7F802F7);
	r1 = D(r1, s1_1_1, 0x291F0122, 0xEF37ED0A, 0x1F1F0514, 0x90FC04F3);
	r2 = D(r2, s1_1_1, 0x0A17E448, 0x0FEAF83A, 0xF82001F7, 0xE3FA1BF4);
	r3 = D(r3, s1_1_1, 0x0EF01E0E, 0xF007FF11, 0xF6080D3D, 0x0A080219);
	r4 = D(r4, s1_1_1, 0x08D3F429, 0xFEF5150E, 0xEFE40514, 0xD7F40423);
	r5 = D(r5, s1_1_1, 0x0B1BEC08, 0x06E21711, 0xEFD0110D, 0xF80E1BFF);
	r6 = D(r6, s1_1_1, 0xD78701D8, 0x19EA1803, 0x16DE042E, 0x1FFEFCE5);
	r7 = D(r7, s1_1_1, 0x0B0DFA27, 0xDEECDDF4, 0x81FFFBF5, 0xFEE001FF);
	r0 = D(r0, s1_1_2, 0x0F2D0711, 0x240F070C, 0xEA03EC15, 0xFD01FA02);
	r1 = D(r1, s1_1_2, 0x06091807, 0xF906071B, 0x0E0808D4, 0xDF011707);
	r2 = D(r2, s1_1_2, 0x0DF40AF9, 0xEB0EF50A, 0x000201FB, 0x0303F027);
	r3 = D(r3, s1_1_2, 0xFC031401, 0x1D170212, 0x06F8FA03, 0xF801F614);
	r4 = D(r4, s1_1_2, 0xF9E5F713, 0x0D170DE1, 0xF5000DFA, 0xF90012DB);
	r5 = D(r5, s1_1_2, 0xFBFD00F2, 0x16FEFFFB, 0x03F10CF1, 0x03F902FA);
	r6 = D(r6, s1_1_2, 0xEEF4F5DF, 0xF8E40B15, 0xE4D20018, 0x26000B18);
	r7 = D(r7, s1_1_2, 0xCBF6FE0C, 0xFF0E2003, 0xDC15FDF9, 0x0611F611);
	r0 = D(r0, s1_2_0, 0x0305F10C, 0xF7F50B01, 0xFE050000, 0xFCFC10F3);
	r1 = D(r1, s1_2_0, 0xFBF3F90F, 0xFB1C17FB, 0x13FB0532, 0xBFF0EBD6);
	r2 = D(r2, s1_2_0, 0x03F9122D, 0x0303EC02, 0xFB01F612, 0xFDF7030C);
	r3 = D(r3, s1_2_0, 0xF70604AE, 0xF7FCEDEA, 0x07FEE911, 0x0005FFFF);
	r4 = D(r4, s1_2_0, 0x0400FD04, 0xFCE2F910, 0x00121CFC, 0x08E2F4F2);
	r5 = D(r5, s1_2_0, 0x0100F0D9, 0xFFE5F5EA, 0x08F4F5E5, 0x0710F1EC);
	r6 = D(r6, s1_2_0, 0x02F6DB18, 0x0BFBFB0C, 0x060CEAD3, 0x02EB001F);
	r7 = D(r7, s1_2_0, 0x05F5FAFC, 0xED10F203, 0xFAFDEA07, 0xF5F6F701);
	r0 = D(r0, s1_2_1, 0x09040CFE, 0x0B00EA27, 0x03FA0102, 0xF5F6FFFD);
	r1 = D(r1, s1_2_1, 0x1607EFEE, 0xF71EFC1E, 0xEA02F718, 0xD5050545);
	r2 = D(r2, s1_2_1, 0x0816EFF4, 0xF7050D0B, 0xEC06FA16, 0xFAED0BF9);
	r3 = D(r3, s1_2_1, 0xFBE9EFF9, 0x010215F9, 0x0402FE09, 0x1001FF06);
	r4 = D(r4, s1_2_1, 0x050B230C, 0x0FEB0CD9, 0x0A05130A, 0xFAFFD9FF);
	r5 = D(r5, s1_2_1, 0x050C01FA, 0x05F3F426, 0x0ED0EFF7, 0x0AF90A01);
	r6 = D(r6, s1_2_1, 0x10F815EF, 0x0401EB27, 0xEF191CEA, 0x040BF700);
	r7 = D(r7, s1_2_1, 0x04FF05EE, 0xF2FD0BE1, 0xC2F2120D, 0xF205F303);
	r0 = D(r0, s1_2_2, 0x0601090B, 0x0E050808, 0x17F9E605, 0x08F5EFF1);
	r1 = D(r1, s1_2_2, 0x05FD0909, 0xFC060401, 0xF9FCFA1B, 0xFA1112F3);
	r2 = D(r2, s1_2_2, 0xF4FAF401, 0xF204EC09, 0xFAFC02F5, 0x0B0DF4E2);
	r3 = D(r3, s1_2_2, 0xE5F60D03, 0xFFFEEFFE, 0x06F7FE1A, 0x0002F400);
	r4 = D(r4, s1_2_2, 0xFE05FB1B, 0xFA070241, 0xF40EEF11, 0xE111F100);
	r5 = D(r5, s1_2_2, 0x0B0BFA0C, 0x0CF2F7DB, 0x05E5FFFE, 0xEF0911F8);
	r6 = D(r6, s1_2_2, 0x0B0809F4, 0x05FFE703, 0xECE71427, 0xFCF4F010);
	r7 = D(r7, s1_2_2, 0xFDFD160B, 0x01FB240E, 0xEC0EFAF6, 0x00F6000C);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0CFC0715, 0xF50005F5, 0x18DEE701, 0x0CF9F602);
	r1 = D(r1, s0_0_0, 0xD7090D04, 0x02FCFFF9, 0xFCE1CD26, 0xF7071FEB);
	r2 = D(r2, s0_0_0, 0xF801F902, 0x09D72504, 0xF30B0A0A, 0xF8FC0613);
	r3 = D(r3, s0_0_0, 0x04173204, 0x020EF6F6, 0xF6010401, 0x03080104);
	r4 = D(r4, s0_0_0, 0xFA0704F9, 0x1D0BF706, 0xFAF2FD14, 0xF80C000A);
	r5 = D(r5, s0_0_0, 0xF90311F7, 0x020A03FC, 0x0BF6FF0A, 0x0208080D);
	r6 = D(r6, s0_0_0, 0xFE1102F2, 0x1F22EC05, 0x1D0A0809, 0x190806F4);
	r7 = D(r7, s0_0_0, 0xF00410F5, 0x020F04FA, 0xFB01E9F0, 0x07F61700);
	r0 = D(r0, s0_0_1, 0x06F1F805, 0xF10F0609, 0x1CFC2E19, 0x171402F6);
	r1 = D(r1, s0_0_1, 0x0BF2E908, 0xFD09F808, 0xE7FFF2EA, 0xEFF10D16);
	r2 = D(r2, s0_0_1, 0xF603E605, 0xE9EAF709, 0x201305ED, 0x1F210CFD);
	r3 = D(r3, s0_0_1, 0x020FE9E9, 0x0BFD16F4, 0x090B0909, 0xFDF80AFF);
	r4 = D(r4, s0_0_1, 0x14FD11FF, 0x11001AD9, 0xE90512FF, 0x1DFAD507);
	r5 = D(r5, s0_0_1, 0xF6F2FA13, 0xDDFFE105, 0x0C0E0C09, 0x00000C07);
	r6 = D(r6, s0_0_1, 0x0AD3EF2D, 0xF5E60FEF, 0x161D2524, 0xE61BFEEC);
	r7 = D(r7, s0_0_1, 0xFEEEFE02, 0xF8F213F0, 0x0E101509, 0x391107FD);
	r0 = D(r0, s0_0_2, 0x10EE09DE, 0xF8F90CF6, 0x140A0B07, 0x05F303EF);
	r1 = D(r1, s0_0_2, 0x28F9F6FA, 0xFEFF02F2, 0xFB05FAFE, 0x05FF1A20);
	r2 = D(r2, s0_0_2, 0x0904EA01, 0x01FAE718, 0xF709F907, 0x250F050A);
	r3 = D(r3, s0_0_2, 0x09F1E70E, 0xFE05F902, 0xF6F008E7, 0xFAF1050A);
	r4 = D(r4, s0_0_2, 0xF50A0000, 0xEE0FEB19, 0xC4FB1117, 0x0DF42433);
	r5 = D(r5, s0_0_2, 0xFC09FB1D, 0x1308F200, 0x281B0A25, 0xF8F9FDF4);
	r6 = D(r6, s0_0_2, 0x0EE6E422, 0x0BEDE8F3, 0xDCC8EA24, 0xFA01190A);
	r7 = D(r7, s0_0_2, 0x0EFF1101, 0x03EFF82C, 0xECFE10FC, 0xF50E0A08);
	r0 = D(r0, s0_1_0, 0xFDF80B0C, 0x0113F90E, 0x1708EC13, 0xFFF50203);
	r1 = D(r1, s0_1_0, 0xD2FE03FB, 0xF602FAEA, 0xC6DDF1F9, 0xE0F5F804);
	r2 = D(r2, s0_1_0, 0x00EE08F1, 0xEA06F104, 0xFCF2F7F5, 0x12F4D013);
	r3 = D(r3, s0_1_0, 0xF4231002, 0xF115EF22, 0xFB0BF41F, 0x0006F912);
	r4 = D(r4, s0_1_0, 0x01030708, 0x0C09000B, 0xEAF712FB, 0x0020240D);
	r5 = D(r5, s0_1_0, 0x0A0C0403, 0x11FA1803, 0xE1170FF6, 0x1011E7F9);
	r6 = D(r6, s0_1_0, 0x0DF306F6, 0xF2F5FDFE, 0xE302F303, 0x17EBD6E6);
	r7 = D(r7, s0_1_0, 0x07FB0D03, 0xD10DEC1C, 0x0A03F003, 0xECED1208);
	r0 = D(r0, s0_1_1, 0x0003020C, 0x06F1E70A, 0x24FFDCF6, 0xEC09FD05);
	r1 = D(r1, s0_1_1, 0xF5E7E830, 0xE40DF4F4, 0x0517F8DA, 0xD805F904);
	r2 = D(r2, s0_1_1, 0xD9F7F1FD, 0xE015C708, 0x0009EB1D, 0x1F21F8EE);
	r3 = D(r3, s0_1_1, 0xEA13F628, 0xF7F508F6, 0x0C18093E, 0xFBFD10EC);
	r4 = D(r4, s0_1_1, 0x0C0E170F, 0x1C0ACC05, 0xF0F525F8, 0x0320CB27);
	r5 = D(r5, s0_1_1, 0x1CEE0111, 0xF232FAF6, 0xE8C00422, 0xFCE4FB08);
	r6 = D(r6, s0_1_1, 0x1B07020D, 0x2C331825, 0xEFFC362C, 0xF0060125);
	r7 = D(r7, s0_1_1, 0x2207E403, 0xEDDD0F0A, 0xF71919E9, 0x0C09F61B);
	r0 = D(r0, s0_1_2, 0xFEFD1302, 0x05FF0B23, 0xD6F3181A, 0xFF03FB42);
	r1 = D(r1, s0_1_2, 0x1B0E19EC, 0xF3FBFDF2, 0x07F90A2B, 0xFDFD15FD);
	r2 = D(r2, s0_1_2, 0x1001FDE8, 0x00FCF41E, 0xF9270310, 0xEED9DB05);
	r3 = D(r3, s0_1_2, 0x19EB1525, 0xFDEDEF71, 0x07FCF90E, 0x05FF020A);
	r4 = D(r4, s0_1_2, 0x090DF6AA, 0xF414EBF6, 0x05DAFA09, 0xFC09F020);
	r5 = D(r5, s0_1_2, 0x0509F0F4, 0x0D0A10F0, 0xE51D0A21, 0x05F9F7F5);
	r6 = D(r6, s0_1_2, 0xFDD5FAA2, 0x0E07EB07, 0x0900E118, 0xEBEEFCF5);
	r7 = D(r7, s0_1_2, 0xFFFB08E5, 0xEDE6EC0E, 0xF714F24A, 0x0200FCD4);
	r0 = D(r0, s0_2_0, 0xF7FBFF03, 0xEAFF07DC, 0xE40605F5, 0x020700FF);
	r1 = D(r1, s0_2_0, 0xF2FD04FE, 0xED05051E, 0xFCF1F6F0, 0xDE1EF823);
	r2 = D(r2, s0_2_0, 0xFD2400FF, 0xD3E8E120, 0xF108F60F, 0xE9F3F102);
	r3 = D(r3, s0_2_0, 0xEE07FD02, 0x01F3F0F4, 0xF9F2F6F2, 0xFB0702DB);
	r4 = D(r4, s0_2_0, 0xFD10F707, 0xF7FE13FD, 0x13F6FBEB, 0x06F40204);
	r5 = D(r5, s0_2_0, 0x0605DC05, 0x08FB0EFD, 0x06000DF3, 0x0E020000);
	r6 = D(r6, s0_2_0, 0x13FE0D08, 0x06FD16FA, 0x09FB1C0E, 0x0C03F91B);
	r7 = D(r7, s0_2_0, 0x010404F7, 0xC4FDF712, 0x1B08D6F2, 0x05FA0E0D);
	r0 = D(r0, s0_2_1, 0x06000001, 0xF9EB0B06, 0x01FD1E40, 0x00120D04);
	r1 = D(r1, s0_2_1, 0x08FD120A, 0xE7FD0D00, 0xFFFD2B40, 0xEE29D7FC);
	r2 = D(r2, s0_2_1, 0xDA020AFD, 0xF11303FA, 0xFC12F4FB, 0xFB17FC23);
	r3 = D(r3, s0_2_1, 0x1A00F505, 0xFFDFE62C, 0xFB0FFB37, 0x0907FAF5);
	r4 = D(r4, s0_2_1, 0xFC03FDDA, 0x0403F601, 0x02061323, 0xFC08FA0A);
	r5 = D(r5, s0_2_1, 0x100AFF18, 0x06F6EA31, 0xFBFA06DC, 0x0B0CF924);
	r6 = D(r6, s0_2_1, 0x070CE4ED, 0xE408193D, 0xFC0811F4, 0x0D0EF515);
	r7 = D(r7, s0_2_1, 0x06FA14F0, 0x02EADFD5, 0xF90C17CD, 0xF9FFE9DD);
	r0 = D(r0, s0_2_2, 0x03051028, 0xFC070955, 0xF90808B9, 0xF9010517);
	r1 = D(r1, s0_2_2, 0x070A0C93, 0x071305F1, 0xFC05071D, 0xF9050224);
	r2 = D(r2, s0_2_2, 0x0F0EFB50, 0xFFE8070D, 0xFBF1FD2F, 0xFFFCFF46);
	r3 = D(r3, s0_2_2, 0x083DF524, 0x09FFF24A, 0xFC00F821, 0x06FF0024);
	r4 = D(r4, s0_2_2, 0x00020872, 0xF7FE18DF, 0x03E6F4D3, 0x10F8EF41);
	r5 = D(r5, s0_2_2, 0xFEFDF7EA, 0x0BECEDF0, 0xFC0DF8DC, 0x090A02BE);
	r6 = D(r6, s0_2_2, 0xFFFE0E36, 0xF0D5F96C, 0x02F3F0AD, 0xFAFB07C5);
	r7 = D(r7, s0_2_2, 0x03FFE8D8, 0xEE071DE7, 0xFC01EBC5, 0xF4F6FCF0);
	r0 = D(r0, s1_0_0, 0xFDFAF20B, 0x0D07FAFE, 0xEE1EF124, 0x0DFCFA12);
	r1 = D(r1, s1_0_0, 0x0F0C10F2, 0x0B0002FA, 0x03F7DCF7, 0xD8F30513);
	r2 = D(r2, s1_0_0, 0x0AF7E9FD, 0x030AFEF8, 0x000D0E01, 0x08080ADE);
	r3 = D(r3, s1_0_0, 0x1FE001E4, 0x0B020914, 0x14FB02FA, 0x030600F7);
	r4 = D(r4, s1_0_0, 0xFB00F707, 0xEE080FD3, 0xEAFCED01, 0x18DF1311);
	r5 = D(r5, s1_0_0, 0xFFEE07FF, 0x04EA05DF, 0x0307EFFE, 0x08121000);
	r6 = D(r6, s1_0_0, 0xECF2F5D5, 0x11DFFC00, 0xEBE5E027, 0x060A010C);
	r7 = D(r7, s1_0_0, 0xFA00FB15, 0xF6FC09DB, 0xFB06FCF2, 0xF3FBF811);
	r0 = D(r0, s1_0_1, 0xE9F7F4FD, 0x0D08050F, 0x15F40103, 0x0F0C05F6);
	r1 = D(r1, s1_0_1, 0x09120EF7, 0xFEFAFD07, 0x12F3F7F1, 0xF3050122);
	r2 = D(r2, s1_0_1, 0x12EEE90A, 0xFF1906FB, 0xE2F4FEF0, 0x22F31BE0);
	r3 = D(r3, s1_0_1, 0x1214FD24, 0x0D060DF5, 0xFA090F05, 0x02FF0A00);
	r4 = D(r4, s1_0_1, 0xF1F70724, 0xF90A0510, 0xF91DF8DD, 0xFE0AF5CA);
	r5 = D(r5, s1_0_1, 0x09FAFB00, 0xFBFA010E, 0xFF18FB0D, 0x090AFB11);
	r6 = D(r6, s1_0_1, 0x0904F1E4, 0x01FDDC29, 0x120F1AFD, 0xF5060B11);
	r7 = D(r7, s1_0_1, 0x000C03EF, 0xF6F2F21F, 0x090407E9, 0xE3FE1117);
	r0 = D(r0, s1_0_2, 0x12F5F317, 0xFA01FEFD, 0xFF0BFA03, 0xF2F70407);
	r1 = D(r1, s1_0_2, 0xF705FA09, 0x01FBF807, 0x071310F1, 0x070F0807);
	r2 = D(r2, s1_0_2, 0xFA12F309, 0xFC0C0D07, 0xF6ED01F5, 0xD5F8FEF7);
	r3 = D(r3, s1_0_2, 0x04210D13, 0x1DFEF6EE, 0xF8FCFD07, 0x0001FC03);
	r4 = D(r4, s1_0_2, 0xF21C0E05, 0x13FC0408, 0x05F8DF31, 0x05F110F0);
	r5 = D(r5, s1_0_2, 0xFDEF090D, 0xF6F1FFEE, 0x05071301, 0x0200F610);
	r6 = D(r6, s1_0_2, 0xED00EFD4, 0xF111F8E7, 0xE402EBDC, 0x12010AF2);
	r7 = D(r7, s1_0_2, 0xFA1205A0, 0xF8F1FB02, 0xF711FE20, 0xFDF304DB);
	r0 = D(r0, s1_1_0, 0xFDF9FCEE, 0xEE10FDF9, 0x10F7FFE0, 0x100B0607);
	r1 = D(r1, s1_1_0, 0x09010B46, 0x0201FBF3, 0x09FFF7D8, 0xEDF5001D);
	r2 = D(r2, s1_1_0, 0x02EBECF7, 0xF81D0D1B, 0x0C110107, 0x0AFD0029);
	r3 = D(r3, s1_1_0, 0xF3022805, 0xF4FB0305, 0xFE04FF0B, 0xFB0300FF);
	r4 = D(r4, s1_1_0, 0x0FF701F1, 0x03EFFA23, 0xF90CFBF6, 0xF6FD0206);
	r5 = D(r5, s1_1_0, 0x0D0B0B04, 0xF4F1FE01, 0x0411EFF5, 0xEB040EF4);
	r6 = D(r6, s1_1_0, 0x27210714, 0xFBE702E9, 0x132102EF, 0x1AFE0B0F);
	r7 = D(r7, s1_1_0, 0xFB08F11A, 0x020BF129, 0xF11EFC17, 0x040FF7E9);
	r0 = D(r0, s1_1_1, 0x02170C02, 0xF7FAFC0C, 0x17D00D1D, 0xF808FE13);
	r1 = D(r1, s1_1_1, 0x07ED0303, 0xFB031405, 0xFEF9F52F, 0x0E01F9DE);
	r2 = D(r2, s1_1_1, 0xE8F0DF0B, 0x1513361E, 0x00EA09FC, 0x1DC41000);
	r3 = D(r3, s1_1_1, 0xDBE5F329, 0x0F20F911, 0xF20AEF02, 0xFAF70B09);
	r4 = D(r4, s1_1_1, 0xFB8B0201, 0x0ED30CFC, 0xEE278F07, 0x07E4FF03);
	r5 = D(r5, s1_1_1, 0xEDF00608, 0xEFF90F12, 0x0B1CB42E, 0xFF380304);
	r6 = D(r6, s1_1_1, 0x0F0ABC1A, 0x24A2E1F0, 0x08D10F0C, 0xDFEC2DEE);
	r7 = D(r7, s1_1_1, 0x18F11BC8, 0xF712C500, 0x030E10C4, 0x10021AEF);
	r0 = D(r0, s1_1_2, 0xF2F3F203, 0x00EB02DE, 0xE2D60D29, 0xE7F11200);
	r1 = D(r1, s1_1_2, 0xE2000DEE, 0x020F03E1, 0x102104E3, 0x06F921DA);
	r2 = D(r2, s1_1_2, 0xF20AF4F1, 0x0807F0ED, 0xEBFC0D08, 0x07EC050F);
	r3 = D(r3, s1_1_2, 0xEFF703F7, 0x0CED0D02, 0xFB0405E8, 0x02F8FA04);
	r4 = D(r4, s1_1_2, 0xFF100CFC, 0xE3081606, 0xE912EB04, 0x1CFFF7FE);
	r5 = D(r5, s1_1_2, 0xF1F41125, 0x19FDF537, 0x0C1520FA, 0xECFCFE02);
	r6 = D(r6, s1_1_2, 0xF0F6E9F4, 0xF2E9F44C, 0x0927F5E8, 0x0A1E0535);
	r7 = D(r7, s1_1_2, 0x1801F3D1, 0x02FC140C, 0x001607EA, 0xEF08FC06);
	r0 = D(r0, s1_2_0, 0x0FFD00FD, 0xF41005F4, 0x05FC1604, 0x13F3F201);
	r1 = D(r1, s1_2_0, 0xFC05EEF4, 0xF90BFC01, 0xDEE8D207, 0x0AF0D90C);
	r2 = D(r2, s1_2_0, 0xFEFD0BF9, 0x0A03EEF6, 0xE00319FC, 0xE20704FA);
	r3 = D(r3, s1_2_0, 0x00FBF9F5, 0x11EAF902, 0xF6FC0302, 0xFBF50501);
	r4 = D(r4, s1_2_0, 0x10150709, 0x13030104, 0x1BEE07EE, 0x1111131F);
	r5 = D(r5, s1_2_0, 0xF3010003, 0x20FDEE04, 0x0EF410D5, 0x0A071503);
	r6 = D(r6, s1_2_0, 0x03E30102, 0xF91718E8, 0x05EB0EED, 0xF7F40D04);
	r7 = D(r7, s1_2_0, 0x0007000A, 0xE404DCF1, 0x01F8F301, 0x1CED070E);
	r0 = D(r0, s1_2_1, 0xE51DF3FD, 0xF2F20EFF, 0xF9050CE7, 0x0208F9F8);
	r1 = D(r1, s1_2_1, 0x06013A07, 0xE910F30B, 0xF50200FE, 0xD71C0FF4);
	r2 = D(r2, s1_2_1, 0x0000FAFA, 0x1505E600, 0x0C01F2FF, 0xE4050706);
	r3 = D(r3, s1_2_1, 0x0201F7EA, 0xFFF1DBF7, 0x0D0C05F6, 0x0200ECFC);
	r4 = D(r4, s1_2_1, 0xF509FDF3, 0xC012EBF1, 0x07EFF2F9, 0xEC15D60F);
	r5 = D(r5, s1_2_1, 0x0EF3EEFC, 0x16F00B10, 0x0018BE08, 0x0DFE1003);
	r6 = D(r6, s1_2_1, 0x0FFC0DFF, 0xFC16DD0F, 0x0608361F, 0xE3F110FD);
	r7 = D(r7, s1_2_1, 0xF50818F9, 0xFA160E0A, 0x0B00EEF7, 0x19E700FE);
	r0 = D(r0, s1_2_2, 0x070512FE, 0x080400F5, 0xFF07E8F1, 0xF3F4FCFF);
	r1 = D(r1, s1_2_2, 0xFEFC2501, 0xF70AE601, 0x0F0A15EF, 0x0BFE26EE);
	r2 = D(r2, s1_2_2, 0xFD15F5F3, 0x0C1CFF10, 0x07F0F8FF, 0xEC001C04);
	r3 = D(r3, s1_2_2, 0xE5110E03, 0x12FBFD00, 0xF91001FF, 0xFAFB0DFA);
	r4 = D(r4, s1_2_2, 0x02000106, 0x180EFD04, 0x09FFF60F, 0x0900F2FF);
	r5 = D(r5, s1_2_2, 0xFCF4F500, 0x04F90C02, 0x02F2071A, 0xF90B01FA);
	r6 = D(r6, s1_2_2, 0x0D0B1109, 0xF6F5F207, 0xFE030511, 0x09E9FFF7);
	r7 = D(r7, s1_2_2, 0xF90BFCF7, 0x100921FC, 0x13001015, 0xF9F5F616);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-1.211e-04, 2.845e-04, -4.526e-03, -2.020e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(1.461e-03, 4.467e-02, -5.195e-03, 7.726e-03);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(7.691e-02, -3.372e-02, 2.202e-02, 2.350e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-3.349e-02, -5.171e-03, -2.046e-01, 1.294e-01);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-1.228e-02, 1.769e-03, -8.034e-03, 3.314e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(8.960e-02, -1.652e-02, 1.237e-04, 2.967e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(2.496e-02, 1.882e-02, -1.528e-02, -4.034e-03);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-1.047e-02, 3.035e-02, -1.580e-03, 1.035e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-6x32-BILINEAR-MPV-NVL-conv3
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x02FCF7EB, 0x14F902F3, 0x10FA040E, 0xF4F5020C);
	r1 = D(r1, s0_0_0, 0xFBFA0613, 0xF7FA00F6, 0xF6050A0C, 0xDF0E2711);
	r2 = D(r2, s0_0_0, 0xF7100527, 0x0202E4EE, 0xFCFF0B05, 0xFDFDE0F5);
	r3 = D(r3, s0_0_0, 0x0407EFFF, 0x1EFF110A, 0x0006FB02, 0xD902EA05);
	r4 = D(r4, s0_0_0, 0x08080A0C, 0x03F90F10, 0x210203F9, 0xFD070DFB);
	r5 = D(r5, s0_0_0, 0xFD0505EB, 0xF607FC09, 0xF7060AFD, 0x0EFD090E);
	r6 = D(r6, s0_0_0, 0xF302EF05, 0xFBFFF209, 0x130103FB, 0xF8EAEED9);
	r7 = D(r7, s0_0_0, 0xF4EB13F8, 0x1701EC0A, 0x09011FF3, 0xF1FE04F9);
	r0 = D(r0, s0_0_1, 0xFFFF0AFE, 0xF7FF1413, 0xFC00E41A, 0x0401F91D);
	r1 = D(r1, s0_0_1, 0xE1FB1AD8, 0x13FEFC06, 0xF4FB05E5, 0xF8F512FB);
	r2 = D(r2, s0_0_1, 0xF9FBFB1B, 0x07DC071C, 0xF9F30E06, 0x09EFDAE8);
	r3 = D(r3, s0_0_1, 0xEBFEEEFF, 0xF1E50AE9, 0x08020C16, 0x171007E8);
	r4 = D(r4, s0_0_1, 0x0AFC0407, 0xEDF9F9ED, 0x09FDF907, 0x100815F2);
	r5 = D(r5, s0_0_1, 0xF7F3FA09, 0x0EF6FF05, 0xFD0A0707, 0x0BFA02FE);
	r6 = D(r6, s0_0_1, 0xED0303EC, 0x040D060C, 0x04F9F8F5, 0x13FCEA09);
	r7 = D(r7, s0_0_1, 0x03F0FFFC, 0xFBEE0405, 0xE30EF8F6, 0xF401F6E6);
	r0 = D(r0, s0_0_2, 0x1AF50CF4, 0x10010E03, 0x0D11F6F1, 0xF7020710);
	r1 = D(r1, s0_0_2, 0x1BEFF500, 0x0BF9FB03, 0xFB0A0CF7, 0x05F30E08);
	r2 = D(r2, s0_0_2, 0xFE0305F5, 0x19F30118, 0xFE0609FC, 0xF8EEF908);
	r3 = D(r3, s0_0_2, 0x1EF80FF2, 0x1210FBFE, 0x080CFB0E, 0xFFFD0108);
	r4 = D(r4, s0_0_2, 0x27F5FFFD, 0xFCFE020C, 0xEAFDDEF3, 0x1404FA0C);
	r5 = D(r5, s0_0_2, 0xF808F3FF, 0xFEFE0AFA, 0xF1FFFE06, 0x0D06F203);
	r6 = D(r6, s0_0_2, 0xEAF9FFFD, 0x22040D0E, 0x05FDFAFA, 0x03DB12FD);
	r7 = D(r7, s0_0_2, 0xFED61CFB, 0x03F40EFA, 0xECE8F10C, 0xEEF902FF);
	r0 = D(r0, s0_1_0, 0xF7E9FF06, 0xF60003F1, 0xF107FC0E, 0x0CF9F6ED);
	r1 = D(r1, s0_1_0, 0x11EA0511, 0xF205FA1C, 0x00E402FE, 0x05F1E603);
	r2 = D(r2, s0_1_0, 0x100D01ED, 0xEEF0CB04, 0xFB1107F8, 0xF90DDF06);
	r3 = D(r3, s0_1_0, 0x12E1F1F1, 0x00DBFE04, 0xEB031403, 0x1E07F605);
	r4 = D(r4, s0_1_0, 0xFAF7E5E3, 0xF1F0230C, 0xF4F90FF9, 0x0F02DCFC);
	r5 = D(r5, s0_1_0, 0xFEFA0202, 0x0105040F, 0xEE06F8F8, 0x03F926FC);
	r6 = D(r6, s0_1_0, 0x191006F6, 0x0C06F914, 0xFEFC1AFF, 0xE3FDF411);
	r7 = D(r7, s0_1_0, 0x11CA0122, 0x1BFA0502, 0xFBFF0512, 0x0BFB090C);
	r0 = D(r0, s0_1_1, 0x06022212, 0xF9ED0612, 0x040BFAF8, 0x0F0819F3);
	r1 = D(r1, s0_1_1, 0x0FFE0A0A, 0x04120303, 0x220D2321, 0xFACCF91C);
	r2 = D(r2, s0_1_1, 0xF0DDF0F5, 0x0659E117, 0xEDDF0A0A, 0x14EDC11D);
	r3 = D(r3, s0_1_1, 0x13B4D921, 0xF9E3E619, 0xF70F1104, 0xE4091FFA);
	r4 = D(r4, s0_1_1, 0xF91102E4, 0xFAD70EE8, 0xF90FFD00, 0x16040305);
	r5 = D(r5, s0_1_1, 0x08F1F408, 0x02EF0712, 0x1B07180C, 0xF30A1AF5);
	r6 = D(r6, s0_1_1, 0x0903F8FE, 0xF80AF0F6, 0xFEF80904, 0x0500E00C);
	r7 = D(r7, s0_1_1, 0x0DE4D400, 0x131809F7, 0x08BCF2FC, 0x1EFEEF02);
	r0 = D(r0, s0_1_2, 0x1306FFFE, 0x09F1F5F9, 0xFCF41EF3, 0xFA17F9F4);
	r1 = D(r1, s0_1_2, 0xEEE7E5F0, 0x09FC0103, 0x01E90404, 0xF9E1F9FC);
	r2 = D(r2, s0_1_2, 0xEC1AD7E3, 0x18CAF703, 0x06FEF7FB, 0x0ACC0606);
	r3 = D(r3, s0_1_2, 0x12C4C6E6, 0x0CF70D21, 0x0312EC0E, 0xEEFF0BFC);
	r4 = D(r4, s0_1_2, 0xFD121203, 0x17FEF50E, 0x0407F306, 0xE5110607);
	r5 = D(r5, s0_1_2, 0x07F2010C, 0x0203F4FC, 0xFBFE11FA, 0x03F70405);
	r6 = D(r6, s0_1_2, 0x1DFC061A, 0x0BF7F600, 0xFEFB0EFE, 0x03EC0802);
	r7 = D(r7, s0_1_2, 0x02810109, 0x0105FCFF, 0x0AC8DB05, 0x0E0F2202);
	r0 = D(r0, s0_2_0, 0xE4E0F9F6, 0x0BF6032B, 0x1105F4C3, 0x0DF5F803);
	r1 = D(r1, s0_2_0, 0xFA03F211, 0x02F7F0FD, 0x06F6030E, 0x0DE70C14);
	r2 = D(r2, s0_2_0, 0xE30F0022, 0xDCE41006, 0xF5F3EF00, 0x02FFFF09);
	r3 = D(r3, s0_2_0, 0xF001FBEE, 0xF7F2F40A, 0xFD1B0113, 0xFF1CEDFE);
	r4 = D(r4, s0_2_0, 0xD4E6E81F, 0xF4FEFEF2, 0x07FF06ED, 0xF815F900);
	r5 = D(r5, s0_2_0, 0xFDFB01F5, 0xF90D0204, 0xF7FA04F2, 0x04080EFA);
	r6 = D(r6, s0_2_0, 0x0902FC12, 0xF7FCF907, 0xFB061001, 0x01FDFEFB);
	r7 = D(r7, s0_2_0, 0x0BD1F70B, 0x09F9EF04, 0xF4E409FF, 0x0CFF0605);
	r0 = D(r0, s0_2_1, 0xFD04040A, 0x15FD0D10, 0xCB04FAFA, 0xE800E4F5);
	r1 = D(r1, s0_2_1, 0x07F3F7F7, 0x0501F6F2, 0x19F3F813, 0x01D81127);
	r2 = D(r2, s0_2_1, 0xF208F213, 0x0307FC0D, 0xFDFEF505, 0x0B1BEC0E);
	r3 = D(r3, s0_2_1, 0xF701F024, 0xF603F81C, 0xF40713FC, 0xEDFD0109);
	r4 = D(r4, s0_2_1, 0xC91F0F03, 0x12FCE6F5, 0x09F7E50D, 0x07262116);
	r5 = D(r5, s0_2_1, 0x0504070E, 0xFFFCF008, 0x06F2FFF5, 0x0CE6EE09);
	r6 = D(r6, s0_2_1, 0xE3F616F7, 0xF30F07FB, 0x0405FF07, 0x03FDDB05);
	r7 = D(r7, s0_2_1, 0x0BDBEACA, 0x0C04FF03, 0xEEC10611, 0x08F509FE);
	r0 = D(r0, s0_2_2, 0x050FFDF5, 0xEEF700F8, 0xF83BFFEB, 0xF10B0CFF);
	r1 = D(r1, s0_2_2, 0xFBF90500, 0xF804FCFA, 0xFDEDFBFF, 0x0EE40306);
	r2 = D(r2, s0_2_2, 0x1F010702, 0xFDFEF2FC, 0x03F80805, 0xF4D8FE04);
	r3 = D(r3, s0_2_2, 0xECEA07FD, 0x0EE7F406, 0x0F0C07F5, 0x14F1FC07);
	r4 = D(r4, s0_2_2, 0xFD1C29F6, 0xF10602F9, 0x24FBFEFB, 0xE912F209);
	r5 = D(r5, s0_2_2, 0x0606080C, 0xFAFC0311, 0xF8FE0AF3, 0xEFF500F4);
	r6 = D(r6, s0_2_2, 0xFE03FC15, 0xFC0A0A02, 0xFBFCF9FD, 0xF0F20304);
	r7 = D(r7, s0_2_2, 0x0FD11819, 0x04040001, 0x15F71019, 0x0CF6F9FE);
	r0 = D(r0, s1_0_0, 0xF506F811, 0x0209E2F0, 0x0C05FEFC, 0xF7090008);
	r1 = D(r1, s1_0_0, 0x161704FC, 0x0100F613, 0x0603F0F9, 0x02FBEA08);
	r2 = D(r2, s1_0_0, 0x22FA180D, 0xDCF5E1FA, 0xFA070D15, 0xE5F303E1);
	r3 = D(r3, s1_0_0, 0xFDF2EB17, 0xF7F10100, 0x11FC0D04, 0xF416F701);
	r4 = D(r4, s1_0_0, 0x3817E8E5, 0xFFF70A02, 0x1C0E06FF, 0x0F0307FB);
	r5 = D(r5, s1_0_0, 0x05050FF7, 0xFD10FB02, 0x0705F7FA, 0x13F0F512);
	r6 = D(r6, s1_0_0, 0xFCF6FF06, 0xFA10FB02, 0xF6F6F1EB, 0xDEF4F315);
	r7 = D(r7, s1_0_0, 0x0207F8F1, 0x010A0D01, 0xF724FFF7, 0x0409F5EE);
	r0 = D(r0, s1_0_1, 0x02FFFBFC, 0x12EFFDF7, 0x17FCF8E5, 0x04FD251B);
	r1 = D(r1, s1_0_1, 0x1723E9FF, 0xF9F5FB0E, 0x13E9F404, 0xFAF7F11F);
	r2 = D(r2, s1_0_1, 0xFBFD0D13, 0x03FD12E6, 0x060F3513, 0xE004E804);
	r3 = D(r3, s1_0_1, 0xE2010536, 0x01E3FF1E, 0x211911ED, 0x12EFEFE8);
	r4 = D(r4, s1_0_1, 0xFA050DED, 0xF011F4FA, 0x0716F1E3, 0xECED2502);
	r5 = D(r5, s1_0_1, 0xF90509EA, 0x0C0B14F9, 0x000122FC, 0x1516EFF6);
	r6 = D(r6, s1_0_1, 0xEA0CF514, 0xFA0ED8F8, 0x0F04E7E8, 0xDC07FD09);
	r7 = D(r7, s1_0_1, 0xFBF2FBEC, 0x03060407, 0xFAD8EE9C, 0xFBFBF4FD);
	r0 = D(r0, s1_0_2, 0x0A020617, 0xEB0EF5DC, 0x0F0F1AEF, 0xF911FFD5);
	r1 = D(r1, s1_0_2, 0x0003FA17, 0x10F908F8, 0x1CF80804, 0x07FDF204);
	r2 = D(r2, s1_0_2, 0xFCE919EB, 0x01EBFB0E, 0x06FA1201, 0x0520E41B);
	r3 = D(r3, s1_0_2, 0xE700F417, 0xEE1ED30A, 0xF203F2D0, 0x14F709E8);
	r4 = D(r4, s1_0_2, 0x23FB0D10, 0xFA08FA16, 0xE0FCECC0, 0x03E6F536);
	r5 = D(r5, s1_0_2, 0x060301E7, 0xFB0407EF, 0x0B020EF0, 0xE5100D00);
	r6 = D(r6, s1_0_2, 0xF6F4021B, 0xDFF7F82B, 0x01FD0EF2, 0xF1DDEF2C);
	r7 = D(r7, s1_0_2, 0x1812EE2C, 0x0101F6EF, 0xE82AF3BA, 0xF602FC19);
	r0 = D(r0, s1_1_0, 0xEEECF20A, 0xFC01F210, 0x1400FD06, 0x110C0000);
	r1 = D(r1, s1_1_0, 0x15FF040C, 0x0002F905, 0xF808E9F0, 0x1703E6F3);
	r2 = D(r2, s1_1_0, 0x0BF8090B, 0xD4F2DF06, 0xFA04110D, 0x03DE0A20);
	r3 = D(r3, s1_1_0, 0xF2E1F9F6, 0x0CEB11F1, 0xD5110224, 0x12FA06F0);
	r4 = D(r4, s1_1_0, 0x1909F20F, 0xFA00FCFB, 0x1102FD05, 0x12D1F3D0);
	r5 = D(r5, s1_1_0, 0xE9FEFF0C, 0xF7F702F9, 0xF2FB0308, 0xDE13E9F2);
	r6 = D(r6, s1_1_0, 0xF9FF1408, 0x1300F713, 0x040A0AF2, 0xD7EAFB05);
	r7 = D(r7, s1_1_0, 0xF200E504, 0xF80EEEEC, 0x34FDFAF1, 0xF5FFFDF8);
	r0 = D(r0, s1_1_1, 0x30FA1BD9, 0x0501F1FA, 0xF5FF0B15, 0xF51707FD);
	r1 = D(r1, s1_1_1, 0x0200FC1C, 0x0516160B, 0xFEE0DF01, 0x16E3D4EE);
	r2 = D(r2, s1_1_1, 0x1A0DF2E0, 0xF94D04F1, 0x0DFFFBF9, 0x40D3DDF0);
	r3 = D(r3, s1_1_1, 0xC8FAFBFB, 0x0E06E514, 0x060E010A, 0xE31B0F36);
	r4 = D(r4, s1_1_1, 0xF8FFFD1F, 0xF4FB16F6, 0x29EC0E12, 0x260C13F8);
	r5 = D(r5, s1_1_1, 0xFDEE11ED, 0xF9F305F1, 0x0309EDF8, 0xEE09F111);
	r6 = D(r6, s1_1_1, 0xE30BD0E2, 0x99200D17, 0xF703F31C, 0x06E9E02F);
	r7 = D(r7, s1_1_1, 0x17E5E9F3, 0x0508F221, 0xF4050ACD, 0xF5E3FAED);
	r0 = D(r0, s1_1_2, 0x0DF803FD, 0xDE060D00, 0xEA03FB1D, 0xE00E0F04);
	r1 = D(r1, s1_1_2, 0x0BF6071D, 0xFC04FD04, 0xFEE7F907, 0xF40BF4FE);
	r2 = D(r2, s1_1_2, 0x360903F4, 0x0513000E, 0xF9FFF307, 0x0AECFA00);
	r3 = D(r3, s1_1_2, 0xD802DEF9, 0xF8FBDEEF, 0x1A24FAFA, 0xEFE40606);
	r4 = D(r4, s1_1_2, 0xE9FB020D, 0xEE14EAFA, 0x09EF12A6, 0x21FB18D3);
	r5 = D(r5, s1_1_2, 0xFD09F900, 0xF9FC00F7, 0x0401EDFF, 0xF00208FD);
	r6 = D(r6, s1_1_2, 0x020DE806, 0x150AF437, 0xFFF1FF02, 0xF5FDFEF6);
	r7 = D(r7, s1_1_2, 0x1521DBFF, 0xFA020500, 0x1003F4A8, 0x07F701F6);
	r0 = D(r0, s1_2_0, 0xFB02EBE9, 0xF5DFFCF2, 0x040800EF, 0xF102FF02);
	r1 = D(r1, s1_2_0, 0x0000F605, 0x0AF8FEF7, 0x0801010A, 0x03F9F306);
	r2 = D(r2, s1_2_0, 0xEF10F605, 0x04F4F903, 0x0303F70F, 0x041716FE);
	r3 = D(r3, s1_2_0, 0x0700091A, 0xF4020007, 0xEC1AF2F7, 0x01FA0F16);
	r4 = D(r4, s1_2_0, 0xDA21E9FF, 0x120FFFEE, 0xFE130BFE, 0xE6030104);
	r5 = D(r5, s1_2_0, 0xF60400FE, 0xFB0006FE, 0x05FF04FE, 0xF40913FF);
	r6 = D(r6, s1_2_0, 0xF1100BFB, 0xED02F3FC, 0xF60303FF, 0xD406F9F9);
	r7 = D(r7, s1_2_0, 0xEF1906FF, 0xF505FBFF, 0x2F1AFF03, 0x0202F9FF);
	r0 = D(r0, s1_2_1, 0x05FA0104, 0xEF00FAF2, 0xF8121FE7, 0xF0F40503);
	r1 = D(r1, s1_2_1, 0xFEEEEF0C, 0xFCFB06F6, 0x1308F5FC, 0x0A09D8FC);
	r2 = D(r2, s1_2_1, 0x02F6FC03, 0x040500FE, 0x0707FD0F, 0xF82FEC19);
	r3 = D(r3, s1_2_1, 0xEB12001D, 0x07120C04, 0xF30315FD, 0x0711F509);
	r4 = D(r4, s1_2_1, 0xCC30D42F, 0xF9FC0BFA, 0x0E0801EF, 0xE2E40837);
	r5 = D(r5, s1_2_1, 0x180EFFF5, 0x1401F6FD, 0x15060100, 0x1105F5FC);
	r6 = D(r6, s1_2_1, 0xEC1D0306, 0xE3EA0802, 0xFF16F813, 0xDBEB0213);
	r7 = D(r7, s1_2_1, 0x01091203, 0xFA0AFE04, 0xEE090CE9, 0x100BFAFB);
	r0 = D(r0, s1_2_2, 0x0FFD06FD, 0xDAF004FF, 0xFE160BD7, 0x081109F4);
	r1 = D(r1, s1_2_2, 0x1700FE08, 0xF8FA0BE9, 0x04F2F7F4, 0x0207F607);
	r2 = D(r2, s1_2_2, 0x13E2030F, 0x0E0109FF, 0xFB08FFFE, 0xF1FC0F19);
	r3 = D(r3, s1_2_2, 0x21FCFD01, 0xF1FC0019, 0x0401070F, 0x0807F910);
	r4 = D(r4, s1_2_2, 0x23161212, 0xF21200F5, 0x18E300FD, 0x2B0EFAF4);
	r5 = D(r5, s1_2_2, 0xF8F902F2, 0xFFECFFF1, 0x070107F2, 0x0B13F504);
	r6 = D(r6, s1_2_2, 0xFE130801, 0xF8F50B02, 0x06FE0613, 0xF301FE1F);
	r7 = D(r7, s1_2_2, 0xFDFE0A1A, 0x04FFFDFD, 0x0122FAD9, 0x0901FB0E);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFB0FEBFE, 0xF8F70413, 0x04FAF508, 0x0100EBF8);
	r1 = D(r1, s0_0_0, 0xFEF5F704, 0xF8F9FF0A, 0x01F515E7, 0x0CF511F5);
	r2 = D(r2, s0_0_0, 0x04F307FC, 0xF515ED0F, 0x05F6F6E3, 0xF1020F1F);
	r3 = D(r3, s0_0_0, 0xF2FDF9E2, 0x03F50B00, 0xE4FDE9F8, 0x010B0CEB);
	r4 = D(r4, s0_0_0, 0x17060FE6, 0xFDF6EACE, 0xF3F8EEFB, 0x09100D08);
	r5 = D(r5, s0_0_0, 0x0404F8EB, 0xF70D01E6, 0xF80AF202, 0xF7FEFBF2);
	r6 = D(r6, s0_0_0, 0xFD14E909, 0x04F6F30C, 0xF50A0506, 0x15010F00);
	r7 = D(r7, s0_0_0, 0x1109FF0A, 0x170004EB, 0x0B16EAFF, 0x0B0412F8);
	r0 = D(r0, s0_0_1, 0x000DF2F8, 0x08E61409, 0xF8001201, 0xFC022109);
	r1 = D(r1, s0_0_1, 0x0907EBF9, 0x0AFFFC04, 0x0305E9EF, 0x0D02DE00);
	r2 = D(r2, s0_0_1, 0xF309FC01, 0x11F2F417, 0xFD071105, 0x0D30E9F4);
	r3 = D(r3, s0_0_1, 0x09F9FE0F, 0x13F8F514, 0xEAFA06FB, 0xEBECECFD);
	r4 = D(r4, s0_0_1, 0x0C19FA17, 0x0D14EC08, 0xB92309FF, 0x180CE8FA);
	r5 = D(r5, s0_0_1, 0xF9F71309, 0x0D080408, 0xFF09FDFB, 0x110A091A);
	r6 = D(r6, s0_0_1, 0xFC0001FE, 0x17EF1603, 0xF802FE01, 0x23DE1A09);
	r7 = D(r7, s0_0_1, 0xEEF1F9DC, 0x02F90202, 0x0204E9EF, 0xF50604F4);
	r0 = D(r0, s0_0_2, 0xFE0105F0, 0x22F40908, 0xFF0601FD, 0x000E0D08);
	r1 = D(r1, s0_0_2, 0xFEFBF601, 0x0702FBF6, 0xFFFEF4FF, 0x0DFDFEF1);
	r2 = D(r2, s0_0_2, 0x0DF3FBF8, 0xFFE1F8F9, 0x07ED1807, 0xFB16CBE9);
	r3 = D(r3, s0_0_2, 0x0ED60E02, 0xF106FFFF, 0xF2FA08EA, 0xF60704F2);
	r4 = D(r4, s0_0_2, 0x0EE714FC, 0x030207FD, 0xDB1CE407, 0xE6F2F5F4);
	r5 = D(r5, s0_0_2, 0xF7FC04FF, 0x06F501EB, 0xF5180104, 0xF80302FE);
	r6 = D(r6, s0_0_2, 0x0B08F815, 0x09F2E3EF, 0xF408FD0A, 0x06F41509);
	r7 = D(r7, s0_0_2, 0x0606FDEA, 0x05FA04EF, 0xE632FF15, 0x020AF0FC);
	r0 = D(r0, s0_1_0, 0xF1F6FC0F, 0xF902DBFC, 0x0C0803F9, 0xFE110908);
	r1 = D(r1, s0_1_0, 0xFDFD081F, 0x0511EFFC, 0xF1F40C02, 0x03E4EC08);
	r2 = D(r2, s0_1_0, 0x1AF6E30A, 0xE9CE21F6, 0x00010003, 0xED1A09EB);
	r3 = D(r3, s0_1_0, 0xF60AFAF7, 0x0DFBFF05, 0x0EEF0706, 0xD5E91B17);
	r4 = D(r4, s0_1_0, 0xEE01F107, 0xF510D4FA, 0xFCFA12FD, 0xEEFD0A0E);
	r5 = D(r5, s0_1_0, 0x14F70DF8, 0x11101BEB, 0xFE02F1FF, 0x01FA08FD);
	r6 = D(r6, s0_1_0, 0xFF10040D, 0x0E07F402, 0xE3FC0506, 0xFF190CE9);
	r7 = D(r7, s0_1_0, 0xF0EB0F0C, 0xD2E101E4, 0xC3FB1AFE, 0x02F30701);
	r0 = D(r0, s0_1_1, 0xF4030B06, 0x13DFF5F9, 0xFDED0007, 0x2316EF0C);
	r1 = D(r1, s0_1_1, 0x0A03F004, 0xFE1DE4F9, 0x05F318E3, 0xFC04D8F7);
	r2 = D(r2, s0_1_1, 0x12FF0006, 0x11881005, 0xEBE1F00E, 0xF6028108);
	r3 = D(r3, s0_1_1, 0x13141A0E, 0xF9EF2DF0, 0x1FEB051D, 0xF912FFE0);
	r4 = D(r4, s0_1_1, 0x03290403, 0xFCFE0910, 0xC700EF04, 0x07120CFB);
	r5 = D(r5, s0_1_1, 0x080EE6FC, 0x0C0F0812, 0x010BF9FF, 0xF8FD1504);
	r6 = D(r6, s0_1_1, 0x13FBD00B, 0x121DF711, 0xF80FFB07, 0x0119F400);
	r7 = D(r7, s0_1_1, 0xD6C710F3, 0x04FFF9F1, 0xE0FAFBDD, 0x0A062AFD);
	r0 = D(r0, s0_1_2, 0x19F70FEE, 0x28DD27FB, 0x06EF130D, 0x16FB04FC);
	r1 = D(r1, s0_1_2, 0xF421EBF3, 0xFE04FBF0, 0x0CF8F0FC, 0x07131212);
	r2 = D(r2, s0_1_2, 0xF52F1BFB, 0x20FE0600, 0x04F30E0A, 0x070E2CF4);
	r3 = D(r3, s0_1_2, 0x01F2F807, 0xF0F20EFC, 0x04E6FF07, 0x0BFBF91A);
	r4 = D(r4, s0_1_2, 0xF5E2F7F5, 0x010AFB03, 0xCCF32AFD, 0x060F0611);
	r5 = D(r5, s0_1_2, 0xF0FDE901, 0x080C0A04, 0xFC05F8FB, 0xFBFFF406);
	r6 = D(r6, s0_1_2, 0xFF0E15FF, 0xEEFD10FD, 0x01FE0903, 0xFD11FEF7);
	r7 = D(r7, s0_1_2, 0xF118D800, 0x0DFEF8F7, 0xFC1EDA0B, 0x0C07FFF4);
	r0 = D(r0, s0_2_0, 0xFCF3F6F4, 0xFEF9F8F9, 0xD60C06FD, 0x0F0B06FD);
	r1 = D(r1, s0_2_0, 0x1415FBEE, 0xFE0CFFF8, 0xF9F1F8F1, 0x09F6F10D);
	r2 = D(r2, s0_2_0, 0x111527E5, 0x0208F7F3, 0x0505ED02, 0xFC0A1B08);
	r3 = D(r3, s0_2_0, 0x0B10BC0D, 0x06042BF4, 0xFC14FE0B, 0xE007E615);
	r4 = D(r4, s0_2_0, 0xD4E0D203, 0x0BF3FDFD, 0xECFE12E8, 0x1AF2F407);
	r5 = D(r5, s0_2_0, 0xFC0506F0, 0xF70604F0, 0xFE0211F9, 0xF8EE0207);
	r6 = D(r6, s0_2_0, 0xEDFDF3FD, 0xF60909E0, 0x0A0E010C, 0x010B03F0);
	r7 = D(r7, s0_2_0, 0xF0F5ECFE, 0x150EF50A, 0xB2D80400, 0xFCF1F811);
	r0 = D(r0, s0_2_1, 0xED01DCFB, 0x25EBE91A, 0x040C17E3, 0x1C030DFF);
	r1 = D(r1, s0_2_1, 0xEF10D5F3, 0xF80BFCFC, 0xFAFBF308, 0x03F009F1);
	r2 = D(r2, s0_2_1, 0x1121E602, 0x0707271D, 0xF10603FA, 0x0D18F9F0);
	r3 = D(r3, s0_2_1, 0x0E07F7FF, 0xE7FFF410, 0xF408040E, 0x0410E3EF);
	r4 = D(r4, s0_2_1, 0xFC291CC8, 0xEBF7F90B, 0xE3022F01, 0x2216D1FD);
	r5 = D(r5, s0_2_1, 0xF30B13FE, 0x0400EA0D, 0xFF1213FB, 0xFDEAF415);
	r6 = D(r6, s0_2_1, 0xFAFEECEE, 0x0A05F200, 0x11111400, 0x0D04FAEB);
	r7 = D(r7, s0_2_1, 0xEBFED5F3, 0xF806F6FF, 0xD0FDFFEF, 0xEFED09FA);
	r0 = D(r0, s0_2_2, 0x1E070FEF, 0x20FEE71B, 0xF401FA08, 0x0213F508);
	r1 = D(r1, s0_2_2, 0x0320F6EE, 0x000101FC, 0xF503FD05, 0xFDF9FF16);
	r2 = D(r2, s0_2_2, 0xE9F00D16, 0x21FBEBF3, 0xFEFF040E, 0x1BFFE0F6);
	r3 = D(r3, s0_2_2, 0xF7F8F6F2, 0xF5F4F8EB, 0x01EE0905, 0x07FCED14);
	r4 = D(r4, s0_2_2, 0x02FB0300, 0xE3040101, 0xE805090B, 0xF9EC0615);
	r5 = D(r5, s0_2_2, 0xFB03F101, 0xF9000D03, 0xFB040708, 0xFA06F4FB);
	r6 = D(r6, s0_2_2, 0x0EFE0B18, 0x03F6100B, 0x06F9F7F7, 0x04F7FFF6);
	r7 = D(r7, s0_2_2, 0xF71B040A, 0x110205FA, 0xFF142505, 0x020506F3);
	r0 = D(r0, s1_0_0, 0xFB020208, 0x110EF600, 0x14F10A07, 0xFEFCFC10);
	r1 = D(r1, s1_0_0, 0x040D1E00, 0x10FD04FB, 0xFB03EC05, 0x0006EA19);
	r2 = D(r2, s1_0_0, 0xF7F8E819, 0x1316EC10, 0xF7020B02, 0x14170218);
	r3 = D(r3, s1_0_0, 0x02000FF7, 0xEEF8ECDC, 0xF707121D, 0x08F3FB09);
	r4 = D(r4, s1_0_0, 0x000B1215, 0x000F0A06, 0x05000C0F, 0xF3E5EC03);
	r5 = D(r5, s1_0_0, 0xEA040D0E, 0x0B08FC1C, 0x06F808FF, 0x050A17FF);
	r6 = D(r6, s1_0_0, 0x02F80104, 0x05FA1005, 0xFB0307FE, 0x081F170F);
	r7 = D(r7, s1_0_0, 0xFEEFF70B, 0xD13AF1EC, 0x0CFAE541, 0xFCF60806);
	r0 = D(r0, s1_0_1, 0x0404EB1F, 0xFF000514, 0x0B01F60D, 0x0802FAFC);
	r1 = D(r1, s1_0_1, 0xFFF60AFC, 0xE8FFF1FC, 0x0AF21B16, 0xFF0A030B);
	r2 = D(r2, s1_0_1, 0xF5F6EDF2, 0xF8FD0D06, 0x0D0CFF0C, 0xFD020106);
	r3 = D(r3, s1_0_1, 0x14F6E1C5, 0x091706FA, 0x110005FF, 0x0C0110FE);
	r4 = D(r4, s1_0_1, 0x08181129, 0x1206F11A, 0x09F3F203, 0xE71309F0);
	r5 = D(r5, s1_0_1, 0x14F20E05, 0xF513121F, 0xEDF5F2FB, 0x100CEBF4);
	r6 = D(r6, s1_0_1, 0x0600F905, 0x1611F1F0, 0x09FFFFF8, 0x0116F0ED);
	r7 = D(r7, s1_0_1, 0x0AE91007, 0xD61DF8FB, 0xFF08131B, 0xF4020602);
	r0 = D(r0, s1_0_2, 0x01130B1F, 0xFDF9EEF4, 0xEB00F90F, 0x03E503EF);
	r1 = D(r1, s1_0_2, 0x0D03FC07, 0xFE0700F9, 0x08080214, 0xF8050704);
	r2 = D(r2, s1_0_2, 0x08F9050C, 0x0815F1EF, 0x0C0307FE, 0x01F400F9);
	r3 = D(r3, s1_0_2, 0x0F051BED, 0x11F6FCFA, 0xF9E4FD01, 0x0D030912);
	r4 = D(r4, s1_0_2, 0xEC01FA15, 0xE6150D16, 0x040A0C00, 0xFDF7EDED);
	r5 = D(r5, s1_0_2, 0x0BFD00F2, 0x01000020, 0x0906F8F9, 0xFB00FDF8);
	r6 = D(r6, s1_0_2, 0xFDFA02F2, 0xF0F4FF03, 0x0207FAF3, 0x090CEA0D);
	r7 = D(r7, s1_0_2, 0x17F91118, 0xF614FB09, 0xF6120004, 0xF0030712);
	r0 = D(r0, s1_1_0, 0x19F31313, 0x00020312, 0xFD18F1F6, 0x06F50C02);
	r1 = D(r1, s1_1_0, 0x0E1800FA, 0xFE0B05FE, 0x0508FB10, 0xFDFD0CF7);
	r2 = D(r2, s1_1_0, 0x0D24F605, 0x101BD616, 0x00F21001, 0x08EED025);
	r3 = D(r3, s1_1_0, 0xEF191CE5, 0x000C0AFA, 0x0B000103, 0xFC120FF6);
	r4 = D(r4, s1_1_0, 0xF8ECF308, 0x04ED0B0B, 0x03FD01FE, 0x13FE04ED);
	r5 = D(r5, s1_1_0, 0x1507F504, 0x10FC02F9, 0xFD0EFFFE, 0xF0F3FF0A);
	r6 = D(r6, s1_1_0, 0xFDFEF51F, 0x0C06F90D, 0xEBFE03FC, 0x03F110E6);
	r7 = D(r7, s1_1_0, 0xF014FB07, 0xBC321108, 0xF909FD0B, 0x0E0203F5);
	r0 = D(r0, s1_1_1, 0x12FC0F0E, 0x060616FF, 0xF419D9EC, 0xF211DE21);
	r1 = D(r1, s1_1_1, 0xFAF9FCF9, 0x350AEFF5, 0x0CF10B18, 0xFEFCF4E1);
	r2 = D(r2, s1_1_1, 0x01050C07, 0x10011212, 0xEE1008F9, 0xEDFEE319);
	r3 = D(r3, s1_1_1, 0x130A2414, 0xFEFD08EC, 0x10000109, 0x11FCF614);
	r4 = D(r4, s1_1_1, 0x19EF1320, 0x0D040804, 0xF5051506, 0xE31A070A);
	r5 = D(r5, s1_1_1, 0x2AFAF50A, 0xF1EC0DF7, 0xD8110C10, 0x0EFB00DB);
	r6 = D(r6, s1_1_1, 0xEE0511F9, 0xFF17FD02, 0x28F4020F, 0xF1DAE6C6);
	r7 = D(r7, s1_1_1, 0xF80FF711, 0xBE270B18, 0x00F5150E, 0x23FE0A06);
	r0 = D(r0, s1_1_2, 0x0FFDF401, 0x100EF80B, 0xFFFFF608, 0x0407EA0B);
	r1 = D(r1, s1_1_2, 0xE005F105, 0x00F5F6F4, 0xFF02FAF6, 0xFB04EAEC);
	r2 = D(r2, s1_1_2, 0x0A0F15F7, 0xEE0EFE0A, 0xEAF4FBFA, 0x08020716);
	r3 = D(r3, s1_1_2, 0x15020907, 0xFD08E9FB, 0x0FF906EE, 0x02070AF7);
	r4 = D(r4, s1_1_2, 0x1B0D1005, 0xFFF2FDDF, 0xF50105FF, 0xFA03F2FE);
	r5 = D(r5, s1_1_2, 0xF119FE01, 0x01060300, 0x05FDF4FA, 0x04E8FDF1);
	r6 = D(r6, s1_1_2, 0xF6EEFD00, 0xF5F42922, 0x09FCF2FD, 0x0EF90E0B);
	r7 = D(r7, s1_1_2, 0x1EFE08E2, 0xFE0D0BF8, 0xF2F706F9, 0x0AFF0101);
	r0 = D(r0, s1_2_0, 0xF90CFF02, 0x0003FF0F, 0xF2F40E02, 0xFF10F91C);
	r1 = D(r1, s1_2_0, 0x0AEC140C, 0xF8020616, 0x08F70000, 0xFDF30705);
	r2 = D(r2, s1_2_0, 0x01FBF325, 0x010824F8, 0x0903EF03, 0xFBF729FF);
	r3 = D(r3, s1_2_0, 0xFEF60811, 0x0AE8FEFE, 0xF1FA1016, 0xFA06DCF5);
	r4 = D(r4, s1_2_0, 0xEDDACA18, 0xE8EC05F7, 0xFB000B0E, 0xFFF1F702);
	r5 = D(r5, s1_2_0, 0xEF0610F8, 0xFB000AFF, 0x0102F707, 0x0606FB01);
	r6 = D(r6, s1_2_0, 0x0816E809, 0xFCFEFC13, 0xF50CFBEF, 0x050F1DFE);
	r7 = D(r7, s1_2_0, 0x0006060C, 0xE91AF8F9, 0x040EE904, 0xFCF8FFEA);
	r0 = D(r0, s1_2_1, 0xF10803EE, 0xEEF0060D, 0x0EF4130E, 0xEFF80518);
	r1 = D(r1, s1_2_1, 0xFDF501F0, 0x0B05FC07, 0x0FFF180B, 0x0404F4EC);
	r2 = D(r2, s1_2_1, 0xE3FEFA05, 0xF0F803D8, 0xFDFF050E, 0xFCFBFC15);
	r3 = D(r3, s1_2_1, 0xF7EEDC1B, 0x16FBE012, 0x00FB0802, 0xEFF5F710);
	r4 = D(r4, s1_2_1, 0xFDF6CC04, 0x19010010, 0x1010FC02, 0xF3ECF90D);
	r5 = D(r5, s1_2_1, 0xF6FB05FA, 0x12FFFB05, 0x01FEF0FD, 0xFAFD13E5);
	r6 = D(r6, s1_2_1, 0x0209091B, 0x1E15E304, 0x01F4E4F3, 0x170DF700);
	r7 = D(r7, s1_2_1, 0xF700F512, 0xE81E070D, 0xEDEA041B, 0x030400F0);
	r0 = D(r0, s1_2_2, 0xFB07E606, 0x0108FF0F, 0x0C070108, 0xF70D01F4);
	r1 = D(r1, s1_2_2, 0xF7FA02FD, 0x06FFFDF2, 0xFEFEF7EE, 0x02FFF7E1);
	r2 = D(r2, s1_2_2, 0xEFFDF6EC, 0xFB0311F8, 0xF4FAF7F5, 0x0908F52C);
	r3 = D(r3, s1_2_2, 0xE6071011, 0xF3F8000C, 0xF50A0911, 0xF0F90EFF);
	r4 = D(r4, s1_2_2, 0x0AFAF418, 0x09FE10D9, 0x11E6F710, 0x000013FB);
	r5 = D(r5, s1_2_2, 0xFCF107FF, 0xFC04FC08, 0x010108F6, 0x0B050801);
	r6 = D(r6, s1_2_2, 0xFA180D15, 0xEFE4F40D, 0x0A0D04FF, 0xFB0DF5FE);
	r7 = D(r7, s1_2_2, 0xFCF900D9, 0xF10DF80B, 0xF80BFC03, 0x0BFFFC0B);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF4F4050A, 0x0E02FEEB, 0x0801FA0A, 0x0BFA0DF5);
	r1 = D(r1, s0_0_0, 0xFE040901, 0xF1031107, 0xEB0A15FD, 0xD8FF0800);
	r2 = D(r2, s0_0_0, 0x1D2D0706, 0x10FAEDF4, 0xE808FC0E, 0xCE25FDF1);
	r3 = D(r3, s0_0_0, 0x0D12FF07, 0x010810FF, 0x1BEAFA10, 0xF8FBF1F0);
	r4 = D(r4, s0_0_0, 0xFAEBE8D8, 0xE50E090C, 0xCB17FCF6, 0xFE0CEBED);
	r5 = D(r5, s0_0_0, 0xFD09F4F4, 0x00FEFF06, 0xFD01F6FB, 0xDCFBFF0B);
	r6 = D(r6, s0_0_0, 0x04FCF906, 0xEE0B0208, 0xF9F3F6FC, 0x1811220F);
	r7 = D(r7, s0_0_0, 0xDDECFDF6, 0xF30001FC, 0xEC26FF0E, 0x0EFAEDFC);
	r0 = D(r0, s0_0_1, 0xF20001F0, 0xE006EEEA, 0x09F9F7FA, 0x2007FAEB);
	r1 = D(r1, s0_0_1, 0x0003E7F0, 0xFF0A030A, 0xF3F4F8FA, 0xFFF912FE);
	r2 = D(r2, s0_0_1, 0x10050E00, 0xF3F700F4, 0x03FB12EA, 0xF11DD01F);
	r3 = D(r3, s0_0_1, 0x14EB12FC, 0xEF120BF7, 0x0F05FAEB, 0x01031209);
	r4 = D(r4, s0_0_1, 0x0610EAF0, 0xF8EC08E4, 0xE504FDD4, 0xF5091006);
	r5 = D(r5, s0_0_1, 0xFE02FB00, 0xF6F3FCEF, 0x020DFBFC, 0xFC0AF6F2);
	r6 = D(r6, s0_0_1, 0x030D14F1, 0x040FEAEE, 0x07F0F7FE, 0xDD0B1308);
	r7 = D(r7, s0_0_1, 0xF008F507, 0x02080F00, 0xF81C1200, 0xFFFFFB10);
	r0 = D(r0, s0_0_2, 0xFE190FF7, 0xEA0B05D9, 0x0AFC15F9, 0x02FFF6E3);
	r1 = D(r1, s0_0_2, 0x0A080A16, 0x01040B02, 0xFFF70AFB, 0x07F80704);
	r2 = D(r2, s0_0_2, 0xFBF726F5, 0x15EF1505, 0xFAF213F6, 0x000BF302);
	r3 = D(r3, s0_0_2, 0x1201140C, 0x13EDFAED, 0x040AF9F3, 0xF8150F03);
	r4 = D(r4, s0_0_2, 0xF90B121B, 0xFCFD040C, 0x020C110A, 0x03F60C1A);
	r5 = D(r5, s0_0_2, 0xFAF9FBF3, 0xFD06FAF9, 0x0405FEEB, 0x02F9F8F7);
	r6 = D(r6, s0_0_2, 0x05F4FAF8, 0xE510EA12, 0x05000103, 0xFC1FED11);
	r7 = D(r7, s0_0_2, 0xF4FB030F, 0xF4F40EF7, 0xFE02E1EB, 0x1300FA0C);
	r0 = D(r0, s0_1_0, 0xEDEFF0E7, 0xF5190801, 0x150CE406, 0x0F06FD00);
	r1 = D(r1, s0_1_0, 0x0205FF09, 0x0BFE1006, 0xFB1125ED, 0x05DEFBF4);
	r2 = D(r2, s0_1_0, 0x001D1EFE, 0x0F05F8E9, 0x0CF4F508, 0x14F90F07);
	r3 = D(r3, s0_1_0, 0xE70B30EC, 0x0F0B05F6, 0x16F51B10, 0xDEEB11DF);
	r4 = D(r4, s0_1_0, 0xF926EBCC, 0xECEFF71B, 0x07F3F803, 0xF500E9DB);
	r5 = D(r5, s0_1_0, 0x0C08F1FD, 0x06F5E90E, 0x010601F9, 0xF30E0CF5);
	r6 = D(r6, s0_1_0, 0x070117F8, 0xFCDD04FB, 0xF2F705FB, 0x0ACE1E04);
	r7 = D(r7, s0_1_0, 0x0FF3FBF7, 0x050B0E17, 0xEBD91CE1, 0xF80AED02);
	r0 = D(r0, s0_1_1, 0xEFF611DC, 0x101712E4, 0xDDFD1EFE, 0xE713F8AB);
	r1 = D(r1, s0_1_1, 0xDD00060B, 0x0D0406FD, 0xEE24000D, 0xEFE5FEFD);
	r2 = D(r2, s0_1_1, 0xFA21ECB4, 0xDF1CD1AD, 0x0219F2D5, 0x3412ECF3);
	r3 = D(r3, s0_1_1, 0xF6021FD9, 0x0C0BF621, 0xCB030705, 0xF30E04F2);
	r4 = D(r4, s0_1_1, 0xFB11E8FA, 0x20D9ECDC, 0xF70E0FE2, 0xE809DBE0);
	r5 = D(r5, s0_1_1, 0x08030E0E, 0x0AEEF3F7, 0xF31905FF, 0xE7140F09);
	r6 = D(r6, s0_1_1, 0x280100FF, 0x10D70AEA, 0x0503EF13, 0x11EE0FF1);
	r7 = D(r7, s0_1_1, 0xF0FAF2FB, 0x1C190408, 0x0CAF0DFD, 0x08FA052C);
	r0 = D(r0, s0_1_2, 0xEC1B1808, 0xF91F0A0A, 0x0D040EFF, 0xFBFBEDEF);
	r1 = D(r1, s0_1_2, 0x14021505, 0xEFFB070E, 0x08FA0823, 0xF7FEF7F8);
	r2 = D(r2, s0_1_2, 0xEFFC00EC, 0x0E0418EA, 0x0205F8EF, 0xFA0DFCF7);
	r3 = D(r3, s0_1_2, 0x120C1122, 0x1006FD1A, 0xF9F3E91C, 0xF608070C);
	r4 = D(r4, s0_1_2, 0x140D02FA, 0x08DDF706, 0x1CE20AF3, 0xF8F60E08);
	r5 = D(r5, s0_1_2, 0x14F707F5, 0xFFFEFB0D, 0xEE010DFC, 0x08E707F3);
	r6 = D(r6, s0_1_2, 0xFBFCE3D9, 0xFE0404D4, 0xFFFBFA03, 0x0815FBDA);
	r7 = D(r7, s0_1_2, 0x0C080210, 0xFB04F5F4, 0x20FA15FD, 0xFF09FEF1);
	r0 = D(r0, s0_2_0, 0xFAFF1102, 0xDC12F6FF, 0x0DF705F5, 0x00030409);
	r1 = D(r1, s0_2_0, 0xFF1A0904, 0xF8060305, 0xFE031407, 0x02F9FD05);
	r2 = D(r2, s0_2_0, 0xF2001B04, 0x12DAF5F7, 0xFAF9FC0C, 0xF5021103);
	r3 = D(r3, s0_2_0, 0xFB030315, 0xF40F0EFC, 0x02041AF6, 0xFDF4F108);
	r4 = D(r4, s0_2_0, 0xB7810E25, 0xFDEE0CF5, 0x14EBFA03, 0x1B24ECFB);
	r5 = D(r5, s0_2_0, 0x11F4FFFE, 0x0107F207, 0x03F6F1F8, 0x03FD03EB);
	r6 = D(r6, s0_2_0, 0xF1FB070D, 0xF51E2010, 0x05EDFAFB, 0x1F050EF7);
	r7 = D(r7, s0_2_0, 0x04F80B20, 0xEC03F30A, 0x210903FB, 0x15F4FAFF);
	r0 = D(r0, s0_2_1, 0xFE040A05, 0xDCF4E615, 0x0306EDDD, 0xF01CF3FE);
	r1 = D(r1, s0_2_1, 0x02E7FAFD, 0x060AFE02, 0x0900E704, 0x06DB0804);
	r2 = D(r2, s0_2_1, 0x16FE0410, 0xE8121602, 0x0614F7FD, 0xE1E1FD1C);
	r3 = D(r3, s0_2_1, 0xEDFA3506, 0xEE110AFE, 0xEAE5001B, 0x11FD1E0C);
	r4 = D(r4, s0_2_1, 0xDB5DD726, 0x180DEFF2, 0xF000F2ED, 0xFF040727);
	r5 = D(r5, s0_2_1, 0x0D0602EF, 0x01F60007, 0x0008FDF1, 0x141CFE0D);
	r6 = D(r6, s0_2_1, 0xEC0A1514, 0xF1140207, 0xEAF80B0D, 0xE6E82709);
	r7 = D(r7, s0_2_1, 0x01FF021D, 0xF6090C03, 0x1CF6F6E7, 0x0BFEFCF5);
	r0 = D(r0, s0_2_2, 0xF90C09F8, 0xEB18FB0F, 0xFAFB0FE1, 0xEB09FE04);
	r1 = D(r1, s0_2_2, 0xF9EF1901, 0x02FF05F6, 0x20F9FA03, 0x0DEB061A);
	r2 = D(r2, s0_2_2, 0x16E6F206, 0xEDF61513, 0x09EEF7FB, 0xF6E4F90A);
	r3 = D(r3, s0_2_2, 0x2608FF12, 0xEAF91417, 0x04FB1102, 0x06070610);
	r4 = D(r4, s0_2_2, 0xF6E10309, 0xFFE8F7F4, 0xFBEF08FA, 0x05111C08);
	r5 = D(r5, s0_2_2, 0xF4F30CFD, 0x09FE00FA, 0xFBFC07F1, 0x16FA05FC);
	r6 = D(r6, s0_2_2, 0xFA01E90E, 0x0605EFFA, 0xEC0D0312, 0x0EFBEE15);
	r7 = D(r7, s0_2_2, 0x08E6F0E2, 0xFC07FBFE, 0x00FDEDEA, 0xF5FAFBFC);
	r0 = D(r0, s1_0_0, 0x09E7000F, 0x1BE80CED, 0x0CE3ED02, 0xEEF907FF);
	r1 = D(r1, s1_0_0, 0xED100DEF, 0x0DFBF306, 0x0C0A04F5, 0x0A0E0C00);
	r2 = D(r2, s1_0_0, 0xEED0E0FC, 0xF8E2F5FC, 0xFA190BF7, 0x0702FA00);
	r3 = D(r3, s1_0_0, 0x1026F4F7, 0x04D804F4, 0xE3F9FDF8, 0xED2DF2FA);
	r4 = D(r4, s1_0_0, 0xFE04F507, 0x01EC11FD, 0xFCD5FCF2, 0x040B1C10);
	r5 = D(r5, s1_0_0, 0xF200FF05, 0xFDF5F307, 0xFDFF0206, 0x1C0B02FE);
	r6 = D(r6, s1_0_0, 0xF7F20400, 0xF5F1F80B, 0xFF070106, 0x0BEADA00);
	r7 = D(r7, s1_0_0, 0x11FE0409, 0x01F90CF3, 0x1417DC07, 0xFF011004);
	r0 = D(r0, s1_0_1, 0xF5EEFCFA, 0x0FC02205, 0xF7EBF301, 0xDF000100);
	r1 = D(r1, s1_0_1, 0xFEF8F609, 0x0AF1FEFF, 0x150F13FA, 0x0C200612);
	r2 = D(r2, s1_0_1, 0xE7F0180F, 0xCC07DA1D, 0xFFEAF50F, 0xF806F2FB);
	r3 = D(r3, s1_0_1, 0x03EA0813, 0xF1F411FE, 0xF30FF1F7, 0x2D02F0EC);
	r4 = D(r4, s1_0_1, 0x11020402, 0x0FF5FA16, 0xF9ECF2F4, 0x00EEEF12);
	r5 = D(r5, s1_0_1, 0x150506FA, 0xF6F00DF9, 0xFBF9FEF7, 0xEAF4FFF9);
	r6 = D(r6, s1_0_1, 0xFEDF060A, 0xE9E4E606, 0x17110AF3, 0x26DD0212);
	r7 = D(r7, s1_0_1, 0xFA0D050E, 0xFF06FEFE, 0xF8010DFD, 0x1800F2FE);
	r0 = D(r0, s1_0_2, 0xEBF603FC, 0xF4EDF819, 0x01F7EEEB, 0x01190B0D);
	r1 = D(r1, s1_0_2, 0x0DFE070D, 0xFE050A06, 0x00FA040B, 0xFEF9FF04);
	r2 = D(r2, s1_0_2, 0xEDF0250C, 0x0D0C0507, 0xF6000200, 0xF3FFF80F);
	r3 = D(r3, s1_0_2, 0x01F40324, 0x0914FC02, 0xFEF90AFC, 0x0700F503);
	r4 = D(r4, s1_0_2, 0xFB140FFF, 0x05FD04FC, 0x0709F7F1, 0x03F308FE);
	r5 = D(r5, s1_0_2, 0x040107EE, 0xF8E8F104, 0xFB0013FF, 0x001D0AED);
	r6 = D(r6, s1_0_2, 0xF6F1FC01, 0xFFFEF304, 0xFF0404F7, 0xFFEDEA00);
	r7 = D(r7, s1_0_2, 0xEEF4F700, 0xF4F3F701, 0xF70006FD, 0x16F7F704);
	r0 = D(r0, s1_1_0, 0x1401FEEF, 0x0FF215FD, 0xEBF707F7, 0x0209F908);
	r1 = D(r1, s1_1_0, 0x0E0FEEED, 0x09FD00F8, 0x05FF0AF7, 0xF2FFF3DB);
	r2 = D(r2, s1_1_0, 0x05F4EC17, 0xB7DDF8F6, 0xF8FEFFED, 0xE7C5FE19);
	r3 = D(r3, s1_1_0, 0x1215F104, 0xFBECF400, 0x0301EC0E, 0x1E080EF4);
	r4 = D(r4, s1_1_0, 0xEB10E6D6, 0xFBF4FCE6, 0x0DE0F906, 0x01F50228);
	r5 = D(r5, s1_1_0, 0x0C0EFD01, 0xE4F9F907, 0x0A0305FF, 0x111210F8);
	r6 = D(r6, s1_1_0, 0x0916EB08, 0xF60A0703, 0x130906FA, 0xF012050E);
	r7 = D(r7, s1_1_0, 0x08FFFAF5, 0x1CF80DF0, 0xD6FD01EE, 0xF5FD090D);
	r0 = D(r0, s1_1_1, 0xF3E6FA10, 0x240B1603, 0x03EB0E1C, 0x110905FA);
	r1 = D(r1, s1_1_1, 0x0B010AFC, 0xF7FF08F4, 0x0DE9001A, 0x04261C00);
	r2 = D(r2, s1_1_1, 0x130F0802, 0x15172CF3, 0x0F0A0D1D, 0xFD13FEE9);
	r3 = D(r3, s1_1_1, 0xF40FF1F2, 0xFFEFECFA, 0x06EC0F01, 0xEFEC03E4);
	r4 = D(r4, s1_1_1, 0xFFF71F13, 0xF216EC1D, 0xE9FE0C15, 0xEFEFEB1D);
	r5 = D(r5, s1_1_1, 0x000F0427, 0x000901F3, 0x38F407F8, 0xEADD0115);
	r6 = D(r6, s1_1_1, 0x01F80B04, 0xDCC1FEFB, 0xFBF907F0, 0xEFBCF0E9);
	r7 = D(r7, s1_1_1, 0xFB0710FB, 0x190BFFE5, 0xE1F0DCF5, 0xFBF4F3FB);
	r0 = D(r0, s1_1_2, 0xF4060000, 0xF40B07FA, 0xF01903FE, 0x01F6F2F8);
	r1 = D(r1, s1_1_2, 0xF00D0807, 0x09FE0803, 0xF6FEF820, 0xF00F04FE);
	r2 = D(r2, s1_1_2, 0x13001E00, 0x0C100FD6, 0x0A0A13F2, 0x1314FD1B);
	r3 = D(r3, s1_1_2, 0x230AF607, 0x01E001F9, 0xFD06FF10, 0xFCEEE9FA);
	r4 = D(r4, s1_1_2, 0xF70DFDF1, 0x0D1AF2F3, 0x1FFFFAF7, 0x0918E8F5);
	r5 = D(r5, s1_1_2, 0x08F8FEF5, 0x111F080A, 0xF3EFFC0A, 0x05FA09E7);
	r6 = D(r6, s1_1_2, 0xECF30300, 0xFA0FF5EB, 0xF105F709, 0x2101FEE9);
	r7 = D(r7, s1_1_2, 0x1408EF0B, 0xFC020108, 0x15DAFD18, 0xF80308F9);
	r0 = D(r0, s1_2_0, 0xF0D6E31F, 0xD6F814F3, 0x05F4F7F0, 0x0BFF0214);
	r1 = D(r1, s1_2_0, 0xF708160F, 0xFEFD02FF, 0xFD0BF9FC, 0xFE17F0FD);
	r2 = D(r2, s1_2_0, 0x0AE622F4, 0xD615FF19, 0x0807FAFD, 0xFB0C14D7);
	r3 = D(r3, s1_2_0, 0x040A0A02, 0x030CF601, 0x00F701F1, 0x1707F004);
	r4 = D(r4, s1_2_0, 0xDDF2EAE5, 0x0D06F901, 0x100B03EB, 0x0A000810);
	r5 = D(r5, s1_2_0, 0xF6FD0203, 0xF3F207F9, 0x05020205, 0x0423FDFA);
	r6 = D(r6, s1_2_0, 0x0DF60404, 0x03F9FB0E, 0x0A080A01, 0xF80DF708);
	r7 = D(r7, s1_2_0, 0x050BED0B, 0x070FFA08, 0x0600E9EE, 0xFB03FAFA);
	r0 = D(r0, s1_2_1, 0x0FFB081A, 0x04FFF312, 0x0BE3FCFC, 0x02030D01);
	r1 = D(r1, s1_2_1, 0xFD00EC04, 0x000B06FD, 0x00F7F708, 0x00E9F116);
	r2 = D(r2, s1_2_1, 0xFE020403, 0x05F0EBD6, 0xFBF7FA15, 0x0E01F5EC);
	r3 = D(r3, s1_2_1, 0x0D1BE2F9, 0x1E200A0D, 0x06FA06DC, 0xFEEDFD0D);
	r4 = D(r4, s1_2_1, 0x9B81EBEA, 0xF00EFCDF, 0xFBE312F8, 0xF406F1E2);
	r5 = D(r5, s1_2_1, 0xFAF70CF8, 0x06FFF6F7, 0xFCFFFFFE, 0xF8DFDE2B);
	r6 = D(r6, s1_2_1, 0x02ED1A0A, 0xF6FC06F3, 0x0CFEF6FA, 0xF3F803D6);
	r7 = D(r7, s1_2_1, 0x00F10B09, 0xF8010806, 0x04E32012, 0xF9F6FD10);
	r0 = D(r0, s1_2_2, 0x01FD0DF3, 0xF9EFFAFE, 0x082D28D6, 0x001D0B03);
	r1 = D(r1, s1_2_2, 0x00FFFD14, 0x00090DFE, 0xFAF6E104, 0xECF1F600);
	r2 = D(r2, s1_2_2, 0xFFF40916, 0xFDEC07F7, 0xF4FF0400, 0x07EDDC01);
	r3 = D(r3, s1_2_2, 0xF9DECB0F, 0xF9E4E104, 0xFFFEFFF4, 0xFB1A08F2);
	r4 = D(r4, s1_2_2, 0xE7DF13C2, 0x060AFC00, 0x06EA00F8, 0xE9F006EC);
	r5 = D(r5, s1_2_2, 0xFBF1FB02, 0xFDFF0308, 0xFFFA0516, 0x0C0AFDF0);
	r6 = D(r6, s1_2_2, 0x0DDDF0F4, 0xFCFEE6E5, 0xFEFFFBFF, 0x0E19E6FE);
	r7 = D(r7, s1_2_2, 0xF601E9F6, 0xF6F7010A, 0x05D30D10, 0xFDFEEEFD);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0012010C, 0xFCF7EDF0, 0x210805F7, 0x00FE05E1);
	r1 = D(r1, s0_0_0, 0x0AEC10E9, 0xF808F6F1, 0xDF120A18, 0xE31CFA0D);
	r2 = D(r2, s0_0_0, 0x0CF0F2C9, 0xEF130AD8, 0x18FFEEFC, 0xEF140EFA);
	r3 = D(r3, s0_0_0, 0xF1FB0FEA, 0x07F71206, 0x0C1508DB, 0xF9070325);
	r4 = D(r4, s0_0_0, 0xEA1805F1, 0x0606EFF2, 0x02FB02FF, 0x0FFE07E9);
	r5 = D(r5, s0_0_0, 0x0804050D, 0x0600F9FD, 0xFFFE0500, 0x0613F1F8);
	r6 = D(r6, s0_0_0, 0x0E0CF7E7, 0xFE00E4F3, 0xF9EF04FE, 0x0CF9EEF1);
	r7 = D(r7, s0_0_0, 0xF430FFFE, 0x0C05FC09, 0xE61F09F1, 0xF801FB06);
	r0 = D(r0, s0_0_1, 0xFF0AFF02, 0x0719ECF0, 0x0200FF02, 0x08F31FE1);
	r1 = D(r1, s0_0_1, 0x0A0A0E1B, 0x0708F0FF, 0x0008FF09, 0x180FF4FD);
	r2 = D(r2, s0_0_1, 0x00FAEE03, 0xEB0522CD, 0x100AF718, 0xF2FFF0F6);
	r3 = D(r3, s0_0_1, 0x210433F0, 0x05FB07F3, 0xE3141FDC, 0x17EEFC21);
	r4 = D(r4, s0_0_1, 0xF40C1D08, 0x0107FA03, 0x0506FB17, 0xFEE4DD3A);
	r5 = D(r5, s0_0_1, 0x0308FFE1, 0x0CFCF1FA, 0x060D04F3, 0xF3002204);
	r6 = D(r6, s0_0_1, 0xEC09FB01, 0x0B0CFE05, 0x08FEFE07, 0xFF040909);
	r7 = D(r7, s0_0_1, 0xDF41FC0E, 0x100E0E01, 0xCC170AF5, 0xFB0301FC);
	r0 = D(r0, s0_0_2, 0xFC01060A, 0xFC0FF9EF, 0xF8F2F3F8, 0xFD061EFB);
	r1 = D(r1, s0_0_2, 0x0606F805, 0x03080900, 0x0B0AF3FF, 0xFF130CF7);
	r2 = D(r2, s0_0_2, 0xEE1BD4F7, 0x16FB0AF2, 0xFF01EC0C, 0x0C1C020B);
	r3 = D(r3, s0_0_2, 0x04EF06FA, 0x010818F9, 0xFFFEFF10, 0xF20CF503);
	r4 = D(r4, s0_0_2, 0xEFEDF20F, 0xFD0B0CF8, 0xF118F414, 0xF20BE70F);
	r5 = D(r5, s0_0_2, 0xFF030902, 0xFD0700EE, 0xFE060CFE, 0xFCF80200);
	r6 = D(r6, s0_0_2, 0x1B02EDF1, 0xF10DEE1D, 0xFEFE0BFD, 0x01FA2BED);
	r7 = D(r7, s0_0_2, 0x160F1BF1, 0x050C010C, 0xEF2DE6E3, 0xFA070809);
	r0 = D(r0, s0_1_0, 0x1A0D03F1, 0xEB1101E5, 0x0C04F7F5, 0xF7EC04EB);
	r1 = D(r1, s0_1_0, 0x0F03FCFE, 0xFE1C0303, 0xFA07F5FC, 0x0E1D0C03);
	r2 = D(r2, s0_1_0, 0x0703060F, 0xF103131C, 0x0207ECF0, 0xFF0A0E04);
	r3 = D(r3, s0_1_0, 0xF90608EB, 0x0C0410FA, 0x0511F411, 0xDDD8EEF0);
	r4 = D(r4, s0_1_0, 0x0AF1DB09, 0xED04F70A, 0x1206F908, 0x02E02F09);
	r5 = D(r5, s0_1_0, 0x15FA0506, 0x0FFD060E, 0x110D030C, 0x0B0DE0D5);
	r6 = D(r6, s0_1_0, 0xF300080A, 0xF7F310F5, 0x03EEF4F2, 0xFAF50FFC);
	r7 = D(r7, s0_1_0, 0x0716FCCE, 0xF307E2ED, 0x0716111D, 0xFCFD0104);
	r0 = D(r0, s0_1_1, 0x1018FFDB, 0xE70EE1FC, 0xEF00FD0C, 0xEDFBF5F9);
	r1 = D(r1, s0_1_1, 0x030900FD, 0x1023F00B, 0x1B1603EE, 0x191DFF0F);
	r2 = D(r2, s0_1_1, 0x0AE8DAE9, 0xEB033611, 0xF41109F9, 0x0F240607);
	r3 = D(r3, s0_1_1, 0xFB1CF2BE, 0x0EFEF8F6, 0xF921FCD1, 0x03010201);
	r4 = D(r4, s0_1_1, 0xF21B1225, 0x270107EC, 0xEAF403F2, 0x2213180A);
	r5 = D(r5, s0_1_1, 0xF5FB0EF3, 0x0CFFEBF7, 0x0408111C, 0x0AF3050F);
	r6 = D(r6, s0_1_1, 0xFB06FC04, 0xF71F0EEB, 0xF6011700, 0x17391013);
	r7 = D(r7, s0_1_1, 0xF12D2106, 0x071509EF, 0xFC14FBE7, 0x03FF0D0F);
	r0 = D(r0, s0_1_2, 0xF80B1507, 0xF4F8F305, 0x05FFE1F1, 0x00EC0DE8);
	r1 = D(r1, s0_1_2, 0x1A03F30D, 0xFB04F8FB, 0x0410E90D, 0x040A0FF6);
	r2 = D(r2, s0_1_2, 0x0305F5FF, 0x08132BE0, 0x0D08F904, 0x1311F625);
	r3 = D(r3, s0_1_2, 0x20FB14E4, 0xF60A1414, 0xF7FFFAF7, 0xFB07EEEC);
	r4 = D(r4, s0_1_2, 0x20FAFA01, 0x06FE120D, 0xE212F505, 0x1901E5F1);
	r5 = D(r5, s0_1_2, 0x00090904, 0x0CFA12FD, 0xF70400F9, 0xF5FEF501);
	r6 = D(r6, s0_1_2, 0xF4FD0CF8, 0xF91002F7, 0xFBFBFA05, 0xE6F20BF3);
	r7 = D(r7, s0_1_2, 0x0A2CF616, 0xFBFB0704, 0x153712D9, 0xFC031400);
	r0 = D(r0, s0_2_0, 0xF8170905, 0x20F6030D, 0x09F30CF1, 0x06030EFA);
	r1 = D(r1, s0_2_0, 0x04E40803, 0xFD0B0900, 0xFCFEFEEB, 0x111D0C10);
	r2 = D(r2, s0_2_0, 0xFB03F0EA, 0x06051A2A, 0x03F50A04, 0x1B180110);
	r3 = D(r3, s0_2_0, 0xF8100E0D, 0xFBFBF8F8, 0xEF071316, 0xFD0A00F1);
	r4 = D(r4, s0_2_0, 0x132715D6, 0x010F0B0B, 0xFA090807, 0xF9FA0003);
	r5 = D(r5, s0_2_0, 0xFE250508, 0x0B0F0709, 0x030A06FF, 0xFDF40BEF);
	r6 = D(r6, s0_2_0, 0x0803F1DC, 0x03FBFC0B, 0x040C04FA, 0x03FFF9F9);
	r7 = D(r7, s0_2_0, 0x0F120E02, 0x00FA11F5, 0x14101107, 0x07FAFAFF);
	r0 = D(r0, s0_2_1, 0x1D2207EC, 0x17E6E10F, 0xF0F10600, 0x02FC15FA);
	r1 = D(r1, s0_2_1, 0x01E20CEC, 0x04FF0405, 0x1A031010, 0x110F0B16);
	r2 = D(r2, s0_2_1, 0xE40A0007, 0x1A1DF506, 0x02F404FA, 0xEE10FD1B);
	r3 = D(r3, s0_2_1, 0xE10A29F5, 0xFB04FE15, 0xF705F5F4, 0x011A120F);
	r4 = D(r4, s0_2_1, 0x003DF8D9, 0x04F1F507, 0x0EEF08FE, 0xF002FF1A);
	r5 = D(r5, s0_2_1, 0x0A080813, 0x0D01090A, 0x01050201, 0x06EAFFEE);
	r6 = D(r6, s0_2_1, 0xFC1E0514, 0xF413F70C, 0xFF04F801, 0x0C060213);
	r7 = D(r7, s0_2_1, 0x0B1F1304, 0xFD0DF7FC, 0x1A2710F3, 0x0907FC04);
	r0 = D(r0, s0_2_2, 0x0004FEFE, 0xFBE8ECFC, 0xF7010016, 0xFC010409);
	r1 = D(r1, s0_2_2, 0x0A0F0A00, 0xFE0101F8, 0x11080005, 0x0802F7F4);
	r2 = D(r2, s0_2_2, 0xF5FEF50D, 0xDF0C27E7, 0xF803F609, 0xF01311FA);
	r3 = D(r3, s0_2_2, 0x090E2601, 0xEFFDFADC, 0xFFFCF507, 0xF30BF810);
	r4 = D(r4, s0_2_2, 0xF513F12A, 0x0B03FB09, 0xFBFEF90B, 0xE01400FB);
	r5 = D(r5, s0_2_2, 0x030306FF, 0xFAFF0807, 0x06FB0CFC, 0x0404F706);
	r6 = D(r6, s0_2_2, 0xFCF4F1F5, 0xEE0AE709, 0xFD030504, 0x080B10FD);
	r7 = D(r7, s0_2_2, 0x072B00FD, 0xF5FDFD02, 0x0E0AFFED, 0x05FD07F2);
	r0 = D(r0, s1_0_0, 0xFAF617F8, 0x17E9F702, 0xEA0600EE, 0xF707F3ED);
	r1 = D(r1, s1_0_0, 0x07F6FA15, 0x0BF90AF5, 0x11F50DF5, 0xFEF206FC);
	r2 = D(r2, s1_0_0, 0x0DF6CCE7, 0xE81AE6F3, 0x030107FD, 0xE7FEE0E2);
	r3 = D(r3, s1_0_0, 0xFCE5FFF3, 0x27F7F606, 0xF70EDCED, 0xE5F70119);
	r4 = D(r4, s1_0_0, 0x09E4FBDB, 0x0B08FA04, 0xF0F60627, 0xF60CEBFE);
	r5 = D(r5, s1_0_0, 0xF0FD110A, 0xF4081703, 0xF8040706, 0xF0F1F8F2);
	r6 = D(r6, s1_0_0, 0x0404E0FB, 0xECF70505, 0xF9FCFE06, 0xF0FEEF00);
	r7 = D(r7, s1_0_0, 0x0F05ECF2, 0xF9FFFC0A, 0x2919FFD3, 0xF9FFF8FC);
	r0 = D(r0, s1_0_1, 0x09FBF30E, 0xEB11DF1E, 0xE608F22E, 0xF1F4FD04);
	r1 = D(r1, s1_0_1, 0x0EE4F3FD, 0x050FF0F6, 0xF3FCF8F3, 0x1B0C16F4);
	r2 = D(r2, s1_0_1, 0x06EAFAEA, 0xEBF31811, 0x0AFF0303, 0xE50BF08F);
	r3 = D(r3, s1_0_1, 0xE913E501, 0xF40F0914, 0x06EE040D, 0xF3010010);
	r4 = D(r4, s1_0_1, 0xE513E6DD, 0x0E071507, 0x0EF7F2FA, 0x0A0022E2);
	r5 = D(r5, s1_0_1, 0xF9F005FE, 0x11FEF502, 0x0003FB03, 0x0AD0FEFA);
	r6 = D(r6, s1_0_1, 0x1A14FCFB, 0x00F510F3, 0x0AFAF9ED, 0x19FE09D2);
	r7 = D(r7, s1_0_1, 0xF3FE0ACC, 0xF907F606, 0x060F03E3, 0x0607FC00);
	r0 = D(r0, s1_0_2, 0x1019F509, 0xF806FC0B, 0xEE0AF415, 0xFFD20401);
	r1 = D(r1, s1_0_2, 0xFC14F0F2, 0x0407EF00, 0xFE0EFB02, 0x08091107);
	r2 = D(r2, s1_0_2, 0xF51503F1, 0xFF07DEFD, 0x07FD1005, 0xF0FB0BE3);
	r3 = D(r3, s1_0_2, 0x15F9EE09, 0xF3E7F411, 0xF0EA0600, 0xEC04FA06);
	r4 = D(r4, s1_0_2, 0x0B090B06, 0x090F0D0F, 0x0327FECB, 0x1DEA08F9);
	r5 = D(r5, s1_0_2, 0x10F90B02, 0x15191101, 0xFDFDF605, 0x01E50AF9);
	r6 = D(r6, s1_0_2, 0xFC1505F6, 0x061AEFF3, 0xF00303FF, 0xE82EDE02);
	r7 = D(r7, s1_0_2, 0xF40A00F8, 0x000C0403, 0x08F51708, 0xF81BFD10);
	r0 = D(r0, s1_1_0, 0xE302E119, 0xF2FC070A, 0xFBF4EDEB, 0xF7E30206);
	r1 = D(r1, s1_1_0, 0xFAE5FEFC, 0x030105E9, 0xFF0C06E3, 0x1C03FFFB);
	r2 = D(r2, s1_1_0, 0xF8EBE900, 0xEC17F81C, 0xF90A0A13, 0xFB0015DF);
	r3 = D(r3, s1_1_0, 0x0718F11C, 0x06E2FD07, 0x05DA040A, 0x10FA2D01);
	r4 = D(r4, s1_1_0, 0x0FE1E2FF, 0x0205E61D, 0xF8F0F818, 0x0C0608FD);
	r5 = D(r5, s1_1_0, 0x0706ED13, 0x0105EAFA, 0x0309FC08, 0x08FEF51E);
	r6 = D(r6, s1_1_0, 0xFBED1228, 0xF3F6161D, 0x08FD001D, 0x0B1D14F8);
	r7 = D(r7, s1_1_0, 0x14FAFDED, 0x0A060244, 0xFAEADE9A, 0x0B09FAE7);
	r0 = D(r0, s1_1_1, 0xEC16E6FA, 0xF40EF7DF, 0xF819F927, 0xF6C105F7);
	r1 = D(r1, s1_1_1, 0x16E60804, 0x1210F810, 0x1AD71100, 0x1102FC0C);
	r2 = D(r2, s1_1_1, 0xEBFAF8BB, 0xF620050F, 0xE30B0DE4, 0x180BE2B1);
	r3 = D(r3, s1_1_1, 0x140117EB, 0xF60EEDFB, 0xEE130802, 0x08DAF8FF);
	r4 = D(r4, s1_1_1, 0x07EE06FE, 0x0A0A0FFF, 0xFF04D603, 0x02EFCFE4);
	r5 = D(r5, s1_1_1, 0xEB12F228, 0x010B04D2, 0x0004F314, 0x04E7F104);
	r6 = D(r6, s1_1_1, 0x09F203E0, 0x21FE0B27, 0x13FEFB12, 0x0D21FB01);
	r7 = D(r7, s1_1_1, 0xEBFDEFE9, 0x0FFAEE03, 0xFFEBFED4, 0x070A0504);
	r0 = D(r0, s1_1_2, 0xF1FEF9EE, 0xF30531FA, 0x1C16E905, 0xF7FE180B);
	r1 = D(r1, s1_1_2, 0xF7FC14FE, 0xF5090D00, 0xFAE61AEF, 0x04130906);
	r2 = D(r2, s1_1_2, 0x07CDF2D7, 0x1612FF01, 0x0803FF03, 0xEFEDE1D3);
	r3 = D(r3, s1_1_2, 0x04EDF3E9, 0xE9F7FEF2, 0xF8FBEEE8, 0xF10905FD);
	r4 = D(r4, s1_1_2, 0x040AD7F4, 0x11F60A09, 0x0C00F706, 0xDD220D02);
	r5 = D(r5, s1_1_2, 0x0F1CEE08, 0xE20908FC, 0x08F70108, 0x0D0AF8F6);
	r6 = D(r6, s1_1_2, 0x04FEFB0A, 0x131BFC12, 0x09F00AFD, 0xFC18E904);
	r7 = D(r7, s1_1_2, 0xF8D800FD, 0x0803FB0A, 0x001BFB04, 0x07FBED08);
	r0 = D(r0, s1_2_0, 0xF2F1D2D9, 0xE914F50E, 0x03FEFC0B, 0x0A0903FA);
	r1 = D(r1, s1_2_0, 0xFA06D5F2, 0x04FC01FF, 0x001309E2, 0x03E6ECF7);
	r2 = D(r2, s1_2_0, 0xF6F906F5, 0x0D0AE5FC, 0x01EF010A, 0x29D208F2);
	r3 = D(r3, s1_2_0, 0xF4FDF306, 0xE6E300F5, 0x01000B0F, 0xF5071813);
	r4 = D(r4, s1_2_0, 0xDAB6E9FF, 0x10F6021E, 0x07EBFC07, 0xF8F726F6);
	r5 = D(r5, s1_2_0, 0x0901F7F6, 0xFEF5F801, 0x0506FB10, 0x1015F511);
	r6 = D(r6, s1_2_0, 0xDB0503E7, 0x06F21A08, 0xFD080603, 0xF8DF0EE0);
	r7 = D(r7, s1_2_0, 0x0DF9EFF7, 0xF6FB01F7, 0x0AEFE3E9, 0xFE00FD04);
	r0 = D(r0, s1_2_1, 0x02FDEEE0, 0x170C140E, 0xF80004EF, 0xF8ECF600);
	r1 = D(r1, s1_2_1, 0xE202FBED, 0xFEF604F5, 0x0EF401FB, 0x00FC0116);
	r2 = D(r2, s1_2_1, 0x03FBFDE3, 0x09F9EF0F, 0xFCFE0807, 0x07F80506);
	r3 = D(r3, s1_2_1, 0xEA0DF208, 0x16021327, 0x0D06F9FB, 0xFF04F90D);
	r4 = D(r4, s1_2_1, 0xF4F1020B, 0x0DE11BFC, 0xFC04FEF4, 0xEB0B0909);
	r5 = D(r5, s1_2_1, 0x0A03FF01, 0x0DF80D09, 0x0201F4F2, 0xE6F6F7F4);
	r6 = D(r6, s1_2_1, 0x08FF0306, 0xFE000DF7, 0x070BF700, 0xFAF62109);
	r7 = D(r7, s1_2_1, 0x02FCEED5, 0x040A0810, 0xF50CFDF3, 0x0802F809);
	r0 = D(r0, s1_2_2, 0x0C15F3ED, 0xEA0FF704, 0x150613FA, 0xF913F800);
	r1 = D(r1, s1_2_2, 0xF6F8FAFB, 0x00FA03FD, 0xE401FBFB, 0xD5F50301);
	r2 = D(r2, s1_2_2, 0xF111EFF5, 0x04F2FF06, 0x0403FC07, 0xF9F014F6);
	r3 = D(r3, s1_2_2, 0x0E04F507, 0xF0110113, 0x01F6FAFB, 0xFDF70F09);
	r4 = D(r4, s1_2_2, 0x010919F4, 0xFD0A0807, 0xF7FE05EF, 0x070C0EEF);
	r5 = D(r5, s1_2_2, 0x030202FF, 0xFB070402, 0xFBFE05FA, 0xFF0900FE);
	r6 = D(r6, s1_2_2, 0x1305FE06, 0x1701FE11, 0xF9FB00FD, 0x0AEAF20D);
	r7 = D(r7, s1_2_2, 0xF5FD02F9, 0xFDFB01FB, 0x140412EE, 0xEE070502);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(2.821e-02, 1.003e-02, -6.514e-03, 7.172e-03);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(3.888e-02, -2.246e-02, -3.255e-02, 8.622e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(5.640e-03, -8.548e-04, -4.792e-02, 4.310e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-1.013e-01, 5.012e-02, -2.222e-02, -2.130e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(4.122e-02, 1.549e-03, 2.955e-02, -6.487e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-2.158e-02, 1.348e-02, 6.358e-02, -3.222e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(4.850e-02, -1.953e-02, 6.895e-03, -2.151e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(8.599e-02, -1.989e-01, 1.373e-01, 5.219e-03);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-6x32-BILINEAR-MPV-NVL-conv4
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x020DCE03, 0x0DE70B19, 0x0AFAF90C, 0xF902FAFD);
	r1 = D(r1, s0_0_0, 0x00080301, 0xF9E906F3, 0xE806F7FD, 0xF3F80FFA);
	r2 = D(r2, s0_0_0, 0x04FA0109, 0xFBEEF711, 0x020909F9, 0x02010CF2);
	r3 = D(r3, s0_0_0, 0xEE090A25, 0xF3F60407, 0xF20EF015, 0xF407FDF3);
	r4 = D(r4, s0_0_0, 0xF7F8F50C, 0xF504F8FE, 0xF20008FC, 0xED08041E);
	r5 = D(r5, s0_0_0, 0x02E40DFA, 0xF21DD6F7, 0xE806EA09, 0x0AFAFA00);
	r6 = D(r6, s0_0_0, 0xFBF6FA15, 0xFF02020A, 0x07F5FBFC, 0x041DFE02);
	r7 = D(r7, s0_0_0, 0x15FE0723, 0x0B03F8FD, 0x02F0F611, 0x02FB02F3);
	r0 = D(r0, s0_0_1, 0x10FA1FFD, 0x1701F713, 0xFEF70301, 0x01EDF201);
	r1 = D(r1, s0_0_1, 0xEDF018FB, 0xFCFDEE12, 0x06040010, 0xD501F604);
	r2 = D(r2, s0_0_1, 0x04000AFF, 0x0B2CF41D, 0xF8ED1A10, 0xEEF9FD04);
	r3 = D(r3, s0_0_1, 0x050D1C1E, 0x050B0003, 0x08E9F3EB, 0xFCF8FAF8);
	r4 = D(r4, s0_0_1, 0xFFEAFD0F, 0x000D0605, 0x01E7EF0C, 0xE3F7E412);
	r5 = D(r5, s0_0_1, 0xFE05E905, 0xF4F01A0F, 0xFA02E505, 0x0A0003F6);
	r6 = D(r6, s0_0_1, 0xF7F200F0, 0xF8FFF000, 0xF9E510F2, 0x0D0C1108);
	r7 = D(r7, s0_0_1, 0x0402FC10, 0x03081A03, 0xF0F80F01, 0x0F0C0110);
	r0 = D(r0, s0_0_2, 0xFEF0E924, 0x04E5F8FF, 0xFFFA0608, 0xF700DD18);
	r1 = D(r1, s0_0_2, 0x0DFA00FB, 0xFC121514, 0x01030214, 0xF60BDF03);
	r2 = D(r2, s0_0_2, 0xFEFB02F3, 0xF6FC0B12, 0x08ECF709, 0x0FF206F5);
	r3 = D(r3, s0_0_2, 0x13FBFA07, 0x09060006, 0x07F90C0A, 0x08FF05FE);
	r4 = D(r4, s0_0_2, 0x0AF61006, 0xFFFDF604, 0xFF09061A, 0xE8090715);
	r5 = D(r5, s0_0_2, 0xFFFBFAFF, 0xFA15F725, 0xFBFAF8EA, 0x04FFFCFA);
	r6 = D(r6, s0_0_2, 0x0DEDF209, 0xFAF20BE7, 0xF713E303, 0xF903FE06);
	r7 = D(r7, s0_0_2, 0x1006FF0B, 0xFE0DFA08, 0x04EB070A, 0xFD121122);
	r0 = D(r0, s0_1_0, 0x132006F0, 0x13DD2006, 0xFCF80507, 0xF4FB24E8);
	r1 = D(r1, s0_1_0, 0xEFF5E00C, 0xF8F2F9FB, 0xFFFF0202, 0x1011FF08);
	r2 = D(r2, s0_1_0, 0xFAF0ED04, 0xF6D41B05, 0xE402FBF4, 0xECFE1BF3);
	r3 = D(r3, s0_1_0, 0x26F9DDFA, 0x0DF0FFFD, 0xFEF0FDF7, 0xF00A1001);
	r4 = D(r4, s0_1_0, 0xF70E0C02, 0xFF00F5EE, 0x06FF1BEF, 0x070F0DE1);
	r5 = D(r5, s0_1_0, 0x0D0AFEFE, 0x1810F000, 0xF8FFF9F6, 0xFC02F108);
	r6 = D(r6, s0_1_0, 0x1902F1FB, 0xFE02F5FD, 0x07061100, 0x09F700FD);
	r7 = D(r7, s0_1_0, 0xF1B8000D, 0xF5F3F7FA, 0x05E8EE10, 0xFBFE10FC);
	r0 = D(r0, s0_1_1, 0x19E01021, 0x05B80410, 0x05FFFB07, 0x18F4E8F7);
	r1 = D(r1, s0_1_1, 0xC809FB00, 0xD2F8F5F2, 0xF7070CFD, 0xEE010913);
	r2 = D(r2, s0_1_1, 0xF9F5FF11, 0x20CBF6F1, 0x0CEE1001, 0xEAF802FF);
	r3 = D(r3, s0_1_1, 0xF80B02FB, 0x160CFE06, 0x12F01EEC, 0x01FCF107);
	r4 = D(r4, s0_1_1, 0x1FF9FF11, 0xF9F3F7F2, 0x16DFEEFF, 0x031A03FE);
	r5 = D(r5, s0_1_1, 0x2709EFF2, 0x1F001C05, 0xEAF6E6E9, 0x01010602);
	r6 = D(r6, s0_1_1, 0x0E0D2F14, 0xF5DFFAFD, 0xF81FFE07, 0x001003FF);
	r7 = D(r7, s0_1_1, 0x0102FEF0, 0xFB060F01, 0xE5C20DFB, 0x0D0BFC07);
	r0 = D(r0, s0_1_2, 0xF508FE11, 0x0DDBFAEE, 0xFE04090B, 0xF907F814);
	r1 = D(r1, s0_1_2, 0xF807F504, 0x0BFF0DFD, 0x03FCF7F7, 0xEF18D9F5);
	r2 = D(r2, s0_1_2, 0x0EFBFE01, 0x10E41D01, 0xE81BFA02, 0x0A000700);
	r3 = D(r3, s0_1_2, 0xEC0B01F9, 0x08FDF5FD, 0xFA0EF906, 0x0901F4FD);
	r4 = D(r4, s0_1_2, 0x0100F90B, 0x06F8E5ED, 0xF7F2F807, 0xEBF010EF);
	r5 = D(r5, s0_1_2, 0xF508EA0A, 0xFBE01409, 0x030D18FB, 0x07FC02FA);
	r6 = D(r6, s0_1_2, 0xFF20E809, 0x0CF006FD, 0xFA27FB22, 0xFBFCFFFC);
	r7 = D(r7, s0_1_2, 0x0905061D, 0xF805F609, 0xFADEECFA, 0xE90ADC06);
	r0 = D(r0, s0_2_0, 0xFB0EFA01, 0xFEC9F706, 0x0301FD07, 0xF1070102);
	r1 = D(r1, s0_2_0, 0xF6F4FE0F, 0xCD11E7FB, 0xEAF2FBF4, 0x00EBF900);
	r2 = D(r2, s0_2_0, 0x07F40900, 0xFACDFB0E, 0x0103FF0A, 0x0E07FFF9);
	r3 = D(r3, s0_2_0, 0xEDEBFF06, 0xFD0FFCFE, 0xEED603EE, 0x0105FAFD);
	r4 = D(r4, s0_2_0, 0x02E9F8F9, 0xCC1DFC0E, 0xFF060602, 0xEDF7FA09);
	r5 = D(r5, s0_2_0, 0x01FDF3F8, 0xCBE9F309, 0xF3021410, 0x02FC00FE);
	r6 = D(r6, s0_2_0, 0x07E81301, 0xF6F9F80E, 0x14DB1203, 0xF2FC04FE);
	r7 = D(r7, s0_2_0, 0x05F3F723, 0x00F60EFC, 0x17EE0201, 0xFEFE0A09);
	r0 = D(r0, s0_2_1, 0xFD01EE0C, 0xF0B70610, 0xFBF6F702, 0x01D7FC10);
	r1 = D(r1, s0_2_1, 0xFD140A01, 0xDEF606FE, 0xBBEC0BF9, 0x110217FE);
	r2 = D(r2, s0_2_1, 0xFB050103, 0xEEDEFB00, 0x00E40E01, 0xF10303FF);
	r3 = D(r3, s0_2_1, 0xEF26F20F, 0x0703FB02, 0x05EE0AEB, 0xF50DFE04);
	r4 = D(r4, s0_2_1, 0xFAF401FE, 0xD7F41FFF, 0xF4F4F904, 0xF0F91BF7);
	r5 = D(r5, s0_2_1, 0x0504F7F7, 0xF407FB0C, 0xE6DFFDFF, 0x0107FE01);
	r6 = D(r6, s0_2_1, 0xFFBF09FE, 0x01E0F7FD, 0x1CF70D00, 0xFE0802FA);
	r7 = D(r7, s0_2_1, 0xE313E903, 0x0900FB0D, 0x12DBF802, 0x0510F50D);
	r0 = D(r0, s0_2_2, 0x09010AF9, 0xE7E8E3E8, 0xFEEE05FB, 0xF2FEF8FF);
	r1 = D(r1, s0_2_2, 0xF80316EA, 0x0D13FF15, 0xFD12F8F4, 0x070B0706);
	r2 = D(r2, s0_2_2, 0x06030A05, 0x0B0F0307, 0xFFEDEE11, 0x0DF802F6);
	r3 = D(r3, s0_2_2, 0x1412FC06, 0xF800F701, 0xCDF0E811, 0xFF0107FA);
	r4 = D(r4, s0_2_2, 0x030FFC04, 0xFF0FFD06, 0xF20A00F7, 0xE0EEE2E8);
	r5 = D(r5, s0_2_2, 0x06FAED04, 0xF1E110F1, 0xF9F6F90E, 0x00FB0201);
	r6 = D(r6, s0_2_2, 0x08F1040E, 0xFE08FA0C, 0xF8F2F803, 0x040008F8);
	r7 = D(r7, s0_2_2, 0x00FDFF08, 0x0A03FE01, 0xF2E000F9, 0x0601FCF6);
	r0 = D(r0, s1_0_0, 0xF4F3FDEB, 0xF1FB090B, 0x06030805, 0x1509F9FA);
	r1 = D(r1, s1_0_0, 0x0A08F8FB, 0x05E30427, 0xF7F9FFF4, 0x0C12F8FE);
	r2 = D(r2, s1_0_0, 0xFE0002F4, 0xF5ED0003, 0x070500EE, 0xFBF70208);
	r3 = D(r3, s1_0_0, 0xD80FEE04, 0x06F807FC, 0x1BE9FCFB, 0xF90009FD);
	r4 = D(r4, s1_0_0, 0x0EF70007, 0x08FE03FD, 0xED0CFB08, 0x08EE0A10);
	r5 = D(r5, s1_0_0, 0xFCF9FCF7, 0xEF00F9F9, 0x03020CEF, 0x020000F7);
	r6 = D(r6, s1_0_0, 0xF8FAF80E, 0xFD0309FC, 0x0302000D, 0x0708F206);
	r7 = D(r7, s1_0_0, 0x12020C07, 0xF4F4FC04, 0x13FBFEFC, 0xF7E305F7);
	r0 = D(r0, s1_0_1, 0x100EF8FC, 0xF2FE0D01, 0x0AFBF506, 0xFB0AF1F5);
	r1 = D(r1, s1_0_1, 0xFBF0FC0D, 0xF00C04E7, 0x08F00203, 0xF4EFFFFA);
	r2 = D(r2, s1_0_1, 0x0A1103FC, 0x05ED190A, 0x01F7FD04, 0x04F7FAFD);
	r3 = D(r3, s1_0_1, 0x12E20F05, 0xE1071302, 0x08E71D19, 0x05F80701);
	r4 = D(r4, s1_0_1, 0xF40106F7, 0x04FA0AF6, 0xEC011706, 0xF90FD3ED);
	r5 = D(r5, s1_0_1, 0x0100F8FB, 0x1620EBE8, 0x0FED0E0C, 0x0A0B0AFF);
	r6 = D(r6, s1_0_1, 0xE8EC0D0A, 0x0E0F0DF7, 0xF806F907, 0xFF0BFC0A);
	r7 = D(r7, s1_0_1, 0xD806090E, 0x22FFE2FC, 0x1AE703EA, 0xFD1FE319);
	r0 = D(r0, s1_0_2, 0xF606FCF7, 0x23FDFCFF, 0x0300FFFC, 0xD90610F3);
	r1 = D(r1, s1_0_2, 0xEAF30F0C, 0xFFF5FB0D, 0x0700FA0B, 0xF10E100C);
	r2 = D(r2, s1_0_2, 0x0004FDFD, 0x0EF2F60E, 0xF50404FA, 0x0EFEF403);
	r3 = D(r3, s1_0_2, 0x0406F1FF, 0x08FA0304, 0xE3E7FD09, 0xF9070400);
	r4 = D(r4, s1_0_2, 0xF0FE0912, 0x060304FD, 0xFEFBFB05, 0x2401E41A);
	r5 = D(r5, s1_0_2, 0xEF00F909, 0xF203FD16, 0xFF02EE00, 0xFB0303FE);
	r6 = D(r6, s1_0_2, 0x031A0409, 0x0EFDFC05, 0x00FAF9F1, 0x08050309);
	r7 = D(r7, s1_0_2, 0x0CF60A0C, 0xF4F6F4FA, 0x04FAEAF8, 0x01E40D16);
	r0 = D(r0, s1_1_0, 0x0A18EFFB, 0x070702FE, 0xFF0BF805, 0xFCE31D11);
	r1 = D(r1, s1_1_0, 0x00F805F9, 0x070B0DF5, 0xF7EF09F6, 0xFB16F6F8);
	r2 = D(r2, s1_1_0, 0x06FC110F, 0xF7ED12FC, 0x010004F0, 0xFB0606FF);
	r3 = D(r3, s1_1_0, 0xCFE61504, 0x05FD05EF, 0xFB161407, 0xF8F817F7);
	r4 = D(r4, s1_1_0, 0xFEFDFFE5, 0xF6FF0CFF, 0x03FD1601, 0xF8FD1D07);
	r5 = D(r5, s1_1_0, 0xF500FB17, 0xFCEA1CD0, 0x0105E6FC, 0xFA12E8FA);
	r6 = D(r6, s1_1_0, 0x020EF6FA, 0x08ED0BF4, 0xFBFDE40C, 0x00FA0306);
	r7 = D(r7, s1_1_0, 0xF2E413D5, 0x0301EF0B, 0xFDF40E12, 0xE705FE0A);
	r0 = D(r0, s1_1_1, 0x1CFF0F1A, 0x08E40DF2, 0xF806FEFE, 0xA5FB100F);
	r1 = D(r1, s1_1_1, 0x01E7FDF2, 0xE123F6E3, 0x06F4E8FA, 0x06FFD503);
	r2 = D(r2, s1_1_1, 0x0EFBDFFC, 0xEECC10F2, 0xEA19E612, 0xD7E5F208);
	r3 = D(r3, s1_1_1, 0xF41118FB, 0xF6FEE710, 0xE809EEFA, 0x04010FFE);
	r4 = D(r4, s1_1_1, 0xF90EF004, 0x04FF1B02, 0xFDFD0CEF, 0xE9D9F3E2);
	r5 = D(r5, s1_1_1, 0x02F9C9E9, 0x09FCEC08, 0x0EDF220A, 0x0C052901);
	r6 = D(r6, s1_1_1, 0xE305100F, 0xFE0815F0, 0xFA071F11, 0xEE1629F8);
	r7 = D(r7, s1_1_1, 0x13FC0F00, 0x060DFC19, 0xF2CFDEF1, 0xF9101716);
	r0 = D(r0, s1_1_2, 0xF825F6EE, 0xE3F8160C, 0xF908F0F2, 0xEBDF03E3);
	r1 = D(r1, s1_1_2, 0x10F2F002, 0xE30CF1F3, 0xFFFCF6F8, 0xF9130105);
	r2 = D(r2, s1_1_2, 0xF8F9F505, 0xF6EE03FF, 0x1A1501E5, 0xFDF9F509);
	r3 = D(r3, s1_1_2, 0xFA0401FB, 0x09FB0606, 0x390400D0, 0x07070001);
	r4 = D(r4, s1_1_2, 0xF20A0607, 0xF909FCFE, 0xE40003F1, 0x070223D5);
	r5 = D(r5, s1_1_2, 0xF4FDF6FC, 0xE9F507F1, 0xF7F3F5FA, 0x09FE0A09);
	r6 = D(r6, s1_1_2, 0xEC06FAF7, 0xF6FF0F01, 0x0CFBEBE5, 0xFA0F0501);
	r7 = D(r7, s1_1_2, 0xF902F606, 0x0F0D08F7, 0xF216F31E, 0xFF0E31F3);
	r0 = D(r0, s1_2_0, 0xFCF904F2, 0x0000F603, 0xFFFB0505, 0x08E7160A);
	r1 = D(r1, s1_2_0, 0x061AF207, 0x20E2F512, 0xF7F8F600, 0x03090203);
	r2 = D(r2, s1_2_0, 0x05FA07F9, 0xFF02F600, 0x0E0405FC, 0x22F805F8);
	r3 = D(r3, s1_2_0, 0x07DD0AF0, 0xFB02F906, 0x04F5E2F9, 0x06F4F7FC);
	r4 = D(r4, s1_2_0, 0xFB07FCEE, 0xFA11EEEC, 0x0DF4F609, 0x01FCD9E6);
	r5 = D(r5, s1_2_0, 0xFB060008, 0xE2F6DC05, 0x17FFFFFE, 0xFE04FA06);
	r6 = D(r6, s1_2_0, 0x0712EFF1, 0xFCF5F4FB, 0x09FA030D, 0xF308F900);
	r7 = D(r7, s1_2_0, 0xFA01F208, 0xFCE80903, 0xFC00FC01, 0xF1E7030F);
	r0 = D(r0, s1_2_1, 0xF3041FE6, 0x05F3F1FD, 0xFEF4FC06, 0xFB06FBFC);
	r1 = D(r1, s1_2_1, 0xFF06DE04, 0xF31201F4, 0xFA021102, 0xEB0B020E);
	r2 = D(r2, s1_2_1, 0x140A0CFA, 0x05F6140C, 0x02FD1109, 0xDAEFEE06);
	r3 = D(r3, s1_2_1, 0xFE0610FA, 0x0303030E, 0xD9E8F729, 0x0306FBFD);
	r4 = D(r4, s1_2_1, 0x0EFE0209, 0xFC02F2F6, 0x03FFEEFC, 0x120DF2F8);
	r5 = D(r5, s1_2_1, 0xF50408EE, 0x2D01F9F9, 0xF40AFF06, 0x0607FB08);
	r6 = D(r6, s1_2_1, 0xFDDDFA13, 0x0B06F0F8, 0xEFFF27F9, 0xFFFDECF8);
	r7 = D(r7, s1_2_1, 0x1A0C05F0, 0x11FD1E01, 0xF5FD0C0B, 0x120605FD);
	r0 = D(r0, s1_2_2, 0xBB06F6E8, 0x27D51E0A, 0xFDF2F403, 0xFF060506);
	r1 = D(r1, s1_2_2, 0x21F9FB03, 0x0D0712C3, 0xFAF40C07, 0x0C0A03FA);
	r2 = D(r2, s1_2_2, 0xE90B07F9, 0xFB010AFD, 0xEE0FF4F5, 0x10F4FDFC);
	r3 = D(r3, s1_2_2, 0x160CFAF3, 0xF903FF09, 0x1AEB0AED, 0x02FFFD10);
	r4 = D(r4, s1_2_2, 0x0700E707, 0x0A05F9FE, 0x20FF0304, 0x00F80800);
	r5 = D(r5, s1_2_2, 0xFFFE04FA, 0xD405F815, 0xE5FF1104, 0xFB040502);
	r6 = D(r6, s1_2_2, 0xEE02E514, 0xF5EB0117, 0xFCFFF6EB, 0x06FE05F9);
	r7 = D(r7, s1_2_2, 0xFEFB0208, 0xE4F5F8FC, 0x1EFFF8FE, 0xEF0606F5);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFA03F9F6, 0x20F00D0E, 0xF201FB00, 0xF414F402);
	r1 = D(r1, s0_0_0, 0xF80502FF, 0x121C02ED, 0x1004F80A, 0xE304FB19);
	r2 = D(r2, s0_0_0, 0xFEFBFBF7, 0xFAFDF015, 0xFBFA0310, 0x160DFBFF);
	r3 = D(r3, s0_0_0, 0x0CECFC0F, 0x0B0D0101, 0x810BFEFC, 0xF506FF04);
	r4 = D(r4, s0_0_0, 0x0011FCEF, 0xFE04FE04, 0xFC07040E, 0x110B0C0F);
	r5 = D(r5, s0_0_0, 0xE503EBF4, 0x270FE20A, 0xF60BF6F1, 0xFF0302F5);
	r6 = D(r6, s0_0_0, 0x26FB020C, 0x080BF5FA, 0x0DF5F00A, 0x03F00509);
	r7 = D(r7, s0_0_0, 0xFAFE1505, 0x0700FBF6, 0x0117FBEB, 0x08FCFF08);
	r0 = D(r0, s0_0_1, 0xF9F600F7, 0x00FE07F9, 0xFE0106FC, 0xFAFDDE07);
	r1 = D(r1, s0_0_1, 0xF907FA1C, 0xE501E803, 0x000CFAFF, 0xEC02160F);
	r2 = D(r2, s0_0_1, 0xF507F801, 0x04FBFF01, 0xFF0304FB, 0x0909F2FF);
	r3 = D(r3, s0_0_1, 0x1402FBE4, 0x06F50206, 0x0FE41AFA, 0xFF010408);
	r4 = D(r4, s0_0_1, 0x150A091A, 0xF9080100, 0x08040A11, 0x01DD8921);
	r5 = D(r5, s0_0_1, 0x09CD050C, 0x2D07F4F2, 0xEDF7FE0C, 0xF9F60400);
	r6 = D(r6, s0_0_1, 0x0E120F19, 0xFB15F9EB, 0x050201FB, 0x0C0BFCE5);
	r7 = D(r7, s0_0_1, 0x11FDFF0B, 0xF3FBFB02, 0x00F8FCFD, 0xFFFCFBF5);
	r0 = D(r0, s0_0_2, 0x1A0A03FD, 0x050305FE, 0x0C02F706, 0xF90F0F0D);
	r1 = D(r1, s0_0_2, 0xFA0016F3, 0xFB0317FF, 0xFC09BD00, 0xE00EF0F7);
	r2 = D(r2, s0_0_2, 0xFF03FCE9, 0x0608F410, 0xF1F70CFB, 0x0501FB08);
	r3 = D(r3, s0_0_2, 0xFD09F200, 0xF805FF01, 0xF2F8F913, 0xFD040808);
	r4 = D(r4, s0_0_2, 0x170A04ED, 0xFC0CF500, 0x0915F8E8, 0x0C1A071E);
	r5 = D(r5, s0_0_2, 0xEB040B0C, 0x0BFC0515, 0xFFF90512, 0xFCFA04F8);
	r6 = D(r6, s0_0_2, 0x06FC07F6, 0x07F1FBFB, 0xF80415E8, 0x0C00F8F8);
	r7 = D(r7, s0_0_2, 0x040503EB, 0x0B04F5FF, 0x080B1409, 0x0DFF0A1A);
	r0 = D(r0, s0_1_0, 0xE4E90316, 0xF0FE0503, 0x0A0403FC, 0x05FD03FF);
	r1 = D(r1, s0_1_0, 0xE800FD00, 0xFB0CE6FA, 0x08F8F9F9, 0x020E1008);
	r2 = D(r2, s0_1_0, 0xFAFDFCEB, 0xFE08FAE5, 0xE8080AFA, 0xFDFA000A);
	r3 = D(r3, s0_1_0, 0xFBDE25B5, 0x01FCFB06, 0xF0F5ED0A, 0x0105F405);
	r4 = D(r4, s0_1_0, 0x1208EEFA, 0x060301E5, 0xF91C012D, 0xF4FC1A0F);
	r5 = D(r5, s0_1_0, 0xE205FF0A, 0x0101F30D, 0xE3F4FEF8, 0xFBF8FDF9);
	r6 = D(r6, s0_1_0, 0x08F50A02, 0x0608F3F5, 0x0009FE19, 0x0CEF02F4);
	r7 = D(r7, s0_1_0, 0xE00AEBF6, 0x110702FF, 0x22FD0CF5, 0x1405FF0F);
	r0 = D(r0, s0_1_1, 0xCAE9F407, 0x0AF2230A, 0xF5F6FCF3, 0xEB02FD03);
	r1 = D(r1, s0_1_1, 0xEDFBF7FF, 0xEF1ECBF0, 0x0B1EF208, 0x07F70909);
	r2 = D(r2, s0_1_1, 0xF822F90C, 0x080DE4FA, 0xF0000601, 0x020EFC0A);
	r3 = D(r3, s0_1_1, 0x0E01FE07, 0xF20812EA, 0xB2FCFD1B, 0xF615DEF5);
	r4 = D(r4, s0_1_1, 0xE32F09F0, 0xFF1BE505, 0xF7110E1C, 0x0E0AE2EA);
	r5 = D(r5, s0_1_1, 0xD4090C14, 0x8103E815, 0x11EA1EF2, 0xF10401FD);
	r6 = D(r6, s0_1_1, 0xDF1511F2, 0xF815F3F0, 0x0FF61706, 0x02E50627);
	r7 = D(r7, s0_1_1, 0x02F4FE07, 0xF8EA040A, 0x1018F3FD, 0x0309E624);
	r0 = D(r0, s0_1_2, 0xDEF208DC, 0xF5FEEE0F, 0x0006FA0F, 0xDE031104);
	r1 = D(r1, s0_1_2, 0xCC0212E4, 0x4A07ECFA, 0x1600D100, 0xECEBFC11);
	r2 = D(r2, s0_1_2, 0x090FFFF9, 0x12000713, 0xF3121CDA, 0xFE09FE09);
	r3 = D(r3, s0_1_2, 0xFB13FEF1, 0xFBF60EFC, 0xF103038F, 0xEF0509F8);
	r4 = D(r4, s0_1_2, 0xE406F3FB, 0x0004D20B, 0xF011F608, 0xD21FE116);
	r5 = D(r5, s0_1_2, 0xEE16FFF5, 0xEBF9E61C, 0x010A0519, 0xF7010BF3);
	r6 = D(r6, s0_1_2, 0x071DF6D0, 0x230100FC, 0xE204F1E7, 0x05FBFDF1);
	r7 = D(r7, s0_1_2, 0x01FAEE17, 0xF7F9FDFF, 0xF602D002, 0xF1091010);
	r0 = D(r0, s0_2_0, 0xE0F201EC, 0xF2050AF4, 0xFEFE07F7, 0xE3160729);
	r1 = D(r1, s0_2_0, 0xF7FA04F4, 0xFB0A0803, 0x0804F806, 0xFCF600F6);
	r2 = D(r2, s0_2_0, 0x0BFA0802, 0x0B0AFEF9, 0xF0FAFC08, 0xE801FB15);
	r3 = D(r3, s0_2_0, 0xF204F1FE, 0x060802F4, 0xFF07FCDF, 0x100005FB);
	r4 = D(r4, s0_2_0, 0x000102DB, 0x0D1BFE1B, 0xF31CF91F, 0x0505F736);
	r5 = D(r5, s0_2_0, 0xEF04FF02, 0x0604E61B, 0xF8EEF623, 0x07F305EE);
	r6 = D(r6, s0_2_0, 0xE812F9E8, 0x0905F6F9, 0xFCEF0506, 0x010DFD0B);
	r7 = D(r7, s0_2_0, 0x09FBF6E8, 0x0CFDFD00, 0xFD070CFA, 0x0300FF0D);
	r0 = D(r0, s0_2_1, 0xD3EB0309, 0x01EBFBF7, 0xFC160606, 0xF927130B);
	r1 = D(r1, s0_2_1, 0xF0EDFEF0, 0xF720D709, 0x06F7F100, 0x0EE315F6);
	r2 = D(r2, s0_2_1, 0x0CF100F3, 0x12FAFEF7, 0xDB0C06F8, 0x0B130C01);
	r3 = D(r3, s0_2_1, 0x21E1FCE9, 0xFF1302F8, 0xB4FE2BED, 0x15FCEBF1);
	r4 = D(r4, s0_2_1, 0x02FBF6E6, 0x0327E305, 0xF6000B10, 0xF6EBE21B);
	r5 = D(r5, s0_2_1, 0xF2FE01F4, 0x101AD609, 0xF307160B, 0x080405F2);
	r6 = D(r6, s0_2_1, 0xF113FDEB, 0x0D12FBF8, 0xF00E01EE, 0x0304F8F3);
	r7 = D(r7, s0_2_1, 0x1CF5E8FC, 0x0CF5F5FF, 0x0DFEFBFF, 0xF208FE09);
	r0 = D(r0, s0_2_2, 0xED03F40C, 0x1C02FCEE, 0x01FE0301, 0x06F311E6);
	r1 = D(r1, s0_2_2, 0xF10B0B0B, 0xFBFE0E01, 0x060FCFEC, 0x08FDF712);
	r2 = D(r2, s0_2_2, 0x060205F9, 0xF80BFDFC, 0xE9F510F8, 0x04FAFAFD);
	r3 = D(r3, s0_2_2, 0xE609D816, 0xFFFC06FD, 0xC80E0407, 0x04FEFA06);
	r4 = D(r4, s0_2_2, 0x05F3EE02, 0x0A14EBFB, 0xF8FE04F7, 0x08060401);
	r5 = D(r5, s0_2_2, 0xF0FD03FA, 0xCE16F909, 0x07F51B0E, 0x000902FF);
	r6 = D(r6, s0_2_2, 0x01F6FFED, 0x030812FE, 0x1507EB1F, 0x0FFD0CF4);
	r7 = D(r7, s0_2_2, 0x0D09DA07, 0xF503EE0A, 0x1817AEF2, 0xFD0306FB);
	r0 = D(r0, s1_0_0, 0x050CFA01, 0x0D05F703, 0xFE1002FC, 0xF606ECE2);
	r1 = D(r1, s1_0_0, 0xF8FCFDF5, 0xF31216EE, 0x0305EB06, 0x08070C02);
	r2 = D(r2, s1_0_0, 0x02FF08FB, 0xF70700F4, 0x0B0AF806, 0x00FCFBF4);
	r3 = D(r3, s1_0_0, 0x12FAF7F5, 0xF903F304, 0xFD04F91F, 0x03010A01);
	r4 = D(r4, s1_0_0, 0x08FD0702, 0x0205FEF6, 0xEF02D0EE, 0xEF02F4FB);
	r5 = D(r5, s1_0_0, 0xF61104FF, 0xE8F2F719, 0x05150FF4, 0x020707FF);
	r6 = D(r6, s1_0_0, 0xFAF4F9EE, 0xFEFAFFF4, 0x0706F023, 0xFAFA01FF);
	r7 = D(r7, s1_0_0, 0x0304CEE5, 0xFDF90B08, 0xFCFC0B0B, 0xFBF4FE03);
	r0 = D(r0, s1_0_1, 0x0D06F20A, 0x02F90D0E, 0xFB0B05FF, 0xFBFF0609);
	r1 = D(r1, s1_0_1, 0x04031EF3, 0xF40AE0E7, 0x1F0CFCEB, 0x0CF608EA);
	r2 = D(r2, s1_0_1, 0xEBFFFDF7, 0x0504F814, 0x03000604, 0xF8F1FC04);
	r3 = D(r3, s1_0_1, 0x0511E103, 0x0304FDFD, 0x05FBE6FD, 0xFC0C10FC);
	r4 = D(r4, s1_0_1, 0x0D06F9EE, 0xFFFFFEFB, 0xFD03FBF2, 0x09C4F5EA);
	r5 = D(r5, s1_0_1, 0xEC0B19FC, 0x12FFCDFA, 0x0C110000, 0xF207FD03);
	r6 = D(r6, s1_0_1, 0xFDF5F1FF, 0xDA1508FE, 0x0EF40517, 0x030D0103);
	r7 = D(r7, s1_0_1, 0x070C1000, 0x05F90100, 0xF9F604F9, 0xE003FBEE);
	r0 = D(r0, s1_0_2, 0x17F204F2, 0xE5090B01, 0x02FF0406, 0x07FA2610);
	r1 = D(r1, s1_0_2, 0xFB0304F6, 0x09FA0000, 0x10FDFFF5, 0x00040AFC);
	r2 = D(r2, s1_0_2, 0xF500FAFB, 0xFCFFF90C, 0xF7E7F2FF, 0xEDFEFF03);
	r3 = D(r3, s1_0_2, 0x00EB00F9, 0x100605FA, 0xF0F61A01, 0x12FFFFF8);
	r4 = D(r4, s1_0_2, 0x21FB0C09, 0x0506F6FA, 0xF40F0B16, 0x051B00DB);
	r5 = D(r5, s1_0_2, 0xD0020FF2, 0x10F6FD0D, 0x05F910F2, 0xFB01F9FA);
	r6 = D(r6, s1_0_2, 0x09F1010D, 0xFBF80B04, 0xFF06EF17, 0x04F90806);
	r7 = D(r7, s1_0_2, 0x18060AF6, 0x0A0400FE, 0x0703F10A, 0x1AFF21EC);
	r0 = D(r0, s1_1_0, 0xF80301E8, 0xF013101D, 0xF9020400, 0x0109EA00);
	r1 = D(r1, s1_1_0, 0x071409FB, 0xE22A0A02, 0x09F80F09, 0x0D0A0EEF);
	r2 = D(r2, s1_1_0, 0x00FCEFFE, 0xF9080CF3, 0x0003F5F7, 0x05090102);
	r3 = D(r3, s1_1_0, 0x0516FFE5, 0x01FD080B, 0x02E3F5E0, 0x110A0B02);
	r4 = D(r4, s1_1_0, 0xF709FAF9, 0x080DF807, 0xFC0601EE, 0xFB24131A);
	r5 = D(r5, s1_1_0, 0x090AFCF5, 0xF4EB0812, 0xEE06FADC, 0xFD060206);
	r6 = D(r6, s1_1_0, 0xDE0DF808, 0x09F30BEF, 0xF9060310, 0x020E0206);
	r7 = D(r7, s1_1_0, 0xFDFF0EFA, 0xFBF5F302, 0x0C06021A, 0xEEE9F604);
	r0 = D(r0, s1_1_1, 0x1EF11AF2, 0xF9F9ECF9, 0x11150DF1, 0x0C0D03DC);
	r1 = D(r1, s1_1_1, 0x12161DF5, 0xB708E52A, 0xFEF2FC07, 0xF90CFEEC);
	r2 = D(r2, s1_1_1, 0xFF0B0AFB, 0xFA15FCF9, 0x0623FFFC, 0xE708F00B);
	r3 = D(r3, s1_1_1, 0x25F40DFE, 0x061C0913, 0x01E4F01B, 0xF90C02EC);
	r4 = D(r4, s1_1_1, 0xF80EF71D, 0xF30FFC07, 0xF30618E9, 0x0DE1201C);
	r5 = D(r5, s1_1_1, 0xE4080407, 0x1B04F417, 0x2DFE0E14, 0xF8001008);
	r6 = D(r6, s1_1_1, 0x0105FB0C, 0xFDF5F313, 0xFC1C071B, 0x07FEF002);
	r7 = D(r7, s1_1_1, 0xE821F001, 0x0D04FC04, 0xEAE20E08, 0xF30C09D4);
	r0 = D(r0, s1_1_2, 0xE90408D1, 0x01F30502, 0xF305EE04, 0xEF0610E4);
	r1 = D(r1, s1_1_2, 0xF329F9EA, 0x18F60B05, 0x11F20701, 0xFFFDF6D9);
	r2 = D(r2, s1_1_2, 0xFBFDF8FC, 0xF6FD0100, 0xF7FE05F9, 0xEB060807);
	r3 = D(r3, s1_1_2, 0xFA0814FE, 0x040505FB, 0xF90C08F7, 0xFD0A01FF);
	r4 = D(r4, s1_1_2, 0x0F0701EA, 0xF0FEF9F1, 0xFE0105F5, 0x000AE7B1);
	r5 = D(r5, s1_1_2, 0xFA060CEC, 0x01EC1B04, 0x201A0811, 0xF9FD0301);
	r6 = D(r6, s1_1_2, 0xEF0A0001, 0x06FF0D16, 0x130710F3, 0xF804F605);
	r7 = D(r7, s1_1_2, 0x0901F3DE, 0x0AFF03F7, 0xF1FB00FC, 0xE8EFFBD6);
	r0 = D(r0, s1_2_0, 0x1314F812, 0xF60304FC, 0x010BFC09, 0x0C04FDF5);
	r1 = D(r1, s1_2_0, 0x00FAF001, 0xF401F2E9, 0x0300FA07, 0xF9090D0D);
	r2 = D(r2, s1_2_0, 0xF9FAF709, 0xFDFFF80F, 0xF2FFF406, 0x03FB0FFA);
	r3 = D(r3, s1_2_0, 0xDA15E1E4, 0x0201F705, 0x0AFAF410, 0x14FDFD03);
	r4 = D(r4, s1_2_0, 0x0104EE15, 0x06FCF107, 0xFF07FCF0, 0x0513E6F9);
	r5 = D(r5, s1_2_0, 0x0307F8F0, 0xCFED12DE, 0x1011F3F3, 0x0000F909);
	r6 = D(r6, s1_2_0, 0xEDFBE7ED, 0xFEF800ED, 0xE006FBF4, 0xEDF9F210);
	r7 = D(r7, s1_2_0, 0x12FEFA0D, 0xFCF0FB04, 0x0E0CFF0A, 0xFEF7F917);
	r0 = D(r0, s1_2_1, 0x05FF0E08, 0xF0FB0130, 0xEFFEFF07, 0xF7F8F0F8);
	r1 = D(r1, s1_2_1, 0xE203091D, 0x0424FDEC, 0x1CFD10C6, 0xFBFB0100);
	r2 = D(r2, s1_2_1, 0x0207090D, 0xFCFFF5F5, 0xFD161BD2, 0x0CE9ECFF);
	r3 = D(r3, s1_2_1, 0xED091026, 0x020103FE, 0xEE072DF8, 0x0EF7F902);
	r4 = D(r4, s1_2_1, 0x13EFFBFA, 0x0B020EFC, 0xFAF903FF, 0xEBF70BEB);
	r5 = D(r5, s1_2_1, 0xF9FAFF03, 0x0A19F3D9, 0x0FFB0703, 0xFEFEFD0B);
	r6 = D(r6, s1_2_1, 0xFE181CE3, 0xFB03FCFF, 0xEE16FE04, 0x00010AFA);
	r7 = D(r7, s1_2_1, 0xF9003009, 0x04FA02F7, 0xFCF5FE20, 0x0C0808EF);
	r0 = D(r0, s1_2_2, 0x04FAE8D7, 0x0A0AEF0E, 0x0705FE05, 0xFF030304);
	r1 = D(r1, s1_2_2, 0xE4FEE40A, 0x080910FA, 0x05040512, 0x07FAFAF1);
	r2 = D(r2, s1_2_2, 0x0E03F7F1, 0x060C0903, 0x0FEFF913, 0xFAF00BFF);
	r3 = D(r3, s1_2_2, 0xEFF0F5FB, 0x01FC0100, 0x100A1509, 0x03F807FE);
	r4 = D(r4, s1_2_2, 0x130008F4, 0x07FC130E, 0x000403E4, 0x040AE4C3);
	r5 = D(r5, s1_2_2, 0xF006F0F6, 0xFC0215F5, 0x080400F1, 0xFCFCF9FB);
	r6 = D(r6, s1_2_2, 0x05E7EF01, 0x11FE0DFC, 0xC8D906EC, 0x1207F509);
	r7 = D(r7, s1_2_2, 0xF706FADC, 0xFFF1FAF4, 0x11F30308, 0xF409FFE8);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF608F50F, 0x0EF910FF, 0x01090AFD, 0x0015F506);
	r1 = D(r1, s0_0_0, 0xFB01FB02, 0x000CF611, 0xFA02FC13, 0xF50A0A0A);
	r2 = D(r2, s0_0_0, 0x05080CFD, 0x0719F605, 0xF0FD0106, 0x04FC020E);
	r3 = D(r3, s0_0_0, 0x0B00072B, 0x030CFEF5, 0xEBFF291D, 0xFBFC02FB);
	r4 = D(r4, s0_0_0, 0xF317F306, 0xFC080007, 0x06F4F605, 0x07080627);
	r5 = D(r5, s0_0_0, 0xFC0CFAFC, 0x32EB0E0B, 0xEAF914FF, 0xFB0805F8);
	r6 = D(r6, s0_0_0, 0x05FAF10D, 0xFA00EFEF, 0xE7E00D0E, 0xFE0402F0);
	r7 = D(r7, s0_0_0, 0xFC060006, 0x0704FF0D, 0xEE00F2ED, 0xF3FF02F0);
	r0 = D(r0, s0_0_1, 0x06E7F9D5, 0xF40A0617, 0x01E6F0EB, 0x08FDECFF);
	r1 = D(r1, s0_0_1, 0xFDF10A0E, 0x1C0E02B1, 0x0208FCEE, 0x080A11FE);
	r2 = D(r2, s0_0_1, 0xFAFF0AFF, 0xFBFA0300, 0xE9CF0F08, 0xEA03FE2D);
	r3 = D(r3, s0_0_1, 0xD30F0EF9, 0x0CFC0C1D, 0xF4F02E10, 0xFBF9F81F);
	r4 = D(r4, s0_0_1, 0x0BFB04EE, 0x02FF000C, 0x11F3FC2F, 0xE7E8D9F6);
	r5 = D(r5, s0_0_1, 0x05F7000C, 0xFF1214FC, 0xF2100901, 0xFD0703F4);
	r6 = D(r6, s0_0_1, 0xFC0E041E, 0xFF0CFB07, 0xEBEF0C01, 0x02F40CF9);
	r7 = D(r7, s0_0_1, 0xFDEAFC07, 0xF403F9F9, 0xE909FA18, 0x051DFC08);
	r0 = D(r0, s0_0_2, 0xF2060A0D, 0xF2F9F2ED, 0x0107021D, 0x16E9F4F5);
	r1 = D(r1, s0_0_2, 0xFCFE1221, 0xF3111231, 0x0EF9FD15, 0x040B02F8);
	r2 = D(r2, s0_0_2, 0xFEF20C10, 0x040104FD, 0xF7180E37, 0x0200FE06);
	r3 = D(r3, s0_0_2, 0xED19041F, 0xF90104EA, 0x1101012E, 0xFC0601EB);
	r4 = D(r4, s0_0_2, 0xE5F81612, 0x0108FA06, 0x0CF6F523, 0x03FFEBD8);
	r5 = D(r5, s0_0_2, 0xEEF2F121, 0xF002F731, 0x0E090702, 0x00FB07EE);
	r6 = D(r6, s0_0_2, 0xEB0A0320, 0x120DF0EE, 0xF9ED0713, 0x0C01F0F1);
	r7 = D(r7, s0_0_2, 0xFAEEFF18, 0x14040001, 0xFCFFF4D9, 0x09EBF717);
	r0 = D(r0, s0_1_0, 0x0CF902F7, 0xEF0401FE, 0x12FCF70F, 0x01140F02);
	r1 = D(r1, s0_1_0, 0xFD05F508, 0xE00501DC, 0x0009FC1B, 0x09F60002);
	r2 = D(r2, s0_1_0, 0x05030204, 0xFF26F907, 0xF7FEFA08, 0xF10201FB);
	r3 = D(r3, s0_1_0, 0xCB0E1F18, 0xFDFE01EF, 0x040ADA10, 0x0E01FC00);
	r4 = D(r4, s0_1_0, 0xF3F0F6EB, 0x010F00EF, 0xFF09EE08, 0xFA1B15ED);
	r5 = D(r5, s0_1_0, 0xFEFEF00E, 0xBBCA15E8, 0x0807F501, 0xFFF60603);
	r6 = D(r6, s0_1_0, 0xD5C715F7, 0x070C0102, 0xFEF7F40E, 0xF41AFA00);
	r7 = D(r7, s0_1_0, 0xED00FFF4, 0x05F90603, 0x14F7FDFF, 0xFC0E0B00);
	r0 = D(r0, s0_1_1, 0xFCE2E903, 0xFD070F0D, 0xF5EF150E, 0x0CDF2016);
	r1 = D(r1, s0_1_1, 0xFCF5FE14, 0xEDE0FF0C, 0x1BEEF804, 0x0BEA0423);
	r2 = D(r2, s0_1_1, 0xF509ED02, 0xF8E80213, 0x0AC811FD, 0x0C021920);
	r3 = D(r3, s0_1_1, 0xFE10071E, 0x01F3FFFF, 0xB9D715E0, 0x06FC020B);
	r4 = D(r4, s0_1_1, 0x1D001203, 0xF0F108DF, 0xF1FB0122, 0x05E4F9D4);
	r5 = D(r5, s0_1_1, 0xDEF9F10B, 0x0D1DE5E2, 0xE2020C00, 0xF900E9EC);
	r6 = D(r6, s0_1_1, 0x0AB318FF, 0x0008071A, 0xFCFB081D, 0xFC10FE01);
	r7 = D(r7, s0_1_1, 0x0701F9FB, 0x10F60C19, 0xFBF90817, 0x0303E406);
	r0 = D(r0, s0_1_2, 0xEE090A12, 0x02220CDA, 0x00FF0E00, 0x02F7181E);
	r1 = D(r1, s0_1_2, 0x02FCF9DC, 0x09E8174B, 0x08FCEE15, 0xFE0BFB09);
	r2 = D(r2, s0_1_2, 0xF9FA0624, 0x17DC101E, 0xE81001F4, 0x07FD0CF5);
	r3 = D(r3, s0_1_2, 0xF30B0D26, 0x0306F8EE, 0xC1040406, 0x17FD0001);
	r4 = D(r4, s0_1_2, 0x000D0807, 0x150B0408, 0xF401100A, 0x05FF1CFC);
	r5 = D(r5, s0_1_2, 0xECFAFC09, 0xD1F4F72D, 0x1FFCFD0F, 0xFFFFFDEC);
	r6 = D(r6, s0_1_2, 0xEF0409E5, 0x0605F512, 0xF2FE0458, 0xF80705F3);
	r7 = D(r7, s0_1_2, 0xD9FD0F0F, 0xF4F3FB0F, 0x03090003, 0xE3FEF023);
	r0 = D(r0, s0_2_0, 0xF90CFA0B, 0x10F5FBFA, 0x090400FB, 0xE9FCF7FB);
	r1 = D(r1, s0_2_0, 0x0C0C0AFF, 0x110FD72F, 0x00FC0705, 0x03FC0EFB);
	r2 = D(r2, s0_2_0, 0xF40D0305, 0x0BFEF2FF, 0x02E9F60D, 0xFC0E0902);
	r3 = D(r3, s0_2_0, 0xE701F302, 0x020307F8, 0x0A0804FA, 0xF503FDFC);
	r4 = D(r4, s0_2_0, 0x1606FA09, 0xF9F3FBFC, 0x09EEF9FA, 0x0AD80B08);
	r5 = D(r5, s0_2_0, 0xF2EFF80A, 0x15E70918, 0x04F9F002, 0x02050602);
	r6 = D(r6, s0_2_0, 0x2015E513, 0x09F30902, 0xF70AF90C, 0x0DF9030A);
	r7 = D(r7, s0_2_0, 0x08000AE9, 0xF60DF700, 0xF616FAFA, 0xFB00FEFC);
	r0 = D(r0, s0_2_1, 0xF22E0200, 0xECF60707, 0x02FAF0E7, 0xF8F4D8FB);
	r1 = D(r1, s0_2_1, 0x010607DE, 0x02D3D512, 0x050AF90A, 0x0200FA17);
	r2 = D(r2, s0_2_1, 0x00FB0CFC, 0x12F5E804, 0xEFD6DF0B, 0x110D0A0E);
	r3 = D(r3, s0_2_1, 0xF9F2D11E, 0x060607FC, 0xD6FDF317, 0x0E02000D);
	r4 = D(r4, s0_2_1, 0x1C15F2FB, 0x0804FD03, 0xF2FBF504, 0x0BEC0505);
	r5 = D(r5, s0_2_1, 0xE3F1EB0B, 0x1A13FBF5, 0xEA0DF508, 0x07030DF0);
	r6 = D(r6, s0_2_1, 0x03DDD0FA, 0x11D9FE08, 0xF918EEF3, 0xFAF80EEE);
	r7 = D(r7, s0_2_1, 0x03E30ED8, 0xF4040A0A, 0xF7E1F804, 0xEF13FEF5);
	r0 = D(r0, s0_2_2, 0xFB061D0F, 0x011019F1, 0x020201FA, 0x0304F605);
	r1 = D(r1, s0_2_2, 0x14F00CE0, 0xFE05D711, 0x03F8F11B, 0x0A0501EF);
	r2 = D(r2, s0_2_2, 0xFF07100D, 0x02170206, 0xF9FFF00C, 0x0A0103FF);
	r3 = D(r3, s0_2_2, 0xFCFCFC19, 0xFD0203F5, 0xD01ADF0C, 0x000207FA);
	r4 = D(r4, s0_2_2, 0x06F60C04, 0x0B0E01FA, 0xFFF90204, 0x170BF41F);
	r5 = D(r5, s0_2_2, 0xEF06E507, 0x0AE90422, 0x0EF60913, 0xFF0507FD);
	r6 = D(r6, s0_2_2, 0x03E7F305, 0xFE0006ED, 0xF303F32B, 0x05FAFA01);
	r7 = D(r7, s0_2_2, 0x09FB0620, 0xFEF20B05, 0xFD0510DE, 0x0506F51C);
	r0 = D(r0, s1_0_0, 0x050F05F1, 0x0405111E, 0xF50405F9, 0x01FA11E6);
	r1 = D(r1, s1_0_0, 0xFCFCFFF1, 0xFBEAFB08, 0x06EB0808, 0x02100BF7);
	r2 = D(r2, s1_0_0, 0x02020C08, 0xF3F30AFB, 0x19010CEA, 0x09FB0D06);
	r3 = D(r3, s1_0_0, 0x1114F30B, 0x00F1F108, 0x1F08E310, 0xFAFAFCFA);
	r4 = D(r4, s1_0_0, 0xF500FDE8, 0x01FB07F7, 0xFBF30CF8, 0xFFFA1708);
	r5 = D(r5, s1_0_0, 0x000503F5, 0xF6EAFBFC, 0xFB0D03F7, 0xFD1104F9);
	r6 = D(r6, s1_0_0, 0x15FDF801, 0xFFF9090A, 0x0114F9F4, 0xFE0B0BEF);
	r7 = D(r7, s1_0_0, 0xEFF5FBE8, 0x0002FF03, 0x06FE0803, 0x0107FBFB);
	r0 = D(r0, s1_0_1, 0x0BFC02F4, 0xFDFD0BF2, 0x1900FEEA, 0xEEFB05F8);
	r1 = D(r1, s1_0_1, 0xF1ECF20C, 0xFB1C07F5, 0x11F0E801, 0xF4FBEF04);
	r2 = D(r2, s1_0_1, 0xF7FF06F9, 0xFF0BE404, 0x15F90205, 0xF407FDFA);
	r3 = D(r3, s1_0_1, 0x1CFD0C0E, 0xF7F1061B, 0x2AF0E7F6, 0xF9000203);
	r4 = D(r4, s1_0_1, 0xFEEFEE10, 0xFD04FFFF, 0x04F3F3FA, 0x0DE3F308);
	r5 = D(r5, s1_0_1, 0x09F2F206, 0x11FAD807, 0xF617FE00, 0xF20606F8);
	r6 = D(r6, s1_0_1, 0x17E0FB06, 0xEE0204F3, 0x0F04FB02, 0x05F60706);
	r7 = D(r7, s1_0_1, 0xEDF6F314, 0x0C0A00F1, 0xDAFC0109, 0x12050C0D);
	r0 = D(r0, s1_0_2, 0x0916E7F4, 0xE7E501F8, 0x15FAFAF9, 0x07FBFE01);
	r1 = D(r1, s1_0_2, 0x09FB14FA, 0x06E80600, 0x0AF6F6F5, 0xE5E8F601);
	r2 = D(r2, s1_0_2, 0xF2060B08, 0xFBF0FDF7, 0x13FCEDFC, 0xF1FEFB04);
	r3 = D(r3, s1_0_2, 0xFB00F400, 0xF9000205, 0xE6EE05EA, 0x0AFE07FB);
	r4 = D(r4, s1_0_2, 0x05110E0C, 0x04F4FD08, 0xF7EAECFE, 0xFEF2E500);
	r5 = D(r5, s1_0_2, 0x150819FB, 0xF702EDFC, 0xEA090C02, 0xF90507F8);
	r6 = D(r6, s1_0_2, 0x1FF206FC, 0xF5170A0B, 0x0CFB05DC, 0x16FC0903);
	r7 = D(r7, s1_0_2, 0x12EFF9E9, 0x060AF8FB, 0x13E1F302, 0x0E0CD8F9);
	r0 = D(r0, s1_1_0, 0xFE0D0DE7, 0xF900DC11, 0xF61C04F2, 0x0DFBFA03);
	r1 = D(r1, s1_1_0, 0xFD0117EF, 0xF6F80DFA, 0x09E9050D, 0x061C0702);
	r2 = D(r2, s1_1_0, 0xFDF2F121, 0xE2F00CFD, 0x09060504, 0x0CECE724);
	r3 = D(r3, s1_1_0, 0x0EE4090C, 0xF50FF606, 0x011E12FE, 0x07F4FB16);
	r4 = D(r4, s1_1_0, 0x090E1702, 0xFD0A1106, 0xF60DF102, 0x1110E0FF);
	r5 = D(r5, s1_1_0, 0x0BFA0611, 0x0A02F609, 0xFB0E01E6, 0x002404F6);
	r6 = D(r6, s1_1_0, 0xFF2BF9FB, 0xFD06F304, 0x00030A0D, 0xFDF6FEE4);
	r7 = D(r7, s1_1_0, 0x08F61EF5, 0x0DF7F50E, 0x0AFEF610, 0x0BEDF7EE);
	r0 = D(r0, s1_1_1, 0xDAF5EEFF, 0x0CDA0E0C, 0xFDFBF003, 0xFDF31519);
	r1 = D(r1, s1_1_1, 0x10031E10, 0xA418FBF5, 0x182E10FA, 0xE2100629);
	r2 = D(r2, s1_1_1, 0xF4211601, 0xBEE7FC0E, 0xFF2308FB, 0x0E0111F7);
	r3 = D(r3, s1_1_1, 0xF50D0704, 0x09F90B16, 0xEDC8C913, 0xF0071F0D);
	r4 = D(r4, s1_1_1, 0xF6EE0EFA, 0xF9F212F3, 0x00071405, 0xFC0524F7);
	r5 = D(r5, s1_1_1, 0x01EF0B0F, 0x0DFBEDF8, 0xEBE2F5FE, 0xFAE2F40E);
	r6 = D(r6, s1_1_1, 0xFEF6EFF0, 0xF7DF1006, 0xEC1B111E, 0x1AF30D0A);
	r7 = D(r7, s1_1_1, 0xFB2C0801, 0xEF0DFFF1, 0x022A1BE1, 0xFEFC04E9);
	r0 = D(r0, s1_1_2, 0x15FE060A, 0xC60A2002, 0xF4FBEE07, 0xDA17EFEB);
	r1 = D(r1, s1_1_2, 0xF90E0E0B, 0xF306FF03, 0x0502F4F3, 0xDDFAF110);
	r2 = D(r2, s1_1_2, 0xFB0C05FE, 0xD0F80200, 0x12DCD704, 0xEE06F103);
	r3 = D(r3, s1_1_2, 0x0DF7E4F9, 0x0B020E01, 0x1AF0F2F2, 0xFAF30E05);
	r4 = D(r4, s1_1_2, 0xEFF4F6F2, 0xF0FBFD08, 0x06111009, 0xF9000618);
	r5 = D(r5, s1_1_2, 0x14F8F8F5, 0x31F40900, 0x0D0C0F04, 0x02030808);
	r6 = D(r6, s1_1_2, 0xFBF1D6E2, 0xF80A01FF, 0x1E15C3FB, 0x0502F506);
	r7 = D(r7, s1_1_2, 0xF2EEF803, 0x0A03F5F9, 0xF8010F1A, 0xF8F8FDDF);
	r0 = D(r0, s1_2_0, 0xFF120DED, 0xFE0A100E, 0x0207FF02, 0xE8FBED0D);
	r1 = D(r1, s1_2_0, 0x06060011, 0xE5E211F6, 0x05EE0E0A, 0xF0040803);
	r2 = D(r2, s1_2_0, 0xF3F20409, 0xEBFC00EF, 0x0FEF1E02, 0xF4E3F104);
	r3 = D(r3, s1_2_0, 0x0E121E0A, 0x0101FFFC, 0x14F9F417, 0x020308FB);
	r4 = D(r4, s1_2_0, 0x0B090304, 0x08FF10F9, 0x06030C02, 0x11060F13);
	r5 = D(r5, s1_2_0, 0xF702050B, 0x19FCFEF4, 0xFD0211FC, 0xFBFFFC01);
	r6 = D(r6, s1_2_0, 0x0B0A1A20, 0x04F90FF8, 0x06E712DE, 0x060000FA);
	r7 = D(r7, s1_2_0, 0x070CF8E6, 0xF8ED0700, 0xF0FEF21D, 0xECFD02FF);
	r0 = D(r0, s1_2_1, 0xE805F605, 0xFD08E804, 0x0905FE02, 0xF40A010E);
	r1 = D(r1, s1_2_1, 0x1600F50F, 0x020CF7FB, 0x0115F904, 0xE5F9F802);
	r2 = D(r2, s1_2_1, 0xF10D00F9, 0xC7030C05, 0xFA09030F, 0x1A1610FE);
	r3 = D(r3, s1_2_1, 0x06F209F0, 0xFA040601, 0xF91602FD, 0x11FFF6FE);
	r4 = D(r4, s1_2_1, 0xFFFEFBFF, 0x0327F2E8, 0x0DFE06FF, 0x2FE513F4);
	r5 = D(r5, s1_2_1, 0x09090D0E, 0x130A11EC, 0xEDEA010F, 0xFBFAF702);
	r6 = D(r6, s1_2_1, 0xDB020D11, 0x0E0D09FF, 0xF00C000E, 0xF6070805);
	r7 = D(r7, s1_2_1, 0xFC17FCE4, 0x05FE1605, 0xFCF7FAF9, 0x04FC04EE);
	r0 = D(r0, s1_2_2, 0x0802F812, 0xEB0AEF02, 0x07010910, 0x140006F8);
	r1 = D(r1, s1_2_2, 0x0400E003, 0xD0FF0DE8, 0xF90503ED, 0xEF0DEF08);
	r2 = D(r2, s1_2_2, 0xF518FF0B, 0xD60F02F4, 0xF902F30F, 0x0EFF00F8);
	r3 = D(r3, s1_2_2, 0x14FEE9FC, 0x02FA04FF, 0x03F51CFC, 0x06FFFDFE);
	r4 = D(r4, s1_2_2, 0xEAFE0AF5, 0x0208FBF5, 0x1701FFFA, 0x1607FA05);
	r5 = D(r5, s1_2_2, 0x08F50A01, 0x13F623FB, 0xE508F8F9, 0xF308FCFE);
	r6 = D(r6, s1_2_2, 0x00002010, 0xE6FE07FD, 0xB3DCE100, 0xFA0DFCFC);
	r7 = D(r7, s1_2_2, 0xF00CF909, 0xFC07F305, 0x0D00F115, 0xF10CFEFC);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFA05FDFA, 0x0AFEF70A, 0xF3FFEA0B, 0xF104FE01);
	r1 = D(r1, s0_0_0, 0x04080704, 0xFA0312FF, 0xFCED0DF6, 0xF00DEFFC);
	r2 = D(r2, s0_0_0, 0xFBFD02FE, 0xF3FADA05, 0x00EBF8F5, 0x010107F7);
	r3 = D(r3, s0_0_0, 0x10E806D6, 0x0E01FCF9, 0xE0F9FD11, 0x020B08FA);
	r4 = D(r4, s0_0_0, 0xF9F5FE00, 0xF400F9FB, 0x06FC0CF6, 0xED0023DE);
	r5 = D(r5, s0_0_0, 0xF4FAFCF5, 0xFAFA1415, 0xD3F501F5, 0x0402F203);
	r6 = D(r6, s0_0_0, 0x1BF60A02, 0xF802FDF5, 0xFFE6F5FA, 0xFE000704);
	r7 = D(r7, s0_0_0, 0x01FEFAF3, 0x10FE11FA, 0x060FF7EF, 0xECE90701);
	r0 = D(r0, s0_0_1, 0xD2FDF1F4, 0xFE00EEEE, 0x0613FDF6, 0x0C0DFEFA);
	r1 = D(r1, s0_0_1, 0x0CFEF3FB, 0x18E62614, 0xF9DF0EF4, 0xDC1D05FB);
	r2 = D(r2, s0_0_1, 0x02FD0009, 0x22DAFEF9, 0x0CFF0C03, 0x01F90B05);
	r3 = D(r3, s0_0_1, 0xF5EAFDFB, 0x090303F2, 0x17E7002A, 0x0F0D02FD);
	r4 = D(r4, s0_0_1, 0x13F811EF, 0x0000FAFE, 0x100516EA, 0xD733241A);
	r5 = D(r5, s0_0_1, 0x1A0D0CC4, 0x0206FF09, 0xD21B030B, 0x0005EC09);
	r6 = D(r6, s0_0_1, 0x06FEFEEE, 0xFCEFED08, 0x030B1F08, 0xF40FF2FE);
	r7 = D(r7, s0_0_1, 0x12DFFE16, 0xF5F70403, 0xFC07FD0F, 0xF2EBFF12);
	r0 = D(r0, s0_0_2, 0x14EE0C01, 0xFE0E01FD, 0x00F70C10, 0x07060E07);
	r1 = D(r1, s0_0_2, 0x06091217, 0x0E0D120A, 0xFDF31806, 0xCF09DA0A);
	r2 = D(r2, s0_0_2, 0x06F80702, 0xF4FF11F7, 0xF5FB0A1D, 0x070B08F9);
	r3 = D(r3, s0_0_2, 0x0BFA0408, 0xFB01F406, 0xF400EDF3, 0x14F20309);
	r4 = D(r4, s0_0_2, 0xEDFE000C, 0x00F5010C, 0x08110DFF, 0x0C26F7E5);
	r5 = D(r5, s0_0_2, 0x07010706, 0x09F4FEFA, 0xE303F300, 0x07FFFBFF);
	r6 = D(r6, s0_0_2, 0xF4F80830, 0x09E8F3F8, 0xFB230FEE, 0xF2F1F404);
	r7 = D(r7, s0_0_2, 0xF6F80E1E, 0x0FFB0BFA, 0x27F6F70F, 0xFBF5F6F9);
	r0 = D(r0, s0_1_0, 0x1C0F2004, 0x0A03F70E, 0x0907FC0A, 0xF703D1E5);
	r1 = D(r1, s0_1_0, 0x02FB01FA, 0xADF2D5DD, 0xFBFA1101, 0x0205ED09);
	r2 = D(r2, s0_1_0, 0xF008FDFA, 0xE802D3FE, 0xFAEC0302, 0xFAF814FC);
	r3 = D(r3, s0_1_0, 0xEBDD20F5, 0xFA01F5FB, 0x2508150D, 0x050802F8);
	r4 = D(r4, s0_1_0, 0xF0121600, 0xF70FEBF3, 0x030104F6, 0x00E710F4);
	r5 = D(r5, s0_1_0, 0x0F01FDF6, 0xE0C711F4, 0x1411170B, 0x08FD04FB);
	r6 = D(r6, s0_1_0, 0x15F2FFF8, 0xF0130B06, 0x02F4FD02, 0x0407FD04);
	r7 = D(r7, s0_1_0, 0xEDF1BBF5, 0xFD031F04, 0x1C0A0E0A, 0xF7FEFFED);
	r0 = D(r0, s0_1_1, 0x07191400, 0x0ADBD60B, 0xF42300FE, 0x02FD08FD);
	r1 = D(r1, s0_1_1, 0xDDF4FE14, 0xACCCF400, 0x04DE0105, 0xF2010302);
	r2 = D(r2, s0_1_1, 0xFC1015FD, 0xF0EDF4DF, 0x09010201, 0xEBEE0B0B);
	r3 = D(r3, s0_1_1, 0xBDDCEF0A, 0x04FDEBFD, 0xF90F11CF, 0xE9FFEDFD);
	r4 = D(r4, s0_1_1, 0x06FEFB07, 0xDDFEEFFF, 0xFF0311F6, 0xF4101AF4);
	r5 = D(r5, s0_1_1, 0x0DF311DB, 0x131805EA, 0xE316F80A, 0xFF25FD05);
	r6 = D(r6, s0_1_1, 0x17F70BEE, 0x0F1416ED, 0x0F0B1D02, 0x04160F0A);
	r7 = D(r7, s0_1_1, 0x1FF7E7E6, 0x010C0D0F, 0xFCFC0010, 0xFA200BEB);
	r0 = D(r0, s0_1_2, 0x14FCFFF8, 0xE9E5E502, 0x0802F4F2, 0xFD08EAFD);
	r1 = D(r1, s0_1_2, 0x23FAFEF1, 0xFD1709EA, 0xFEFB0603, 0xBC03F0F8);
	r2 = D(r2, s0_1_2, 0xF3F60BFC, 0x03E510FF, 0x2D10030A, 0x0D1109F6);
	r3 = D(r3, s0_1_2, 0x06110603, 0x0BFBFF09, 0xFE04E11D, 0x10FF04EF);
	r4 = D(r4, s0_1_2, 0xF40805F8, 0x170805FB, 0x0A02F308, 0xDCF0F6FB);
	r5 = D(r5, s0_1_2, 0x1001FCFA, 0x16EA150B, 0xDCF304E8, 0x0703FE01);
	r6 = D(r6, s0_1_2, 0x1906040A, 0xECFCFB0B, 0xF3FB1EDF, 0x0704F507);
	r7 = D(r7, s0_1_2, 0x300703FF, 0xF70701F2, 0x18FEF2E0, 0x090DF502);
	r0 = D(r0, s0_2_0, 0x06F9F902, 0x0B071407, 0x00FFF808, 0x0215E003);
	r1 = D(r1, s0_2_0, 0x1309020E, 0x111A0F15, 0x05F909F9, 0xF60C0702);
	r2 = D(r2, s0_2_0, 0xF80E010B, 0x11FA1503, 0x0702FEFC, 0xEB181702);
	r3 = D(r3, s0_2_0, 0x0915E816, 0x06FCF6FF, 0x08EEEFEE, 0x00000D04);
	r4 = D(r4, s0_2_0, 0x04FA0BF6, 0x0E020EF5, 0x05F90507, 0x0FE6EAEA);
	r5 = D(r5, s0_2_0, 0x0FFDEE01, 0x14F42AFE, 0x10F9EB17, 0x06FFF9FC);
	r6 = D(r6, s0_2_0, 0x12060FF9, 0xF8F90AFF, 0xF708FCF8, 0x09F20FFF);
	r7 = D(r7, s0_2_0, 0xEF000CEF, 0x010FFAFE, 0x23F7F408, 0xFD0E0100);
	r0 = D(r0, s0_2_1, 0xD80C0604, 0x0301E0F9, 0x130CF3F8, 0x14100915);
	r1 = D(r1, s0_2_1, 0xE7FAFF0F, 0xFA00160F, 0xF9F00CF8, 0xEDFCEE03);
	r2 = D(r2, s0_2_1, 0xD6070502, 0xF3F402FE, 0x0C0AF506, 0xF5E6FA15);
	r3 = D(r3, s0_2_1, 0xF8F70902, 0x0C08FC07, 0x0DE90F05, 0xF7FD0807);
	r4 = D(r4, s0_2_1, 0xFB00F402, 0xE2E8E4FF, 0x030F0A09, 0xBEFAF40C);
	r5 = D(r5, s0_2_1, 0xF5050309, 0x140032EC, 0x0B00F913, 0xF3010805);
	r6 = D(r6, s0_2_1, 0x1E1601F0, 0x110A18F3, 0x0BF5DAF8, 0x0502F302);
	r7 = D(r7, s0_2_1, 0xCEF519E6, 0xF6180407, 0x18FFFEF4, 0xEEEFF9F4);
	r0 = D(r0, s0_2_2, 0x07F7FBFE, 0xF2D4ED0A, 0xFDFCFE03, 0x05F60806);
	r1 = D(r1, s0_2_2, 0xE302F7F2, 0x01231B0C, 0x0903F8F6, 0xF106FB09);
	r2 = D(r2, s0_2_2, 0xFDFAFA08, 0x0E0601FE, 0x0509091D, 0xFE0C10F6);
	r3 = D(r3, s0_2_2, 0x140602FB, 0xFDFDFA08, 0x191F0B29, 0x0200F8FC);
	r4 = D(r4, s0_2_2, 0xF9F9FAFB, 0xF9080C05, 0xFEF9FEFC, 0x0EEC0A0E);
	r5 = D(r5, s0_2_2, 0x03070005, 0x21F2F6F2, 0xEDFD01FD, 0x0801FBFF);
	r6 = D(r6, s0_2_2, 0x0DFCFE07, 0x06150807, 0xF5F6C9E7, 0xE7F2FC03);
	r7 = D(r7, s0_2_2, 0xE9FDFFF2, 0xF514FCFE, 0xFE0911F4, 0xF3FB040B);
	r0 = D(r0, s1_0_0, 0x0510ECF5, 0xFC0415EF, 0x1108EDFF, 0x1706F9F0);
	r1 = D(r1, s1_0_0, 0x08020C11, 0xF3FB0103, 0x05FD0302, 0x01072403);
	r2 = D(r2, s1_0_0, 0xF5F8FAFD, 0x20F9F907, 0x08FD0DF9, 0xFEFFEEFE);
	r3 = D(r3, s1_0_0, 0xFE0F17AC, 0xF8FBF8F5, 0x13F1FB03, 0xF506F505);
	r4 = D(r4, s1_0_0, 0xFF01F5FA, 0x00FFF2FD, 0x000308DC, 0x0DFEF2EE);
	r5 = D(r5, s1_0_0, 0x0F0F0BFC, 0x04F9E60F, 0x0106F012, 0xF900FC0E);
	r6 = D(r6, s1_0_0, 0xF9FAF2E9, 0xEFF4F6FF, 0x0F0FEF05, 0x090010F8);
	r7 = D(r7, s1_0_0, 0xFD16ECFD, 0x06FCF60A, 0xE306EB0A, 0x080BE803);
	r0 = D(r0, s1_0_1, 0x07F410EE, 0xFB041403, 0x0001E901, 0x0AFFFFF4);
	r1 = D(r1, s1_0_1, 0x0A0EE806, 0xF90612FE, 0x000916FF, 0xF1140A11);
	r2 = D(r2, s1_0_1, 0xF0FAF402, 0xFBF909FD, 0xFCEF06F5, 0x10F4E503);
	r3 = D(r3, s1_0_1, 0xF8F1F5F3, 0xFF06E902, 0x07B82A22, 0xF506EA04);
	r4 = D(r4, s1_0_1, 0x02021FF4, 0xF8FCEF03, 0xFE0211ED, 0xFEFF16F4);
	r5 = D(r5, s1_0_1, 0x23F31706, 0xF6F9E9DB, 0xF6F70717, 0x0602FA08);
	r6 = D(r6, s1_0_1, 0x010CF9FD, 0x02EFEC0C, 0x09110EFE, 0x020623FD);
	r7 = D(r7, s1_0_1, 0x0DF50108, 0x0C080204, 0x0DFFFA01, 0x1F021101);
	r0 = D(r0, s1_0_2, 0x01F912F6, 0x04F91403, 0x0700E4FE, 0xEB18F4F6);
	r1 = D(r1, s1_0_2, 0x0516FE16, 0xF8F1F80B, 0x04F30FF5, 0xEF11E80A);
	r2 = D(r2, s1_0_2, 0x04F6FAFA, 0x0D021102, 0xF902FE06, 0x0A08E804);
	r3 = D(r3, s1_0_2, 0x05EC0FFA, 0x00FD1900, 0xF60BFF04, 0x0211EE04);
	r4 = D(r4, s1_0_2, 0x00FF0906, 0x09F7ED09, 0x1003F3FC, 0x1BFDEFF5);
	r5 = D(r5, s1_0_2, 0x0011FAF3, 0x03EA250A, 0xF204F90E, 0xFDFD0502);
	r6 = D(r6, s1_0_2, 0x02000908, 0x02080CFA, 0xEC0F1402, 0xFFFB0A02);
	r7 = D(r7, s1_0_2, 0x01FA1D0B, 0xFEF905FE, 0x09FEE203, 0xF9E633F4);
	r0 = D(r0, s1_1_0, 0xF10906FA, 0xFCEC03E7, 0x10050C03, 0xFA11FBD9);
	r1 = D(r1, s1_1_0, 0xF407F710, 0x0EEAF50F, 0xF3F9FB0E, 0x03FF16F4);
	r2 = D(r2, s1_1_0, 0xF6FD05FB, 0x00148F2B, 0x08F2080D, 0xF4FA12FF);
	r3 = D(r3, s1_1_0, 0xCCE7CCDF, 0x03FEFF07, 0xF7F8EA0D, 0xF602FC11);
	r4 = D(r4, s1_1_0, 0xFC02F30C, 0xF509E220, 0xF9010AF5, 0xE4292300);
	r5 = D(r5, s1_1_0, 0x051004EE, 0x0508BDF6, 0x020819E9, 0x0308FF10);
	r6 = D(r6, s1_1_0, 0xE6EA2405, 0x02EC0108, 0x23010AFE, 0x120BF301);
	r7 = D(r7, s1_1_0, 0x000EF617, 0x1103EFFF, 0x0611FD05, 0x0901F607);
	r0 = D(r0, s1_1_1, 0xF0FB11D7, 0x07FBD7F8, 0x0908DB07, 0xF1ECCEE5);
	r1 = D(r1, s1_1_1, 0xFD02F01B, 0x00FBFB09, 0xED163605, 0xD5F80DF6);
	r2 = D(r2, s1_1_1, 0xE6F5E60E, 0x180CCCFF, 0xE8E3FE02, 0xF9EB1903);
	r3 = D(r3, s1_1_1, 0x03E1F2F7, 0xF909F906, 0x0B07091F, 0x1316DD09);
	r4 = D(r4, s1_1_1, 0xF9140FF1, 0xE7FEF104, 0xDBFF0DDC, 0xE7F51A24);
	r5 = D(r5, s1_1_1, 0x090B09E7, 0x0FC91AD8, 0x330AED05, 0x26160010);
	r6 = D(r6, s1_1_1, 0x08F8F3E0, 0x0DFC0B08, 0x07BBFBF4, 0x180C19E1);
	r7 = D(r7, s1_1_1, 0x06D7FE01, 0xFDF90BFE, 0xE9F0271F, 0x0C09E8EC);
	r0 = D(r0, s1_1_2, 0x14FAD301, 0xF717D508, 0x0BFCDD03, 0xF50BFBF3);
	r1 = D(r1, s1_1_2, 0xF60DE808, 0xF8010033, 0x0A144BFE, 0xFE0D0200);
	r2 = D(r2, s1_1_2, 0x0A0308FC, 0x00071105, 0x02E0F60B, 0xF30A1302);
	r3 = D(r3, s1_1_2, 0xF80501F7, 0xFE030704, 0x03E5E80B, 0xF90BBA06);
	r4 = D(r4, s1_1_2, 0x04FDF709, 0xFC070103, 0xECCC0AE8, 0x03ED01E7);
	r5 = D(r5, s1_1_2, 0x0A0613FE, 0xF9DE220F, 0x09020C08, 0x0810F405);
	r6 = D(r6, s1_1_2, 0x1704D413, 0xFEF6F300, 0x0404C7F7, 0x0701F1F3);
	r7 = D(r7, s1_1_2, 0x16FF0405, 0xF8083906, 0xFC20FAF4, 0x030109EE);
	r0 = D(r0, s1_2_0, 0xFDE611F7, 0xF90B1809, 0x0909F704, 0xE1F5F8DE);
	r1 = D(r1, s1_2_0, 0xED0C0BFD, 0x03E7E90F, 0x0CFC0808, 0xF1001815);
	r2 = D(r2, s1_2_0, 0x00FCF4FB, 0xFB14D709, 0xFCF50A14, 0x03D7F5E1);
	r3 = D(r3, s1_2_0, 0xE2E22BF2, 0x08FA0100, 0xFCD907FC, 0xFEFAFFF7);
	r4 = D(r4, s1_2_0, 0xF111F701, 0xF605F319, 0x05FD0500, 0xFAFE0DD8);
	r5 = D(r5, s1_2_0, 0xFFFA0E01, 0x0003F3FE, 0xEC03FA04, 0x03020604);
	r6 = D(r6, s1_2_0, 0xF1DCF814, 0x0300F808, 0xF60C1D14, 0xEF02020E);
	r7 = D(r7, s1_2_0, 0x112808F8, 0xFBF5FBFC, 0x0CF70B09, 0x10FAEFE8);
	r0 = D(r0, s1_2_1, 0x18E400DF, 0xF104E808, 0xFC070E02, 0xCD0720D4);
	r1 = D(r1, s1_2_1, 0xF6231C0B, 0xFEE2EDE1, 0xF3052210, 0xF606FD0A);
	r2 = D(r2, s1_2_1, 0x0AF610F6, 0xF60F0804, 0xDFE108F2, 0xDE09160A);
	r3 = D(r3, s1_2_1, 0x13F60CF4, 0x030C0CFE, 0x06D1130E, 0x1105D5FB);
	r4 = D(r4, s1_2_1, 0x0AF7030C, 0xE3092002, 0x00030CF6, 0xE10526F8);
	r5 = D(r5, s1_2_1, 0x050108FC, 0x08F21903, 0xF9FDF511, 0x030B070A);
	r6 = D(r6, s1_2_1, 0xE8E50FFF, 0x00020505, 0x16EFEFFF, 0x0106F0F5);
	r7 = D(r7, s1_2_1, 0xFD09F019, 0x16F210ED, 0x04161B05, 0x11F41EF4);
	r0 = D(r0, s1_2_2, 0xF01FFF0E, 0xE70D0915, 0xFF07F709, 0x0E0024F0);
	r1 = D(r1, s1_2_2, 0xF217FB0F, 0x02D90EDB, 0xFFF31704, 0xFC021F0E);
	r2 = D(r2, s1_2_2, 0x0203FEF7, 0x1F0822FC, 0xFFE51900, 0x03051002);
	r3 = D(r3, s1_2_2, 0xFEF8080F, 0xF9FE05FD, 0x00D5150D, 0xFC0AE7FE);
	r4 = D(r4, s1_2_2, 0x07F3F9FA, 0xF107E502, 0xFA0B0406, 0xF409D411);
	r5 = D(r5, s1_2_2, 0x150D0200, 0xFC0F04FF, 0x0400FC09, 0xFB0AF8FD);
	r6 = D(r6, s1_2_2, 0x17F60CF9, 0xFFF6041A, 0xEA1B02F6, 0xF7010700);
	r7 = D(r7, s1_2_2, 0xE521FDF7, 0xFCFCFFFD, 0xFA160003, 0xF20CFCF6);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-3.870e-02, 3.391e-02, -1.247e-02, 1.914e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(1.411e-02, 3.677e-02, -1.872e-03, -1.104e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(6.098e-03, 5.851e-02, -7.521e-03, -2.123e-04);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(1.015e-03, 1.674e-02, -3.626e-02, 1.705e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(7.418e-03, 3.687e-02, 2.939e-02, 1.410e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.418e-02, 7.886e-03, -3.720e-02, -2.578e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(8.291e-03, -4.494e-03, -1.966e-02, -3.530e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-1.522e-02, -4.120e-02, -2.689e-02, -3.018e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-6x32-BILINEAR-MPV-NVL-conv5
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE conv5
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv4_pt;
			r = conv4_gather(p, 0);
			g = conv4_gather(p, 1);
			b = conv4_gather(p, 2);
			a = conv4_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv4_pt;
			r = conv4_gather(p, 0);
			g = conv4_gather(p, 1);
			b = conv4_gather(p, 2);
			a = conv4_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF704EA0D, 0xBDF81C06, 0xF6FFF8F4, 0x06FFED1A);
	r1 = D(r1, s0_0_0, 0x01FBF9FF, 0x060F0CFB, 0x04002E05, 0x09FEFEF9);
	r2 = D(r2, s0_0_0, 0x09FA00FF, 0xF803EF10, 0x06FDF7FA, 0xF401FEFD);
	r3 = D(r3, s0_0_0, 0x14F0F2E5, 0xFC0808FC, 0xED030608, 0xF600ED1A);
	r4 = D(r4, s0_0_0, 0xFCF2F50B, 0xD6F403FB, 0xFDFF0900, 0x04060902);
	r5 = D(r5, s0_0_0, 0xFAFEF6F6, 0x0807F5FE, 0xF1A71BAE, 0x01FD0BFD);
	r6 = D(r6, s0_0_0, 0x0E0608E0, 0x0409F5ED, 0x0701F1FA, 0x121012F5);
	r7 = D(r7, s0_0_0, 0xFDF50724, 0xE8F50020, 0xE8FA150C, 0x0D08F9DC);
	r0 = D(r0, s0_0_1, 0x04FE07F8, 0xD2130981, 0x1406FE11, 0x0D0312E2);
	r1 = D(r1, s0_0_1, 0x0F0CFEDE, 0xF705E80A, 0xF1050C19, 0x0001FC0C);
	r2 = D(r2, s0_0_1, 0xE3F10E13, 0x0FFC05F8, 0x0AFDFCFF, 0x08080603);
	r3 = D(r3, s0_0_1, 0x04FC15B7, 0xEFFFFF04, 0xE60A02EE, 0x21F20EEA);
	r4 = D(r4, s0_0_1, 0x07F2130D, 0x04F8CA03, 0x04060007, 0xF6FF030A);
	r5 = D(r5, s0_0_1, 0xF800F907, 0x1CFD01EB, 0xF8EDAD14, 0x100A07EA);
	r6 = D(r6, s0_0_1, 0x230509FB, 0xEC04F3F2, 0x000D02FC, 0x391713E1);
	r7 = D(r7, s0_0_1, 0x01FB030E, 0xE0FD03DC, 0x1FF513D2, 0xF503E202);
	r0 = D(r0, s0_0_2, 0xFB09FB07, 0xD903FFFB, 0x0305F40A, 0xE20EFEFA);
	r1 = D(r1, s0_0_2, 0x040504F5, 0xF8D9FE0E, 0x12001103, 0xFDF602F9);
	r2 = D(r2, s0_0_2, 0xE9FB0507, 0x0F0CF011, 0xF204FBFE, 0xFE0202FE);
	r3 = D(r3, s0_0_2, 0x07F3F5DC, 0x0DFE0601, 0xF8FC02F9, 0x0CF9F501);
	r4 = D(r4, s0_0_2, 0x05ED02FD, 0xEF0F0DF6, 0xFF06FB01, 0xFEFFFE02);
	r5 = D(r5, s0_0_2, 0x0802FD07, 0x0D03FDFD, 0x031A06DE, 0x02030009);
	r6 = D(r6, s0_0_2, 0x05070BFB, 0x0105FAE7, 0xFEFF06FF, 0xDCD1F9F5);
	r7 = D(r7, s0_0_2, 0xF8F3FD22, 0x05F40605, 0x07F7F203, 0x12FD00F2);
	r0 = D(r0, s0_1_0, 0xF8070002, 0x04FCF9FB, 0x0EEFF115, 0xEA21F8E4);
	r1 = D(r1, s0_1_0, 0xF60603FE, 0x10DB2CE1, 0x0507FCDB, 0x03F4FE15);
	r2 = D(r2, s0_1_0, 0x0009FC01, 0x1603FD02, 0x08F91DFA, 0xFFFE08F7);
	r3 = D(r3, s0_1_0, 0xE41E10F9, 0x110A0AEC, 0xF50005FD, 0x1729D1E5);
	r4 = D(r4, s0_1_0, 0x17D90919, 0x0307E31F, 0x08FE080B, 0x0900F3FA);
	r5 = D(r5, s0_1_0, 0x06F8FF07, 0x05FA01FA, 0xE124D902, 0xFFF50713);
	r6 = D(r6, s0_1_0, 0x07E1E0D2, 0xFF0105F2, 0xEB00F4F4, 0xFEF1D921);
	r7 = D(r7, s0_1_0, 0xF2FFFA03, 0xF01507EC, 0xE9FFFC18, 0x01050705);
	r0 = D(r0, s0_1_1, 0xEFFFFF05, 0xEBEDFEE5, 0xF8F1FE03, 0xC20701EF);
	r1 = D(r1, s0_1_1, 0xFDF307E8, 0xF3F211BB, 0xE80AEDFF, 0xF914F8F9);
	r2 = D(r2, s0_1_1, 0x02090606, 0x02FBA703, 0x0209FA0A, 0x08F900F3);
	r3 = D(r3, s0_1_1, 0x11FDF305, 0x0414FCF3, 0xFEE50EDD, 0x0612EE10);
	r4 = D(r4, s0_1_1, 0x19DA03E1, 0xC610D0F8, 0xECED0B07, 0xEF1606F4);
	r5 = D(r5, s0_1_1, 0x14F400FC, 0x0711E703, 0x9B071445, 0x03F9FC00);
	r6 = D(r6, s0_1_1, 0xE0190ADC, 0x2B00FEFD, 0xFE26E3FF, 0x1DF90BF9);
	r7 = D(r7, s0_1_1, 0x0ACA0208, 0x23FB0E0D, 0xCEF607DF, 0xE4090100);
	r0 = D(r0, s0_1_2, 0xFC07FF07, 0xB2EDEC04, 0xF5FCF80D, 0x01F417FA);
	r1 = D(r1, s0_1_2, 0xFAED0801, 0xDF35F2D8, 0xFF0BE6DE, 0x09000B04);
	r2 = D(r2, s0_1_2, 0x01EDECE2, 0x0B18F2FB, 0xF401FAEC, 0x0705FC0B);
	r3 = D(r3, s0_1_2, 0xDDE9B7FE, 0x0A0004FA, 0xFBFF03F8, 0x0A0CF4F1);
	r4 = D(r4, s0_1_2, 0x0AF2F90E, 0xF9E0FEFC, 0xF8FE0004, 0xF9010301);
	r5 = D(r5, s0_1_2, 0xEEFBFA14, 0x0C06EEF3, 0x06ECF800, 0xEA010B16);
	r6 = D(r6, s0_1_2, 0x23E51B35, 0xF60401EC, 0xFCFC0BF8, 0xED38C9FF);
	r7 = D(r7, s0_1_2, 0x0202030B, 0x1110F8FE, 0xD10B0013, 0x04100CD8);
	r0 = D(r0, s0_2_0, 0x09F601FF, 0x34E60324, 0xFDFE0005, 0xF80F04B4);
	r1 = D(r1, s0_2_0, 0xFB0604F2, 0xEA19F0FF, 0xF7FDF8FC, 0xF1FF01FC);
	r2 = D(r2, s0_2_0, 0xFFFF01F8, 0x0D02FF0D, 0xFA03030D, 0x05F91001);
	r3 = D(r3, s0_2_0, 0x280712FC, 0xF00AFBFE, 0xFB0501EC, 0x1AFA06FE);
	r4 = D(r4, s0_2_0, 0x02E5FA0E, 0xFBF5F4FD, 0xFB07FDFD, 0xEA1300FB);
	r5 = D(r5, s0_2_0, 0x03FDFB01, 0x06F6FE05, 0x1AE02109, 0xFCFB08F8);
	r6 = D(r6, s0_2_0, 0xECFC81C0, 0x050109FB, 0xF3FB040F, 0xFFFE1015);
	r7 = D(r7, s0_2_0, 0xFB06ECFB, 0xF501F4F8, 0x09FE0004, 0xFDF804F3);
	r0 = D(r0, s0_2_1, 0x0EF8F009, 0x0900FFB2, 0x03FF0408, 0x11F0FDFC);
	r1 = D(r1, s0_2_1, 0xF2FD01FE, 0x1FF5F21C, 0xF0F20F17, 0x010F05F2);
	r2 = D(r2, s0_2_1, 0x05FEFEFE, 0x1008DD01, 0xF5F90923, 0x0800E5E9);
	r3 = D(r3, s0_2_1, 0xEF06152C, 0xEC02F70D, 0x0308FFFC, 0x00FB03DD);
	r4 = D(r4, s0_2_1, 0x0BDB0126, 0xF40DD910, 0x0CF4FDF6, 0x04130609);
	r5 = D(r5, s0_2_1, 0xF900FE04, 0x010CFCEF, 0xFBE8F20E, 0x05EFFDEF);
	r6 = D(r6, s0_2_1, 0x0EF10CE5, 0xF009F305, 0xF806F602, 0xE5E7FA06);
	r7 = D(r7, s0_2_1, 0xFCFAFE13, 0xFCF80116, 0x01EAF9D9, 0xF1FD060B);
	r0 = D(r0, s0_2_2, 0x0004FCEE, 0x12F40702, 0x0504FDF9, 0xFB080BFE);
	r1 = D(r1, s0_2_2, 0xFF0201FB, 0xFFE70D0D, 0xFB10F505, 0x07FE0BFC);
	r2 = D(r2, s0_2_2, 0x02010605, 0xF0FD0D10, 0xF716F407, 0xFEFFED00);
	r3 = D(r3, s0_2_2, 0x090C1C08, 0x0212F7FA, 0x040AFDF3, 0xFE1A0000);
	r4 = D(r4, s0_2_2, 0xFAE1FC01, 0xC8041B15, 0x06FD02F6, 0xFF0201FF);
	r5 = D(r5, s0_2_2, 0x05F4FC01, 0xFD080402, 0x060C13E1, 0x0300F8FC);
	r6 = D(r6, s0_2_2, 0x2EECFDB3, 0x170A00FB, 0xFD080704, 0x09E60E05);
	r7 = D(r7, s0_2_2, 0x0009EF06, 0xF907FB01, 0xFD00FD07, 0xFF0A08D7);
	r0 = D(r0, s1_0_0, 0x050402FD, 0x0915151E, 0xFB00FF03, 0x040EFEF8);
	r1 = D(r1, s1_0_0, 0x0600FBFB, 0x01FBEB01, 0xFD160FF7, 0x010301F9);
	r2 = D(r2, s1_0_0, 0xFF070905, 0x07FFFC04, 0xF9F90907, 0x04060100);
	r3 = D(r3, s1_0_0, 0x0BEF2C02, 0xFE0D08FB, 0x00FDF10C, 0x1017F8F2);
	r4 = D(r4, s1_0_0, 0x0209F1F8, 0x0CF9F5EB, 0xFF070207, 0xFB030302);
	r5 = D(r5, s1_0_0, 0x01FE060A, 0x020006F8, 0x8483F12D, 0xFF080E08);
	r6 = D(r6, s1_0_0, 0xF31223FC, 0xFE0913F3, 0xFAFCFF00, 0xF0180BF9);
	r7 = D(r7, s1_0_0, 0xEC1D1F00, 0x10FCFC14, 0xEC00EB1F, 0xFA0D01FC);
	r0 = D(r0, s1_0_1, 0x0E0E0AF9, 0xFC0727EE, 0x03ECFAFE, 0xE6FA16DF);
	r1 = D(r1, s1_0_1, 0xFDFB09F3, 0xEDE6FA0C, 0xEE09FB03, 0x061208FD);
	r2 = D(r2, s1_0_1, 0xF5D1DAE0, 0x030E0AFB, 0xF803F2F9, 0x070803FF);
	r3 = D(r3, s1_0_1, 0x0F0704E7, 0xFBFA1204, 0xFDFC0607, 0x041709E6);
	r4 = D(r4, s1_0_1, 0x0812FAF9, 0xFE0B131F, 0xFF0800F8, 0xFDFD0507);
	r5 = D(r5, s1_0_1, 0x0106F80D, 0x05FEFBF4, 0x1EF8EA17, 0xFC0B03F4);
	r6 = D(r6, s1_0_1, 0x0D17042B, 0xFB0BF30A, 0xFC10F805, 0xF8F0270A);
	r7 = D(r7, s1_0_1, 0xF6010BFB, 0x030C0904, 0xE51202E0, 0x08F0F023);
	r0 = D(r0, s1_0_2, 0xFC081500, 0x03130B1B, 0x06FFF9FB, 0x051F090A);
	r1 = D(r1, s1_0_2, 0x04FC0007, 0xE10FFBFD, 0xED0DEDF5, 0x0107FCFE);
	r2 = D(r2, s1_0_2, 0xD40BE9FF, 0xF20308F5, 0xF8FC0108, 0x0205FC06);
	r3 = D(r3, s1_0_2, 0xEEEA0BD8, 0xF9030701, 0xFC00FD05, 0x04F613EE);
	r4 = D(r4, s1_0_2, 0x00000101, 0xF7C501F8, 0x060200FD, 0xFC0704FE);
	r5 = D(r5, s1_0_2, 0x010101F9, 0xF8F804F6, 0x0E0311F8, 0x1009FA00);
	r6 = D(r6, s1_0_2, 0xF5082AEF, 0x0CF9F9F9, 0xFE03FE06, 0x870FD4AD);
	r7 = D(r7, s1_0_2, 0xFC0A1901, 0xFD010400, 0x0B02E90D, 0xED00E7FD);
	r0 = D(r0, s1_1_0, 0x031D1006, 0xFD06FEF4, 0xF9FDFCF6, 0x10FF0DEA);
	r1 = D(r1, s1_1_0, 0x08040303, 0xF0F219F7, 0xF3090EF5, 0x04F20000);
	r2 = D(r2, s1_1_0, 0x03020608, 0x0417FBF0, 0xFCFCF007, 0x05FD02FB);
	r3 = D(r3, s1_1_0, 0x00FDEFFE, 0x000CFEFA, 0x09FE010B, 0x0C0B04E0);
	r4 = D(r4, s1_1_0, 0x090C0C01, 0x0800F3FA, 0xFE0409FB, 0x010207FB);
	r5 = D(r5, s1_1_0, 0x02FF0305, 0x010501F0, 0x2006FAC9, 0xF9F7EF0A);
	r6 = D(r6, s1_1_0, 0xFF1C05E1, 0x09F4F300, 0xFDFCF4FD, 0xF4131406);
	r7 = D(r7, s1_1_0, 0x01030B02, 0x05FF0506, 0x0800D1FE, 0xE7FB0202);
	r0 = D(r0, s1_1_1, 0xFC3510F8, 0x0A2809F1, 0x0D0B0900, 0x081B06FC);
	r1 = D(r1, s1_1_1, 0xEEF906FA, 0xFEE60BE8, 0x0CF7F4FB, 0x141C0E06);
	r2 = D(r2, s1_1_1, 0xF814F7FF, 0xFAF5ECEE, 0x10F10316, 0xE8FCFBD8);
	r3 = D(r3, s1_1_1, 0xF405EFD8, 0x19CEF106, 0xFA060B02, 0xE4A4DCD7);
	r4 = D(r4, s1_1_1, 0xF134020A, 0x07F90CFE, 0xF41D0506, 0x0EEB0803);
	r5 = D(r5, s1_1_1, 0x02F4FCFB, 0xFCE9FADC, 0xEFEDCF13, 0xDDF0ECE4);
	r6 = D(r6, s1_1_1, 0x02D50523, 0x01D5EDF5, 0x15BCFAFE, 0xE804DCC6);
	r7 = D(r7, s1_1_1, 0x03EEF2F2, 0xF7DD05FD, 0xA9D309FF, 0xF900ECF7);
	r0 = D(r0, s1_1_2, 0x01051401, 0xEF04EDF0, 0xF104FF0B, 0xEDEE08FC);
	r1 = D(r1, s1_1_2, 0xFBF80508, 0x1C051FFF, 0x05F3FD00, 0xFEF70701);
	r2 = D(r2, s1_1_2, 0xF4F30DF2, 0x09ED00F8, 0xEB0100FA, 0x0E0F05FB);
	r3 = D(r3, s1_1_2, 0xA8D1B30D, 0xFA00FC04, 0xFBFF0803, 0x05F1E507);
	r4 = D(r4, s1_1_2, 0xFB05F501, 0x07F2050B, 0x000304FF, 0xFD03FFFC);
	r5 = D(r5, s1_1_2, 0xFDFFFB00, 0x08F9FEF9, 0xEE0FDF10, 0xED08F50B);
	r6 = D(r6, s1_1_2, 0xE6EFC511, 0xFDE90208, 0x0306F500, 0xB108EA0C);
	r7 = D(r7, s1_1_2, 0xDA02FD1F, 0x08FDFDF9, 0xF215E9FD, 0x08ED0EFE);
	r0 = D(r0, s1_2_0, 0x020201FA, 0xDDFE0F06, 0x03FFFF03, 0x01F7000F);
	r1 = D(r1, s1_2_0, 0x040CFFFD, 0x1604FBFB, 0xFC01060D, 0xFD03F9FD);
	r2 = D(r2, s1_2_0, 0x0700FF02, 0x04040FF0, 0x0204FFFC, 0xE80DF7F7);
	r3 = D(r3, s1_2_0, 0x922237FE, 0x0308FAFF, 0x0508F900, 0xFA12FFE9);
	r4 = D(r4, s1_2_0, 0x0811F803, 0x071A0800, 0x06F70303, 0x1100010D);
	r5 = D(r5, s1_2_0, 0xFFFF02FF, 0xF40801FF, 0xDC11050B, 0xFFFD0C04);
	r6 = D(r6, s1_2_0, 0xFFC5D69E, 0x0A0FFBF1, 0xF70209FA, 0x170A060A);
	r7 = D(r7, s1_2_0, 0xF4041DF9, 0x0B0A000C, 0xE60CFB04, 0x0800070D);
	r0 = D(r0, s1_2_1, 0xFD0B1303, 0x0719F4EE, 0xFEFC0310, 0x03F60A10);
	r1 = D(r1, s1_2_1, 0x09010203, 0xF70A01F3, 0xF8130EFB, 0xFCFC060B);
	r2 = D(r2, s1_2_1, 0x01FD0406, 0xFA09F7F0, 0x0D06FFFF, 0xEFCDFBDB);
	r3 = D(r3, s1_2_1, 0x042A38D6, 0xFEFFF8FA, 0x0C010302, 0x02030603);
	r4 = D(r4, s1_2_1, 0x090EF8F1, 0xEECCF7F8, 0x02040107, 0x02000402);
	r5 = D(r5, s1_2_1, 0xFEFDFE03, 0xF9F401FB, 0x0909F8FC, 0xFB0201F3);
	r6 = D(r6, s1_2_1, 0x0C811BC3, 0x0104F1FC, 0xF80DFEFD, 0x0AF20402);
	r7 = D(r7, s1_2_1, 0xE908F7E4, 0xF90301FD, 0xECFCFFE9, 0x0F0DF2FD);
	r0 = D(r0, s1_2_2, 0xFDFA01FE, 0x1B22231A, 0x010C02FD, 0x04F6FFEF);
	r1 = D(r1, s1_2_2, 0x02010100, 0xFF13FC09, 0xF60209F9, 0xFD060201);
	r2 = D(r2, s1_2_2, 0xFEFD0202, 0xFFF8FFFD, 0xFE060607, 0xF5FF00F8);
	r3 = D(r3, s1_2_2, 0xC1EA09F4, 0xFF04FCFE, 0x01FF02FB, 0x0804FC08);
	r4 = D(r4, s1_2_2, 0x0C0DFBF9, 0xF5180311, 0xFE0100FA, 0xFDFC02FD);
	r5 = D(r5, s1_2_2, 0x0403FF05, 0x00FD0803, 0xFBF3070F, 0xEBFFFDFC);
	r6 = D(r6, s1_2_2, 0xECDF2A09, 0x05F9FEFE, 0x00FF0502, 0x01060DFD);
	r7 = D(r7, s1_2_2, 0xF1170AFD, 0x1107FA02, 0x05080607, 0xFFF0FC00);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x01F615F6, 0xFC1C0AF1, 0x130CF8FB, 0xF1C60804);
	r1 = D(r1, s0_0_0, 0x02F501FF, 0x0A230003, 0xFB0BDDF4, 0x0509F2FC);
	r2 = D(r2, s0_0_0, 0xFDFEFBFA, 0xFEF21101, 0xFD03FBFF, 0x04020C02);
	r3 = D(r3, s0_0_0, 0xF60C04FB, 0xF801F9F6, 0x06FD11FD, 0xFBF209F5);
	r4 = D(r4, s0_0_0, 0x0905EA09, 0x04E40DFA, 0x020AF304, 0xFD0705FD);
	r5 = D(r5, s0_0_0, 0x05030407, 0xF9EFFA04, 0x1D06F7A9, 0x06FFF4FF);
	r6 = D(r6, s0_0_0, 0x0AE0FBF9, 0xF5F9040A, 0xF805F703, 0x0FE0EE0B);
	r7 = D(r7, s0_0_0, 0xEE0BE5FE, 0x02E90FF3, 0x1317FE0D, 0x05FFF3F8);
	r0 = D(r0, s0_0_1, 0x06FB000F, 0x33FCCF10, 0xF70BE6F7, 0x2806FEED);
	r1 = D(r1, s0_0_1, 0xF9FBFE15, 0xCAD523FD, 0xF6F6F9FF, 0x12FBFBFB);
	r2 = D(r2, s0_0_1, 0x16F4EAE4, 0x01FDFE08, 0x0BFE0510, 0x06FF03F2);
	r3 = D(r3, s0_0_1, 0x1D1113DE, 0xFEFB0303, 0xE3F90708, 0x0F0EFC0A);
	r4 = D(r4, s0_0_1, 0x000EF9FE, 0xF80B0910, 0x0EFBFCFD, 0xF70105FA);
	r5 = D(r5, s0_0_1, 0xF40002FB, 0x01FEFE07, 0xEA1406FD, 0xE811FA0E);
	r6 = D(r6, s0_0_1, 0x020DF1EA, 0xF302120A, 0x0308ECF0, 0xE9DDE501);
	r7 = D(r7, s0_0_1, 0xFD0BEA08, 0x0BE20D0B, 0xF014F20B, 0x1F00F903);
	r0 = D(r0, s0_0_2, 0x08FBF505, 0xF8F100F9, 0x06FCED00, 0xEAFB0305);
	r1 = D(r1, s0_0_2, 0x05030506, 0x00F702FC, 0xF802F002, 0xFEFBFD02);
	r2 = D(r2, s0_0_2, 0xF01DFC07, 0xD4E1F5F4, 0x10FE01FC, 0xEE05FD05);
	r3 = D(r3, s0_0_2, 0xFF1926F8, 0x00FFFF02, 0xF5010A02, 0xF1EB1E00);
	r4 = D(r4, s0_0_2, 0xEF08FEF9, 0x0212BEEC, 0xFBFAFF04, 0x04FE01FD);
	r5 = D(r5, s0_0_2, 0x0903FD06, 0x00FEFB03, 0xFFCF22DC, 0xF401FDFC);
	r6 = D(r6, s0_0_2, 0x220BE0F6, 0xED030505, 0x0306020B, 0xD40A2AEF);
	r7 = D(r7, s0_0_2, 0x0AF1EC02, 0x140A0106, 0xFAF60EF2, 0x201A100C);
	r0 = D(r0, s0_1_0, 0xFE02F812, 0x0930F6E7, 0xF205F9FE, 0xFCE5042F);
	r1 = D(r1, s0_1_0, 0x03FA06FF, 0x0DEF02F3, 0xFAEDDDFE, 0xFA100AF7);
	r2 = D(r2, s0_1_0, 0x03FDFA08, 0xFAEDEB02, 0xFFFE09DE, 0xFDF7F305);
	r3 = D(r3, s0_1_0, 0x1009EBF5, 0x020FEAF6, 0x0EFE1309, 0xF4C6C918);
	r4 = D(r4, s0_1_0, 0xF9DCE903, 0x04F501EB, 0xFBF0F60D, 0x03E8F8F5);
	r5 = D(r5, s0_1_0, 0x0201FFF5, 0xF7EFF201, 0xF6F6F21C, 0xFD0208F3);
	r6 = D(r6, s0_1_0, 0xE3F214E9, 0x1003F213, 0x0305E0FE, 0x021419E0);
	r7 = D(r7, s0_1_0, 0xF8EBE505, 0x11F2F300, 0x0C1609E1, 0x00FDFDFB);
	r0 = D(r0, s0_1_1, 0x12FEF2F4, 0xFD14C609, 0x1710F214, 0xF4F2F202);
	r1 = D(r1, s0_1_1, 0xF5FD00E5, 0x24E7F600, 0x18FAF6CD, 0x17FCF203);
	r2 = D(r2, s0_1_1, 0x050803E8, 0xFF02F5FF, 0xFDDF10DC, 0xE70FFC16);
	r3 = D(r3, s0_1_1, 0x8B00DE0D, 0x0EE0FEF6, 0xEBF00810, 0xEAC507F3);
	r4 = D(r4, s0_1_1, 0x1412F0FF, 0x0EFA1EFE, 0x190CFF0D, 0x07F4FAF0);
	r5 = D(r5, s0_1_1, 0x000F000A, 0xE3EFFAFE, 0x351C2700, 0xE11BFD05);
	r6 = D(r6, s0_1_1, 0xCD1BE9B7, 0xF11A0E16, 0xFFFFDEFA, 0x034316D3);
	r7 = D(r7, s0_1_1, 0x160AFF01, 0xE8EE0A04, 0x0C10ED19, 0x012502EE);
	r0 = D(r0, s0_1_2, 0x02FCF4FE, 0xFC03F3FB, 0xEEFA01F2, 0xDC05F9F4);
	r1 = D(r1, s0_1_2, 0x0100FC06, 0xF6D505E8, 0x15FE0DF3, 0x0202F401);
	r2 = D(r2, s0_1_2, 0x0D1AF8F2, 0x10EEDDF2, 0x0D030803, 0x12FD1305);
	r3 = D(r3, s0_1_2, 0x2B1C212F, 0x0E02F4FF, 0xF5FEFE00, 0x0411E402);
	r4 = D(r4, s0_1_2, 0xE0EF0FF5, 0x1325E100, 0xE7F40700, 0x0205FA09);
	r5 = D(r5, s0_1_2, 0x1D07000E, 0x09FBF901, 0xE009130E, 0x0F080A0C);
	r6 = D(r6, s0_1_2, 0x1B27F42A, 0x15081013, 0x0007ED02, 0x4924F717);
	r7 = D(r7, s0_1_2, 0x18EEFE0F, 0x050BF70A, 0x06FE05F5, 0xF1F604F8);
	r0 = D(r0, s0_2_0, 0xFF0601EE, 0xFA021FF2, 0xF8F6FF07, 0x07C8FF09);
	r1 = D(r1, s0_2_0, 0x0000FC04, 0x18E5F8FD, 0x02020508, 0x02F20302);
	r2 = D(r2, s0_2_0, 0x03FF05FC, 0x02FDD905, 0x03F0F517, 0x040C0EED);
	r3 = D(r3, s0_2_0, 0xFD2E26E3, 0x03FDFC00, 0xFE00FE02, 0xF91B14FC);
	r4 = D(r4, s0_2_0, 0x05F4E8FE, 0xF710EF03, 0x06FF01FF, 0xFDEAF70D);
	r5 = D(r5, s0_2_0, 0xFEFDFEFF, 0xFD0600FD, 0x1F12FF04, 0x04FA0AF4);
	r6 = D(r6, s0_2_0, 0x0718C2F6, 0xF103F6FB, 0x010EF702, 0x0410EF02);
	r7 = D(r7, s0_2_0, 0xFF05EFFC, 0x00E2F805, 0xFF0009FF, 0x030506F9);
	r0 = D(r0, s0_2_1, 0x030AF6F0, 0xFD020A05, 0xF2FD09FE, 0xC7DB0018);
	r1 = D(r1, s0_2_1, 0x0902FD04, 0x10E90105, 0xFEFDFA01, 0x02EC00FD);
	r2 = D(r2, s0_2_1, 0x09F20304, 0x0106EC10, 0xF20FFD01, 0x01EBEFEA);
	r3 = D(r3, s0_2_1, 0xF329EFDF, 0x090C0606, 0x03FA0303, 0xF4E9FDFE);
	r4 = D(r4, s0_2_1, 0x07050D04, 0x0FE51B42, 0x03FE02F7, 0xEEF90500);
	r5 = D(r5, s0_2_1, 0x030101FD, 0x03EFFFFC, 0x011000E6, 0xF603F6E8);
	r6 = D(r6, s0_2_1, 0x401D8151, 0x0B00F810, 0x07020402, 0x071CFA06);
	r7 = D(r7, s0_2_1, 0x090B1BFA, 0xFD000905, 0x041F0002, 0xF910F8F3);
	r0 = D(r0, s0_2_2, 0x0AF60CFB, 0x20EC24E1, 0x0000F7FC, 0xE7FEDAFB);
	r1 = D(r1, s0_2_2, 0xFDFFFDFE, 0xF3171501, 0x0E040504, 0xF701FAFF);
	r2 = D(r2, s0_2_2, 0xFD0402FF, 0x0600F9F8, 0xF6001309, 0x10011901);
	r3 = D(r3, s0_2_2, 0x02330A00, 0xFCFC07FD, 0xFBF9FE03, 0xEEFB0FF8);
	r4 = D(r4, s0_2_2, 0xFD1205FA, 0x1D0CCAFD, 0x07FBFF00, 0xFF040107);
	r5 = D(r5, s0_2_2, 0x0405FF00, 0x03FB04FA, 0x0DF7F9FC, 0xFEFBFDFF);
	r6 = D(r6, s0_2_2, 0x022DCD0A, 0xF10B0803, 0x02FB0201, 0xFCEE0AED);
	r7 = D(r7, s0_2_2, 0xFCF30004, 0x02FD03FA, 0x09020202, 0xEE030410);
	r0 = D(r0, s1_0_0, 0xFC03FB06, 0x0216E70C, 0x0AFDFAFE, 0xFDFD00FD);
	r1 = D(r1, s1_0_0, 0x02FBFC03, 0xFEE0EFF9, 0x00060EF8, 0xFD01FE01);
	r2 = D(r2, s1_0_0, 0x0AF20AFC, 0x04F70702, 0xF4F8F705, 0x06FD01FC);
	r3 = D(r3, s1_0_0, 0xFEB0FA03, 0xF50C0500, 0xFF020102, 0x10100AF7);
	r4 = D(r4, s1_0_0, 0xF7F304FF, 0x09CC0CFE, 0x02F50302, 0xFD06FEFF);
	r5 = D(r5, s1_0_0, 0xFEFDFD03, 0xFBF204FB, 0x1A5B8152, 0xFC07FF00);
	r6 = D(r6, s1_0_0, 0x1AFDFFF3, 0xF8D20C03, 0xFAF4FD01, 0xFCF2E2DF);
	r7 = D(r7, s1_0_0, 0xF00401FE, 0xFFFAFB00, 0x0312F910, 0x0AE8F1F5);
	r0 = D(r0, s1_0_1, 0x050CFEF9, 0x10F0FC05, 0xF1ED1E0A, 0x0CFFFCF7);
	r1 = D(r1, s1_0_1, 0x0E03FEFC, 0x01DCEFE7, 0x0EDBF9F4, 0x07FFF902);
	r2 = D(r2, s1_0_1, 0x06171510, 0x0505FDF3, 0x0C00FC06, 0x010C0302);
	r3 = D(r3, s1_0_1, 0x15D0E11E, 0xFFF1F905, 0x030302F1, 0xF8FD10EE);
	r4 = D(r4, s1_0_1, 0xDA100905, 0x0FECF906, 0x01F60AF9, 0x00FDF701);
	r5 = D(r5, s1_0_1, 0xFEFF050B, 0xFF080102, 0x10FC01F9, 0x08F40C00);
	r6 = D(r6, s1_0_1, 0xCDF5F328, 0xEFFBF001, 0xF8040700, 0xEBD4D718);
	r7 = D(r7, s1_0_1, 0xFBF4FE00, 0xFFE8F00B, 0x170BFBE8, 0xF41CFA08);
	r0 = D(r0, s1_0_2, 0x04FE0A07, 0x1103F9F6, 0x0606F60F, 0x0D01FC0D);
	r1 = D(r1, s1_0_2, 0x0002FE0F, 0xE5130DD7, 0xFF0DFEEE, 0x01F0F81B);
	r2 = D(r2, s1_0_2, 0x00F7F6D6, 0x0403FF17, 0xF202F7FA, 0x01030805);
	r3 = D(r3, s1_0_2, 0x0320F416, 0xF701F90F, 0x0003FBDF, 0xFCF30217);
	r4 = D(r4, s1_0_2, 0xDF05FC17, 0xD2D416FC, 0x02F70304, 0xFD02FBF1);
	r5 = D(r5, s1_0_2, 0x0B0111FA, 0xFCF5FE10, 0xECECF527, 0x05000809);
	r6 = D(r6, s1_0_2, 0x0DE0EFF1, 0xFFCCF4F3, 0xFCFE0501, 0xCFD8C507);
	r7 = D(r7, s1_0_2, 0xFC030C1A, 0x040C03D2, 0xF6F2F3F8, 0xFF0A08D5);
	r0 = D(r0, s1_1_0, 0xFAFEF2FA, 0x02FCFDF4, 0x00F10001, 0x0D01FE04);
	r1 = D(r1, s1_1_0, 0x07FA0403, 0xEF35060F, 0x03E2FAF8, 0xF6F6FA06);
	r2 = D(r2, s1_1_0, 0xF90DFBFB, 0x01FCF1F7, 0x090A0405, 0x00F4F302);
	r3 = D(r3, s1_1_0, 0x1681DFF5, 0x00F20C01, 0xFFFC0D02, 0x032600F8);
	r4 = D(r4, s1_1_0, 0xE71FEC00, 0xF7EFF1F0, 0xFC010205, 0xF2FA05FE);
	r5 = D(r5, s1_1_0, 0xFFFD0203, 0xFDE90AFF, 0x2304E703, 0x0F020605);
	r6 = D(r6, s1_1_0, 0x2B02FBE1, 0xFEE80207, 0xFBFCF2F9, 0x16DE0905);
	r7 = D(r7, s1_1_0, 0xE70505FB, 0xFAD7F902, 0x0DF9FA0E, 0x1120F200);
	r0 = D(r0, s1_1_1, 0xF209E401, 0xF59BF1D5, 0x05ED06FB, 0xDFD5F123);
	r1 = D(r1, s1_1_1, 0x0EF4E3FC, 0x02F00A06, 0xF21226FA, 0x17060710);
	r2 = D(r2, s1_1_1, 0xFFF6FFF9, 0xEEF0020D, 0xF1EB0BEF, 0x0C020106);
	r3 = D(r3, s1_1_1, 0x07DDE520, 0xF80C1D02, 0x0AF313E5, 0xF00A0211);
	r4 = D(r4, s1_1_1, 0xC5EF030C, 0xF837F403, 0xFF020013, 0xF2021DFD);
	r5 = D(r5, s1_1_1, 0x05FD19F8, 0x0604EE0F, 0xD4112015, 0x01F5FEE3);
	r6 = D(r6, s1_1_1, 0xDA0DE431, 0xE9F60BFA, 0xF6F6F924, 0x0F1404ED);
	r7 = D(r7, s1_1_1, 0xDF81EC0C, 0xFB14F816, 0xF1F000ED, 0xF608EE0B);
	r0 = D(r0, s1_1_2, 0xF70409F0, 0xFD20F03D, 0xF519010F, 0x0E23F9CD);
	r1 = D(r1, s1_1_2, 0x0806F5F8, 0x07F4EB2B, 0xEBDF0902, 0x00F0F901);
	r2 = D(r2, s1_1_2, 0xFD010401, 0xFAF30403, 0x0C0A07FB, 0x03F9F412);
	r3 = D(r3, s1_1_2, 0x0617E8F5, 0x06FEF70D, 0xFC060AE1, 0xF91412F2);
	r4 = D(r4, s1_1_2, 0xBBFDFA10, 0xCCEC0FFC, 0xFD01FFFE, 0x0E040508);
	r5 = D(r5, s1_1_2, 0x04010B0A, 0xF9F6F9FC, 0x00FA12E5, 0x000BF7FA);
	r6 = D(r6, s1_1_2, 0x03021EB3, 0xF8EF0DF8, 0x0806FC14, 0xFE06F010);
	r7 = D(r7, s1_1_2, 0xCA0BF617, 0xEAFC0B14, 0x1126F512, 0xFDEEFCF8);
	r0 = D(r0, s1_2_0, 0x08FFF706, 0xF1FE0101, 0x02FF0AFF, 0xF904F0F7);
	r1 = D(r1, s1_2_0, 0xFCFA04FE, 0x0205020A, 0x0813070A, 0x0103FC04);
	r2 = D(r2, s1_2_0, 0x03F9FBFD, 0xFD0706FD, 0xF7070FFF, 0x08E9FEFE);
	r3 = D(r3, s1_2_0, 0x091CF600, 0xFA06F707, 0xF5F4FEFC, 0x0C19E806);
	r4 = D(r4, s1_2_0, 0xE60F0706, 0xE20618FE, 0x04FC0000, 0xFBFBFE03);
	r5 = D(r5, s1_2_0, 0x00FCFEFF, 0x05F80303, 0xF412F0EE, 0xFBF5F801);
	r6 = D(r6, s1_2_0, 0x1602FCCF, 0x00FE04EA, 0xF60A02FD, 0x03151203);
	r7 = D(r7, s1_2_0, 0x00F9FD10, 0xFEF703FB, 0xEBF3FF07, 0xF807F8F3);
	r0 = D(r0, s1_2_1, 0xFCF8EC06, 0xF420E0CD, 0x02F1050C, 0xF2FB21F5);
	r1 = D(r1, s1_2_1, 0xFA0E1B03, 0xF4AFF6FE, 0xEFD9F403, 0x07FCED07);
	r2 = D(r2, s1_2_1, 0xFAF4FFFC, 0x2112E700, 0xE9EA0300, 0x0B02FBFB);
	r3 = D(r3, s1_2_1, 0xEE360A3C, 0xEC111100, 0x030102F9, 0xFDFDEA0B);
	r4 = D(r4, s1_2_1, 0xD5E4F20C, 0x150BD01A, 0x07F9EC05, 0xF3EE0DFC);
	r5 = D(r5, s1_2_1, 0x00000D04, 0x09F4FB10, 0xF71CF310, 0x0A100A02);
	r6 = D(r6, s1_2_1, 0xF281AF25, 0xFEE900F3, 0x140DF504, 0xF4061BFF);
	r7 = D(r7, s1_2_1, 0x11F0D911, 0xFAF40203, 0x07210DEE, 0xF60DF8FC);
	r0 = D(r0, s1_2_2, 0x03F7F821, 0x18F0CE0C, 0x03F3F905, 0x0ACA04DE);
	r1 = D(r1, s1_2_2, 0xFD0307FA, 0xF50004C0, 0x150C13F4, 0xFCFCF4F6);
	r2 = D(r2, s1_2_2, 0xFDFA0CFE, 0x04010C29, 0xF8EC00E4, 0xFBFBF713);
	r3 = D(r3, s1_2_2, 0xE727073D, 0x02F605F7, 0x0201F7FB, 0x001EFF0C);
	r4 = D(r4, s1_2_2, 0xD616F4DE, 0x17D31002, 0xFDF9F602, 0x05FF0DF1);
	r5 = D(r5, s1_2_2, 0xFEFB02FD, 0x04FEF909, 0xF0E70E0B, 0x0901F20F);
	r6 = D(r6, s1_2_2, 0xFFFBDD2B, 0x02E9F7F6, 0x03F8FB0A, 0x01000E04);
	r7 = D(r7, s1_2_2, 0xFBE4F50D, 0x0CEE0909, 0xFF02FAFD, 0xFFF80DF6);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x05F7FAFD, 0xF306ED01, 0xF90B0200, 0x0AFEF905);
	r1 = D(r1, s0_0_0, 0x03FF0305, 0x8B131000, 0x08020606, 0xF804FFFF);
	r2 = D(r2, s0_0_0, 0xFF02FD05, 0x0000FF03, 0x000F0C05, 0xFCFF06FD);
	r3 = D(r3, s0_0_0, 0xEE16FAF6, 0xF00701FA, 0x05FCFDFF, 0x04F40BF3);
	r4 = D(r4, s0_0_0, 0x000C03F8, 0x0D0202FE, 0xF9FF0406, 0x000103FE);
	r5 = D(r5, s0_0_0, 0xFD08FDFE, 0xF8FC04FE, 0xF7299405, 0xFAFF04FD);
	r6 = D(r6, s0_0_0, 0x0F11EB15, 0x10FC00FD, 0xFB0A000B, 0xED0D0918);
	r7 = D(r7, s0_0_0, 0xF7040AFA, 0x0809F806, 0xE605F217, 0xF40A02FB);
	r0 = D(r0, s0_0_1, 0x0EF70AF5, 0xF7F506E9, 0xF6F1ED09, 0x080F1904);
	r1 = D(r1, s0_0_1, 0x0606F200, 0xE00AE41D, 0xF2F8EE0A, 0x0606F9FF);
	r2 = D(r2, s0_0_1, 0xF8FFF606, 0xFDF5F0FF, 0x0D04E502, 0xFDFCF9FE);
	r3 = D(r3, s0_0_1, 0xEFFC0208, 0xF90609FE, 0x03041201, 0xFA05DBF2);
	r4 = D(r4, s0_0_1, 0xEB04FDFF, 0x0312FD11, 0xFE010300, 0x04030C00);
	r5 = D(r5, s0_0_1, 0xF9F9FDFA, 0xF10AE9FE, 0x8212F0F5, 0xFEFBF5FD);
	r6 = D(r6, s0_0_1, 0xB806E400, 0xE9FBF00F, 0xFE05F703, 0xFB06F015);
	r7 = D(r7, s0_0_1, 0xFAFDFE01, 0x0BF906F7, 0xEB03DF03, 0xE211EE02);
	r0 = D(r0, s0_0_2, 0x09FEFFFC, 0xEA1CFAF2, 0xFF06FF08, 0x140008F2);
	r1 = D(r1, s0_0_2, 0x03FDFF00, 0x81030EF9, 0xE206ECFB, 0xFD0100FD);
	r2 = D(r2, s0_0_2, 0xFF15D50F, 0xFCFFFC0A, 0xF808FEFB, 0xF701F8FD);
	r3 = D(r3, s0_0_2, 0x0E11EB0D, 0xF404FDFD, 0xFBFF06FF, 0x11F8D801);
	r4 = D(r4, s0_0_2, 0xFE060504, 0x18FDC62D, 0x04070DFE, 0x0102FA00);
	r5 = D(r5, s0_0_2, 0xF701EFFE, 0xFDFFF7FF, 0x04090DE7, 0xFD05FBF3);
	r6 = D(r6, s0_0_2, 0xEB1BD410, 0xF206EC05, 0x0104F100, 0xF3068115);
	r7 = D(r7, s0_0_2, 0x090BF5E8, 0xEBFAFB04, 0xE5030AFC, 0x0E02E8FC);
	r0 = D(r0, s0_1_0, 0x01FAF400, 0xF815F3F3, 0x00F2FF03, 0xF6FF00ED);
	r1 = D(r1, s0_1_0, 0xFEFD04FD, 0x1D05EF08, 0xF705050F, 0x040E0402);
	r2 = D(r2, s0_1_0, 0xFBFD0704, 0xF301060B, 0x0AF10AEE, 0xF60CE30B);
	r3 = D(r3, s0_1_0, 0x0F08E7E8, 0xF0FC00FF, 0xFE02FAFA, 0x091CE20D);
	r4 = D(r4, s0_1_0, 0xF70F0C05, 0x0A0AFAF6, 0x060B0608, 0x08041E02);
	r5 = D(r5, s0_1_0, 0x03F5FC03, 0xFB03F6FE, 0xD52110E9, 0x06FBF3FE);
	r6 = D(r6, s0_1_0, 0x2517EEFC, 0xF30DF204, 0xFD0F1210, 0x18F90500);
	r7 = D(r7, s0_1_0, 0xE51D0DF3, 0x0AF70A0C, 0x0108F813, 0x010401F9);
	r0 = D(r0, s0_1_1, 0x02FBFF03, 0xF91A1AEE, 0x031A120D, 0xF7030204);
	r1 = D(r1, s0_1_1, 0xFEF404FA, 0xF210000A, 0xF4FC0606, 0x0BF4F1EC);
	r2 = D(r2, s0_1_1, 0xF70B000D, 0xF801EE16, 0xFAF803F5, 0xF410CC12);
	r3 = D(r3, s0_1_1, 0xCA01A406, 0xF8EAF1EB, 0xFDE5F4FA, 0xE3FDF408);
	r4 = D(r4, s0_1_1, 0x051602FE, 0x1714EF0D, 0x030F0410, 0x00F51608);
	r5 = D(r5, s0_1_1, 0x060A11F4, 0xEF06F607, 0xCFFE1441, 0xF809E701);
	r6 = D(r6, s0_1_1, 0x0410ED15, 0x010EF9EF, 0x0211F2F7, 0x05FF0FF5);
	r7 = D(r7, s0_1_1, 0xF20D220E, 0x06E3FB02, 0xFD1F07F3, 0x05F6FF0E);
	r0 = D(r0, s0_1_2, 0x0F0604FD, 0x02EBE305, 0xFBF10005, 0xE3FDE103);
	r1 = D(r1, s0_1_2, 0xFAF605FA, 0x3D24ECEC, 0xF3FCFD13, 0x0CF8FF05);
	r2 = D(r2, s0_1_2, 0x0A03F8FF, 0xFF04FC0F, 0x0F07F100, 0x1B00EFF2);
	r3 = D(r3, s0_1_2, 0x9719E004, 0xF9F80000, 0xFCFA06FC, 0xFD140C0F);
	r4 = D(r4, s0_1_2, 0x0C06F404, 0x12EF000E, 0x01FF04FB, 0x02040202);
	r5 = D(r5, s0_1_2, 0x0009FFFD, 0x09010906, 0x02FC0403, 0x140206F5);
	r6 = D(r6, s0_1_2, 0x1BFDBB16, 0xF617F1FC, 0xFF06FEFD, 0x060BF6F9);
	r7 = D(r7, s0_1_2, 0xE00D03F5, 0xF6FDFE05, 0xF7FE06F5, 0x0D0B0A00);
	r0 = D(r0, s0_2_0, 0x05080900, 0x000B0508, 0xF90208F9, 0xF2FCF708);
	r1 = D(r1, s0_2_0, 0x000A0403, 0xD2F90008, 0xFFFFF8F3, 0xFEFD0803);
	r2 = D(r2, s0_2_0, 0xFF0301FD, 0x02F1FB02, 0xF611FC08, 0x020001F2);
	r3 = D(r3, s0_2_0, 0x0307FCEF, 0xF704FE02, 0xFB070307, 0xFF0B03F2);
	r4 = D(r4, s0_2_0, 0x03050300, 0x0FFB2BEE, 0x01FF03FB, 0xFAFC0C05);
	r5 = D(r5, s0_2_0, 0x010D02FA, 0x0404F7F7, 0x0020EBF0, 0xFE08FF05);
	r6 = D(r6, s0_2_0, 0x073121E8, 0x070BFBFB, 0x04FB05FA, 0xF3F40001);
	r7 = D(r7, s0_2_0, 0x0C0107EB, 0x0EFAFD0B, 0xFF15FE17, 0xF80C00F5);
	r0 = D(r0, s0_2_1, 0xFAFC0600, 0xCC240CEC, 0xF0EC0306, 0x01EFEB00);
	r1 = D(r1, s0_2_1, 0x01040001, 0xD910F60A, 0xF90BFE11, 0x09F5F507);
	r2 = D(r2, s0_2_1, 0xFCF7FC0B, 0xEB07FAF8, 0xF617F813, 0xF616FBE3);
	r3 = D(r3, s0_2_1, 0x19EF06F9, 0xF50FFC11, 0x05FFFEFF, 0xF50B0308);
	r4 = D(r4, s0_2_1, 0xEEE20700, 0xF8F6D410, 0x14F6FAF5, 0xFEFE0510);
	r5 = D(r5, s0_2_1, 0xF5F70301, 0xF50F0300, 0xFF0DFEF8, 0x0A13FBF3);
	r6 = D(r6, s0_2_1, 0x0DDEF7B4, 0x01FEF7FF, 0x04110002, 0xFF000502);
	r7 = D(r7, s0_2_1, 0xF1F222DE, 0xFFF90803, 0xD81400EB, 0xFC010506);
	r0 = D(r0, s0_2_2, 0xF90CFFFF, 0xFAF3F9ED, 0xFD00F3FE, 0x08EF0505);
	r1 = D(r1, s0_2_2, 0x01FA0002, 0xE31FFD05, 0xFDF4FC0D, 0xFFFB04FC);
	r2 = D(r2, s0_2_2, 0xFEFFFB0C, 0xF7060403, 0x070F020A, 0xF80CF9F1);
	r3 = D(r3, s0_2_2, 0xE32C1611, 0x02FC0101, 0x0301FEFC, 0x02020107);
	r4 = D(r4, s0_2_2, 0x080DF910, 0xF90AF6EE, 0x0001FD00, 0xFF0504FF);
	r5 = D(r5, s0_2_2, 0xFEFA01FC, 0xFD0000FC, 0x0D11FE09, 0xFC11FAFE);
	r6 = D(r6, s0_2_2, 0x0AFACF21, 0xF907FC05, 0xF609FFFD, 0xF5020413);
	r7 = D(r7, s0_2_2, 0x06110FCB, 0x060304F7, 0xE2ED0500, 0xE70C05FC);
	r0 = D(r0, s1_0_0, 0xFEF5FCF3, 0x06FC1503, 0x0A0106FB, 0xEFFAFFFD);
	r1 = D(r1, s1_0_0, 0x0304FF04, 0xED261702, 0x03FEF2FC, 0xF7FAF20E);
	r2 = D(r2, s1_0_0, 0x05060304, 0xF8FDF803, 0xFB07F8FF, 0xFA01F800);
	r3 = D(r3, s1_0_0, 0xE905D1ED, 0x02FAF404, 0x010200FD, 0xF8FBF904);
	r4 = D(r4, s1_0_0, 0x0603F8F8, 0x0907FD0D, 0xF7000303, 0xFE000002);
	r5 = D(r5, s1_0_0, 0x0202F7FF, 0xFFF8FD06, 0xE6D181FE, 0x04FFF8FD);
	r6 = D(r6, s1_0_0, 0x1401F2EE, 0xFC03EBF4, 0xF700060C, 0x050B0C19);
	r7 = D(r7, s1_0_0, 0xFAEAEE1D, 0xFC030305, 0x06F5EC01, 0xF5FBF905);
	r0 = D(r0, s1_0_1, 0x07F907F3, 0x03140CF5, 0xF000EFFB, 0x2A1DDB01);
	r1 = D(r1, s1_0_1, 0x06070705, 0xE81521E9, 0xEE01F802, 0xF409F50A);
	r2 = D(r2, s1_0_1, 0x09FE0309, 0xFF08ECFA, 0x01FCEFFD, 0xF50309F7);
	r3 = D(r3, s1_0_1, 0xEEE8B412, 0x0602F3FF, 0xFE020A03, 0xF912F5FE);
	r4 = D(r4, s1_0_1, 0x0B05F400, 0x06ED2918, 0xF5FAF8FF, 0xFE01FB05);
	r5 = D(r5, s1_0_1, 0x01FEF700, 0x01000008, 0x06E4CF06, 0x04FFFFFC);
	r6 = D(r6, s1_0_1, 0xE0051B13, 0xF9EDEC0F, 0x01F9FDF9, 0x1012EAF1);
	r7 = D(r7, s1_0_1, 0xF5D2F403, 0x1602F211, 0xEB0A160A, 0xEB020803);
	r0 = D(r0, s1_0_2, 0xF5FF0BF9, 0xF6020CF8, 0xEEF5EB04, 0xED140202);
	r1 = D(r1, s1_0_2, 0x0B050A07, 0x041EF1FC, 0xF303FC0C, 0x0AFCF30E);
	r2 = D(r2, s1_0_2, 0xE60AF21F, 0xE9FBF1FE, 0xFA04F003, 0xFCFCFCFF);
	r3 = D(r3, s1_0_2, 0xCEE8E711, 0x07FCE903, 0xFE050803, 0xFEFAFB01);
	r4 = D(r4, s1_0_2, 0x12F40604, 0xF6150BF3, 0x07F8FBF7, 0xFD01FD02);
	r5 = D(r5, s1_0_2, 0xEFFEF8F9, 0x09FBFD02, 0x04DAE9FD, 0xFEF4FF04);
	r6 = D(r6, s1_0_2, 0xFC0CEB08, 0x10FBEDFD, 0xFA02FC02, 0xF801990F);
	r7 = D(r7, s1_0_2, 0x0EE4F616, 0x14F70F05, 0x0EF6F4F9, 0x01FB010C);
	r0 = D(r0, s1_1_0, 0xF303EFFE, 0x05FF031E, 0x01FD0308, 0xE4111307);
	r1 = D(r1, s1_1_0, 0x070602FC, 0xF8D70A04, 0xFBFD02FA, 0x0BFF0612);
	r2 = D(r2, s1_1_0, 0xFAFFFE00, 0xF709E2FF, 0x03FAFCFF, 0x0208F804);
	r3 = D(r3, s1_1_0, 0xF5083221, 0xF300F10B, 0xFBFEFC06, 0xF115F01D);
	r4 = D(r4, s1_1_0, 0x0205052C, 0x03F910F1, 0x02F90004, 0xF907FF11);
	r5 = D(r5, s1_1_0, 0x04FEFD0A, 0x0703F5FF, 0x1EE7E9EF, 0x0AFCF9FE);
	r6 = D(r6, s1_1_0, 0x0CF41F0C, 0xFDF4FD13, 0xF901F903, 0x1200FA19);
	r7 = D(r7, s1_1_0, 0xFB03E318, 0xFE07FFE3, 0x22F6F504, 0x0203F903);
	r0 = D(r0, s1_1_1, 0xDFFE05FA, 0xF7280DC6, 0xE5030801, 0xFD0C0EFB);
	r1 = D(r1, s1_1_1, 0x3E1909FA, 0xDBE4D903, 0xF3EFEB10, 0x26FE0809);
	r2 = D(r2, s1_1_1, 0x0F04020E, 0xF9FE010D, 0xEB04EBFC, 0xE7FEEF0C);
	r3 = D(r3, s1_1_1, 0xF1F1E3FD, 0x02FBE4F5, 0xD30D00F8, 0xFC000BE5);
	r4 = D(r4, s1_1_1, 0xFB01FB0E, 0xFDEEFEF4, 0xF0010B00, 0x290007F9);
	r5 = D(r5, s1_1_1, 0x02070B0C, 0x0FFCF8FA, 0xD615F313, 0xEEFF01F3);
	r6 = D(r6, s1_1_1, 0x14ECFF1D, 0x05F6FC0E, 0x210206F8, 0x151E110C);
	r7 = D(r7, s1_1_1, 0x0BDCEC29, 0x04F7F0E5, 0xE7170AF4, 0xECF60FD6);
	r0 = D(r0, s1_1_2, 0xF009FF07, 0xFCFD0702, 0xF904FBF2, 0x0F0514FC);
	r1 = D(r1, s1_1_2, 0xF50406FC, 0x1AD0FC12, 0x20FDF2FC, 0x06F91104);
	r2 = D(r2, s1_1_2, 0x1EFF0202, 0x0C00D0F4, 0x0BFAFF0E, 0xF7FCE60C);
	r3 = D(r3, s1_1_2, 0x07D5E812, 0x00F0EBFC, 0x030109FF, 0x0BF5EDFC);
	r4 = D(r4, s1_1_2, 0xFE05F807, 0x071AE90A, 0x0500070B, 0xF5030503);
	r5 = D(r5, s1_1_2, 0xE303FE0C, 0x18FBF601, 0xE214ECF7, 0xE7EDF608);
	r6 = D(r6, s1_1_2, 0xF92EC2FA, 0x20E90A01, 0x03FE02FA, 0x20DDE4DC);
	r7 = D(r7, s1_1_2, 0xECF8F60B, 0x11070B05, 0xEF16FD17, 0x0BF1090B);
	r0 = D(r0, s1_2_0, 0x12FCF3F4, 0x0CEC1D27, 0xF607FA04, 0xF60A04E1);
	r1 = D(r1, s1_2_0, 0xFC0402F7, 0x0AECF803, 0x02FDF504, 0xF706030E);
	r2 = D(r2, s1_2_0, 0xFEFEFAF2, 0xFDFDF219, 0xF1F30301, 0xFE0F0001);
	r3 = D(r3, s1_2_0, 0x120AD10D, 0xFDFCF905, 0x020104FD, 0xF410F808);
	r4 = D(r4, s1_2_0, 0x0AF6E8ED, 0xEB11F71B, 0x05FA02FA, 0xED0205F4);
	r5 = D(r5, s1_2_0, 0x06FEF800, 0x070701FD, 0x100A0106, 0xFF03F606);
	r6 = D(r6, s1_2_0, 0xE0421184, 0xF8FDF7EE, 0xFD03FF04, 0xF3FD0405);
	r7 = D(r7, s1_2_0, 0x04F0EB1C, 0xFD060002, 0x04F7F91A, 0x02F9FE09);
	r0 = D(r0, s1_2_1, 0x0903FFCA, 0x2A161181, 0xFD01FEDD, 0xEA1AF0E1);
	r1 = D(r1, s1_2_1, 0xF4060203, 0x0801EACE, 0xF4FCEFDD, 0xF4FB0151);
	r2 = D(r2, s1_2_1, 0xF3FE0B0B, 0x1609FAE5, 0xEEECF5F8, 0x2BFC05E0);
	r3 = D(r3, s1_2_1, 0x140FC2DC, 0xFCF8FF05, 0x08FB0002, 0xF3F2E5D4);
	r4 = D(r4, s1_2_1, 0xF405FB81, 0x1C120705, 0x03F9FDED, 0xFF011015);
	r5 = D(r5, s1_2_1, 0x03050002, 0x0DFC04F6, 0x0FF4E4C1, 0x29FAF901);
	r6 = D(r6, s1_2_1, 0xF728E281, 0xFA06F7E7, 0x08FCFEF2, 0xFB1BFCEB);
	r7 = D(r7, s1_2_1, 0xFBF0F381, 0xF4010B14, 0x301D12C4, 0xFCF0FF02);
	r0 = D(r0, s1_2_2, 0x04FF0300, 0xFBFF06C0, 0x02FB0615, 0xFB16E2E8);
	r1 = D(r1, s1_2_2, 0xFBFFFF04, 0x0807FEF2, 0xF305F6EA, 0x01FD0306);
	r2 = D(r2, s1_2_2, 0x02020105, 0xF90B07FE, 0xF2FA03F5, 0x11FDFA01);
	r3 = D(r3, s1_2_2, 0xD811DD04, 0x07F5FF06, 0x09FE0405, 0xF20FEF06);
	r4 = D(r4, s1_2_2, 0xFA0AE9D2, 0xE01919E2, 0x0DF80000, 0xFE0408FD);
	r5 = D(r5, s1_2_2, 0xFDF9FBFF, 0xFD000BFC, 0x1302050B, 0x15EDEDFB);
	r6 = D(r6, s1_2_2, 0x0307F9DF, 0x0100F0E8, 0xFA00F502, 0xF50EEBDD);
	r7 = D(r7, s1_2_2, 0xF5F9F100, 0xFD060DFC, 0xE501FD06, 0xFD0C0604);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x00D80202, 0xEA100C07, 0xFC00FC0B, 0x0D190BFA);
	r1 = D(r1, s0_0_0, 0x040107FB, 0x1812E3EB, 0xFA040309, 0x0104FB04);
	r2 = D(r2, s0_0_0, 0x0208F7F7, 0x0DF000FE, 0xFD0000FC, 0x03F9F7FE);
	r3 = D(r3, s0_0_0, 0xFFFCF213, 0xF8F903F9, 0x09FA0BFC, 0x050B0AEB);
	r4 = D(r4, s0_0_0, 0x151FF609, 0x0A4EFCE1, 0x040BFE04, 0xFF030308);
	r5 = D(r5, s0_0_0, 0xFFFCF7FF, 0xFF000601, 0xAB81DD23, 0xFF010409);
	r6 = D(r6, s0_0_0, 0xFA260504, 0x051101F3, 0x05EEFE01, 0xFD36E8DC);
	r7 = D(r7, s0_0_0, 0x01140B0E, 0x0A020DD1, 0x0501FA00, 0xF8E406EF);
	r0 = D(r0, s0_0_1, 0xE8FE030B, 0xE3A10BF3, 0x06FE02BB, 0xF911FFFC);
	r1 = D(r1, s0_0_1, 0xF907FB0A, 0x0D2202D8, 0x000904FD, 0x0C0C05F7);
	r2 = D(r2, s0_0_1, 0x0C1F1806, 0xEBE5F509, 0x0901FD13, 0x00F1F7FC);
	r3 = D(r3, s0_0_1, 0x1609E425, 0xFD01FE01, 0xFA080401, 0xF1F3FE1C);
	r4 = D(r4, s0_0_1, 0xFDFDFEFC, 0xF3C1E8E7, 0x10FF04FF, 0x0008FC01);
	r5 = D(r5, s0_0_1, 0x06FD03EF, 0xFAFDF816, 0x1AFB05E9, 0xF7E2030B);
	r6 = D(r6, s0_0_1, 0x0DF22717, 0x0208F602, 0x10FBFEF9, 0xF437FC20);
	r7 = D(r7, s0_0_1, 0x090B0E07, 0xFE0FF7EF, 0xF5EBFBFC, 0x05FDFA07);
	r0 = D(r0, s0_0_2, 0x040108F9, 0xF0300D13, 0x03FF0406, 0x08180010);
	r1 = D(r1, s0_0_2, 0xFE0601FE, 0x1C14F5F4, 0xFAFBFE0C, 0xF80C020C);
	r2 = D(r2, s0_0_2, 0xE30504EE, 0x16010101, 0x0908FE01, 0x020009F4);
	r3 = D(r3, s0_0_2, 0x2FE0F912, 0xFFFE0110, 0xFF020004, 0xF10C020C);
	r4 = D(r4, s0_0_2, 0x050CFEFA, 0x180EFB90, 0xFA0600F9, 0x0201FE0C);
	r5 = D(r5, s0_0_2, 0xFFFC05FA, 0x01FB0201, 0xEA0E041A, 0xF5FA0501);
	r6 = D(r6, s0_0_2, 0x0414040D, 0xFC01F7ED, 0x030202FE, 0xCB3B1EC1);
	r7 = D(r7, s0_0_2, 0x02120706, 0x04F3F907, 0xFB090404, 0xFF0412F7);
	r0 = D(r0, s0_1_0, 0xF7F20D13, 0x1309ED1D, 0x0A08001D, 0x06DCF2F4);
	r1 = D(r1, s0_1_0, 0xFEFA08FB, 0xFE052B17, 0xE3FE00EF, 0x06FDFAFA);
	r2 = D(r2, s0_1_0, 0xFCFE02F8, 0xF716EEF1, 0x071A0C14, 0x0817010A);
	r3 = D(r3, s0_1_0, 0xEDF8E7A2, 0xEF0CFFFD, 0x09F60D11, 0xF605EDB8);
	r4 = D(r4, s0_1_0, 0xFAFFF915, 0xF824FBF2, 0x07F906FF, 0x01000600);
	r5 = D(r5, s0_1_0, 0x0405FE05, 0x030000FA, 0xDA1D2BDD, 0x04020411);
	r6 = D(r6, s0_1_0, 0xE714D7ED, 0x030BF2F7, 0xF30BFAED, 0xE012F3F6);
	r7 = D(r7, s0_1_0, 0xEC050A0D, 0xEBFDF5DB, 0xFD17EB09, 0x0FFC030D);
	r0 = D(r0, s0_1_1, 0xDD07F6F8, 0xD9D2F9B4, 0xF603FED5, 0xECECE0B0);
	r1 = D(r1, s0_1_1, 0x0CFD10FA, 0xF0020E22, 0xEA12070F, 0x0DEAF9FA);
	r2 = D(r2, s0_1_1, 0xF70DE700, 0xFC14F3F0, 0x111511FC, 0xE9150110);
	r3 = D(r3, s0_1_1, 0x0147E808, 0x090F0E0E, 0x060502FF, 0xFC1E19C2);
	r4 = D(r4, s0_1_1, 0xEDFE0007, 0xEE26A106, 0xFFFAFD00, 0x060BFBEF);
	r5 = D(r5, s0_1_1, 0xF706FC03, 0x091914FF, 0xFE2FEFDD, 0xFD1A0EF5);
	r6 = D(r6, s0_1_1, 0x48291008, 0xFE171401, 0x041007FF, 0x14030500);
	r7 = D(r7, s0_1_1, 0xCD0814D1, 0xFA16F9CE, 0xE10F08E4, 0x19FD07FD);
	r0 = D(r0, s0_1_2, 0xFC0601FC, 0xDFFDEC20, 0xF9FF05F6, 0xED00DEF1);
	r1 = D(r1, s0_1_2, 0x0700FC07, 0x0804112B, 0xF30A08F0, 0x00FFFCF6);
	r2 = D(r2, s0_1_2, 0xF7040902, 0xFA0505D1, 0x020B0901, 0xF202090F);
	r3 = D(r3, s0_1_2, 0x2022E5CE, 0xFD0B0501, 0x0805FD04, 0xFF0109C4);
	r4 = D(r4, s0_1_2, 0xFFF9FD1F, 0xDC12F48A, 0xF6FBFD06, 0x040301FD);
	r5 = D(r5, s0_1_2, 0x01030A02, 0x050104ED, 0xEE04000C, 0xEC020E0E);
	r6 = D(r6, s0_1_2, 0x08020F81, 0x0207140A, 0xFFF9FBF5, 0xF2EB1320);
	r7 = D(r7, s0_1_2, 0xDF090D10, 0x06120EF2, 0xEFFCF80C, 0x01FE00FC);
	r0 = D(r0, s0_2_0, 0x05FB0112, 0xFD14E0E1, 0x0EFBEEF7, 0x04000006);
	r1 = D(r1, s0_2_0, 0xFF04FEF1, 0x17F2E805, 0xFE03FD14, 0x04FD04F9);
	r2 = D(r2, s0_2_0, 0x0402FC08, 0xE306F3FA, 0xFCFD0CF0, 0x0AFCEE06);
	r3 = D(r3, s0_2_0, 0x09090716, 0xF6080502, 0xFB0408EF, 0x11F9FCF8);
	r4 = D(r4, s0_2_0, 0x050F040A, 0x0616FCC0, 0xFFFBF606, 0xF1FF05E5);
	r5 = D(r5, s0_2_0, 0x0002FB03, 0x06FDF703, 0xE42B072B, 0x00F602FA);
	r6 = D(r6, s0_2_0, 0xE7D8E3FA, 0x04FBF8FC, 0xF908F8F7, 0xF104ECE9);
	r7 = D(r7, s0_2_0, 0xFB02FE26, 0xFE031801, 0x020DF2F9, 0xF9FB0D03);
	r0 = D(r0, s0_2_1, 0xFB050F07, 0xEB0A0FF3, 0xFB0004F5, 0xFA02FF01);
	r1 = D(r1, s0_2_1, 0xFA0509F0, 0x2012F8F5, 0xF3FE03F2, 0xFEFE0003);
	r2 = D(r2, s0_2_1, 0xFFFC0AFC, 0x0505F00B, 0xEEFA16F0, 0x200BFF1C);
	r3 = D(r3, s0_2_1, 0x05FFD811, 0xFB000BF6, 0xFE060201, 0x0DFA01F0);
	r4 = D(r4, s0_2_1, 0x02F90AE8, 0x3506BF1D, 0x01F8030B, 0xF700F6F8);
	r5 = D(r5, s0_2_1, 0xF904FFFE, 0x1400FA11, 0x25F60305, 0x110EFD0A);
	r6 = D(r6, s0_2_1, 0xDE11A01D, 0x10FEF806, 0x0FFCF50E, 0x04FCE6F5);
	r7 = D(r7, s0_2_1, 0xE504130F, 0x120AEEF6, 0xFF040310, 0x1111FCF7);
	r0 = D(r0, s0_2_2, 0x0C04080F, 0xF7F6FDF8, 0xFBFF01FC, 0x01F2F9D9);
	r1 = D(r1, s0_2_2, 0x01FBFEFD, 0x0502F0C7, 0x06050706, 0xFC03FCFB);
	r2 = D(r2, s0_2_2, 0xFD010CF2, 0x0BFB08F6, 0x02FEFCF1, 0x0205FA02);
	r3 = D(r3, s0_2_2, 0x14FE19FF, 0xFD000509, 0x05F9F80A, 0x02FFFDE4);
	r4 = D(r4, s0_2_2, 0x12FEFBEF, 0xE30C0DB4, 0xF8FFF902, 0x0301FAFF);
	r5 = D(r5, s0_2_2, 0xF60507FC, 0x05FFFB02, 0x01F10611, 0xFEFC060F);
	r6 = D(r6, s0_2_2, 0xD52800E7, 0xFFFB0AF7, 0xFEFC00FF, 0xF91D09FD);
	r7 = D(r7, s0_2_2, 0x0611FA21, 0xFD0108F3, 0xE107FFF5, 0xFF0114F9);
	r0 = D(r0, s1_0_0, 0x0C1B00FF, 0xDAF7EC0B, 0xF9F70A07, 0xF213ED18);
	r1 = D(r1, s1_0_0, 0x0800FF05, 0xE8E003DB, 0x07F60FF2, 0xF5FF0F00);
	r2 = D(r2, s1_0_0, 0xFF0A0703, 0x03180903, 0xFAFD01F8, 0x000204FF);
	r3 = D(r3, s1_0_0, 0xECF81407, 0x05090AF8, 0x03FAF300, 0x0F0E0D0A);
	r4 = D(r4, s1_0_0, 0xF9030509, 0x0E110008, 0xFDEC06FA, 0xFBFBFFFC);
	r5 = D(r5, s1_0_0, 0x03F703FB, 0x01090402, 0x29DC8181, 0x090101FB);
	r6 = D(r6, s1_0_0, 0xF90FF1E5, 0x0602F600, 0xF8FC05FC, 0x06EA0AF2);
	r7 = D(r7, s1_0_0, 0xF8080FF7, 0x16F8EDF8, 0x0AE20BFA, 0x060206F9);
	r0 = D(r0, s1_0_1, 0xF0FFF80C, 0xF60EFF14, 0x02F309FE, 0x0FDF10DA);
	r1 = D(r1, s1_0_1, 0x00091404, 0xF30417FD, 0xFF0613F3, 0x0A04FD00);
	r2 = D(r2, s1_0_1, 0xF2F00BEC, 0xF3FAFC01, 0xF700FBFD, 0x050403FC);
	r3 = D(r3, s1_0_1, 0x19FD1BFD, 0xFF07FD05, 0xFE020004, 0x08EAFEFA);
	r4 = D(r4, s1_0_1, 0x09000611, 0xC4C803F9, 0x03010BFD, 0xFBFAF902);
	r5 = D(r5, s1_0_1, 0xF6FB0104, 0xFDFB0DFC, 0x1FE71BF5, 0x00030F00);
	r6 = D(r6, s1_0_1, 0xF6080502, 0xFBFA02FE, 0x04FE1BFE, 0xFED912DB);
	r7 = D(r7, s1_0_1, 0xF3FF22F8, 0xF5EEF20F, 0xEA050DF0, 0x01F307F6);
	r0 = D(r0, s1_0_2, 0xFA040406, 0x06FDFA0A, 0x0A10FF05, 0x1110EBFA);
	r1 = D(r1, s1_0_2, 0xF9010004, 0xE703F609, 0x06FF0EFE, 0xFEFDFA03);
	r2 = D(r2, s1_0_2, 0xFCFB0EEB, 0x1004FD01, 0xF8FD00FF, 0x010107F9);
	r3 = D(r3, s1_0_2, 0x061F1CF2, 0x01FE04FB, 0xF902FEFF, 0x01EC070B);
	r4 = D(r4, s1_0_2, 0x0107F10E, 0x0281D3EF, 0x0902F901, 0x0101FFFC);
	r5 = D(r5, s1_0_2, 0xFE0311FD, 0x08030404, 0x070727E6, 0xFE0105FB);
	r6 = D(r6, s1_0_2, 0x020D0FE9, 0xF5F20E05, 0xFCFF0AF8, 0xE0EDD500);
	r7 = D(r7, s1_0_2, 0xFDF802E6, 0xE7FD0302, 0x0A0506F9, 0x100309FC);
	r0 = D(r0, s1_1_0, 0xF8F2F9FB, 0x0D0BF5F9, 0xF50103F8, 0xE30CFF27);
	r1 = D(r1, s1_1_0, 0x06000202, 0x13101913, 0xE5000F03, 0x0104FCFC);
	r2 = D(r2, s1_1_0, 0x03FEF0FC, 0xDBFA00FF, 0xFFF50FDF, 0xFDFB05EA);
	r3 = D(r3, s1_1_0, 0xE2E8F8DA, 0xFEFA0CF1, 0xFA09FC06, 0xEEEC1DFB);
	r4 = D(r4, s1_1_0, 0xE7000508, 0x97170905, 0x02050306, 0x03080A10);
	r5 = D(r5, s1_1_0, 0x01030BFE, 0x03F310FF, 0xFBD21CE4, 0xFBF6F6FC);
	r6 = D(r6, s1_1_0, 0xC4EAF9FF, 0x09F7FEF0, 0xF4FD0DF7, 0xFD091803);
	r7 = D(r7, s1_1_0, 0xE6F7F5E3, 0xF60B0AFC, 0x08061201, 0x200EF50A);
	r0 = D(r0, s1_1_1, 0xE80C1D0D, 0x0303282E, 0x0FFAF902, 0xF804DD15);
	r1 = D(r1, s1_1_1, 0xFB0A0E09, 0x06F2E6E0, 0xFCEFF9F1, 0x01FDE901);
	r2 = D(r2, s1_1_1, 0xE10AFC07, 0xFCF71B01, 0x01E10EEE, 0xF2002100);
	r3 = D(r3, s1_1_1, 0xD7B6E6E8, 0x03F9F3F9, 0xEF1FF711, 0x0AEFFD14);
	r4 = D(r4, s1_1_1, 0xEA1313F9, 0xE1EE0702, 0x090201FC, 0xFE0DF203);
	r5 = D(r5, s1_1_1, 0x01FCF5FC, 0x10EE06F7, 0x1A121806, 0xEFED04F1);
	r6 = D(r6, s1_1_1, 0xF0D60CC8, 0xFEFDF6EF, 0xE607F9F1, 0xE00927E5);
	r7 = D(r7, s1_1_1, 0x060026D2, 0xEEFFF3EF, 0xCAE5F9B6, 0xF7FFE605);
	r0 = D(r0, s1_1_2, 0x010AFE03, 0xFDF4DEEB, 0x0A0AF400, 0xEF14FF1B);
	r1 = D(r1, s1_1_2, 0x04090408, 0x04D30D02, 0x1005FDF3, 0xF7F7FEFB);
	r2 = D(r2, s1_1_2, 0x01F2FA09, 0x13EBF1FD, 0xF00708EE, 0xF902FCFA);
	r3 = D(r3, s1_1_2, 0x08C8061A, 0xFAFCFBFD, 0xFD0AFF08, 0x23EAD7DB);
	r4 = D(r4, s1_1_2, 0xFD000A03, 0xDCBE1106, 0x0904F2FF, 0xFE03FCFC);
	r5 = D(r5, s1_1_2, 0xFEF701F8, 0x0FF5FBFA, 0xF9FA06E9, 0xFEFC05FF);
	r6 = D(r6, s1_1_2, 0xFDFA0F1B, 0xF8DF07F5, 0x00040004, 0xEEE9DC18);
	r7 = D(r7, s1_1_2, 0x1B11EACB, 0x10F7FDFC, 0x1D00FBF5, 0x1DEB0104);
	r0 = D(r0, s1_2_0, 0x000D0507, 0xA7FEF8F5, 0xFEFD00FC, 0x09FDFF05);
	r1 = D(r1, s1_2_0, 0xFEFD02FC, 0xEF0204F1, 0x1405FF15, 0xF6FF05F7);
	r2 = D(r2, s1_2_0, 0x0FFDFFFB, 0x04040A06, 0x03F6F1FC, 0xF2FB0A01);
	r3 = D(r3, s1_2_0, 0xED17082A, 0x09000107, 0xFFF8F8F7, 0xF806EBFE);
	r4 = D(r4, s1_2_0, 0xFD04FC05, 0x0C11F102, 0xFAFE0500, 0x19F8F8FD);
	r5 = D(r5, s1_2_0, 0xFBFC0500, 0xF8FB0701, 0xE005DB0B, 0xF7010BFA);
	r6 = D(r6, s1_2_0, 0x81220CA3, 0xE3FF030A, 0xF4010701, 0x0BF6EB06);
	r7 = D(r7, s1_2_0, 0x16F6F807, 0x09FDF903, 0xCA0306F9, 0x17FD05FC);
	r0 = D(r0, s1_2_1, 0x07FF0604, 0x07FF060B, 0x0809F6FB, 0xFE13EE0B);
	r1 = D(r1, s1_2_1, 0x08FA03FD, 0xF5080013, 0xEB03FE03, 0x0803FEFF);
	r2 = D(r2, s1_2_1, 0x0FFF08FB, 0xE6D7EB04, 0x020703F6, 0xF702F312);
	r3 = D(r3, s1_2_1, 0xEEC5F302, 0xF9FFF9F8, 0xFE020AFA, 0xF0ED1102);
	r4 = D(r4, s1_2_1, 0xFFFB0A04, 0xA2FC0EF2, 0x06040505, 0xF1080105);
	r5 = D(r5, s1_2_1, 0x040203FD, 0xF7FBF901, 0xEAF40608, 0xF906F604);
	r6 = D(r6, s1_2_1, 0x17DE0290, 0x07EB09F7, 0xF0F702FC, 0xF40B14FC);
	r7 = D(r7, s1_2_1, 0x05EB03F7, 0xF102FB01, 0x02030CF9, 0xF404F8F2);
	r0 = D(r0, s1_2_2, 0xF203030A, 0xFCF2011F, 0xFC04FAFC, 0xEF01F916);
	r1 = D(r1, s1_2_2, 0x0003FF03, 0x0B0FFEED, 0x07FA0004, 0x02FFF502);
	r2 = D(r2, s1_2_2, 0x0F03FBF9, 0xF70106FB, 0x09FBF1FE, 0x06F0FA01);
	r3 = D(r3, s1_2_2, 0x0F030D10, 0x01FDFCF2, 0xFFFF03FF, 0x06F80CFF);
	r4 = D(r4, s1_2_2, 0x0A17FF03, 0x1BE5FCE2, 0xFB03FC03, 0x05000202);
	r5 = D(r5, s1_2_2, 0x05FC01FB, 0x02F702FC, 0x0806170A, 0x00F60909);
	r6 = D(r6, s1_2_2, 0xF581FB15, 0xF9FF0A02, 0x0CF80500, 0x3207FD00);
	r7 = D(r7, s1_2_2, 0x03FBFF07, 0xFFFE0505, 0x1AF9F4EF, 0x10EB1DEF);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(2.938e-02, -6.938e-03, -1.575e-02, 2.104e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(1.101e-02, -4.149e-02, -1.681e-02, -5.990e-03);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-3.552e-02, -1.822e-02, -9.000e-03, -2.117e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-8.520e-02, 7.934e-04, 5.386e-03, -2.153e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-1.630e-02, -4.017e-02, -4.106e-03, -6.055e-04);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.101e-02, -1.068e-02, -2.260e-02, -2.110e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-9.155e-02, 6.265e-03, -1.246e-02, -2.380e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-1.994e-02, -1.037e-02, -1.492e-02, 1.348e-03);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-6x32-BILINEAR-MPV-NVL-conv6
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv5
//!BIND LUMA
//!SAVE conv6
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv5_pt;
			r = conv5_gather(p, 0);
			g = conv5_gather(p, 1);
			b = conv5_gather(p, 2);
			a = conv5_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv5_pt;
			r = conv5_gather(p, 0);
			g = conv5_gather(p, 1);
			b = conv5_gather(p, 2);
			a = conv5_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x01F9FF01, 0x02FB0003, 0xFD0BEAFD, 0x00FFFE08);
	r1 = D(r1, s0_0_0, 0x08FEFE14, 0xFA080307, 0xFF04FE0A, 0x0303FDFF);
	r2 = D(r2, s0_0_0, 0xF9FDF702, 0x8106030A, 0x03FF08F4, 0xF9FAF003);
	r3 = D(r3, s0_0_0, 0xFD04FF02, 0x01F8FA05, 0xFDFCFE06, 0x00F90105);
	r4 = D(r4, s0_0_0, 0x00FDF807, 0xF902F505, 0xFC01FB05, 0x01FB12FD);
	r5 = D(r5, s0_0_0, 0xFF00FC0A, 0xFFFC0003, 0x00050105, 0x00FDFE07);
	r6 = D(r6, s0_0_0, 0xFE010106, 0xF1040300, 0xFFFDF404, 0x0006FAFE);
	r7 = D(r7, s0_0_0, 0x01FC0202, 0xF708F404, 0xFF01FF06, 0xF90EFBFC);
	r0 = D(r0, s0_0_1, 0x04F6FFFF, 0x03FBF9F9, 0x02E7FCEF, 0xFD03F8FA);
	r1 = D(r1, s0_0_1, 0xF5F7E9F5, 0xF7FF0200, 0xFF0C0609, 0x000702FB);
	r2 = D(r2, s0_0_1, 0xF4DFE7DC, 0xE8F3E610, 0x040AF607, 0xFC0506FF);
	r3 = D(r3, s0_0_1, 0xFFFCF907, 0x08FDFB0D, 0xFD00F601, 0xFD060CFE);
	r4 = D(r4, s0_0_1, 0xFC04FD02, 0xFC02F4FF, 0xF8F600F8, 0xFD041C06);
	r5 = D(r5, s0_0_1, 0x010D0901, 0x00F40402, 0xF7FB01FF, 0xF6020DE1);
	r6 = D(r6, s0_0_1, 0x0004D1F6, 0xECF6FCDF, 0xFBFC0903, 0xFF0BFBFE);
	r7 = D(r7, s0_0_1, 0xFF090601, 0xF9050300, 0xFF07F206, 0xF904FF05);
	r0 = D(r0, s0_0_2, 0x030EFFFE, 0x06FBF000, 0xFFF9FAFF, 0xF406F900);
	r1 = D(r1, s0_0_2, 0xEBE20403, 0xFBF508FF, 0xFD09F809, 0x03F1FE00);
	r2 = D(r2, s0_0_2, 0xFD0100FF, 0xFA0A09F1, 0x03F5F7FC, 0x02FAFA04);
	r3 = D(r3, s0_0_2, 0xF7FEFEFB, 0x0605EC02, 0xF9000303, 0xFE04F602);
	r4 = D(r4, s0_0_2, 0xFCFC00FF, 0xFD01F906, 0x01F9FF01, 0xFE03F301);
	r5 = D(r5, s0_0_2, 0xFD12F7FF, 0x010A0002, 0xFC06FAFF, 0xF81E0900);
	r6 = D(r6, s0_0_2, 0x010C0002, 0xFC0CF504, 0xFE0B00FF, 0xFFF4F9FD);
	r7 = D(r7, s0_0_2, 0xF80A00FD, 0xFC04F702, 0xF005FB00, 0x000A00FF);
	r0 = D(r0, s0_1_0, 0x03FA0104, 0x00F5F902, 0xFCED00FC, 0xFE06F9FC);
	r1 = D(r1, s0_1_0, 0x00FAEE01, 0x90E9D4CA, 0xFBFEF900, 0x040A01F9);
	r2 = D(r2, s0_1_0, 0x05160507, 0x81D2C2A7, 0x0C100006, 0xFBD2F602);
	r3 = D(r3, s0_1_0, 0xFEFC05FF, 0x000EF504, 0x0103F705, 0xF5FAF6F5);
	r4 = D(r4, s0_1_0, 0xFCE6FAFC, 0xFCFEFCFF, 0xFF02FEFF, 0xF708FA11);
	r5 = D(r5, s0_1_0, 0xEFF901FD, 0x00FA0000, 0xF8020102, 0xF10BE8EF);
	r6 = D(r6, s0_1_0, 0x01030103, 0xFB12FA03, 0x00FE0202, 0xF7FB04FE);
	r7 = D(r7, s0_1_0, 0xFA0AEEFF, 0xF7F4E6FA, 0xFEF8FB05, 0xF0EFD1E2);
	r0 = D(r0, s0_1_1, 0x030DFCFD, 0x03F2F902, 0xF406F5F4, 0xF6FC01E6);
	r1 = D(r1, s0_1_1, 0xFDE289D1, 0xA509F0A9, 0xF909FDCE, 0x0AE80106);
	r2 = D(r2, s0_1_1, 0xF4FBE9F3, 0xEFD6120C, 0x02E105FE, 0xF40511EA);
	r3 = D(r3, s0_1_1, 0xFF0CE9FD, 0xFE17FC01, 0xFB01FAF7, 0xFDFFD7EE);
	r4 = D(r4, s0_1_1, 0xFDF5FEF5, 0xF5E5E2E4, 0xFAFE08F5, 0x04F903C6);
	r5 = D(r5, s0_1_1, 0xECF3F0E6, 0x031607EF, 0xFA07FAF3, 0xE62605CF);
	r6 = D(r6, s0_1_1, 0xD1E5B5D3, 0xE707FBEB, 0xFFE901E2, 0x00C106F4);
	r7 = D(r7, s0_1_1, 0xF5010FCA, 0xF609F0B0, 0xFC10F2DA, 0xF80DFAFD);
	r0 = D(r0, s0_1_2, 0x06EAFC00, 0x0309F404, 0xFA0004FD, 0xF80C03FF);
	r1 = D(r1, s0_1_2, 0x81FBEEF3, 0xFF0404F9, 0xFEF406EB, 0x041200FE);
	r2 = D(r2, s0_1_2, 0xF717F5F5, 0xF718FE03, 0xF90705FB, 0xFD180C07);
	r3 = D(r3, s0_1_2, 0xFB02F5F4, 0x03E5FBFB, 0xFA06FD00, 0xFEF6FFEE);
	r4 = D(r4, s0_1_2, 0xFBF5FE01, 0xFAFAFAE9, 0xF802F9FF, 0xF80A0C04);
	r5 = D(r5, s0_1_2, 0xFBE8FCFA, 0x03F0FF02, 0x02F6F8FF, 0x08F3FA03);
	r6 = D(r6, s0_1_2, 0xFFFEF8FD, 0x00FBFCE1, 0x00E8F702, 0xF5110BF3);
	r7 = D(r7, s0_1_2, 0xFB0E0400, 0xF9F4F5F3, 0xEF0DFA00, 0x06F7FA01);
	r0 = D(r0, s0_2_0, 0x03FD03FE, 0xFD04FD04, 0x05FFFB01, 0xF9FCFEFE);
	r1 = D(r1, s0_2_0, 0x070402FE, 0x02040A06, 0xF5E40606, 0x0403FF02);
	r2 = D(r2, s0_2_0, 0xFF020102, 0x8AAF16DC, 0x030B0600, 0xECD7F8FB);
	r3 = D(r3, s0_2_0, 0xFF0002FF, 0x010FF7F9, 0x0100FD04, 0x00FEFC00);
	r4 = D(r4, s0_2_0, 0xF5EFFBFB, 0x0309FF01, 0x02060300, 0x01E9C7EC);
	r5 = D(r5, s0_2_0, 0x02FBFCFA, 0x00F8F502, 0xFC00F9FE, 0xFA0AFEF4);
	r6 = D(r6, s0_2_0, 0x061C0306, 0x040B0404, 0xFAE9F504, 0x000BFCFF);
	r7 = D(r7, s0_2_0, 0xF5F708E9, 0x01FF0000, 0xFE090103, 0x020AD4F7);
	r0 = D(r0, s0_2_1, 0x05EF01FD, 0x07F200FF, 0x04EFFE02, 0xF508FEF7);
	r1 = D(r1, s0_2_1, 0xEAB1AB02, 0x00D4020E, 0xF406D6F4, 0x010B0002);
	r2 = D(r2, s0_2_1, 0x080101FF, 0x15D4D914, 0xFEF8F801, 0x07DD08FA);
	r3 = D(r3, s0_2_1, 0x010FF003, 0x070EF9FB, 0xF6FAF7FD, 0xFF02EEF8);
	r4 = D(r4, s0_2_1, 0xFD030402, 0xFE0202F7, 0xFFFEFDFC, 0xFB24D104);
	r5 = D(r5, s0_2_1, 0xF907FAF7, 0xFE0DFAFF, 0x0316F8FB, 0x0301F603);
	r6 = D(r6, s0_2_1, 0xF5FBEDF7, 0x0407FAFD, 0xED05F5EE, 0x01FEF6FC);
	r7 = D(r7, s0_2_1, 0xF620F8F7, 0xFE0004F9, 0xEAF7F8FF, 0x08EF03FF);
	r0 = D(r0, s0_2_2, 0x050CFDFF, 0x0206F700, 0x02050400, 0x02E5F9FF);
	r1 = D(r1, s0_2_2, 0xD4F80F0A, 0x050F10FE, 0xFFDCFBFF, 0x03F50102);
	r2 = D(r2, s0_2_2, 0xFDF9FFFB, 0xFCF0EFF5, 0x06ECFB01, 0xFF16F200);
	r3 = D(r3, s0_2_2, 0xFC0716FD, 0x0709F901, 0xFC0001FE, 0x03FE00FF);
	r4 = D(r4, s0_2_2, 0xFAFDFDFF, 0xFB07FCFE, 0xF6020200, 0x050802F6);
	r5 = D(r5, s0_2_2, 0xFE0CFB00, 0x04FEFDFF, 0xFE03FD00, 0xFF15FDFD);
	r6 = D(r6, s0_2_2, 0x06F90300, 0xFEF5FDFA, 0x01EAF403, 0xFDE1FDFB);
	r7 = D(r7, s0_2_2, 0x0606FD01, 0xFE0003FE, 0x01F705F7, 0x00FFF102);
	r0 = D(r0, s1_0_0, 0x0009FD03, 0x0200F9FF, 0xFFFFFAFF, 0x020103FE);
	r1 = D(r1, s1_0_0, 0x0B051202, 0x02FD07FF, 0x00010800, 0xFEF301FD);
	r2 = D(r2, s1_0_0, 0x030D03FB, 0x07FDF906, 0x0A07FAFB, 0x00020001);
	r3 = D(r3, s1_0_0, 0xFEF50701, 0xEA04FBFC, 0x04000100, 0xFFFE09FD);
	r4 = D(r4, s1_0_0, 0x02050000, 0xFD06FEFE, 0xFF06FDFC, 0x090B08FB);
	r5 = D(r5, s1_0_0, 0xFE060400, 0xFFFFFCFF, 0xFCF9FAFD, 0xFFFC0CFE);
	r6 = D(r6, s1_0_0, 0x04E614FF, 0xFE1FF7FC, 0xFCFF02FF, 0xFBF5EB01);
	r7 = D(r7, s1_0_0, 0x060609FE, 0xFEFEFF03, 0x04030CFF, 0xFE00E6FE);
	r0 = D(r0, s1_0_1, 0xFEFCFFF7, 0x10CEE303, 0xFEE4E405, 0xFEFEF9FE);
	r1 = D(r1, s1_0_1, 0x05F5CF00, 0x0202050C, 0xFB110601, 0x01060508);
	r2 = D(r2, s1_0_1, 0xF108EFFE, 0x09240407, 0xF70FFEFC, 0xFAF80903);
	r3 = D(r3, s1_0_1, 0xF20C00FF, 0xE91201FA, 0xFCFE03FE, 0xF70F0200);
	r4 = D(r4, s1_0_1, 0xFF000402, 0x01030407, 0xFCFFF7FE, 0x00EFFD02);
	r5 = D(r5, s1_0_1, 0xF80602FE, 0x04FDF9FE, 0x00F3F801, 0x0202E707);
	r6 = D(r6, s1_0_1, 0xDE07CD02, 0x03D2F109, 0xFDFE0504, 0x00F7060C);
	r7 = D(r7, s1_0_1, 0x01050201, 0x000D0705, 0xFB0DFFFF, 0xF8F3FDFD);
	r0 = D(r0, s1_0_2, 0x02F70100, 0x0F04FA02, 0xFFF6F8FD, 0x0000FB02);
	r1 = D(r1, s1_0_2, 0x06FC0A01, 0xFD02F4FF, 0xFD0E0804, 0x020B01FF);
	r2 = D(r2, s1_0_2, 0x0001FC0A, 0x0AF307FA, 0x04FDFF05, 0x0A03FDFE);
	r3 = D(r3, s1_0_2, 0x0503FA01, 0x0AECFEF0, 0x0501FFFF, 0xF6F60402);
	r4 = D(r4, s1_0_2, 0x06FB00FC, 0xFD040605, 0xFD04FC06, 0x0AF7FFFF);
	r5 = D(r5, s1_0_2, 0x01FC02FD, 0x00020000, 0x0401FBFC, 0x02FE04FD);
	r6 = D(r6, s1_0_2, 0x090F0405, 0xFC0D0809, 0x080004FF, 0x07FFFA01);
	r7 = D(r7, s1_0_2, 0x03FA0300, 0x05FE0603, 0x09FF0200, 0xFE0206FE);
	r0 = D(r0, s1_1_0, 0xFCFD01E7, 0x080EFC03, 0xF8F9FFF8, 0x01FCF5FF);
	r1 = D(r1, s1_1_0, 0x00CDFDFF, 0xFA160B10, 0xFE03ECFC, 0x04010218);
	r2 = D(r2, s1_1_0, 0x0703FAFD, 0xCED5D9F5, 0xF4F810FB, 0xFA20C40B);
	r3 = D(r3, s1_1_0, 0x061BFFFB, 0xEAF1FCEE, 0x02EFFEFA, 0x030207FE);
	r4 = D(r4, s1_1_0, 0x0303010F, 0x03FE0CF9, 0xFFFC02FD, 0xF508E1FB);
	r5 = D(r5, s1_1_0, 0x03180804, 0xFEF908FA, 0x0013F603, 0x00070001);
	r6 = D(r6, s1_1_0, 0xF904FEF5, 0xFAF1F3F3, 0x0302F3FE, 0x00010EFC);
	r7 = D(r7, s1_1_0, 0xFBFAF7FA, 0x00FC0DF8, 0xFCF3FEF3, 0x061403FF);
	r0 = D(r0, s1_1_1, 0xF6F9004D, 0x16F304E1, 0xEFF402ED, 0x00EFF505);
	r1 = D(r1, s1_1_1, 0xD1F699F7, 0xE8000AF8, 0xFDFAE407, 0x0C0A07B0);
	r2 = D(r2, s1_1_1, 0xF708FCFA, 0x0221F306, 0xD9050612, 0xF80206FD);
	r3 = D(r3, s1_1_1, 0xD9FAF8F5, 0xE4130513, 0xEF06F300, 0x0A18FF14);
	r4 = D(r4, s1_1_1, 0xFDF9FB04, 0xF1160C03, 0xE814FEF3, 0x82EAEDED);
	r5 = D(r5, s1_1_1, 0xE0F6E30B, 0xE3010A08, 0xE8FAFEF2, 0xEBFBFC07);
	r6 = D(r6, s1_1_1, 0xCE04F606, 0xFF1B09FE, 0xEEDEEA05, 0xE21A0AE6);
	r7 = D(r7, s1_1_1, 0xEBE8DF03, 0xF7070B07, 0xD908E0FF, 0x0703FAF5);
	r0 = D(r0, s1_1_2, 0xFE0C02ED, 0x1EFA01FF, 0x0E0C0AFA, 0xFA0000FC);
	r1 = D(r1, s1_1_2, 0xF9ECF706, 0x01051702, 0xFCC8EF03, 0x09F9FF15);
	r2 = D(r2, s1_1_2, 0x01070800, 0x02E218F4, 0x09F5F3F3, 0x0CFF02FC);
	r3 = D(r3, s1_1_2, 0x11E3F7FE, 0x0E0500F6, 0x04F4FC01, 0x050007FE);
	r4 = D(r4, s1_1_2, 0x04FE0200, 0x09E90406, 0x01F9FA01, 0x010BEE05);
	r5 = D(r5, s1_1_2, 0x05060904, 0x0902FE00, 0x030FFC00, 0x070D0302);
	r6 = D(r6, s1_1_2, 0x11DC0AFD, 0x09010002, 0x020A0E06, 0xF2F202F0);
	r7 = D(r7, s1_1_2, 0x08070401, 0x07F6FF01, 0x0EF40600, 0xFC030100);
	r0 = D(r0, s1_2_0, 0xFD0C040A, 0xFF050700, 0x0307FFFE, 0x01FF0301);
	r1 = D(r1, s1_2_0, 0xFA0A0500, 0xFF02E3F2, 0x02070B04, 0x07F4FAF5);
	r2 = D(r2, s1_2_0, 0x00FB0103, 0xF8082209, 0xF30E03FB, 0xFBFC0E04);
	r3 = D(r3, s1_2_0, 0x02050AFD, 0xFA030504, 0x030604FE, 0x0001F803);
	r4 = D(r4, s1_2_0, 0xFBFF0202, 0xFF0301FD, 0x020C0503, 0x03FD06FC);
	r5 = D(r5, s1_2_0, 0x00F7F6F7, 0x03070407, 0xFF00FDFE, 0xFD0B030E);
	r6 = D(r6, s1_2_0, 0x01030AFC, 0x02040A06, 0x04F809FF, 0x010CFBFD);
	r7 = D(r7, s1_2_0, 0xFC0E070B, 0x010101FD, 0xFE0103F6, 0xF0FCF8F8);
	r0 = D(r0, s1_2_1, 0xFCFF05DA, 0xFE100D05, 0xFD0303F9, 0xFEFAFFFC);
	r1 = D(r1, s1_2_1, 0xF80B0906, 0xFAF0F2F4, 0xFEFEFD03, 0x0D02FE25);
	r2 = D(r2, s1_2_1, 0x040C0CFE, 0x10FFF011, 0x07FA08F5, 0x01E9F704);
	r3 = D(r3, s1_2_1, 0xE906F809, 0xF6FEEF07, 0x03FF0104, 0xFCF8FAFD);
	r4 = D(r4, s1_2_1, 0x020E0309, 0xFEF8F2F9, 0xF8F5F0FA, 0xFB0EFC0E);
	r5 = D(r5, s1_2_1, 0x03010401, 0x080E0408, 0xFFF8F1F5, 0x03FEFCF7);
	r6 = D(r6, s1_2_1, 0xFCFD0102, 0xFF02FEF9, 0xEFF3020A, 0xFBEFF6E9);
	r7 = D(r7, s1_2_1, 0x04050101, 0xFFFCEDFB, 0xF7160711, 0x07FC02FB);
	r0 = D(r0, s1_2_2, 0x02000404, 0x0E010CFF, 0x00FCFAFE, 0xFEFCF7FD);
	r1 = D(r1, s1_2_2, 0x09F8020B, 0x0809EC01, 0x00F4F3F8, 0x0202F9FC);
	r2 = D(r2, s1_2_2, 0x0209F4FB, 0xF4000501, 0xFEFFFEFA, 0x07090A00);
	r3 = D(r3, s1_2_2, 0x060E0A01, 0xFCFB0905, 0x04FE0003, 0x02FBFEFD);
	r4 = D(r4, s1_2_2, 0xFE00FFFF, 0x03090201, 0x000C02FD, 0x05041BFE);
	r5 = D(r5, s1_2_2, 0x00150E02, 0x0200FE02, 0xFF01FF00, 0x03030900);
	r6 = D(r6, s1_2_2, 0xFE030709, 0x000FFCFF, 0x010D0003, 0xFEE6EAFA);
	r7 = D(r7, s1_2_2, 0xFF0005FF, 0x050A06FF, 0x02FF03FF, 0x00FF0302);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF9000AFC, 0xFCF7FBF4, 0x050AFAFA, 0x0108F4FA);
	r1 = D(r1, s0_0_0, 0xF4100303, 0x11F8E900, 0xF9FD0807, 0x00FBF7FF);
	r2 = D(r2, s0_0_0, 0x05F9F40A, 0x1DF5FCDA, 0xFBFF13F1, 0xF7EEFCF4);
	r3 = D(r3, s0_0_0, 0xF90704FF, 0x010FF9FC, 0xF606F500, 0x0E0DF101);
	r4 = D(r4, s0_0_0, 0xF7FFFCFF, 0x08000802, 0xFB020000, 0x14240512);
	r5 = D(r5, s0_0_0, 0x11FD07FC, 0x0500FE00, 0x02FBFA04, 0x0002F0FD);
	r6 = D(r6, s0_0_0, 0x090A0502, 0x0305FCFB, 0x00FDFCF8, 0x00FA03FE);
	r7 = D(r7, s0_0_0, 0x01070407, 0x07FC0C01, 0x090C150C, 0xF6F30805);
	r0 = D(r0, s0_0_1, 0xD412F8FD, 0x0BE608FB, 0x1B0AF702, 0x07FF10FD);
	r1 = D(r1, s0_0_1, 0xEBFCF3FD, 0x0EFD0C04, 0xFB17E403, 0x23F00BFF);
	r2 = D(r2, s0_0_1, 0x06FF02FB, 0x0A29FA0C, 0xCB0400F8, 0xCFFE1800);
	r3 = D(r3, s0_0_1, 0xFA0C01F9, 0x060A01F9, 0x01071DFC, 0x1704FEFF);
	r4 = D(r4, s0_0_1, 0xFB000003, 0x15F3FF04, 0x06FDFCFB, 0x1A05CC00);
	r5 = D(r5, s0_0_1, 0x020EEFFD, 0xFB13E8FA, 0xF8F5F8FF, 0x08F82B00);
	r6 = D(r6, s0_0_1, 0xFF050AF9, 0x1FFAF203, 0xF3E603FC, 0x07F50801);
	r7 = D(r7, s0_0_1, 0xFF0D17FE, 0x1FFEF8FD, 0xF4160EFB, 0xF9FD0DFF);
	r0 = D(r0, s0_0_2, 0xF0FB00FF, 0x03F3F8FD, 0x0A08F200, 0x05F0F001);
	r1 = D(r1, s0_0_2, 0x0ADEF2FF, 0xFE04E301, 0x08F20901, 0x080103FC);
	r2 = D(r2, s0_0_2, 0x0CF8FC05, 0x17FC0FFA, 0xF9EB07FD, 0x070A0903);
	r3 = D(r3, s0_0_2, 0x0501F7FC, 0xFC0812F3, 0xFDF7FFFD, 0x100D0401);
	r4 = D(r4, s0_0_2, 0xFE060201, 0x08FF0CFF, 0x05FAFF01, 0x241B18FF);
	r5 = D(r5, s0_0_2, 0xFC0A0202, 0xFF0A09FF, 0xF707FFFF, 0xFA0007FC);
	r6 = D(r6, s0_0_2, 0x09E7EDFF, 0x08FB0FFE, 0xF4111204, 0x07FEF3FF);
	r7 = D(r7, s0_0_2, 0x07EE09FB, 0x05FD11FE, 0x13E4F9F9, 0x01090701);
	r0 = D(r0, s0_1_0, 0xFDF5F5E7, 0xFC04F312, 0xFFFE070E, 0xFCFE13F9);
	r1 = D(r1, s0_1_0, 0x1109DF07, 0x2811FF17, 0x1104F8FA, 0xFC080D0A);
	r2 = D(r2, s0_1_0, 0xFC060AFD, 0x0B0BEED4, 0x07F5D0F9, 0xE70D04E5);
	r3 = D(r3, s0_1_0, 0xFA061401, 0x03FE1117, 0x01F80BF8, 0x010B0CF4);
	r4 = D(r4, s0_1_0, 0xE90C01FC, 0x0DF9F803, 0x00FBF904, 0x000E0CD3);
	r5 = D(r5, s0_1_0, 0x020D0C09, 0xF50212F9, 0xF40A0108, 0xF20C20E8);
	r6 = D(r6, s0_1_0, 0x0FFFF2F3, 0xF600052A, 0x08FEFF0D, 0x0B0A0209);
	r7 = D(r7, s0_1_0, 0xFFFF08FB, 0x15F1020C, 0x18FDF2F8, 0xF60EF6F6);
	r0 = D(r0, s0_1_1, 0x32E51F0E, 0x19EB1C13, 0x02F706FA, 0xF20EF402);
	r1 = D(r1, s0_1_1, 0x11BBD5ED, 0x3804FDF8, 0x112019FB, 0xC71EDDF3);
	r2 = D(r2, s0_1_1, 0x04FA0412, 0x0FD6FC1C, 0x13F40D07, 0x1CD41301);
	r3 = D(r3, s0_1_1, 0x19E40600, 0xED0A10E8, 0xF1F30301, 0xFEFFF5D7);
	r4 = D(r4, s0_1_1, 0x05FEF509, 0x0DF600F3, 0x07F7F5FD, 0x0319D8E4);
	r5 = D(r5, s0_1_1, 0x0612EB0F, 0xF2FDD9FA, 0x14FFF9F2, 0x0EEBF2F7);
	r6 = D(r6, s0_1_1, 0x01E6E007, 0x13F903E9, 0x18FAEC04, 0x2A060CF8);
	r7 = D(r7, s0_1_1, 0x0604FDF7, 0x09FBDBFB, 0xFCFE06F2, 0x11ECFAF9);
	r0 = D(r0, s0_1_2, 0x01F6F600, 0xF801FEFF, 0x0501FDF4, 0x04FC02FF);
	r1 = D(r1, s0_1_2, 0x04040E09, 0x17FCFBF9, 0x0B16EE04, 0xF4050FFC);
	r2 = D(r2, s0_1_2, 0x0CF9FFF9, 0xF7F6FDF3, 0xF1FFF6FB, 0x000CFA00);
	r3 = D(r3, s0_1_2, 0xE7FEE7F9, 0xFBFBFAFD, 0xFE0801FB, 0xFC0401FB);
	r4 = D(r4, s0_1_2, 0x05F70402, 0x0409FE03, 0xFCFFF0FF, 0x021DEC0F);
	r5 = D(r5, s0_1_2, 0x14F20AFE, 0xF903FF03, 0x06EEF903, 0x0504FCFE);
	r6 = D(r6, s0_1_2, 0xFAFC0506, 0x07FE020B, 0x01EF0E05, 0x111FFBFA);
	r7 = D(r7, s0_1_2, 0x0AFF04FB, 0x0A110A06, 0x00070DF4, 0x0100FC09);
	r0 = D(r0, s0_2_0, 0xFB050A0F, 0xFE030923, 0xFA010701, 0x00010602);
	r1 = D(r1, s0_2_0, 0x0C02060A, 0xF7FE0BEE, 0x02040400, 0x02F9F4E3);
	r2 = D(r2, s0_2_0, 0x01020509, 0xFE3227AC, 0xF10511E0, 0xFF05EE06);
	r3 = D(r3, s0_2_0, 0x0003F9FB, 0x04FC0003, 0xFB010205, 0x02FCFFE4);
	r4 = D(r4, s0_2_0, 0x07000114, 0xFE0303E6, 0xFF07000B, 0x13FB0702);
	r5 = D(r5, s0_2_0, 0xFCF9FCF3, 0x08FFF609, 0xFEFEFDF2, 0x09FDFBFD);
	r6 = D(r6, s0_2_0, 0xFA050F13, 0x00040B1A, 0x07FDFA09, 0xFBFB0003);
	r7 = D(r7, s0_2_0, 0x02030DF7, 0xFF0308EA, 0xFE0B0CFF, 0xFEFF03FE);
	r0 = D(r0, s0_2_1, 0xF706FAE0, 0xFD06030C, 0xFD01FFFF, 0x03FBFCFC);
	r1 = D(r1, s0_2_1, 0x04F4FF0A, 0xFA08FEFF, 0x10F501FF, 0x09FB0721);
	r2 = D(r2, s0_2_1, 0xFE000CFF, 0x1BF0F14A, 0x02FB0307, 0xFBF7F108);
	r3 = D(r3, s0_2_1, 0xFA03090A, 0x04FEFF11, 0x0600FE0D, 0x02020507);
	r4 = D(r4, s0_2_1, 0xF80103FF, 0xFF04010C, 0xFB05FF08, 0x03020D15);
	r5 = D(r5, s0_2_1, 0x1602FE1B, 0x0A000101, 0xFA01FEF0, 0xFAFE05FA);
	r6 = D(r6, s0_2_1, 0x09F8F31E, 0xFFFF0A14, 0xF50102DF, 0x010501F8);
	r7 = D(r7, s0_2_1, 0x06F80CF4, 0xFD07011B, 0x0102F411, 0xF7FEFDF8);
	r0 = D(r0, s0_2_2, 0xFB07FD00, 0xFF0602FD, 0xFE030405, 0xFF05FE06);
	r1 = D(r1, s0_2_2, 0x011D0F02, 0x0205030F, 0xFD02FF01, 0x04F703FD);
	r2 = D(r2, s0_2_2, 0x00000508, 0x0105FFFC, 0xF9FC01FC, 0x060001FE);
	r3 = D(r3, s0_2_2, 0xFEF703F6, 0x06FFFDF6, 0xFDFF03FF, 0xFFFD0400);
	r4 = D(r4, s0_2_2, 0x01FF01FE, 0xFEFE05FD, 0x000000FA, 0x10FD0EF6);
	r5 = D(r5, s0_2_2, 0x03FE0CF2, 0x05FB0400, 0x0303FC0D, 0x0303040B);
	r6 = D(r6, s0_2_2, 0xFBF1FEF4, 0x03000706, 0x0705F706, 0xFA080104);
	r7 = D(r7, s0_2_2, 0x0402FC0D, 0xFDFC0401, 0x07FD03FA, 0x01030007);
	r0 = D(r0, s1_0_0, 0x0602FF1C, 0xFBFC050C, 0xFF0207FE, 0xFDFCFB07);
	r1 = D(r1, s1_0_0, 0x0B03FB3C, 0xFFF6EF1A, 0x0206FCF5, 0xF7FE04F1);
	r2 = D(r2, s1_0_0, 0xFF00F9E9, 0x0CF9120F, 0x090EFE2E, 0x02FD0508);
	r3 = D(r3, s1_0_0, 0x0203FE0E, 0xFD0301FA, 0x0406FDF0, 0xFFFAF3F8);
	r4 = D(r4, s1_0_0, 0xFD0001EE, 0xFFFE02FE, 0xFB020209, 0xFEFCFE82);
	r5 = D(r5, s1_0_0, 0xF5FE01E7, 0x0302011D, 0xF8F7000E, 0xFAFDF600);
	r6 = D(r6, s1_0_0, 0x0907F621, 0xFFFCF5E5, 0x00F8FFF9, 0xFEFB0D06);
	r7 = D(r7, s1_0_0, 0x0409FE04, 0x03FD08F7, 0x0809FE0C, 0xF8F5040A);
	r0 = D(r0, s1_0_1, 0x050806FC, 0xFA04FB28, 0x03090C04, 0xF8F801FC);
	r1 = D(r1, s1_0_1, 0x01ED1020, 0xFAFD050B, 0x0C01ECF5, 0xFCFA0112);
	r2 = D(r2, s1_0_1, 0x06F6170A, 0xDBF0092B, 0x0EF3FC17, 0xF1F81821);
	r3 = D(r3, s1_0_1, 0xFF050200, 0x1B0A12D6, 0xF9F90EFE, 0xFCF9F303);
	r4 = D(r4, s1_0_1, 0xF9020CFF, 0xFCFD13FE, 0xFBFC0F04, 0xE1FE129A);
	r5 = D(r5, s1_0_1, 0xEBFA0DC3, 0x0502040F, 0xF9FC1402, 0xFB010BFC);
	r6 = D(r6, s1_0_1, 0xE2E4130B, 0x0FFA2006, 0xFC0504DF, 0xFB040201);
	r7 = D(r7, s1_0_1, 0xF0FBFD02, 0xF9FD0001, 0xEBFFF410, 0xFBF50BDE);
	r0 = D(r0, s1_0_2, 0x03020D14, 0x1502E208, 0xFEFCFB08, 0x0303F700);
	r1 = D(r1, s1_0_2, 0x050507EE, 0x14FAE514, 0xF60102F2, 0xFD01F9FD);
	r2 = D(r2, s1_0_2, 0xF6030204, 0x1207E8E3, 0x000802F3, 0x0A03FB08);
	r3 = D(r3, s1_0_2, 0xF90101FE, 0xEDFC0DFB, 0xFA00F7FC, 0x0F06F807);
	r4 = D(r4, s1_0_2, 0xF70106FE, 0xF300FE0D, 0xFC030206, 0xE40B0CA0);
	r5 = D(r5, s1_0_2, 0xF60502FD, 0xFE010812, 0xFBFE0305, 0xF808F50A);
	r6 = D(r6, s1_0_2, 0x03000DFC, 0x0105FA00, 0xFCFD0210, 0x09FFEE0A);
	r7 = D(r7, s1_0_2, 0x0909F509, 0xF304030D, 0x0BFAFAF7, 0xEF030A0C);
	r0 = D(r0, s1_1_0, 0x0B080600, 0x0DFDF62C, 0xFC02FA10, 0xFDFC0200);
	r1 = D(r1, s1_1_0, 0x03F6EF31, 0x08EFE7C0, 0xF8F3FF15, 0xF6F8FA21);
	r2 = D(r2, s1_1_0, 0x01FF000B, 0xD5EFED00, 0xF0FFF818, 0x0CFFFA0E);
	r3 = D(r3, s1_1_0, 0x0101FE17, 0xF6F7091A, 0xF600F9F5, 0x15FFF30B);
	r4 = D(r4, s1_1_0, 0xEE0204E9, 0xF700FB0A, 0xF8FF0204, 0x1DE50562);
	r5 = D(r5, s1_1_0, 0xFE06EF17, 0x0FFAF3E7, 0xFFFEFE0D, 0x0CF5F704);
	r6 = D(r6, s1_1_0, 0x01FA0521, 0x05F60A04, 0x04F5EF14, 0xFC08F4B9);
	r7 = D(r7, s1_1_0, 0xECF3F40C, 0xF0FEF503, 0xF5F8020F, 0xFFFC0211);
	r0 = D(r0, s1_1_1, 0xFBC4E1F3, 0x1A040538, 0x0806EE10, 0xF5F501FE);
	r1 = D(r1, s1_1_1, 0xEEC6F711, 0xF602C2BF, 0x14F40810, 0x073B2620);
	r2 = D(r2, s1_1_1, 0x1002F804, 0xD7FA101C, 0xF4D9F71B, 0xF3F80C1D);
	r3 = D(r3, s1_1_1, 0xE8FACF03, 0x0D08F017, 0x00F7F6F6, 0xF704020E);
	r4 = D(r4, s1_1_1, 0xF80008EF, 0xE603F803, 0xF501FBF9, 0xF8F8EC3A);
	r5 = D(r5, s1_1_1, 0xF9FEF817, 0x18FFFBE4, 0xF80AFBF8, 0xDBF309EF);
	r6 = D(r6, s1_1_1, 0xF6F0D70D, 0x1402E202, 0xF30210EB, 0xF30BDABC);
	r7 = D(r7, s1_1_1, 0x09F80901, 0xE10203F0, 0xFAF8D517, 0x0A14EDF6);
	r0 = D(r0, s1_1_2, 0x06130815, 0x0AFC021E, 0x0304FB12, 0xF600010A);
	r1 = D(r1, s1_1_2, 0xE800F301, 0xFEE709D8, 0x11FBFE10, 0xFAEEFC08);
	r2 = D(r2, s1_1_2, 0xF4EE16F8, 0x1005FE0D, 0xF5050F06, 0x1102F805);
	r3 = D(r3, s1_1_2, 0xEFCD06FF, 0xFA0303FD, 0xF8F4F9FE, 0xF4EBFE13);
	r4 = D(r4, s1_1_2, 0xFE060607, 0xF1FB1100, 0xFBF614F9, 0x1D0FDB5F);
	r5 = D(r5, s1_1_2, 0x0E07FBFC, 0x0A01FE00, 0x0B0A0109, 0x11F8F20A);
	r6 = D(r6, s1_1_2, 0xF8DA0DDE, 0xE3EE15F0, 0x0801130B, 0xE4FE0DF5);
	r7 = D(r7, s1_1_2, 0xECFFFBFF, 0xE9000106, 0xE5EDFFFD, 0x01050006);
	r0 = D(r0, s1_2_0, 0x02FBFE02, 0x0300FE03, 0x060000FE, 0xFA01FF07);
	r1 = D(r1, s1_2_0, 0x12FB0D28, 0x11FB002B, 0x1301F712, 0x0203FD06);
	r2 = D(r2, s1_2_0, 0x00FF01FA, 0xA7EFFA08, 0xFBFD0521, 0xEDF6FA0D);
	r3 = D(r3, s1_2_0, 0x02FF0110, 0xFD00FF26, 0xFF000100, 0xFC050008);
	r4 = D(r4, s1_2_0, 0xF401FAEA, 0x03FF0304, 0xF9020109, 0xE80AF3FB);
	r5 = D(r5, s1_2_0, 0xFFFC0606, 0xF700F9E7, 0xF6FDFF0B, 0xF0FC0604);
	r6 = D(r6, s1_2_0, 0x07060024, 0x0003FF08, 0x0CFAFCF4, 0x0C000018);
	r7 = D(r7, s1_2_0, 0x02F50201, 0x0700030B, 0x0708F50D, 0xFFFE021A);
	r0 = D(r0, s1_2_1, 0xFE0E05E7, 0xFEFDFE08, 0xFC02FC0A, 0xFB020011);
	r1 = D(r1, s1_2_1, 0xF909F029, 0x08F8E91F, 0xFB04FC18, 0x06EEFB03);
	r2 = D(r2, s1_2_1, 0x080401F8, 0x1AF2E2F2, 0xF5F4F5FA, 0x0005010B);
	r3 = D(r3, s1_2_1, 0x0702FA07, 0x0209FB2E, 0xFBF8FD00, 0x07FDFF02);
	r4 = D(r4, s1_2_1, 0xF90201FF, 0x0202F913, 0x0402F713, 0xE7080315);
	r5 = D(r5, s1_2_1, 0xF002FBEE, 0x04FDFED6, 0xFC05FD0E, 0x05FBFC01);
	r6 = D(r6, s1_2_1, 0x05080424, 0x08000203, 0xEEF903E6, 0x0300F502);
	r7 = D(r7, s1_2_1, 0x04F3070A, 0x02FEF814, 0xF0F2FD0C, 0xFA04F6F6);
	r0 = D(r0, s1_2_2, 0x0107F90D, 0xFDFF010A, 0xFF09F605, 0x0305F8FC);
	r1 = D(r1, s1_2_2, 0x05E8EBE0, 0xFB05FA23, 0x19F00018, 0x01FA06FF);
	r2 = D(r2, s1_2_2, 0x0002F60A, 0xF0F1F604, 0x00050305, 0x0AFD0A00);
	r3 = D(r3, s1_2_2, 0x01D811FC, 0x00EE0E0A, 0xFFF607FB, 0xFD020300);
	r4 = D(r4, s1_2_2, 0xFE010303, 0x05FD0914, 0xFFFC0901, 0x02DF01FB);
	r5 = D(r5, s1_2_2, 0xFEF600F9, 0x06F301EE, 0xFD07F603, 0xFE0AFEFD);
	r6 = D(r6, s1_2_2, 0x07EA1DE3, 0xFF02FD06, 0x0700F711, 0x0313EF05);
	r7 = D(r7, s1_2_2, 0xFD08FB08, 0x04FF080C, 0x04EE04FC, 0x03FE0204);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x07FE0AFD, 0xFEFA0DF3, 0x01FBEDFA, 0xFF00F505);
	r1 = D(r1, s0_0_0, 0xFFFEBC08, 0x02FDFB07, 0x000002FF, 0xFB01F3FC);
	r2 = D(r2, s0_0_0, 0xFE04E900, 0x0011B1E2, 0xFBF30009, 0xFEFF0AF5);
	r3 = D(r3, s0_0_0, 0xFD0208FE, 0xF6060120, 0xFD03FB0A, 0xFFFE0209);
	r4 = D(r4, s0_0_0, 0xF802FE00, 0x0400F7FE, 0x05FEF208, 0x0306ED07);
	r5 = D(r5, s0_0_0, 0xFCFF0404, 0x02FFFB03, 0x070508FA, 0x05FCED0D);
	r6 = D(r6, s0_0_0, 0xFE02DD0A, 0x03FEFDED, 0x07010CFF, 0x01FFFDFD);
	r7 = D(r7, s0_0_0, 0xFE00F304, 0xFCFFF7F7, 0xFB0108FD, 0x0D0000F8);
	r0 = D(r0, s0_0_1, 0xF4FCF50B, 0x04F907AE, 0x0BFDF7F5, 0x06FEFAFB);
	r1 = D(r1, s0_0_1, 0x09021DF5, 0x0303FC05, 0x05FD0905, 0x0AFD08FA);
	r2 = D(r2, s0_0_1, 0x11E8E681, 0xC50B1C02, 0xF9050B0C, 0xEB041009);
	r3 = D(r3, s0_0_1, 0x02FEF109, 0xF4F60114, 0x060202FF, 0x0002FBFE);
	r4 = D(r4, s0_0_1, 0xF100FC0A, 0xFFF9F7F9, 0x13FDF801, 0xFE0718FB);
	r5 = D(r5, s0_0_1, 0xF8F9FD09, 0x0300FB09, 0xFFFDF5FA, 0x0703F9FC);
	r6 = D(r6, s0_0_1, 0x0DF011EF, 0xFFECC8BE, 0xFC03F306, 0xFC04EAF8);
	r7 = D(r7, s0_0_1, 0xFB02FF05, 0xFFFAF700, 0xF3FF0309, 0x02F5FA04);
	r0 = D(r0, s0_0_2, 0xF3F90404, 0x07F7F9ED, 0x05FAFAFE, 0x070200FE);
	r1 = D(r1, s0_0_2, 0xF50EEDFF, 0x190AFAF6, 0xF5F9010B, 0x0903FEF5);
	r2 = D(r2, s0_0_2, 0x0200F804, 0x15FEFB00, 0xFEFC0405, 0x03FFF9FC);
	r3 = D(r3, s0_0_2, 0x08F7FEFC, 0xF2EC0221, 0x0EFAFBFD, 0x07F70301);
	r4 = D(r4, s0_0_2, 0xFCFE0408, 0xFF03080B, 0x0902F4F1, 0xF7FC2302);
	r5 = D(r5, s0_0_2, 0xFFFE0D06, 0xF6FF01FD, 0xF6060401, 0x0BF60301);
	r6 = D(r6, s0_0_2, 0x0BFC0707, 0x0900FE0E, 0xF8000AFC, 0x1104FE00);
	r7 = D(r7, s0_0_2, 0x10F90403, 0xFCFF1107, 0x12FDF7FD, 0xF304FEFF);
	r0 = D(r0, s0_1_0, 0xF7FD0106, 0x010414ED, 0x050CFD07, 0x0200EF0B);
	r1 = D(r1, s0_1_0, 0xF5021304, 0x0202F7F8, 0xFBFEE606, 0x09FB02EE);
	r2 = D(r2, s0_1_0, 0xFDF3FEFB, 0xE9EB1781, 0x01F7D717, 0x1003FF0B);
	r3 = D(r3, s0_1_0, 0x00FE13FC, 0x07FC0021, 0x07FDF807, 0x02F9EB08);
	r4 = D(r4, s0_1_0, 0xFE0105FE, 0x0604DF08, 0xFE04FA0C, 0xE9FAD515);
	r5 = D(r5, s0_1_0, 0x0C00F4FB, 0xFD02FC04, 0x040301FC, 0x0905FD04);
	r6 = D(r6, s0_1_0, 0x00F7F10B, 0xFFF2ED01, 0x0AFC0B00, 0x0B0AFD0C);
	r7 = D(r7, s0_1_0, 0x0C030009, 0x0F040B07, 0xF901E30D, 0xFAEFED05);
	r0 = D(r0, s0_1_1, 0x310200FD, 0x0EFB0E05, 0x0C12FC12, 0x03F1F206);
	r1 = D(r1, s0_1_1, 0x0CD0DE86, 0x03D1F4F0, 0x0007F6D0, 0xC8FDFE01);
	r2 = D(r2, s0_1_1, 0xFE10000A, 0xE3EAD80A, 0x0D13F8F5, 0xD205030B);
	r3 = D(r3, s0_1_1, 0xFEFE0A09, 0x0600080C, 0x0FEF08FE, 0xFEF2F4D9);
	r4 = D(r4, s0_1_1, 0xEEFEF80A, 0x13E4FBEE, 0x10F5F605, 0xE4DAC992);
	r5 = D(r5, s0_1_1, 0xE4EEE6DF, 0xFB13FA0C, 0xECE6F404, 0xF7D5E6FC);
	r6 = D(r6, s0_1_1, 0x0EFD0DF4, 0x0B05FC04, 0xFFDFEDEC, 0x16E8E2F2);
	r7 = D(r7, s0_1_1, 0x05D5E1E6, 0x04E7EDEB, 0x0DEC05FE, 0xFB070E12);
	r0 = D(r0, s0_1_2, 0xE713FE10, 0x0CE902EC, 0x000E0105, 0xFC080200);
	r1 = D(r1, s0_1_2, 0xFA0B0001, 0xF510FC04, 0x05DFE7F3, 0x12E802EF);
	r2 = D(r2, s0_1_2, 0x02F30002, 0x04FD00F6, 0xFFFFFEF4, 0x01F706FA);
	r3 = D(r3, s0_1_2, 0x17D7FA05, 0xF7060518, 0x07F1FF00, 0xFC00FC0B);
	r4 = D(r4, s0_1_2, 0xF806FF07, 0xFFFEF702, 0x0EEEF5FE, 0x02F9F6FA);
	r5 = D(r5, s0_1_2, 0xF90601FF, 0x0102F9FF, 0xF811FC0A, 0xF7010003);
	r6 = D(r6, s0_1_2, 0xFEF7FF02, 0xF60601FE, 0xEF0AF808, 0x06F4FF05);
	r7 = D(r7, s0_1_2, 0xF6FF0308, 0x0207FD05, 0x09F609FD, 0xFB01FEFD);
	r0 = D(r0, s0_2_0, 0x00FF0904, 0x01FD05FA, 0xFF02FD04, 0xFFFD010A);
	r1 = D(r1, s0_2_0, 0xF8FCCB0A, 0x0B09E60B, 0x03FCF6FE, 0x0405F3F5);
	r2 = D(r2, s0_2_0, 0xFFFE0902, 0xE308C125, 0x0006F8FF, 0x0504E700);
	r3 = D(r3, s0_2_0, 0xFEF91303, 0xFBFB0216, 0x01FEFF03, 0xFE010104);
	r4 = D(r4, s0_2_0, 0x03FFFFF0, 0xFDFEFE01, 0xF7FBF508, 0x05060F07);
	r5 = D(r5, s0_2_0, 0xFF05F204, 0x01FD04FE, 0xFF0607FF, 0xF4F9F805);
	r6 = D(r6, s0_2_0, 0x01F70F02, 0xFB010400, 0x09030C08, 0xFFFF0000);
	r7 = D(r7, s0_2_0, 0xF6F6F403, 0xFE04FA03, 0x05FAFF05, 0x00FEF602);
	r0 = D(r0, s0_2_1, 0xFB140614, 0x020F05FD, 0xFD01FF00, 0x0007F806);
	r1 = D(r1, s0_2_1, 0x11051606, 0x051A0704, 0x0F05E40C, 0x05E8FDF1);
	r2 = D(r2, s0_2_1, 0xFFFB06FF, 0xE9F309FF, 0x03F2F40F, 0xE805020C);
	r3 = D(r3, s0_2_1, 0xFF010F07, 0xFBF50306, 0x00FE0101, 0x06030104);
	r4 = D(r4, s0_2_1, 0xFEF4F4FD, 0x020E0208, 0xFD0BFD0B, 0x09F006FC);
	r5 = D(r5, s0_2_1, 0x09F80102, 0x00F502FE, 0xFE07FF0B, 0x07060E05);
	r6 = D(r6, s0_2_1, 0xF601F80C, 0x00FE0203, 0xF3E5EB06, 0x0818050E);
	r7 = D(r7, s0_2_1, 0xFD060B06, 0x010FFA06, 0xFBFBFF02, 0x030702FF);
	r0 = D(r0, s0_2_2, 0x05050203, 0xFB0A0208, 0x00020000, 0x010D0108);
	r1 = D(r1, s0_2_2, 0xE8090102, 0xFFF40101, 0x021C0507, 0x00FA00F6);
	r2 = D(r2, s0_2_2, 0x000F0601, 0x0606FF0E, 0x08F70200, 0xFCFCFE05);
	r3 = D(r3, s0_2_2, 0xF400FD03, 0xFDFBFC0E, 0xFD04FEFC, 0x0002FE01);
	r4 = D(r4, s0_2_2, 0xFF0C0201, 0xFF060000, 0x0108F903, 0x05FFFF03);
	r5 = D(r5, s0_2_2, 0x0B01FD03, 0x00FD02F9, 0xFF05FF00, 0x0000FC02);
	r6 = D(r6, s0_2_2, 0xFD0AFC02, 0xFF0B0A05, 0xF7120005, 0x00130107);
	r7 = D(r7, s0_2_2, 0x00FAFD00, 0xFE0705FE, 0xFC090506, 0xFAFFFF01);
	r0 = D(r0, s1_0_0, 0xFE03FE01, 0xF8FEF6F7, 0xF8FD03F2, 0xFE00FFFF);
	r1 = D(r1, s1_0_0, 0xFDF0F809, 0xF2F4F900, 0x02FFFD01, 0x08030103);
	r2 = D(r2, s1_0_0, 0x05FCFE01, 0xD8F91427, 0xF90709ED, 0x1001FC06);
	r3 = D(r3, s1_0_0, 0x07FB0501, 0x02F2FF0E, 0x03FFFD05, 0x02F9F905);
	r4 = D(r4, s1_0_0, 0x0801FD05, 0x0CFF0000, 0x0201FFFF, 0xD4E70006);
	r5 = D(r5, s1_0_0, 0x0402FA02, 0xF70101FF, 0x07020705, 0x04FAFB00);
	r6 = D(r6, s1_0_0, 0x04F9FB08, 0x0705FDF9, 0x0504FB02, 0x0C0000FA);
	r7 = D(r7, s1_0_0, 0xFEFE01FD, 0x1501FDFD, 0xFEFA0302, 0x0DFF0707);
	r0 = D(r0, s1_0_1, 0xFB05F701, 0x020407F8, 0x08FE0AFB, 0x04040303);
	r1 = D(r1, s1_0_1, 0xFD16F6FE, 0xF60104FC, 0xFAED04FF, 0x0BFB0F05);
	r2 = D(r2, s1_0_1, 0x1207FFFE, 0xEF0ADAFF, 0x1001EEF7, 0xEE01F7F9);
	r3 = D(r3, s1_0_1, 0xF1F8EE04, 0xE6F2EE02, 0xFAF8FA04, 0xF40209FE);
	r4 = D(r4, s1_0_1, 0xF4FCF804, 0x0904FF01, 0x03040601, 0xEC061A09);
	r5 = D(r5, s1_0_1, 0xF2FEFE01, 0xF9FFFB04, 0xFC01080B, 0xF60D09FB);
	r6 = D(r6, s1_0_1, 0xF40C05FA, 0x1306F6F8, 0xF1070507, 0x000407FB);
	r7 = D(r7, s1_0_1, 0xF50500F9, 0xF506F7F9, 0xEF01F5FD, 0xEEFE060E);
	r0 = D(r0, s1_0_2, 0x09FE0107, 0xFD07FFFE, 0x01080204, 0x000105FF);
	r1 = D(r1, s1_0_2, 0xF0070D03, 0x090FFCFE, 0xF3F2F6FC, 0xFA0CFCFC);
	r2 = D(r2, s1_0_2, 0xFC01F7FD, 0x090105FC, 0x0704FDFD, 0x0CF504FC);
	r3 = D(r3, s1_0_2, 0x04050A00, 0x09E0EFFE, 0xFE020A00, 0x01FD09FF);
	r4 = D(r4, s1_0_2, 0x02FA0303, 0xF703F801, 0x02FF05FE, 0xF4EAF200);
	r5 = D(r5, s1_0_2, 0x08F80404, 0xFEFC0603, 0x02FEFE08, 0xFFF60603);
	r6 = D(r6, s1_0_2, 0x05FAFDFF, 0xF306FB00, 0x04FBFCFB, 0xFEFE01FB);
	r7 = D(r7, s1_0_2, 0x02FF0202, 0xF9FFFE04, 0x08FB0503, 0xFBFC0101);
	r0 = D(r0, s1_1_0, 0x1500F611, 0x0907F304, 0x02020520, 0xFF020702);
	r1 = D(r1, s1_1_0, 0x0404E711, 0xE3FA0D1A, 0xF101FBFA, 0xEB000CEF);
	r2 = D(r2, s1_1_0, 0x010202FE, 0xD507CA17, 0x08FAF0CB, 0x08F80520);
	r3 = D(r3, s1_1_0, 0x0000050A, 0x04FF0308, 0x1003FC01, 0xE90000FF);
	r4 = D(r4, s1_1_0, 0x10040E1C, 0x00FDFD0B, 0x0AFFFC13, 0x12140303);
	r5 = D(r5, s1_1_0, 0x0005F507, 0x06FC0D14, 0xEC020510, 0xEC0F0400);
	r6 = D(r6, s1_1_0, 0x0902F312, 0x0D0601FC, 0xF102040F, 0xF5FFFF09);
	r7 = D(r7, s1_1_0, 0xFF04F604, 0xF1FFF708, 0x0500F716, 0xF8F1FD28);
	r0 = D(r0, s1_1_1, 0xF007FAE8, 0xF7DCF014, 0x0C110703, 0xFF020B11);
	r1 = D(r1, s1_1_1, 0xEA1101FD, 0xD4EB0C04, 0x061A1104, 0x1AF40A1E);
	r2 = D(r2, s1_1_1, 0x090F06F3, 0xAA4100DC, 0xEE111008, 0xDA16FBF5);
	r3 = D(r3, s1_1_1, 0x0CFCF609, 0x0B0A0AF6, 0xF7FA1503, 0xF60915FF);
	r4 = D(r4, s1_1_1, 0x110D0EF9, 0x0F000002, 0x08090502, 0x0F1D11CB);
	r5 = D(r5, s1_1_1, 0x1B0E18FA, 0xFF0D2CEF, 0x05FC031E, 0x0302FC17);
	r6 = D(r6, s1_1_1, 0xEA1712FB, 0xF510F4ED, 0xFD05FC0F, 0x07FA0425);
	r7 = D(r7, s1_1_1, 0x06160A17, 0x16FE09FC, 0xFC1B10F6, 0xFE041DEB);
	r0 = D(r0, s1_1_2, 0x00FA02FD, 0x03FAFE00, 0xFA0D0202, 0xF400FE06);
	r1 = D(r1, s1_1_2, 0xF406F104, 0xDFCA0600, 0xED22100E, 0x070AFD03);
	r2 = D(r2, s1_1_2, 0x0510F8FE, 0x0CDBF8FE, 0x0C181402, 0x07F9FEFD);
	r3 = D(r3, s1_1_2, 0x0A040300, 0x112A0EFD, 0x0506FBFF, 0x0316FCFC);
	r4 = D(r4, s1_1_2, 0x050204FF, 0x0A12FDF7, 0x0AFFFDF9, 0x162A03F9);
	r5 = D(r5, s1_1_2, 0x011BF9FA, 0x02070706, 0xF80F0AF4, 0xFE1004FA);
	r6 = D(r6, s1_1_2, 0x0A04F5FA, 0x0B07FAFE, 0xFD08FFFF, 0xF4E10F00);
	r7 = D(r7, s1_1_2, 0xF7F704F5, 0x0819FFFA, 0x05F1F2FA, 0x0515FF02);
	r0 = D(r0, s1_2_0, 0xFC030504, 0x070B0705, 0x010200F8, 0xFDFF050C);
	r1 = D(r1, s1_2_0, 0xFFF1F120, 0x0D16FAF6, 0xF8020211, 0x05FDF500);
	r2 = D(r2, s1_2_0, 0xFE0203FC, 0xFA2CE210, 0x001511FF, 0x0600F413);
	r3 = D(r3, s1_2_0, 0x0102FBFF, 0xFC04FD09, 0x00F50BFC, 0x0304FE03);
	r4 = D(r4, s1_2_0, 0xF5FDFC10, 0x0402FFFA, 0xFDFA02FE, 0xFFF8EC02);
	r5 = D(r5, s1_2_0, 0x0CFFFF00, 0xF20502F2, 0xFF07FC11, 0xFA08FB09);
	r6 = D(r6, s1_2_0, 0x03F1FE04, 0xFDF406FF, 0xFDFFFE0E, 0xFD0AFD0F);
	r7 = D(r7, s1_2_0, 0xEB09020D, 0x0604FCFC, 0x07FA0006, 0x06FAF80B);
	r0 = D(r0, s1_2_1, 0x0FF70CED, 0x001A09FB, 0x031308FA, 0x0403FD09);
	r1 = D(r1, s1_2_1, 0xF73405FA, 0x0C3600F7, 0xFD03F9FF, 0xF9F6F41A);
	r2 = D(r2, s1_2_1, 0x01EFFCF9, 0x0320F921, 0xED0D0221, 0x012405EB);
	r3 = D(r3, s1_2_1, 0xFBD305F1, 0x000F03FE, 0xFCE9FAFD, 0x060300FD);
	r4 = D(r4, s1_2_1, 0x0A0F01FF, 0x02110BF4, 0x04040AF9, 0xF1060EFC);
	r5 = D(r5, s1_2_1, 0xF409FAFC, 0xF5EFF506, 0x050A07F5, 0x0A0B0DEC);
	r6 = D(r6, s1_2_1, 0xFF04F306, 0x0703FBFE, 0x0A22EAFF, 0x101308E0);
	r7 = D(r7, s1_2_1, 0x050202F4, 0x031F09F8, 0xF00F0200, 0x02DC0508);
	r0 = D(r0, s1_2_2, 0x0201050A, 0x051B0602, 0x0304FF06, 0x05F30D03);
	r1 = D(r1, s1_2_2, 0xFD14F408, 0xF54BF609, 0x0EFD05FD, 0x01FBFDF6);
	r2 = D(r2, s1_2_2, 0x05F402FE, 0xF900F7F5, 0x032A0903, 0xF6BBFD00);
	r3 = D(r3, s1_2_2, 0xFBF8FAFD, 0xF72A0603, 0x033AFCFE, 0x02140401);
	r4 = D(r4, s1_2_2, 0x03DF0103, 0x0718F802, 0xFFEDFCFC, 0xF1F2EE02);
	r5 = D(r5, s1_2_2, 0x0C15F7FC, 0xFAF0F9FC, 0xFF27030A, 0x02F3F704);
	r6 = D(r6, s1_2_2, 0x06F805FD, 0x02FD00FE, 0xF5FA0A0A, 0x0B140009);
	r7 = D(r7, s1_2_2, 0x0306FD0A, 0x0A0BF8FF, 0x01E4FFF8, 0x0318FE04);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0104FEE2, 0xF6FBFD11, 0xFBFE04FD, 0xFE02FD1B);
	r1 = D(r1, s0_0_0, 0xF9FCF481, 0xF5FAFBF3, 0x060401F6, 0xFCFB023F);
	r2 = D(r2, s0_0_0, 0x05FFFCEC, 0x1204F781, 0x01FAF72C, 0x06FDF43B);
	r3 = D(r3, s0_0_0, 0xF9010147, 0xFE070122, 0xFF03FDF9, 0x0AFEFCD0);
	r4 = D(r4, s0_0_0, 0x05FD0231, 0x04FCFEE1, 0xFFFEFBEC, 0x0E03F681);
	r5 = D(r5, s0_0_0, 0x04FC000B, 0xFDFFFC03, 0x03FCFC16, 0xFE04F317);
	r6 = D(r6, s0_0_0, 0xFE06FBA8, 0x01F8FDF7, 0xFFFEFE0B, 0xF4FD030B);
	r7 = D(r7, s0_0_0, 0x0001FB13, 0x00FBFF07, 0x0404FBB4, 0x0BF9F5F8);
	r0 = D(r0, s0_0_1, 0x00FAFE35, 0xF7F8F611, 0xFE0503F3, 0xFF03FC1C);
	r1 = D(r1, s0_0_1, 0x0809007F, 0xF6FC08EC, 0x00FAF7F8, 0x020502F7);
	r2 = D(r2, s0_0_1, 0xFF0003E3, 0xFB28177F, 0x01FC06CD, 0xF70AFF40);
	r3 = D(r3, s0_0_1, 0x0701FBEC, 0x0C0C0232, 0x010E01A5, 0xF9EC0309);
	r4 = D(r4, s0_0_1, 0x0202FF09, 0xFEFAFFF7, 0xFF08040A, 0x04EEF681);
	r5 = D(r5, s0_0_1, 0x03F2FED6, 0xFEFB020B, 0x06FFFDCE, 0x02FF02E4);
	r6 = D(r6, s0_0_1, 0x0204F6EF, 0xFAF4FEFA, 0x01FFF69A, 0xFC0601FF);
	r7 = D(r7, s0_0_1, 0xFFFC00BA, 0x01F7FFD4, 0x0205FED9, 0x0105010C);
	r0 = D(r0, s0_0_2, 0x03000033, 0x00EFFB02, 0xFCEBF811, 0xFF03FF22);
	r1 = D(r1, s0_0_2, 0xFFFFF981, 0xFCEFFDBF, 0x00040481, 0x00FD0122);
	r2 = D(r2, s0_0_2, 0xFEEFF881, 0x03F8ED2A, 0xFD0FFAD3, 0xFDFDFB07);
	r3 = D(r3, s0_0_2, 0xFD0EF6E9, 0xF607FE23, 0xFD04FAEC, 0x0304FBD2);
	r4 = D(r4, s0_0_2, 0x01FF00FE, 0x03FFFCCB, 0xFEF7FFBE, 0xFFFDFD81);
	r5 = D(r5, s0_0_2, 0x06FFFFCF, 0x0003FDCE, 0x0101020A, 0x05FC020D);
	r6 = D(r6, s0_0_2, 0x05F90181, 0xFDFBFABF, 0xFEFA0027, 0xFEFBFD0D);
	r7 = D(r7, s0_0_2, 0x0300FC03, 0x01FDFB04, 0x0407F5AF, 0x00000415);
	r0 = D(r0, s0_1_0, 0xF0040007, 0x06FCFE08, 0x0FFBFAFB, 0x00F9F9FF);
	r1 = D(r1, s0_1_0, 0x081CFEA0, 0x160E07FD, 0xE5F80705, 0x13FD0106);
	r2 = D(r2, s0_1_0, 0xFFFEF60A, 0x1A22E0E8, 0xD90CECEA, 0x0F0BF124);
	r3 = D(r3, s0_1_0, 0xF3FD0508, 0x0BFDFAF3, 0xFBF90001, 0x0603F7F5);
	r4 = D(r4, s0_1_0, 0x04030004, 0x0EFFFEEE, 0x0900FBF8, 0xE907180E);
	r5 = D(r5, s0_1_0, 0x0507FC09, 0x0AF6F304, 0x0A01FC17, 0x0DF6010D);
	r6 = D(r6, s0_1_0, 0xF506E907, 0x0AFDED0A, 0x04F80211, 0x0FFC0F0D);
	r7 = D(r7, s0_1_0, 0xF9FAF318, 0x13FC03F1, 0xEB0BF1F3, 0x1604F204);
	r0 = D(r0, s0_1_1, 0xF6E906E8, 0x03FAFE38, 0x04FA00FF, 0x0513FC12);
	r1 = D(r1, s0_1_1, 0x0A12EF43, 0x0FF703F9, 0xE7FCFF1D, 0x0818FB1C);
	r2 = D(r2, s0_1_1, 0x0BECF8F0, 0xDD181227, 0xFFFA0B61, 0xF00802FE);
	r3 = D(r3, s0_1_1, 0x1CEBF4F4, 0xF2EFFFFE, 0x0E170508, 0x1400FA06);
	r4 = D(r4, s0_1_1, 0xFF0A020B, 0x060A0613, 0x00030513, 0xCBF91E13);
	r5 = D(r5, s0_1_1, 0xF408FD19, 0xFD02FDF6, 0x0B0FF1E5, 0x100FEBE5);
	r6 = D(r6, s0_1_1, 0x1C1DFB0C, 0x0FF9FF0F, 0x0410EFEA, 0x12F604EB);
	r7 = D(r7, s0_1_1, 0x0E16FCF3, 0xFE0B0118, 0x0F18081A, 0xFE06F8FE);
	r0 = D(r0, s0_1_2, 0xFC130208, 0xF8EEFBFA, 0x04060506, 0x02FDFE03);
	r1 = D(r1, s0_1_2, 0xFA08F1E5, 0x0FF00709, 0x0006F4EA, 0x02F000FE);
	r2 = D(r2, s0_1_2, 0x0707FA09, 0x07F7EB0D, 0x0708F909, 0x0000F702);
	r3 = D(r3, s0_1_2, 0x030EFC03, 0x03FBFA13, 0x02FDFEFD, 0x01F8F2F6);
	r4 = D(r4, s0_1_2, 0xFF030100, 0x04F1FDFA, 0x00FEFB00, 0xF4F5FA02);
	r5 = D(r5, s0_1_2, 0x010FFCF8, 0x0100FAFA, 0x000904F9, 0xFC03FB06);
	r6 = D(r6, s0_1_2, 0xFB05E906, 0xFFF5F606, 0xFD0DFF06, 0xFDF40602);
	r7 = D(r7, s0_1_2, 0x01FC00FD, 0xFEE801F9, 0x0106F7DC, 0xFE07FBFD);
	r0 = D(r0, s0_2_0, 0x1305FC09, 0x16FFF904, 0xFB00FF05, 0xF804FB05);
	r1 = D(r1, s0_2_0, 0x81F604F8, 0x19F6FF0B, 0x07FFF801, 0xDAFC03FA);
	r2 = D(r2, s0_2_0, 0x050000F9, 0x3016D5CF, 0x00FAF80F, 0x0701E20C);
	r3 = D(r3, s0_2_0, 0xF2FDFC0A, 0x11FD0B01, 0x01FF0002, 0xD501F900);
	r4 = D(r4, s0_2_0, 0xE806F901, 0xF5010000, 0xF905FC01, 0xFC08E714);
	r5 = D(r5, s0_2_0, 0x07FAFB04, 0x0807FDFE, 0xFC03F204, 0xFB0AEB08);
	r6 = D(r6, s0_2_0, 0xB4FEE9FE, 0xF10301FF, 0xFD00F4FE, 0x0EFFF201);
	r7 = D(r7, s0_2_0, 0x0207F204, 0xFDFDFD00, 0xE503ECF4, 0x0101EE05);
	r0 = D(r0, s0_2_1, 0xF3F50005, 0x04FA020A, 0xFEFD0300, 0x0610F909);
	r1 = D(r1, s0_2_1, 0x0D09FB1E, 0x04020900, 0x23F0EF0E, 0x0D07FE02);
	r2 = D(r2, s0_2_1, 0x00060203, 0x8110063A, 0xE60C0003, 0xD40AFFFF);
	r3 = D(r3, s0_2_1, 0x0F02F5F4, 0x16010604, 0xFD100302, 0x01F8FE01);
	r4 = D(r4, s0_2_1, 0xF8FEFFFF, 0x0BF6FD01, 0x05FDFD02, 0x01ECF7FD);
	r5 = D(r5, s0_2_1, 0x0305F203, 0x0701FFFD, 0xFDF3FFFD, 0xF5F9FDFF);
	r6 = D(r6, s0_2_1, 0x0A0FED10, 0x01030000, 0xFF1DE7FB, 0x12F103F8);
	r7 = D(r7, s0_2_1, 0xFFF3F9F9, 0xF1FBFF02, 0x04170407, 0xFE01FD03);
	r0 = D(r0, s0_2_2, 0x0107FE02, 0x0104FDFD, 0xFD060001, 0x0603FE02);
	r1 = D(r1, s0_2_2, 0xFF14F8E8, 0xFD08F8FC, 0x0AFDFDF8, 0x00F70104);
	r2 = D(r2, s0_2_2, 0xFC00FC07, 0x0CFCE70E, 0xFE04FA07, 0xFB0CEDF8);
	r3 = D(r3, s0_2_2, 0xF80DF9FD, 0xFF000102, 0xFB070000, 0xF307FFF9);
	r4 = D(r4, s0_2_2, 0xFFFD0101, 0xF90CF5FF, 0xFB0EFB00, 0xFBE8F90C);
	r5 = D(r5, s0_2_2, 0x06F6F700, 0x06FCFC07, 0xFF0CFB05, 0x0108FBFE);
	r6 = D(r6, s0_2_2, 0x0201F502, 0xFE05F807, 0x000FF708, 0x0509FF06);
	r7 = D(r7, s0_2_2, 0xF804F603, 0xFE06F604, 0xFBFAF3F0, 0x0003FBFE);
	r0 = D(r0, s1_0_0, 0x040A0016, 0xFC0D032E, 0xFEFA00EF, 0xFE050112);
	r1 = D(r1, s1_0_0, 0xFF1A0203, 0x050E0615, 0x08080208, 0xFBF7000F);
	r2 = D(r2, s1_0_0, 0x0008FD13, 0xF530DD0F, 0xFDF1041D, 0xFC190103);
	r3 = D(r3, s1_0_0, 0x00FA0408, 0x01FE0719, 0x01080017, 0x060D0716);
	r4 = D(r4, s1_0_0, 0xFF08FE0B, 0x04FEFF0E, 0xFE04F90A, 0xFA1A1102);
	r5 = D(r5, s1_0_0, 0x0804FB13, 0x05FF0219, 0xFFF50210, 0xF8080017);
	r6 = D(r6, s1_0_0, 0xFF0A0314, 0x02EDFE15, 0x0706FC0C, 0xFFF8FB09);
	r7 = D(r7, s1_0_0, 0xFE07010F, 0xFFFCFF12, 0xF402050E, 0xFAEA0504);
	r0 = D(r0, s1_0_1, 0x08FDFD1F, 0xFB15010D, 0x000400FD, 0xFBFEFE14);
	r1 = D(r1, s1_0_1, 0x0F08F2F9, 0x050D0605, 0x04020109, 0xF8FC041A);
	r2 = D(r2, s1_0_1, 0xFEFBF7E6, 0x04C712F2, 0x0200052A, 0x02FCFB1B);
	r3 = D(r3, s1_0_1, 0x061B002B, 0xFB11020E, 0x0306000F, 0xF9E90119);
	r4 = D(r4, s1_0_1, 0x04FFF60E, 0xF811FC12, 0x0007FCFE, 0xFBC2FF0D);
	r5 = D(r5, s1_0_1, 0x07F5F909, 0x03FFFF15, 0xF705FF10, 0xFBF9FBFA);
	r6 = D(r6, s1_0_1, 0xF719EB05, 0xFB03F1FD, 0xFD0CFF00, 0xFF020602);
	r7 = D(r7, s1_0_1, 0xFEF90107, 0x00E7FF16, 0xF5FFFD13, 0xFC0DF318);
	r0 = D(r0, s1_0_2, 0x03FE0119, 0xFEFB0032, 0xFD040009, 0xFDFAFE0C);
	r1 = D(r1, s1_0_2, 0xF406DEFA, 0xFEFF0608, 0x03060511, 0xFFFF0009);
	r2 = D(r2, s1_0_2, 0x01F3F611, 0xF9FEEE0A, 0x0404FF11, 0xFFFB0407);
	r3 = D(r3, s1_0_2, 0xFB02F60F, 0xF9140908, 0xFA03FA04, 0xF502FA24);
	r4 = D(r4, s1_0_2, 0x0200000A, 0x04F4FB08, 0xFFFEFD09, 0x0E0A0004);
	r5 = D(r5, s1_0_2, 0x000701FD, 0xFCFD040F, 0x00F60103, 0xF4FCF40E);
	r6 = D(r6, s1_0_2, 0xFD00EA08, 0x00FCE80A, 0xFDFA000A, 0xFB0A0307);
	r7 = D(r7, s1_0_2, 0xFC03F805, 0x0307F707, 0xF800F900, 0xFFF70308);
	r0 = D(r0, s1_1_0, 0xF703FE07, 0x0502FB17, 0x02F8F60C, 0xF804FF18);
	r1 = D(r1, s1_1_0, 0xF509F9F9, 0xFEBBF6FC, 0xFA0A0210, 0x0EFC0007);
	r2 = D(r2, s1_1_0, 0xF7FCFD01, 0x170C0ADC, 0xE6FFFC33, 0x07F0F8D2);
	r3 = D(r3, s1_1_0, 0x0FF9FFF9, 0xF806FC0C, 0xF3000007, 0x0BFDF4F3);
	r4 = D(r4, s1_1_0, 0x07F2FAFA, 0xFD09FF02, 0xFC04FA05, 0x1400FD00);
	r5 = D(r5, s1_1_0, 0xFFF1FE06, 0xF6FFF8FF, 0x05FA03FA, 0xF5FCFFF5);
	r6 = D(r6, s1_1_0, 0xE7FF051F, 0xF005FD0A, 0x0CFB010D, 0x0CFEFF15);
	r7 = D(r7, s1_1_0, 0xF807000A, 0xFD06FCFC, 0xEF0C070A, 0x01E505FD);
	r0 = D(r0, s1_1_1, 0xF1F8FC16, 0xF404FBFA, 0xF100F510, 0xF8F301F7);
	r1 = D(r1, s1_1_1, 0x05FCFEDD, 0xECDDD712, 0xF6EE05E5, 0x1007FF05);
	r2 = D(r2, s1_1_1, 0x0116FC03, 0xE4E7FC0B, 0x03CD0610, 0xF7090216);
	r3 = D(r3, s1_1_1, 0x091C0417, 0x0B0FF80D, 0x0707FF07, 0x07E6F9B3);
	r4 = D(r4, s1_1_1, 0xFD0702FE, 0xF7E1F1F2, 0x0BFAFBFB, 0xFBEEEFCA);
	r5 = D(r5, s1_1_1, 0xE4F6EAFE, 0xF9E9F6F4, 0xFA03FDF1, 0xF7FEEE06);
	r6 = D(r6, s1_1_1, 0x0EEEF7CF, 0xFFF4E304, 0xF719F506, 0xFFEAF302);
	r7 = D(r7, s1_1_1, 0xEFFEF9F5, 0xF811DBF7, 0xF7FAF9EE, 0xFFF4FB0B);
	r0 = D(r0, s1_1_2, 0xF1030010, 0xFBFCF910, 0x03FAF70C, 0xFAF9FC12);
	r1 = D(r1, s1_1_2, 0x19FA0110, 0x000AE406, 0xF8FDF200, 0x0FFCFC1A);
	r2 = D(r2, s1_1_2, 0xF308EEFA, 0x03F9000E, 0x0800F9F1, 0xFF1000FB);
	r3 = D(r3, s1_1_2, 0xF31BF3FA, 0x06FBFA15, 0x0100FA0D, 0x0C0AF5FD);
	r4 = D(r4, s1_1_2, 0xF9FAFC08, 0x0304EC0B, 0xFFFFFDFE, 0xF3E9E50E);
	r5 = D(r5, s1_1_2, 0xF7E7ED10, 0x060EF9FD, 0xFFF608FD, 0x08EFF70D);
	r6 = D(r6, s1_1_2, 0xFD00FD10, 0x0002FF09, 0xFD03FF07, 0xFAF2F409);
	r7 = D(r7, s1_1_2, 0xFCF2F30E, 0x02E7EA0D, 0xF211F701, 0xFE000506);
	r0 = D(r0, s1_2_0, 0x11FC0107, 0x0C00F905, 0x0402FA0B, 0x00FCFB12);
	r1 = D(r1, s1_2_0, 0xF6000103, 0xFE0EF40C, 0x07F8EE10, 0xEF04000B);
	r2 = D(r2, s1_2_0, 0x06FF0301, 0xC502DA02, 0xF3FCFD0F, 0x06F5FCF7);
	r3 = D(r3, s1_2_0, 0x04FE030A, 0x04FDFC1B, 0xFCFEFD0C, 0xFE02FF0B);
	r4 = D(r4, s1_2_0, 0xF8FAFEF2, 0xFF01000A, 0x02FFFF0C, 0xFB03FA1D);
	r5 = D(r5, s1_2_0, 0xF804020F, 0x0D03FFFE, 0x02FA0211, 0x04F100FD);
	r6 = D(r6, s1_2_0, 0xF5FE050C, 0x01FDFF00, 0xFF18FB0A, 0x09FDF407);
	r7 = D(r7, s1_2_0, 0xFEEDFDF1, 0xFD00FF07, 0xF4040710, 0xF8F20110);
	r0 = D(r0, s1_2_1, 0x000AF906, 0xFF10F101, 0xFF03FE04, 0x00FAF80C);
	r1 = D(r1, s1_2_1, 0x1713F5F0, 0x0F02EF05, 0xFCEFF412, 0xFFF2040E);
	r2 = D(r2, s1_2_1, 0xF700FD0B, 0x17BB1502, 0xFFFB041A, 0x0111F515);
	r3 = D(r3, s1_2_1, 0xFF10FD21, 0x0AFAF816, 0x01FDF906, 0xF111FE04);
	r4 = D(r4, s1_2_1, 0xFC08F908, 0x060C060F, 0x0B08FC0D, 0x00E8FA03);
	r5 = D(r5, s1_2_1, 0xF8F90203, 0xFEFCFCFB, 0xF40AFD13, 0xF206F60D);
	r6 = D(r6, s1_2_1, 0xF408EF04, 0xFC040410, 0xEB16E2FB, 0xF50AFD08);
	r7 = D(r7, s1_2_1, 0xF200F80F, 0xF4F90110, 0xFCF800FA, 0xFF01FE1B);
	r0 = D(r0, s1_2_2, 0x08F0040C, 0x0202F50F, 0x0406FD09, 0x05F70012);
	r1 = D(r1, s1_2_2, 0xD701F4F9, 0x0DFA040A, 0xF302E20A, 0xFE0FF705);
	r2 = D(r2, s1_2_2, 0xFE000306, 0x0811FD09, 0x0001FBF6, 0x020BFC02);
	r3 = D(r3, s1_2_2, 0xFC0AF413, 0xF8120007, 0xFA0CFF00, 0xFA050012);
	r4 = D(r4, s1_2_2, 0x0201FD0C, 0xF507F90F, 0xF607FD07, 0x1914F61D);
	r5 = D(r5, s1_2_2, 0xFF03F100, 0xFF02FE02, 0x08EE0608, 0xFE000503);
	r6 = D(r6, s1_2_2, 0xE00A03FA, 0xF40401FE, 0x01F10409, 0x0DFCFB01);
	r7 = D(r7, s1_2_2, 0x06F3FE0F, 0x030C010B, 0xE905FD13, 0x03FE020F);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-6.434e-03, -2.658e-03, -1.617e-02, 5.061e-03);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-1.857e-02, -4.256e-02, -3.367e-02, -2.272e-03);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-1.989e-02, -4.578e-02, 7.222e-03, -2.371e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-1.625e-02, -1.888e-03, 3.967e-04, -1.825e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-1.460e-02, -1.691e-02, -5.402e-03, -1.926e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.898e-02, -1.392e-02, -5.109e-03, -2.542e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-2.594e-02, -2.117e-02, -2.574e-02, -2.062e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-1.593e-02, -2.008e-02, -5.410e-03, -1.237e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-6x32-BILINEAR-MPV-NVL-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv6
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv6_pt;
			r = conv6_gather(p, 0);
			g = conv6_gather(p, 1);
			b = conv6_gather(p, 2);
			a = conv6_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv6_pt;
			r = conv6_gather(p, 0);
			g = conv6_gather(p, 1);
			b = conv6_gather(p, 2);
			a = conv6_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0;
	vec4 f0;
	r0 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0701FF01, 0x01000000, 0x02000000, 0x00000000);
	r0 = D(r0, s0_0_1, 0xFF010104, 0x0901FF04, 0x03000000, 0x02000000);
	r0 = D(r0, s0_0_2, 0x00010000, 0x00010001, 0x02000000, 0x03000000);
	r0 = D(r0, s0_1_0, 0x0204FE04, 0x01000100, 0x0A02FD04, 0x01010000);
	r0 = D(r0, s0_1_1, 0xF10EF50C, 0xEF0DF70C, 0xEE05FC0C, 0xFF05F90C);
	r0 = D(r0, s0_1_2, 0x01000000, 0x0304FD04, 0x00000000, 0xFC020004);
	r0 = D(r0, s0_2_0, 0x02FD0000, 0x00000000, 0xFFFDFF01, 0xFF000000);
	r0 = D(r0, s0_2_1, 0x01010000, 0x02FE0000, 0x01E5FC04, 0xFBEDFD04);
	r0 = D(r0, s0_2_2, 0x00FF0000, 0x00000000, 0x01FF0000, 0x03F5FF01);
	r0 = D(r0, s1_0_0, 0xFF070000, 0x00010002, 0x00FFFFFE, 0x00000002);
	r0 = D(r0, s1_0_1, 0xFCFE0011, 0xFC07FFE8, 0x0001FF0A, 0x00FF00F4);
	r0 = D(r0, s1_0_2, 0x000104FF, 0xFFFE0401, 0x0000FFFF, 0x0000FE01);
	r0 = D(r0, s1_1_0, 0xFC08FD03, 0x00FEFE01, 0xFCEE0502, 0x00010301);
	r0 = D(r0, s1_1_1, 0xF50CE013, 0xF516F0EF, 0xF5F71F16, 0xF5DD13E7);
	r0 = D(r0, s1_1_2, 0x0000FCFE, 0xFC00EB00, 0x000000FF, 0xFC040E00);
	r0 = D(r0, s1_2_0, 0x00FF0100, 0x00000000, 0xFF03FC00, 0x00030001);
	r0 = D(r0, s1_2_1, 0x00FF0005, 0x00FF01FA, 0xFC01070C, 0xFC01FFF6);
	r0 = D(r0, s1_2_2, 0x000001FF, 0x00000101, 0x000000FE, 0xFF010402);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFFFDFF01, 0x00FF00FF, 0x00FF0001, 0x00000000);
	r0 = D(r0, s0_0_1, 0x090500FE, 0xFF00FDFD, 0x00000000, 0x0000FE00);
	r0 = D(r0, s0_0_2, 0x0100E100, 0xF90220FF, 0x0100EC00, 0xFF001700);
	r0 = D(r0, s0_1_0, 0xFEFF00EE, 0x00FF0001, 0xFEFCFF04, 0x00FE00FE);
	r0 = D(r0, s0_1_1, 0x0F07010B, 0xF708FE15, 0x190DFFF6, 0xF906FF04);
	r0 = D(r0, s0_1_2, 0x01FFDFFF, 0xFA0021FD, 0x03FFE000, 0xF00222FE);
	r0 = D(r0, s0_2_0, 0xFF00FF05, 0x00010000, 0xFE01FF00, 0x00000004);
	r0 = D(r0, s0_2_1, 0x010001F3, 0x0001FF06, 0x02020115, 0xFD04FDDD);
	r0 = D(r0, s0_2_2, 0xFF00EDFF, 0x02001204, 0xFE00E2FE, 0x02001D04);
	r0 = D(r0, s1_0_0, 0x01FD01FC, 0x01FF00FF, 0x00FF0000, 0x00000000);
	r0 = D(r0, s1_0_1, 0x02FE01FD, 0x02FA0105, 0x00FF00FF, 0x000100FF);
	r0 = D(r0, s1_0_2, 0x00010000, 0x010101FF, 0x00000000, 0x01000000);
	r0 = D(r0, s1_1_0, 0xF5F905F2, 0x01000103, 0x03F804F2, 0x01000102);
	r0 = D(r0, s1_1_1, 0xEF0D06F9, 0xE3F7091A, 0x030304F8, 0x05F10519);
	r0 = D(r0, s1_1_2, 0x00020100, 0xFF0D03FD, 0xFF030100, 0xFE0702FE);
	r0 = D(r0, s1_2_0, 0x01FF0001, 0x010000FF, 0x03FD01FE, 0x010000FF);
	r0 = D(r0, s1_2_1, 0x00000000, 0x00000001, 0x150804FE, 0x10FF0309);
	r0 = D(r0, s1_2_2, 0x00000000, 0x00010000, 0x01000000, 0x080702FE);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFF01FD02, 0xFFFF0200, 0x0100FF01, 0x01000000);
	r0 = D(r0, s0_0_1, 0x010605F5, 0x00090601, 0x01FF01FD, 0x01010100);
	r0 = D(r0, s0_0_2, 0xFEFF00FE, 0xFF0101F4, 0x01000001, 0x02FF00FE);
	r0 = D(r0, s0_1_0, 0x0AEE0B03, 0x05FE0200, 0xF3FBF404, 0xFAFC04FF);
	r0 = D(r0, s0_1_1, 0x170EFE0C, 0x11F7E00B, 0xEC140EFA, 0xEE0EFA09);
	r0 = D(r0, s0_1_2, 0x050001FC, 0x0F0903FF, 0xF9FF00F8, 0xF20505EE);
	r0 = D(r0, s0_2_0, 0xFF010100, 0xFF01FF00, 0x00F80901, 0x01010000);
	r0 = D(r0, s0_2_1, 0xFFFDFF01, 0xFFFC0700, 0xFFFFF009, 0xFFEE0904);
	r0 = D(r0, s0_2_2, 0xFFFF0201, 0xFF000002, 0x0200FF01, 0x0205FF06);
	r0 = D(r0, s1_0_0, 0xFF01FEF9, 0x000000FD, 0xFF000000, 0x00000000);
	r0 = D(r0, s1_0_1, 0x0505FB02, 0xFE05FBFB, 0x00FF0103, 0xFF000001);
	r0 = D(r0, s1_0_2, 0xFF01FE02, 0xFFFEFD05, 0x000100FF, 0x00FF0002);
	r0 = D(r0, s1_1_0, 0x0608FB08, 0xFE00FFFD, 0xFB05FC05, 0x00000003);
	r0 = D(r0, s1_1_1, 0xD5EA100A, 0x1512041B, 0x0CFFEDE6, 0x0917EFEA);
	r0 = D(r0, s1_1_2, 0x020101FF, 0x09F609FB, 0x02000102, 0xF0F8FCFA);
	r0 = D(r0, s1_2_0, 0xFE0101FF, 0xFFFF0100, 0x090404FD, 0x0100FFFE);
	r0 = D(r0, s1_2_1, 0x030000FE, 0x00FF01FF, 0x07F20509, 0xE5000A03);
	r0 = D(r0, s1_2_2, 0x0000FF00, 0xFE01FFFF, 0xFE010002, 0x06FE0005);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0502FEFF, 0x03FF0000, 0x00020101, 0x00FFFF00);
	r0 = D(r0, s0_0_1, 0x03E5FDFF, 0x040F0005, 0x00FB00FE, 0x00010001);
	r0 = D(r0, s0_0_2, 0x00020000, 0x01040100, 0x00010000, 0x01010000);
	r0 = D(r0, s0_1_0, 0xF5020509, 0xFFFF0300, 0x0A01FE00, 0xFFFF00FF);
	r0 = D(r0, s0_1_1, 0xF4F71613, 0xEC0BE5E5, 0x0BDFFE04, 0x16160A01);
	r0 = D(r0, s0_1_2, 0x0002FEFF, 0xFDFD07FB, 0x010301FF, 0x0102FAFE);
	r0 = D(r0, s0_2_0, 0x0100FCFF, 0x00000001, 0xFC020506, 0xFEFFFD00);
	r0 = D(r0, s0_2_1, 0x00FF0C00, 0x01000000, 0xFE00E10E, 0xFD0313EA);
	r0 = D(r0, s0_2_2, 0x0000FE00, 0x0000F701, 0xFF0005FF, 0xFEFE0AFD);
	r0 = D(r0, s1_0_0, 0x000305FE, 0x00010001, 0x00000000, 0x00000100);
	r0 = D(r0, s1_0_1, 0x00FF00FE, 0xFEF8FE08, 0x00FE0003, 0x0001FFFE);
	r0 = D(r0, s1_0_2, 0x00FF0003, 0x010500F1, 0x0001FFFF, 0x0000FFFF);
	r0 = D(r0, s1_1_0, 0xFFF20003, 0x0004FFFF, 0xFFFE0505, 0x0004FDFF);
	r0 = D(r0, s1_1_1, 0x1617DD14, 0x02FA0EED, 0x0B1205D3, 0xFCE40013);
	r0 = D(r0, s1_1_2, 0xFFFD00FC, 0xEDFEF808, 0xFFFD0102, 0x0006090F);
	r0 = D(r0, s1_2_0, 0x01FEFE00, 0x00000001, 0x00F6FEFF, 0x000201FF);
	r0 = D(r0, s1_2_1, 0xFC0103FF, 0x0201FB01, 0x04050E05, 0x070A0704);
	r0 = D(r0, s1_2_2, 0x02FF0100, 0xFAFE0200, 0x02FFFF00, 0xECFDF9FD);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(1.346e-08, 2.254e-08, -1.068e-08, -4.326e-09);
	f0 = tanh(f0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(f0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(f0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(f0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(f0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
