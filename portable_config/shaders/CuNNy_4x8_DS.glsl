// CuNNy 4x8 BILINEAR MPV NVL DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-4x8-BILINEAR-MPV-NVL-DS-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(LUMA_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0)) + vec2(0.5)) * LUMA_pt).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(9.216e-02, 8.102e-02, 1.491e-02, 2.275e-02) * s0_0_0;
	r1 += V4(-9.023e-03, 2.615e-02, -5.113e-02, -1.214e-02) * s0_0_0;
	r0 += V4(-1.860e-01, -1.164e-01, -8.836e-02, -1.075e-02) * s0_0_1;
	r1 += V4(2.536e-01, 7.402e-01, 3.603e-02, 6.519e-02) * s0_0_1;
	r0 += V4(5.720e-02, 4.014e-02, 8.219e-02, -1.486e-02) * s0_0_2;
	r1 += V4(4.282e-01, 5.161e-02, 1.300e-02, 2.451e-03) * s0_0_2;
	r0 += V4(-6.747e-02, -9.409e-02, 1.213e-01, -7.544e-02) * s0_1_0;
	r1 += V4(-1.309e-01, -3.588e-02, 5.162e-02, -1.663e-02) * s0_1_0;
	r0 += V4(-1.859e+00, -6.738e-01, -7.053e-01, -2.757e-01) * s0_1_1;
	r1 += V4(-7.024e-01, -7.019e-01, 6.699e-01, 6.802e-01) * s0_1_1;
	r0 += V4(5.605e-01, 1.832e-01, -6.270e-02, -3.350e-01) * s0_1_2;
	r1 += V4(1.255e-01, -8.246e-02, -7.205e-01, -2.543e-01) * s0_1_2;
	r0 += V4(3.103e-02, 3.433e-02, 5.254e-01, 3.895e-02) * s0_2_0;
	r1 += V4(1.636e-01, 2.192e-02, -1.399e-02, -3.022e-03) * s0_2_0;
	r0 += V4(1.930e-01, 8.080e-02, 1.170e-01, 7.396e-01) * s0_2_1;
	r1 += V4(-9.460e-02, -5.838e-02, 1.964e-02, -2.117e-02) * s0_2_1;
	r0 += V4(-1.060e-02, 4.656e-01, -5.919e-03, -6.726e-02) * s0_2_2;
	r1 += V4(-4.792e-02, 3.793e-02, -8.300e-03, 1.347e-02) * s0_2_2;
	r0 += V4(1.380e-02, -3.174e-04, -5.290e-03, -2.773e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-6.384e-04, 1.379e-03, 2.051e-03, -4.075e-04);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8-BILINEAR-MPV-NVL-DS-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * in_pt))
#define l1(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * in_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-2.550e-02, 8.320e-02, 6.553e-02, -1.927e-01, 2.584e-01, -5.998e-02, 8.715e-02, -2.085e-01, -6.566e-03, 1.198e-01, -5.139e-02, 1.024e-01, 4.249e-03, -2.627e-01, -6.176e-02, 2.843e-01) * s0_0_0;
	r1 += M4(4.727e-01, 1.126e-02, 5.032e-02, -4.059e-02, 6.612e-02, 2.482e-01, -8.141e-02, -5.610e-01, -1.849e-01, -2.455e-02, 7.984e-03, 7.494e-02, 7.716e-01, -4.043e-02, -1.491e-01, 1.356e-02) * s0_0_0;
	r0 += M4(1.528e-01, 7.684e-01, 4.644e-02, 2.494e-01, 6.361e-02, -4.016e-01, -3.507e-03, -2.457e-01, -1.587e-01, 8.386e-02, -4.218e-02, -9.891e-02, -3.951e-02, 4.597e-01, -8.575e-02, 3.305e-01) * s0_0_1;
	r1 += M4(2.912e-02, 1.786e-01, 2.802e-02, -2.102e-01, 3.780e-01, -1.548e-01, 1.183e-02, -7.472e-01, -1.560e+00, 5.983e-02, 1.395e-02, 5.569e-01, -5.664e-01, 2.916e-01, 1.708e-01, -7.934e-01) * s0_0_1;
	r0 += M4(-7.054e-02, 3.407e-01, -4.321e-02, -3.231e-02, 2.327e-01, -2.470e-02, 7.396e-02, -8.278e-02, 4.033e-01, -7.701e-02, 1.208e-01, -5.041e-02, -1.150e-01, 2.518e-01, -1.145e-01, -1.490e-01) * s0_0_2;
	r1 += M4(3.086e-02, -1.142e-01, -2.204e-02, -1.090e-01, 1.615e-01, 2.364e-01, 1.714e-02, 9.125e-02, -2.532e-02, 1.392e-01, 8.620e-02, 6.504e-01, -4.467e-02, -6.581e-03, -4.350e-02, 4.166e-01) * s0_0_2;
	r0 += M4(1.703e-01, 8.780e-01, -2.318e-03, -4.890e-02, -1.620e-01, -4.138e-01, -1.614e-01, -2.133e-01, -1.557e-02, -7.108e-02, 4.032e-02, 5.245e-02, 3.167e-01, -4.792e-02, 3.975e-01, 9.167e-02) * s0_1_0;
	r1 += M4(-9.350e-02, 2.814e-01, -4.974e-03, 3.917e-02, -3.708e-02, 1.024e-02, -3.363e-03, -2.030e-01, 5.125e-02, -7.363e-02, 3.648e-02, -1.440e-01, -3.787e-01, 1.978e-01, -1.662e-01, 1.474e-01) * s0_1_0;
	r0 += M4(-3.517e-01, 1.023e+00, 2.339e-01, -8.778e-01, -1.397e-01, 5.412e-01, 7.852e-02, -2.403e+00, 5.831e-02, -3.853e-03, -3.100e-02, -1.176e+00, -3.176e-01, 6.700e-01, 2.670e-01, -6.790e-01) * s0_1_1;
	r1 += M4(-2.104e-01, -2.233e-01, -7.872e-03, 2.169e-02, 8.818e-01, 1.016e-01, 7.156e-02, -4.302e-01, -5.429e-01, -1.835e-01, 2.414e-02, 1.203e-01, -2.720e-02, 4.151e-01, 5.679e-01, -1.690e-01) * s0_1_1;
	r0 += M4(-1.904e-01, 3.674e-01, -1.018e-01, 7.702e-02, 2.016e-01, -1.001e-01, 1.726e-01, -1.967e-01, 8.779e-02, -2.493e-01, -1.171e-01, -1.620e-01, 1.796e-02, 3.147e-01, 3.067e-02, 1.119e-01) * s0_1_2;
	r1 += M4(-4.395e-02, -2.046e-01, -7.153e-02, -2.005e-02, 2.979e-01, 1.024e-01, -7.494e-03, 1.074e-01, -1.557e-01, -4.103e-01, 1.731e-02, 8.557e-01, -4.492e-03, 1.421e-01, -2.214e-01, -1.220e-01) * s0_1_2;
	r0 += M4(1.585e-02, 1.825e-01, 7.006e-02, -2.943e-01, 1.616e-01, -1.854e-01, -3.465e-02, -3.845e-02, -2.430e-02, 7.594e-02, 7.835e-02, 3.496e-02, -3.390e-02, -9.955e-03, 4.653e-02, -1.778e-02) * s0_2_0;
	r1 += M4(-1.294e-02, 1.307e-01, -4.700e-02, -1.117e-02, 1.363e-01, 1.322e-01, -2.300e-02, 3.659e-02, 1.302e-01, -3.085e-02, -1.810e-03, -3.141e-02, 9.563e-02, -7.340e-02, -3.147e-02, 3.708e-02) * s0_2_0;
	r0 += M4(-6.200e-02, 1.072e-01, -2.229e-02, 6.237e-01, 1.813e-02, -1.781e-01, 8.884e-02, -3.903e-01, -1.125e-02, -1.054e-03, 5.008e-02, 2.323e-01, -9.485e-02, 3.210e-01, -2.543e-02, -1.969e-02) * s0_2_1;
	r1 += M4(1.997e-03, -9.350e-03, -7.698e-02, 2.596e-02, -2.179e-02, 1.699e-01, 1.250e-01, -1.401e-01, 1.357e-01, 2.195e-01, 4.437e-02, 9.825e-02, -2.697e-02, -2.031e-01, -4.206e-02, 1.450e-01) * s0_2_1;
	r0 += M4(9.115e-03, 1.849e-01, -2.129e-02, 1.137e-01, -2.294e-02, -3.308e-02, -3.724e-02, 8.597e-02, 8.851e-02, -1.713e-01, -4.948e-02, 2.716e-02, -2.995e-02, 2.302e-01, -1.782e-02, 7.003e-02) * s0_2_2;
	r1 += M4(1.430e-01, 9.713e-03, -1.022e-01, -2.128e-02, 5.938e-02, -2.370e-02, 6.748e-02, 9.995e-02, -6.766e-02, 9.572e-02, -4.547e-02, -9.756e-02, -1.004e-01, -1.191e-01, -6.239e-03, 2.059e-02) * s0_2_2;
	r0 += M4(-9.710e-02, -5.140e-02, -1.368e-01, 5.883e-02, 9.281e-02, 5.550e-02, 1.362e-01, 5.702e-02, 2.759e-01, 2.413e-02, 1.634e-01, 1.213e-01, -1.145e-01, -2.959e-01, -1.405e-01, -2.164e-01) * s1_0_0;
	r1 += M4(-8.498e-01, -1.682e-01, 2.417e-02, 1.009e-01, 3.970e-01, 1.459e-01, 1.527e-03, 2.324e-03, 5.116e-01, 1.160e-01, 5.984e-02, -5.705e-01, -1.750e-01, -8.665e-02, -2.035e-01, -1.206e-01) * s1_0_0;
	r0 += M4(-2.089e-02, -8.593e-02, -8.118e-03, -4.598e-02, 5.360e-02, 2.686e-01, 6.139e-02, 6.139e-02, -1.513e-01, 1.558e-01, -3.231e-02, 2.781e-02, -2.046e-01, -1.151e+00, 3.178e-02, 1.802e-01) * s1_0_1;
	r1 += M4(-1.217e-01, -1.421e-01, -6.501e-02, 3.136e-01, 6.002e-02, 1.182e-01, 4.946e-02, -4.697e-01, -4.796e-01, 6.098e-02, 9.348e-03, -3.369e-01, 2.956e-01, -3.517e-01, -8.244e-03, -1.364e-01) * s1_0_1;
	r0 += M4(-5.939e-02, 1.463e-02, 1.146e-02, -3.069e-02, 1.577e-01, 9.949e-02, 6.956e-02, 7.619e-03, -5.754e-02, 2.512e-01, -1.907e-02, 1.997e-01, 2.788e-01, -8.848e-01, 1.102e-01, -1.037e-01) * s1_0_2;
	r1 += M4(1.292e-01, -2.495e-02, 2.602e-03, -1.178e-02, 2.765e-01, 8.179e-02, 1.014e-02, 6.078e-02, 6.856e-02, -9.745e-02, -2.383e-02, -1.206e-01, -7.730e-02, 2.745e-01, 1.550e-01, 1.041e-01) * s1_0_2;
	r0 += M4(-5.602e-03, 8.993e-02, -9.057e-02, 1.173e-01, 4.945e-02, 7.300e-02, 1.975e-01, 3.533e-02, 5.976e-01, 9.108e-01, 6.616e-01, -1.547e+00, -3.406e-01, -3.479e-01, 1.956e-01, -6.647e-02) * s1_1_0;
	r1 += M4(-1.773e-02, -1.862e-01, 7.919e-02, 4.655e-01, -5.934e-01, 2.032e-01, 1.189e-01, -3.934e-01, -3.769e-01, 7.676e-01, 5.808e-02, -1.552e-01, 3.769e-01, -7.168e-01, 1.344e-01, -2.812e-03) * s1_1_0;
	r0 += M4(-4.441e-01, 5.567e-01, -9.954e-02, -6.963e-01, 4.638e-01, 9.897e-01, 3.465e-01, -2.014e+00, 6.494e-01, 9.599e-01, 3.983e-01, -4.706e-01, 2.380e-01, -2.695e+00, -5.756e-01, 3.442e-01) * s1_1_1;
	r1 += M4(-4.248e-01, -5.000e-01, -2.441e-01, 5.229e-01, 4.206e-01, 6.621e-01, 2.158e-02, 3.400e-02, -2.591e-01, 2.550e-01, -3.260e-03, -2.566e-01, 2.417e-01, 3.136e-01, 8.550e-02, -9.398e-02) * s1_1_1;
	r0 += M4(9.096e-02, -4.068e-01, 1.260e-01, 3.239e-01, -1.293e-01, 3.652e-01, -6.377e-02, 1.167e-01, -6.075e-02, 4.910e-01, -8.144e-02, -2.321e-03, 2.104e-01, -1.004e+00, 3.893e-01, -1.544e-01) * s1_1_2;
	r1 += M4(-2.285e-01, 1.477e-01, 6.321e-02, 3.057e-01, -4.256e-03, -8.339e-02, -7.818e-03, -6.977e-01, 1.571e-01, -2.034e-01, 2.768e-02, -1.765e-01, -4.860e-01, 6.471e-01, 2.223e-01, 3.797e-01) * s1_1_2;
	r0 += M4(9.451e-02, -4.325e-02, -1.854e-02, 3.920e-01, -9.422e-02, -1.003e-01, -9.759e-02, -1.616e-01, -1.031e-02, 3.753e-01, 1.389e-01, -2.197e-01, -2.461e-01, -6.515e-01, -2.693e-01, 3.597e-01) * s1_2_0;
	r1 += M4(-5.653e-02, -5.846e-02, 9.045e-02, 2.184e-01, 1.411e-01, 2.397e-01, 7.057e-02, -2.174e-01, -9.195e-02, -1.874e-02, 1.335e-01, -6.459e-02, -1.731e-02, -1.953e-01, 1.102e-01, -1.820e-01) * s1_2_0;
	r0 += M4(-7.037e-02, -1.523e-01, -2.083e-01, 5.050e-01, 8.839e-01, 8.694e-01, 3.009e-01, -1.144e+00, 1.893e-01, 2.693e-01, 4.829e-02, 1.931e-01, 5.335e-02, -8.576e-01, 1.471e-01, 1.018e-02) * s1_2_1;
	r1 += M4(-7.051e-01, -4.308e-01, 1.848e-02, -1.387e-02, 5.048e-01, 1.865e-01, -1.708e-01, 2.193e-01, 6.038e-01, -9.472e-02, -1.652e-01, 4.596e-01, -1.434e-01, 1.179e-01, 2.300e-01, -2.499e-01) * s1_2_1;
	r0 += M4(-3.978e-02, -2.229e-01, -2.562e-02, -2.475e-01, 8.919e-02, -1.973e-02, 5.939e-03, -1.741e-01, 8.772e-03, 4.640e-01, -3.292e-03, 2.494e-02, 1.435e-01, -9.090e-01, 7.591e-02, -2.920e-01) * s1_2_2;
	r1 += M4(-4.140e-01, -1.015e-01, 1.935e-01, -4.868e-03, 3.792e-01, 1.270e-01, 6.991e-02, -6.372e-02, 1.194e-01, 3.300e-03, -2.569e-02, -1.053e-01, -6.403e-04, -1.540e-02, 1.787e-01, 3.667e-01) * s1_2_2;
	r0 += V4(-7.236e-03, -6.856e-03, 2.665e-02, 5.649e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(2.059e-02, -2.081e-02, -4.092e-01, 2.875e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8-BILINEAR-MPV-NVL-DS-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv1_pt))
#define l1(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv1_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-5.201e-02, 1.598e-01, 5.910e-02, -1.108e-01, 1.298e-01, 1.742e-01, 7.298e-02, 1.223e-01, 9.656e-03, 3.900e-02, 6.195e-03, 1.839e-01, -4.384e-02, 2.012e-01, 1.290e-01, 3.803e-02) * s0_0_0;
	r1 += M4(-2.271e-01, 7.015e-02, 2.239e-01, 6.496e-02, -4.988e-02, 1.270e-01, 3.171e-01, 2.962e-02, -2.711e-02, 4.763e-02, 2.876e-03, -3.828e-02, 4.150e-01, 1.230e-01, -1.959e-01, -1.222e-01) * s0_0_0;
	r0 += M4(1.873e-01, -2.989e-01, -2.208e-02, 7.687e-02, 2.446e-01, -2.058e-01, 2.811e-02, 3.844e-01, 1.583e-02, -2.860e-02, 2.542e-02, 5.726e-01, -2.013e-01, -2.638e-01, 2.046e-01, -2.815e-01) * s0_0_1;
	r1 += M4(1.826e-01, 1.860e-01, 4.548e-01, -4.878e-01, -1.016e-02, -5.362e-02, -1.310e-01, 3.230e-01, -5.289e-02, -3.214e-02, -2.417e-01, 3.997e-01, -1.787e-01, 1.830e-01, -8.570e-02, -2.595e-01) * s0_0_1;
	r0 += M4(-3.556e-02, 5.678e-02, -9.169e-02, -1.772e-01, 1.166e-01, 4.771e-01, 4.500e-02, -1.623e-01, -1.596e-01, 4.488e-01, 3.540e-02, -6.777e-01, -4.577e-03, 1.037e-01, 4.966e-02, -9.993e-02) * s0_0_2;
	r1 += M4(8.070e-03, -7.058e-03, -1.145e-01, -1.463e-01, 1.406e-01, -6.930e-02, 3.509e-02, -3.704e-02, -3.701e-01, -1.017e-01, -3.447e-01, 2.699e-01, 2.307e-01, 1.267e-01, 1.729e-01, 7.492e-02) * s0_0_2;
	r0 += M4(-1.336e-01, 2.257e-01, 3.111e-02, -4.124e-02, 3.702e-01, -1.099e-01, 1.350e-01, -6.241e-02, 1.967e-02, 4.263e-02, -2.948e-02, -2.456e-01, -5.883e-02, -2.313e-02, 1.841e-01, 1.578e-01) * s0_1_0;
	r1 += M4(2.421e-01, 1.553e-01, -2.392e-01, 7.631e-02, -6.034e-02, 2.973e-02, 4.974e-01, 1.588e-01, -3.357e-01, -1.688e-02, 1.841e-01, -7.740e-02, -2.173e-01, 4.739e-02, -4.463e-01, -4.814e-02) * s0_1_0;
	r0 += M4(-8.119e-02, -3.171e-01, 3.783e-01, 2.101e-01, 8.097e-01, 7.109e-01, -5.776e+00, -3.631e-01, 5.945e-01, -8.228e-01, -7.907e-01, 8.755e-02, -2.433e-01, 6.573e-02, 1.541e-02, -1.912e-01) * s0_1_1;
	r1 += M4(1.889e-01, 1.273e-01, 3.205e-01, -4.861e-01, 3.064e-01, 2.290e-01, -6.327e-01, 8.110e-02, 3.607e-01, -3.550e-02, -1.890e-01, 4.946e-01, -6.415e-01, 1.964e-01, -2.856e-01, 9.131e-02) * s0_1_1;
	r0 += M4(6.363e-02, -8.791e-02, 3.990e-02, -5.593e-02, 1.425e-01, 2.854e-01, 1.323e-01, 5.038e-01, 1.929e-02, -3.473e-01, 1.967e-01, 5.467e-01, -1.432e-01, 3.424e-01, 1.833e-01, -3.631e-01) * s0_1_2;
	r1 += M4(4.052e-02, -1.011e+00, 1.603e-01, -7.441e-01, 3.745e-01, 9.088e-01, 1.276e-01, 2.260e-01, 3.107e-01, 7.910e-01, -1.605e-01, 2.050e-01, 1.125e-02, 7.388e-02, 2.299e-01, 1.544e-01) * s0_1_2;
	r0 += M4(-9.241e-02, 9.888e-02, -3.962e-02, -3.512e-02, 1.247e-01, 2.772e-01, 1.063e-01, -1.004e-01, -3.663e-02, 1.590e-01, 1.067e-01, -6.187e-03, 4.514e-02, 3.301e-02, -1.065e-03, 1.058e-01) * s0_2_0;
	r1 += M4(1.155e-01, 7.093e-02, -5.574e-02, -6.310e-02, 3.776e-01, 1.627e-01, -1.210e-01, -6.458e-02, 2.925e-01, 7.734e-02, -2.204e-01, 6.996e-02, -1.008e+00, 9.231e-03, -2.752e-01, 1.328e-02) * s0_2_0;
	r0 += M4(6.606e-02, 9.008e-02, 9.140e-02, 2.342e-02, 3.667e-01, 7.991e-02, 9.797e-02, -1.039e-01, 1.952e-02, 1.183e-01, 7.416e-02, -3.618e-01, -4.798e-02, 1.542e-01, 1.851e-01, 2.202e-01) * s0_2_1;
	r1 += M4(-2.821e-01, 1.467e-01, -1.159e-01, 2.007e-02, 3.414e-01, 2.213e-02, 2.746e-01, 2.114e-01, -1.580e-01, -2.358e-02, 9.053e-02, -1.011e-01, -2.860e-01, 3.404e-02, -4.320e-01, 1.323e-02) * s0_2_1;
	r0 += M4(6.865e-02, -1.814e-02, -4.991e-02, 1.960e-02, 1.308e-01, -1.709e-01, 4.917e-02, 1.509e-01, -1.982e-02, -2.207e-01, 4.406e-02, 1.538e-01, 1.806e-01, -8.192e-02, 1.938e-02, 8.469e-02) * s0_2_2;
	r1 += M4(-1.111e-01, -7.376e-02, 3.855e-03, 4.592e-02, 1.848e-02, 5.787e-02, 7.549e-02, 1.141e-01, -3.601e-01, -1.178e-01, 3.328e-03, -2.581e-01, 1.098e-01, 5.671e-02, 7.684e-02, 1.163e-01) * s0_2_2;
	r0 += M4(-9.739e-04, 4.699e-02, -8.458e-03, -2.305e-01, -8.530e-03, -7.676e-02, -6.323e-02, 8.477e-02, 2.021e-01, -1.549e-01, 1.079e+00, 9.425e-01, -1.366e-02, -1.609e-01, 2.503e-02, 8.040e-02) * s1_0_0;
	r1 += M4(1.349e-01, 2.705e-03, 8.421e-04, -7.369e-02, 2.111e-01, -8.572e-02, -1.090e-01, -1.045e-01, 5.513e-01, -6.577e-02, -4.672e-01, 3.512e-01, -8.229e-02, -8.262e-02, 7.628e-02, -9.298e-03) * s1_0_0;
	r0 += M4(2.865e-02, -3.343e-02, 4.043e-02, -1.867e-01, -1.552e-01, 3.964e-01, -4.444e-02, -2.059e-01, -2.053e+00, 5.633e-01, 3.210e+00, -2.464e-01, -4.236e-02, -4.958e-02, -5.604e-02, 1.020e-01) * s1_0_1;
	r1 += M4(-3.029e-02, -4.825e-02, -4.043e-03, 1.924e-01, -2.742e-01, -1.033e-01, -3.172e-01, 5.412e-01, 7.591e-02, -9.677e-02, 1.313e-01, -2.110e+00, -2.647e-01, -6.763e-02, 6.360e-02, 1.320e-01) * s1_0_1;
	r0 += M4(-3.932e-03, -4.723e-02, 1.493e-02, -2.433e-01, 9.009e-02, 1.778e-01, 1.057e-02, -1.209e-01, 4.153e-01, 4.352e-01, 1.065e+00, -2.078e-01, -1.630e-02, 1.756e-01, -4.204e-02, 1.768e-01) * s1_0_2;
	r1 += M4(9.883e-02, -3.975e-02, 6.096e-03, 2.079e-01, 1.605e-01, 3.394e-01, 1.959e-02, 9.844e-02, 4.607e-01, -2.962e+00, 1.016e+00, -1.863e+00, -3.287e-02, 4.954e-02, 9.530e-02, 8.537e-02) * s1_0_2;
	r0 += M4(1.634e-02, -2.598e-02, 6.786e-02, -8.779e-02, 1.323e-01, -1.137e-01, 1.542e-01, 9.013e-02, -2.104e-01, -3.603e-01, 5.264e-01, -1.010e+00, -5.230e-02, 4.975e-02, -1.314e-02, -1.548e-03) * s1_1_0;
	r1 += M4(-2.680e-02, 1.602e-03, -9.573e-02, 5.606e-02, -2.815e-01, -4.479e-02, 1.337e-01, 5.780e-03, -1.398e+00, -1.290e-01, 3.428e-01, -2.042e-01, -1.279e-01, -2.121e-02, -6.324e-02, -4.217e-02) * s1_1_0;
	r0 += M4(-1.412e-01, 1.138e-02, -3.454e-02, -2.248e-01, -1.743e-01, 1.161e-01, 6.457e-02, -2.017e-01, 1.100e-01, -4.222e-01, 1.589e+00, 3.812e-01, -1.237e-01, 7.499e-01, 3.658e-02, -1.841e-01) * s1_1_1;
	r1 += M4(-1.007e-02, 8.774e-03, -1.748e-02, -2.238e-03, -1.190e-01, 8.423e-02, 2.803e-02, -4.114e-01, 5.627e-01, -1.328e-02, -1.199e+00, 4.881e-01, -2.195e-01, 4.710e-02, 4.937e-02, 7.443e-01) * s1_1_1;
	r0 += M4(-9.400e-02, 3.939e-01, -3.592e-02, -1.889e-01, 2.528e-01, -6.425e-01, -1.752e-02, 3.030e-02, 5.504e-02, -4.405e-01, 9.034e-01, 4.875e-01, 4.872e-02, -2.762e-01, -1.182e-02, 1.294e-01) * s1_1_2;
	r1 += M4(-1.756e-01, 2.179e-01, -1.912e-01, 3.230e-01, 2.864e-01, -2.886e-01, 2.842e-01, -5.877e-01, 7.155e-01, -2.599e+00, 6.819e-01, -1.284e-01, -2.932e-01, 6.550e-02, 3.492e-02, 2.183e-01) * s1_1_2;
	r0 += M4(-5.614e-03, 5.948e-02, -2.321e-02, -1.853e-01, 7.588e-02, -3.887e-02, -1.077e-01, -6.764e-02, 4.030e-02, 3.041e-01, 2.009e-01, -1.159e-01, -6.547e-02, -6.693e-02, 7.948e-02, 1.840e-01) * s1_2_0;
	r1 += M4(-1.421e-01, 3.067e-02, -7.967e-02, -1.617e-01, 6.201e-02, -4.784e-02, -1.512e-01, 2.362e-02, 3.447e-01, -3.909e-01, 2.433e-01, -3.145e-01, -6.188e-01, -8.978e-03, 3.002e-01, 4.283e-03) * s1_2_0;
	r0 += M4(-1.415e-01, 3.856e-02, 7.389e-04, -4.974e-02, 2.373e-01, -8.936e-02, -6.929e-02, 1.402e-01, 2.902e-01, 2.543e-01, 5.346e-01, 1.444e-01, -1.778e-02, 1.239e-01, -1.493e-01, 7.358e-02) * s1_2_1;
	r1 += M4(-2.667e-02, 1.359e-01, -4.355e-02, 2.303e-01, 4.873e-01, -2.026e-01, -1.611e-01, 1.723e-01, 1.214e+00, 8.808e-02, 2.035e-01, 8.724e-01, -1.750e-01, 3.828e-02, 8.569e-03, -6.640e-02) * s1_2_1;
	r0 += M4(-1.935e-02, 8.783e-02, -5.839e-03, -1.117e-01, 4.033e-02, 1.139e-01, -3.525e-02, -3.050e-02, -1.001e-01, -1.556e-01, -2.107e-02, 2.838e-02, -7.812e-02, 8.044e-02, 2.304e-03, 2.137e-01) * s1_2_2;
	r1 += M4(2.813e-01, 1.166e-01, -6.035e-02, -4.134e-02, -1.714e-01, -1.081e-01, 1.009e-01, 3.675e-01, -3.053e-01, -2.950e-01, 6.350e-01, 7.381e-01, -3.734e-01, 6.878e-02, 9.544e-02, 2.878e-01) * s1_2_2;
	r0 += V4(-1.108e-02, 1.971e-02, -4.245e-03, -1.601e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(2.867e-02, -3.216e-02, 3.060e-02, -5.530e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8-BILINEAR-MPV-NVL-DS-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv2_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv2_pt))
#define l1(x, y) V4(conv2_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv2_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(1.770e-01, 9.400e-04, 3.432e-02, 4.014e-02, -4.194e-02, -1.988e-02, 8.066e-02, 1.339e-01, -2.521e-02, 7.862e-02, -6.699e-02, -3.102e-01, 1.714e-01, -8.100e-02, 3.181e-02, 7.080e-02) * s0_0_0;
	r1 += M4(1.134e-01, 8.039e-03, -4.900e-01, -1.299e-01, 7.872e-02, -1.039e-02, -2.054e-01, -1.343e-01, 5.771e-02, 1.536e-01, 3.404e-02, 1.057e-01, 2.640e-01, -5.005e-02, -2.375e-01, -2.314e-02) * s0_0_0;
	r0 += M4(4.257e-02, 5.599e-02, 1.772e-01, 3.837e-02, 1.967e-02, -1.022e-01, 7.205e-03, 2.242e-01, 4.117e-01, -2.820e-02, 1.552e-02, 5.905e-02, 2.510e-01, -1.119e-01, 2.327e-03, 1.623e-01) * s0_0_1;
	r1 += M4(8.278e-02, -8.514e-02, -3.888e-02, 3.004e-01, 7.222e-02, -3.728e-02, -7.331e-03, -1.760e-01, 5.930e-01, -1.605e-01, 2.985e-01, 1.496e-01, 3.232e-01, -1.371e-01, 1.345e-01, 2.242e-02) * s0_0_1;
	r0 += M4(-4.753e-02, 4.872e-02, 1.270e-02, -1.300e-01, 2.615e-02, 5.911e-03, 3.741e-02, 1.093e-01, 2.550e-02, 4.809e-02, 6.763e-02, -8.795e-02, -6.844e-02, -1.292e-01, -6.296e-02, -3.973e-02) * s0_0_2;
	r1 += M4(1.304e-01, 1.541e-01, -5.965e-03, 5.790e-02, 5.185e-02, -9.260e-03, -6.037e-02, -6.486e-02, -1.518e-01, 2.496e-02, 1.310e-01, 1.849e-01, 9.210e-02, 4.300e-02, 5.714e-02, -2.767e-03) * s0_0_2;
	r0 += M4(1.082e-01, 1.889e-01, 1.753e-01, -2.656e-01, 9.733e-03, 1.694e-03, 3.430e-02, 2.668e-01, 1.052e-01, 8.694e-04, -7.672e-03, 1.199e-01, 1.728e-01, 6.922e-02, 1.636e-01, -1.644e-01) * s0_1_0;
	r1 += M4(2.016e-01, 1.827e-01, -4.681e-01, 1.646e-01, 2.345e-02, 1.387e-01, -2.997e-02, -3.669e-01, 8.596e-02, -2.326e-01, -1.579e-01, 3.738e-01, 3.242e-01, 6.439e-02, -1.323e-01, 8.112e-02) * s0_1_0;
	r0 += M4(-2.851e-01, 2.822e-01, -2.822e-01, -1.455e+00, 1.151e-01, -7.464e-02, -2.178e-01, 2.549e-01, 3.838e-01, 7.692e-02, 5.605e-01, 6.378e-01, -1.352e-01, -7.178e-02, -4.740e-02, -1.630e-01) * s0_1_1;
	r1 += M4(-1.690e-02, 5.772e-01, -2.967e-02, 6.111e-01, 1.019e-01, 9.074e-03, 1.200e-01, -3.350e-01, -3.323e-01, 7.470e-02, 5.766e-01, -1.128e-01, -2.183e-01, -6.049e-02, 5.390e-01, 3.897e-01) * s0_1_1;
	r0 += M4(1.343e-01, -6.844e-02, 2.047e-02, -2.036e-01, 2.179e-02, 1.181e-01, 1.100e-01, 2.172e-01, 1.721e-02, 4.717e-01, 3.057e-01, 1.388e-01, 3.480e-02, 1.451e-01, 3.161e-01, 2.459e-01) * s0_1_2;
	r1 += M4(4.641e-03, 2.313e-01, -1.014e-01, -1.486e-01, 1.778e-01, -1.432e-01, 7.326e-02, -6.532e-02, 3.126e-01, -1.636e-01, 3.445e-01, -2.108e-01, 2.622e-01, -5.927e-02, 7.105e-03, -7.551e-02) * s0_1_2;
	r0 += M4(5.349e-02, 3.618e-02, 1.194e-01, 4.673e-02, -7.201e-02, -4.837e-02, 1.704e-02, 2.282e-01, 6.758e-02, 4.436e-02, -5.929e-03, -1.179e-01, 1.034e-01, 2.231e-02, 1.573e-01, 2.927e-01) * s0_2_0;
	r1 += M4(1.323e-01, -8.616e-03, -1.354e-01, 8.344e-02, -9.370e-02, -1.247e-01, 6.830e-02, -9.680e-02, -1.958e-02, 9.288e-02, 5.201e-02, 1.548e-01, 3.136e-02, 1.036e-02, -1.684e-01, -1.665e-01) * s0_2_0;
	r0 += M4(1.597e-01, -5.323e-02, 8.722e-02, -1.046e-01, 2.159e-02, 1.651e-01, 1.802e-01, 2.311e-01, -1.322e-02, 5.446e-01, 7.886e-02, 2.633e-01, 1.505e-01, -4.102e-01, 1.182e-01, -2.648e-01) * s0_2_1;
	r1 += M4(1.284e-02, 2.083e-01, 2.773e-01, 2.461e-02, -1.676e-02, -3.852e-02, -6.733e-02, -2.588e-01, -2.198e-02, -2.470e-01, -1.109e-01, 8.076e-02, 2.413e-01, 1.631e-01, -3.787e-02, 1.645e-01) * s0_2_1;
	r0 += M4(-1.709e-02, 2.202e-01, 1.170e-01, 1.518e-01, 2.882e-02, 6.052e-03, 2.922e-02, 7.363e-02, -2.166e-02, -1.727e-01, -1.167e-01, -1.102e-01, 7.382e-02, -8.662e-02, 1.035e-01, 2.587e-02) * s0_2_2;
	r1 += M4(1.765e-01, 1.564e-03, -6.724e-02, -5.771e-02, 7.534e-02, 6.330e-02, -4.213e-02, -2.866e-02, -2.254e-02, 1.753e-01, 6.170e-02, 1.049e-01, 2.549e-01, 2.830e-02, -7.934e-02, 2.305e-02) * s0_2_2;
	r0 += M4(1.298e-02, -5.370e-02, -5.018e-02, 1.163e-01, -2.113e-01, 2.306e-02, -5.300e-02, -4.226e-02, -9.381e-03, -9.412e-02, -6.690e-02, -8.692e-02, -2.646e-01, 4.021e-02, -5.061e-02, -2.029e-01) * s1_0_0;
	r1 += M4(-1.538e-01, -5.108e-03, -4.265e-02, -4.996e-02, -2.705e-01, 1.608e-01, -5.393e-02, -3.723e-02, -1.593e-01, 1.492e-02, -3.053e-01, -7.444e-02, -2.711e-01, 7.812e-02, -6.931e-02, 1.834e-02) * s1_0_0;
	r0 += M4(-8.881e-02, 9.303e-02, 2.666e-01, -2.547e-01, -9.048e-02, -3.557e-02, -1.247e-01, -1.444e-02, -2.420e-01, -1.902e-04, -7.975e-03, -5.813e-01, -5.333e-02, 7.283e-02, 3.884e-02, -6.414e-02) * s1_0_1;
	r1 += M4(-2.246e-01, 1.919e-01, -2.481e-01, -3.135e-01, -2.405e-01, 9.358e-03, 2.136e-01, 9.336e-02, 6.935e-02, 1.855e-01, -2.175e-01, -1.150e-01, -1.568e-01, 4.849e-02, -2.764e-01, -3.078e-02) * s1_0_1;
	r0 += M4(8.280e-02, 8.483e-02, -9.199e-02, -1.696e-02, -3.270e-02, 1.977e-02, -4.980e-04, 2.376e-02, 6.064e-02, 2.905e-02, 6.660e-02, 4.686e-02, 1.014e-02, 3.179e-02, 1.171e-03, -1.636e-02) * s1_0_2;
	r1 += M4(-3.366e-01, -5.237e-02, 2.813e-01, 1.189e-01, 5.333e-02, 3.553e-02, -3.652e-02, -4.161e-03, -5.719e-02, 7.358e-02, 6.433e-02, -2.451e-01, -3.291e-03, -5.286e-02, 6.106e-02, 4.969e-02) * s1_0_2;
	r0 += M4(5.143e-02, -2.680e-02, 4.981e-03, 2.496e-01, -2.764e-01, -3.446e-01, -2.317e-01, -3.682e-01, -2.576e-02, -1.081e-01, -7.578e-02, -4.102e-03, -1.049e-01, -1.061e-01, -1.679e-01, -3.447e-01) * s1_1_0;
	r1 += M4(-1.031e-01, -3.252e-02, -2.687e-01, 1.789e-02, -2.510e-01, -3.018e-01, 1.053e-01, -1.878e-01, -5.998e-02, -1.147e-01, -3.575e-01, 3.079e-02, -1.916e-01, -1.362e-02, 4.807e-02, 2.212e-02) * s1_1_0;
	r0 += M4(2.434e-01, 6.085e-02, 6.610e-02, -7.803e-01, -7.585e-02, -4.513e-01, -3.935e-01, 2.306e-02, 2.548e-01, -8.365e-02, 2.173e-01, -5.235e-01, -1.465e-01, -1.381e-01, -1.505e-01, -3.260e-01) * s1_1_1;
	r1 += M4(-1.361e-01, 9.977e-02, -2.014e-01, 9.385e-02, -3.609e-01, 1.554e-01, 2.736e-01, 2.990e-01, 3.058e-01, -1.525e-01, -4.287e-01, 5.851e-01, -8.454e-02, -7.805e-02, -2.857e-01, 6.254e-02) * s1_1_1;
	r0 += M4(-3.468e-03, -1.181e-03, 1.315e-01, -2.313e-01, -6.899e-02, -3.786e-02, -4.929e-02, 2.980e-02, -8.682e-03, -2.133e-01, -2.686e-01, -5.257e-01, 6.500e-02, -1.439e-01, -1.145e-01, -1.658e-01) * s1_1_2;
	r1 += M4(-1.068e-01, -4.568e-02, 2.572e-01, 2.275e-02, -1.230e-02, 3.430e-02, 9.595e-02, 1.380e-02, -1.038e-01, 1.978e-01, 1.229e-01, 7.923e-02, -1.871e-01, 9.141e-02, -1.416e-02, 6.579e-02) * s1_1_2;
	r0 += M4(2.032e-02, 4.812e-02, 1.596e-02, 5.685e-02, 1.814e-02, -4.501e-01, -4.024e-02, -4.354e-02, -1.998e-02, -1.071e-01, -6.399e-02, -1.678e-01, -1.463e-01, -1.066e-01, -1.638e-01, -1.682e-01) * s1_2_0;
	r1 += M4(1.378e-02, 4.527e-02, -2.273e-02, 2.590e-02, 6.257e-02, 1.753e-01, 1.659e-02, 9.448e-02, 9.798e-04, 2.846e-02, 2.454e-03, -5.046e-02, -4.919e-02, 9.052e-02, -4.172e-01, 1.796e-02) * s1_2_0;
	r0 += M4(-9.448e-02, 1.916e-01, 4.941e-02, 2.396e-01, 1.329e-02, -2.094e-01, -1.466e-02, -3.110e-02, -7.163e-02, 4.145e-02, 1.063e-02, -2.458e-02, -1.286e-01, -9.790e-03, -3.993e-02, -1.910e-01) * s1_2_1;
	r1 += M4(-4.594e-02, -1.231e-01, 1.143e-01, 1.862e-02, 4.418e-02, -1.842e-04, 2.387e-02, 1.546e-01, -6.721e-02, -1.932e-02, -1.092e-01, -9.557e-03, -1.855e-01, -1.543e-02, -2.955e-01, -1.609e-01) * s1_2_1;
	r0 += M4(-8.337e-03, 5.190e-02, -6.213e-02, 1.363e-02, -2.340e-02, 6.554e-03, -1.857e-02, -1.082e-02, -4.214e-02, -4.616e-02, 2.594e-02, -1.365e-01, 6.618e-03, -5.407e-02, -1.335e-01, -1.950e-01) * s1_2_2;
	r1 += M4(-1.344e-01, 5.975e-02, -1.627e-01, 5.949e-03, 2.362e-02, -1.907e-02, 4.727e-02, 5.207e-03, -8.672e-02, -2.432e-02, 2.558e-02, -2.094e-02, -1.564e-01, 4.341e-02, -6.325e-02, 4.042e-02) * s1_2_2;
	r0 += V4(-1.215e-02, 7.080e-03, -1.067e-02, -4.607e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.599e-02, 6.042e-02, -7.649e-03, 1.197e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8-BILINEAR-MPV-NVL-DS-conv4
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv3_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv3_pt))
#define l1(x, y) V4(conv3_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv3_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-8.687e-02, -1.252e-02, -6.299e-02, 1.136e-02, -2.767e-01, 9.794e-02, -3.299e-01, 2.282e-01, 5.387e-02, -2.080e-02, 1.277e-01, -5.215e-02, -1.462e-01, 2.325e-02, -2.439e-02, 2.928e-02) * s0_0_0;
	r1 += M4(-3.675e-02, -1.498e-02, -1.117e-01, -2.362e-02, -2.817e-01, -5.845e-02, -1.683e-01, 1.711e-01, 1.223e-01, 3.124e-02, -8.592e-02, 1.948e-03, -1.452e-01, -1.712e-02, -2.386e-01, 2.586e-02) * s0_0_0;
	r0 += M4(-2.210e-02, -4.011e-02, -2.867e-01, -4.045e-02, 6.758e-02, 1.918e-02, -2.027e-01, -1.618e-02, -1.641e-01, -2.003e-02, -3.207e-02, -7.818e-02, -2.513e-01, -4.411e-03, -1.993e-01, -5.583e-02) * s0_0_1;
	r1 += M4(1.096e-01, -1.617e-02, -4.147e-01, 6.938e-03, -1.092e-01, -8.136e-02, -2.344e-01, -6.035e-01, 1.062e-01, 2.019e-02, 1.390e-02, 2.609e-01, -3.673e-01, -9.743e-03, -4.813e-01, -3.836e-01) * s0_0_1;
	r0 += M4(1.355e-03, -2.355e-03, 1.544e-01, 3.380e-02, 5.674e-02, 6.759e-02, -3.666e-03, 1.290e-02, 1.686e-01, -7.322e-02, -3.342e-02, -6.877e-03, 1.014e-01, 4.645e-03, 5.623e-03, 1.629e-02) * s0_0_2;
	r1 += M4(2.313e-02, 3.393e-02, -2.793e-02, 3.266e-02, 6.728e-03, 1.196e-02, 6.989e-02, 5.993e-02, -2.834e-02, 1.190e-02, 8.685e-02, -3.192e-02, 1.060e-02, -1.285e-02, 2.001e-01, -1.803e-01) * s0_0_2;
	r0 += M4(-1.661e-01, -5.315e-02, -1.389e-01, 7.935e-02, -3.922e-02, 1.963e-02, -7.860e-02, -5.540e-01, 1.134e-01, 6.606e-02, -6.894e-02, -4.028e-01, -3.801e-01, 5.181e-03, -5.835e-02, -3.487e-01) * s0_1_0;
	r1 += M4(2.646e-01, 4.069e-02, -1.537e-01, -4.133e-02, 4.968e-02, -1.773e-01, -1.429e-01, 3.729e-02, -4.074e-01, -2.786e-02, 1.088e-01, 6.994e-02, -2.647e-01, -7.927e-02, -6.368e-01, 1.165e-02) * s0_1_0;
	r0 += M4(-1.597e-01, 8.587e-02, -4.281e-02, 6.818e-02, -1.959e-02, -4.037e-01, -1.618e-01, 2.940e-01, -2.905e-02, -6.433e-01, -1.844e-01, -9.836e-02, -1.732e-01, -3.450e-01, -2.086e-01, -3.779e-01) * s0_1_1;
	r1 += M4(-7.453e-01, -1.910e-01, 8.283e-02, -4.469e-01, 4.166e-01, -1.027e-01, 3.877e-02, 3.603e-01, 2.463e-02, -2.153e-01, 1.393e-01, -5.840e-01, -3.810e-01, 2.901e-01, -3.710e-01, -3.857e-01) * s0_1_1;
	r0 += M4(-1.343e-01, 1.339e-01, -5.021e-03, 2.324e-02, -1.840e-01, 1.298e-01, -1.394e-01, -8.401e-03, -5.925e-02, 5.692e-02, -1.009e-01, -5.095e-02, -4.443e-01, -4.192e-01, 1.308e-01, 6.348e-03) * s0_1_2;
	r1 += M4(1.015e-01, 1.621e-02, -1.974e-01, 1.106e-01, 2.219e-03, 2.679e-02, -1.387e-01, 8.228e-02, -9.697e-02, -2.032e-02, -1.951e-01, 3.915e-02, 3.383e-02, -3.601e-02, -2.793e-01, -2.116e-01) * s0_1_2;
	r0 += M4(-1.086e-01, -5.267e-02, 1.584e-02, 2.221e-01, -6.089e-02, 5.114e-02, -9.109e-02, 7.095e-02, -2.187e-01, -6.678e-03, -1.584e-01, 5.806e-02, -1.807e-02, 2.115e-02, -1.877e-03, -2.236e-02) * s0_2_0;
	r1 += M4(4.141e-02, 6.090e-02, -9.975e-03, -5.120e-02, -2.484e-02, -1.949e-02, -2.801e-01, -6.483e-03, -6.323e-02, 2.815e-02, -1.985e-01, -1.964e-02, 5.505e-02, 1.287e-03, -6.109e-01, 4.229e-03) * s0_2_0;
	r0 += M4(-1.123e-01, -3.939e-01, -3.310e-01, -6.210e-01, -2.049e-01, 6.552e-02, -2.795e-01, 4.780e-03, -2.573e-01, 2.607e-01, -6.600e-02, 1.960e-01, 8.109e-02, -2.083e-01, -8.075e-03, -1.582e-01) * s0_2_1;
	r1 += M4(7.350e-02, -1.354e-01, -1.605e-01, 5.511e-02, -4.553e-02, 4.035e-02, -5.619e-02, -3.966e-02, -9.596e-02, 9.027e-03, 1.768e-01, -4.076e-02, 9.546e-02, -1.434e-02, -4.623e-02, 8.599e-02) * s0_2_1;
	r0 += M4(-1.880e-01, 8.816e-02, 2.226e-01, 1.115e-01, -1.821e-01, 2.888e-04, -1.219e-01, 1.855e-03, -3.704e-02, -7.007e-02, -5.134e-02, -4.744e-02, -2.051e-01, 3.307e-02, 4.774e-02, 3.802e-02) * s0_2_2;
	r1 += M4(4.629e-02, -4.138e-02, 1.648e-01, 8.096e-02, -1.491e-03, -7.191e-03, -7.848e-02, -4.615e-03, 1.637e-02, 2.865e-03, -4.715e-02, -6.001e-02, 1.264e-02, -2.640e-02, -1.726e-01, 5.969e-02) * s0_2_2;
	r0 += M4(1.849e-01, -1.851e-03, -1.418e-01, -1.383e-02, -1.915e-01, -1.795e-02, -9.640e-02, 1.083e-02, 2.112e-01, 3.529e-03, -1.308e-01, -2.839e-02, -4.432e-01, -1.221e-02, -1.448e-01, -2.383e-02) * s1_0_0;
	r1 += M4(2.784e-02, 4.141e-02, 3.818e-02, 1.865e-02, 2.692e-02, 4.668e-02, -2.470e-01, -1.056e-02, 2.525e-02, -1.871e-02, 2.060e-01, -1.361e-02, 4.618e-02, 7.642e-02, -1.245e-01, -1.627e-02) * s1_0_0;
	r0 += M4(-1.200e-01, 4.278e-03, -1.746e-01, -1.436e-02, -3.519e-01, 6.607e-03, 3.934e-02, -1.537e-02, -2.319e-02, 5.432e-02, -2.133e-01, 9.545e-02, -3.436e-02, -7.267e-03, -1.175e-01, -3.516e-02) * s1_0_1;
	r1 += M4(-1.330e-03, 4.329e-03, -4.901e-02, 6.125e-02, 3.163e-02, 4.855e-02, -4.444e-01, 4.231e-02, -9.222e-02, -5.969e-02, -6.870e-02, 1.226e-01, 1.616e-01, 1.052e-01, -1.099e-01, 2.007e-01) * s1_0_1;
	r0 += M4(-8.150e-02, -3.095e-03, -1.034e-01, -1.165e-02, -8.599e-02, -1.579e-02, -2.192e-01, -1.654e-02, 2.585e-02, 1.362e-02, -2.301e-01, -3.690e-03, -4.894e-02, -4.054e-02, -4.795e-02, -4.805e-03) * s1_0_2;
	r1 += M4(-1.077e-02, -3.587e-03, -5.881e-02, -1.271e-02, -4.940e-04, 4.800e-03, -3.939e-01, 1.010e-02, 3.060e-02, -8.678e-03, -2.159e-01, -1.195e-01, -3.505e-02, -1.465e-02, -3.805e-02, 1.965e-03) * s1_0_2;
	r0 += M4(6.548e-02, -5.148e-02, -1.191e-02, -1.047e-01, -2.669e-01, 7.117e-03, 9.481e-02, 6.521e-02, 4.174e-02, -3.955e-02, -1.583e-01, 2.654e-02, -1.517e-01, -1.238e-02, -1.262e-01, 1.996e-01) * s1_1_0;
	r1 += M4(-6.036e-01, -8.914e-02, -1.402e-01, 2.334e-02, 5.318e-02, -5.156e-02, -4.935e-01, 1.764e-03, 2.908e-02, -2.758e-03, 1.087e-01, 9.082e-03, 1.665e-01, 2.495e-01, 1.204e-01, -2.483e-02) * s1_1_0;
	r0 += M4(-3.626e-02, 2.374e-01, 1.145e-02, 3.859e-01, -5.670e-01, 7.404e-02, -1.504e-01, 1.854e-02, -2.165e-01, -1.646e-01, 2.134e-01, -6.280e-01, -1.100e-01, 7.209e-01, -2.565e-01, 6.816e-01) * s1_1_1;
	r1 += M4(3.135e-01, 2.703e-02, 6.490e-02, -4.436e-01, 4.051e-02, 5.145e-01, -4.678e-01, 7.190e-02, -6.792e-01, 9.110e-02, 1.561e-02, -3.960e-01, 6.939e-01, -3.130e-01, 7.682e-02, 6.582e-01) * s1_1_1;
	r0 += M4(3.782e-02, 3.704e-02, -3.353e-01, -3.659e-02, -5.642e-01, 5.627e-02, -3.146e-03, 1.356e-02, -1.318e-02, -1.285e-01, -3.836e-02, 1.503e-02, -1.464e-01, 1.802e-01, -3.067e-01, 1.628e-02) * s1_1_2;
	r1 += M4(-3.967e-02, 3.702e-02, 3.094e-02, 9.053e-02, 5.397e-03, 8.898e-02, -9.066e-01, 5.821e-02, -4.057e-02, 2.070e-03, -1.464e-01, -1.032e-01, 2.657e-02, -2.276e-02, -1.080e-01, 1.997e-01) * s1_1_2;
	r0 += M4(-3.487e-01, 1.714e-01, 5.000e-02, -2.358e-01, -2.370e-01, -1.348e-02, -1.323e-01, 3.001e-02, -1.035e-02, 1.239e-02, -1.305e-01, -4.111e-05, 3.088e-01, -2.582e-02, -6.590e-02, 1.228e-03) * s1_2_0;
	r1 += M4(1.620e-01, 3.834e-03, -1.379e-01, 5.716e-02, 8.631e-03, 1.713e-02, -6.722e-01, -1.453e-03, -3.637e-02, -2.159e-02, -1.185e-01, -1.243e-03, -2.962e-02, 1.691e-02, -2.455e-01, -2.052e-03) * s1_2_0;
	r0 += M4(1.342e-01, -6.054e-01, -8.444e-02, -1.127e-01, -1.527e-01, 7.532e-02, -4.666e-02, 4.898e-02, -6.875e-02, -2.722e-01, -2.186e-03, -3.799e-01, 2.307e-02, 1.607e-01, 9.016e-02, 1.775e-01) * s1_2_1;
	r1 += M4(-6.103e-02, -5.481e-02, 1.008e-01, 2.410e-02, -4.234e-03, 1.222e-01, -5.533e-01, 7.664e-03, -1.684e-01, 2.420e-02, 1.064e-01, -1.132e-01, -1.566e-02, 1.122e-02, -2.802e-01, -1.814e-02) * s1_2_1;
	r0 += M4(-3.391e-02, 7.153e-02, -8.273e-02, -2.673e-02, -3.214e-01, 1.701e-02, -2.240e-01, -5.858e-03, -1.937e-01, -7.984e-02, -1.321e-01, -4.930e-02, 1.989e-01, 5.010e-03, -2.142e-01, -2.447e-02) * s1_2_2;
	r1 += M4(-1.682e-02, 3.600e-02, 2.011e-01, 5.500e-02, -1.020e-02, 8.609e-03, -6.601e-01, -8.621e-03, -1.380e-02, -2.480e-02, -1.758e-01, -2.397e-02, -1.199e-02, 4.420e-02, -1.285e-02, -4.282e-02) * s1_2_2;
	r0 += V4(-1.190e-01, -1.199e-02, -1.602e-01, -9.426e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-9.551e-03, 4.344e-02, -5.520e-02, -1.095e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-4x8-BILINEAR-MPV-NVL-DS-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv4
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv4_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv4_pt))
#define l1(x, y) V4(conv4_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv4_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-1.283e-01, 2.702e-01, -1.650e-01, 1.919e-01, 6.258e-02, 8.808e-03, 6.262e-03, 1.041e-02, -2.610e-01, 2.618e-01, 2.089e-01, 2.531e-01, 7.721e-03, -4.148e-03, 1.749e-02, 6.490e-03) * s0_0_0;
	r0 += M4(-3.160e-01, 1.413e-01, -1.796e-01, 1.880e-01, 9.928e-02, 7.524e-03, 9.380e-03, 2.700e-02, 6.947e-02, -9.565e-02, 1.442e-01, 9.026e-02, 7.019e-03, 1.082e-01, 8.625e-03, -1.753e-03) * s0_0_1;
	r0 += M4(-5.848e-02, -1.381e-01, -2.196e-02, -6.602e-02, -1.415e-02, 1.296e-02, 4.843e-03, 2.484e-02, -1.810e-01, 3.248e-01, -3.747e-01, -7.734e-02, 7.821e-03, 5.390e-02, 1.645e-02, -4.743e-03) * s0_0_2;
	r0 += M4(-2.425e-01, 2.531e-01, -1.124e-01, 2.218e-01, 8.124e-02, 2.574e-02, 1.694e-02, 3.968e-02, 2.199e-01, -1.274e-01, -1.247e-01, 8.744e-02, 5.751e-02, -3.390e-03, 8.865e-02, -1.990e-02) * s0_1_0;
	r0 += M4(-3.986e-01, -1.992e-01, -8.617e-02, -4.762e-02, 2.501e-01, 1.173e-01, 1.307e-01, -9.126e-01, 7.738e-02, 1.449e-02, 5.753e-02, -2.265e-01, 1.548e-01, 2.484e-01, -9.151e-01, 1.578e-01) * s0_1_1;
	r0 += M4(2.883e-01, 1.157e-01, 5.957e-02, -1.636e-01, -9.279e-03, 4.651e-02, -2.668e-02, 6.376e-02, 3.606e-01, -2.738e-01, -9.617e-02, 2.480e-01, 1.242e-02, 1.103e-01, 3.748e-02, 4.096e-03) * s0_1_2;
	r0 += M4(1.637e-01, 2.841e-01, 4.172e-03, -1.037e-01, -1.267e-02, 3.717e-03, 2.134e-03, 2.752e-02, 1.136e-01, -4.483e-02, 2.195e-01, -2.577e-01, -7.668e-04, 4.775e-03, 2.269e-02, -4.854e-03) * s0_2_0;
	r0 += M4(6.588e-03, -1.362e-01, -2.672e-01, 2.319e-01, 6.427e-03, -2.501e-02, 6.598e-02, 8.006e-02, -3.827e-02, 1.666e-01, 1.408e-01, -2.501e-01, -3.357e-02, -1.304e-02, 6.517e-02, 2.726e-02) * s0_2_1;
	r0 += M4(1.303e-01, 2.618e-01, 9.736e-03, -1.250e-01, 5.561e-03, -1.880e-03, -6.879e-03, 2.580e-02, 1.639e-01, -2.352e-01, 2.353e-01, -3.010e-01, -2.178e-03, -9.357e-03, 1.790e-02, 4.099e-03) * s0_2_2;
	r0 += M4(1.849e-02, -5.898e-03, -6.455e-03, 3.371e-03, 4.969e-02, 3.772e-02, 4.398e-02, -3.941e-03, -2.502e-01, 2.618e-01, -4.295e-03, 1.163e-01, 2.204e-02, 2.779e-02, -2.141e-03, 7.479e-04) * s1_0_0;
	r0 += M4(7.104e-02, 4.871e-02, -2.360e-02, -5.168e-03, -6.009e-02, -6.256e-02, 1.936e-02, 2.589e-02, -6.717e-02, 5.798e-03, 2.348e-02, 6.916e-02, 5.461e-02, 7.444e-02, 1.274e-02, -9.515e-03) * s1_0_1;
	r0 += M4(9.162e-03, -3.227e-03, -5.824e-03, -1.327e-02, 4.032e-02, 5.698e-02, -1.813e-02, 2.439e-02, -2.004e-01, 8.820e-02, -4.201e-01, -2.840e-01, 8.349e-04, 3.092e-02, 8.416e-04, -5.874e-04) * s1_0_2;
	r0 += M4(7.989e-02, -2.947e-02, 4.846e-02, -1.134e-02, -8.277e-02, -3.825e-03, -9.078e-02, 6.973e-03, -3.109e-01, 2.905e-01, 8.542e-02, 4.678e-02, 4.504e-02, 4.028e-02, 1.171e-01, 3.650e-02) * s1_1_0;
	r0 += M4(-9.078e-01, 1.294e-01, 1.521e-01, 2.358e-01, -3.727e-01, -3.643e-01, -3.857e-01, -3.841e-01, -6.558e-02, -8.708e-02, 2.545e-01, -1.011e-01, 9.076e-02, -9.358e-01, 2.144e-01, 1.204e-01) * s1_1_1;
	r0 += M4(1.025e-02, 2.652e-02, -5.642e-03, 1.101e-01, 3.630e-02, -4.694e-02, 4.803e-02, -4.369e-02, 1.006e-01, -2.145e-01, 6.099e-02, -4.442e-02, -4.806e-03, 6.470e-02, 6.065e-03, 4.677e-02) * s1_1_2;
	r0 += M4(1.219e-02, 6.955e-03, 9.872e-03, -2.084e-03, 3.073e-02, -2.170e-02, 4.444e-02, 9.673e-03, 3.791e-01, -1.050e-01, -1.881e-01, -3.995e-02, 8.528e-03, 7.498e-03, 5.701e-02, -5.298e-03) * s1_2_0;
	r0 += M4(7.121e-03, -5.079e-03, 1.580e-02, 9.692e-02, 4.773e-02, 5.219e-02, -2.497e-02, -2.218e-02, -1.458e-01, 3.219e-02, -6.784e-02, -5.026e-01, 2.411e-02, 4.266e-02, 8.815e-02, 1.427e-03) * s1_2_1;
	r0 += M4(8.635e-03, -8.826e-03, -1.389e-02, 7.431e-02, -3.254e-02, 1.901e-02, 1.532e-02, 4.929e-02, -9.466e-02, -2.702e-01, 4.940e-01, 3.776e-02, 1.351e-03, 2.595e-02, 3.054e-03, 1.178e-02) * s1_2_2;
	r0 += V4(3.095e-02, 3.021e-02, 3.154e-02, 3.052e-02);
	r0 = tanh(r0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
