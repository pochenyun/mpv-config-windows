// CuNNy 8x32 BILINEAR MPV NVL
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-8x32-BILINEAR-MPV-NVL-in
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(LUMA_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0)) + vec2(0.5)) * LUMA_pt).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2, r3, r4, r5, r6, r7;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0); r3 = V4(0.0); r4 = V4(0.0); r5 = V4(0.0); r6 = V4(0.0); r7 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(3.178e-02, -4.871e-02, -1.223e-01, -5.372e-03) * s0_0_0;
	r1 += V4(-2.176e-01, 5.253e-02, 1.714e-01, 5.678e-02) * s0_0_0;
	r2 += V4(1.525e-02, 1.141e-01, -1.019e-01, 1.578e-01) * s0_0_0;
	r3 += V4(7.245e-04, -7.104e-02, -1.743e-01, -1.323e-02) * s0_0_0;
	r4 += V4(5.300e-03, -8.911e-02, -1.014e-01, 2.289e-02) * s0_0_0;
	r5 += V4(-3.795e-03, 1.755e-03, 5.051e-03, -7.465e-03) * s0_0_0;
	r6 += V4(1.209e-01, -2.761e-02, 5.115e-02, 1.558e-01) * s0_0_0;
	r7 += V4(8.130e-02, -2.241e-02, 5.603e-02, -1.313e-01) * s0_0_0;
	r0 += V4(-1.057e-01, -2.549e-01, -1.597e-01, -4.950e-02) * s0_0_1;
	r1 += V4(-1.057e-01, 5.796e-02, 5.652e-02, 1.353e-01) * s0_0_1;
	r2 += V4(1.038e-01, -4.286e-02, 1.028e-01, -1.121e-01) * s0_0_1;
	r3 += V4(3.034e-01, -2.696e-02, -2.858e-02, 9.734e-03) * s0_0_1;
	r4 += V4(1.949e-02, 2.998e-02, 2.987e-02, 2.397e-01) * s0_0_1;
	r5 += V4(-1.647e-01, 4.944e-02, -1.328e+00, -5.257e-03) * s0_0_1;
	r6 += V4(1.577e-01, 1.656e-02, -1.100e-01, -1.421e-01) * s0_0_1;
	r7 += V4(1.979e-03, -5.702e-02, -5.896e-02, -2.085e-01) * s0_0_1;
	r0 += V4(1.709e-01, 1.584e-01, 2.629e-02, -1.217e-01) * s0_0_2;
	r1 += V4(9.546e-02, 1.659e-02, 1.242e-02, -2.073e-01) * s0_0_2;
	r2 += V4(2.755e-02, 2.828e-02, 6.713e-04, -2.257e-02) * s0_0_2;
	r3 += V4(-3.529e-02, 4.041e-02, 3.870e-02, -5.722e-03) * s0_0_2;
	r4 += V4(-1.341e-04, 7.105e-02, 1.360e-01, -2.830e-02) * s0_0_2;
	r5 += V4(1.431e-01, -1.518e-02, -8.125e-01, -1.501e-03) * s0_0_2;
	r6 += V4(2.382e-01, 7.058e-02, 7.861e-03, 2.202e-03) * s0_0_2;
	r7 += V4(3.081e-02, 4.943e-02, -1.048e-03, -8.194e-03) * s0_0_2;
	r0 += V4(-2.093e-02, 3.577e-02, 4.385e-01, 6.567e-02) * s0_1_0;
	r1 += V4(-9.637e-02, 1.274e-01, -5.092e-02, 1.120e-03) * s0_1_0;
	r2 += V4(8.548e-03, -3.845e-02, -2.760e-01, 1.501e-01) * s0_1_0;
	r3 += V4(-3.076e-01, 3.553e-02, 1.745e-01, 9.151e-03) * s0_1_0;
	r4 += V4(3.083e-01, -9.698e-02, 6.372e-02, -2.337e-02) * s0_1_0;
	r5 += V4(-7.642e-02, -2.429e-02, 1.284e-01, -3.749e-02) * s0_1_0;
	r6 += V4(-1.163e-01, 6.040e-02, 9.736e-02, -9.746e-02) * s0_1_0;
	r7 += V4(-2.549e-01, -1.023e-01, 3.369e-01, 2.336e-01) * s0_1_0;
	r0 += V4(5.996e-02, 3.558e-01, -1.524e-01, -8.556e-02) * s0_1_1;
	r1 += V4(2.280e-01, -1.600e-01, 5.796e-02, 6.921e-02) * s0_1_1;
	r2 += V4(-1.228e-01, -3.734e-02, 2.413e-01, -2.687e-01) * s0_1_1;
	r3 += V4(5.076e-02, -3.201e-02, -1.619e-01, -8.590e-02) * s0_1_1;
	r4 += V4(1.621e-03, -1.909e-01, -3.406e-02, 4.236e-02) * s0_1_1;
	r5 += V4(-3.136e-02, -2.144e-01, -1.054e-01, -3.459e-01) * s0_1_1;
	r6 += V4(-1.215e-01, 9.806e-02, -7.743e-03, 1.493e-01) * s0_1_1;
	r7 += V4(3.534e-02, -1.721e-02, -1.674e-01, 9.253e-02) * s0_1_1;
	r0 += V4(-1.140e-01, -1.509e-01, -1.817e-02, -2.982e-02) * s0_1_2;
	r1 += V4(3.289e-02, -8.179e-02, -7.055e-02, -5.483e-02) * s0_1_2;
	r2 += V4(-1.363e+00, 3.358e-02, 3.097e-02, 2.483e-02) * s0_1_2;
	r3 += V4(3.519e-02, 1.073e-01, -1.425e-02, -1.668e-01) * s0_1_2;
	r4 += V4(-6.505e-03, 2.679e-01, -1.574e-01, -2.388e-01) * s0_1_2;
	r5 += V4(1.688e-01, 2.075e-01, -1.871e+00, -3.756e-02) * s0_1_2;
	r6 += V4(-1.971e-01, 2.054e-01, -5.130e-02, -4.014e-02) * s0_1_2;
	r7 += V4(9.927e-03, -1.128e-01, -1.616e-01, 1.278e-02) * s0_1_2;
	r0 += V4(-6.058e-03, -4.224e-03, -1.226e-01, 1.972e-02) * s0_2_0;
	r1 += V4(7.007e-02, -1.125e-01, 2.117e-02, -7.148e-02) * s0_2_0;
	r2 += V4(2.701e-02, -7.202e-02, 2.156e-02, 1.304e-01) * s0_2_0;
	r3 += V4(-7.623e-03, 5.967e-02, 1.479e-01, 6.068e-03) * s0_2_0;
	r4 += V4(-2.900e-01, -7.621e-03, 5.423e-02, 4.222e-03) * s0_2_0;
	r5 += V4(-4.920e-02, 1.056e-02, -3.623e-01, 2.887e-02) * s0_2_0;
	r6 += V4(-1.920e-02, -2.032e-02, 8.521e-02, -5.260e-02) * s0_2_0;
	r7 += V4(-3.145e+00, -2.183e-01, 1.671e-01, -7.495e-02) * s0_2_0;
	r0 += V4(4.456e-02, 1.116e-01, -1.968e-01, 3.793e-02) * s0_2_1;
	r1 += V4(4.183e-02, 1.662e-02, -1.355e-01, -1.860e-01) * s0_2_1;
	r2 += V4(1.008e-01, 8.913e-02, 1.290e-02, -6.336e-02) * s0_2_1;
	r3 += V4(-4.138e-02, -7.007e-02, 1.085e-01, 5.090e-02) * s0_2_1;
	r4 += V4(-3.360e-02, 3.506e-02, -7.349e-02, 4.358e-02) * s0_2_1;
	r5 += V4(-1.323e-01, -1.519e-01, 2.358e-01, 3.740e-01) * s0_2_1;
	r6 += V4(1.066e-02, -4.094e-03, 6.416e-02, 3.936e-02) * s0_2_1;
	r7 += V4(-2.554e-01, 2.437e-01, -1.398e-01, -2.588e-02) * s0_2_1;
	r0 += V4(-4.187e-02, 3.573e-03, 6.372e-02, 4.058e-02) * s0_2_2;
	r1 += V4(-4.040e-02, 8.228e-02, 5.254e-02, 2.608e-01) * s0_2_2;
	r2 += V4(9.642e-02, -2.834e-02, -2.106e-02, 1.816e-03) * s0_2_2;
	r3 += V4(6.203e-04, 2.632e-02, -1.020e-01, 2.102e-01) * s0_2_2;
	r4 += V4(7.512e-03, -2.252e-02, 1.045e-01, -5.625e-02) * s0_2_2;
	r5 += V4(1.480e-01, -8.445e-02, -3.018e-01, 3.380e-02) * s0_2_2;
	r6 += V4(-7.430e-02, 5.896e-02, -3.026e-03, -6.612e-04) * s0_2_2;
	r7 += V4(1.160e-01, 1.134e-01, -3.051e-02, 1.588e-02) * s0_2_2;
	r0 += V4(1.123e-02, -2.183e-01, 8.912e-04, 5.139e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.573e-02, 2.045e-02, -7.495e-02, 3.513e-04);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(1.553e-02, -1.476e-02, 1.370e-02, -4.359e-03);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r2));
	r3 += V4(-4.470e-03, -2.577e-02, -3.731e-03, 1.408e-02);
	r3 = max(r3, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r3));
	r4 += V4(2.474e-03, -1.547e-02, 1.272e-03, 1.373e-02);
	r4 = max(r4, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r4));
	r5 += V4(5.813e-03, 4.382e-02, 6.372e-02, 2.302e-03);
	r5 = max(r5, V4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), vec4(r5));
	r6 += V4(5.603e-03, -3.584e-01, -2.628e-02, 2.099e-02);
	r6 = max(r6, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), vec4(r6));
	r7 += V4(3.894e-02, -9.853e-03, 3.395e-03, -2.120e-02);
	r7 = max(r7, V4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), vec4(r7));
}

//!DESC CuNNy-8x32-BILINEAR-MPV-NVL-conv1
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF7FCD608, 0xED1FF4F6, 0x0AEAEF0A, 0xE0060405);
	r1 = D(r1, s0_0_0, 0xFCF8F0FB, 0xFD1A04F3, 0x0ADDFB02, 0xF014EB0E);
	r2 = D(r2, s0_0_0, 0xEC010FE3, 0x0BFF20FC, 0xEA08FAEE, 0x00FC0E00);
	r3 = D(r3, s0_0_0, 0x12DCEDF4, 0xEC18270E, 0x17FBF4F8, 0xEB08FF07);
	r4 = D(r4, s0_0_0, 0xED01F2F8, 0x0010FBFD, 0x011DEBFF, 0xF6FC15E6);
	r5 = D(r5, s0_0_0, 0x14F52AE8, 0xF3BA1E0B, 0x0312FEEA, 0x10D900FB);
	r6 = D(r6, s0_0_0, 0xF40B06F9, 0x0417E91B, 0x05D0070F, 0x00FBC902);
	r7 = D(r7, s0_0_0, 0xFC00F10A, 0x020AEB05, 0xF8F5A9EC, 0xFCFE15EA);
	r0 = D(r0, s0_0_1, 0x02FC24F7, 0x02FEEFEA, 0xD70D08FB, 0xF6281DFF);
	r1 = D(r1, s0_0_1, 0x153F230D, 0x040F1604, 0xFFEBF903, 0x0E141504);
	r2 = D(r2, s0_0_1, 0xF81821FF, 0xE00806F5, 0x0D05FFF7, 0xFC09F007);
	r3 = D(r3, s0_0_1, 0x250A0816, 0xF8DCC3FD, 0xEEF71A01, 0xE6EEE9F9);
	r4 = D(r4, s0_0_1, 0x0BE5DDF9, 0xE7010804, 0x1AFBFEFC, 0xCA01FAF5);
	r5 = D(r5, s0_0_1, 0x0C05422F, 0x0EE6F70C, 0xF9D50D21, 0xEFFE1BF8);
	r6 = D(r6, s0_0_1, 0x1A24E8F8, 0x11DDF200, 0xF8C600FF, 0xF4361705);
	r7 = D(r7, s0_0_1, 0x0DFD08FC, 0x0DE2F705, 0x0C26410E, 0xFF00F9FD);
	r0 = D(r0, s0_0_2, 0x010EFDF6, 0xF224D012, 0x0BFA09F0, 0xFFFF02FE);
	r1 = D(r1, s0_0_2, 0xF619E619, 0x080B06FF, 0xF50AF10F, 0x0402F0ED);
	r2 = D(r2, s0_0_2, 0x0A153100, 0x10161709, 0x05EA0DF0, 0xFEF40007);
	r3 = D(r3, s0_0_2, 0xE7EBEF0F, 0x0E1E14FD, 0x0F00E51B, 0x0C07D7F5);
	r4 = D(r4, s0_0_2, 0x09F51715, 0x08DDF7F3, 0xF9010EEF, 0xE306D804);
	r5 = D(r5, s0_0_2, 0x101B17FA, 0xEDEF28F6, 0xFCEBF7EC, 0xFEDEEC20);
	r6 = D(r6, s0_0_2, 0xFDEEF10C, 0xF2E103F0, 0xED0F0E06, 0x080722F9);
	r7 = D(r7, s0_0_2, 0x0609F0FF, 0x07EAFBFA, 0x052D81E9, 0x07FCFD04);
	r0 = D(r0, s0_1_0, 0xF51C0BFF, 0xFE0F2225, 0xDDDAFE0E, 0xE8FDFCEF);
	r1 = D(r1, s0_1_0, 0xDA17DDF9, 0xF5FE01FF, 0xFEFCE504, 0x11E91AFD);
	r2 = D(r2, s0_1_0, 0x09F5260C, 0x0E1D2AEE, 0x09F3040C, 0x10EB2AE9);
	r3 = D(r3, s0_1_0, 0xFF0B3809, 0x12EE1CED, 0xF0F403FB, 0xDC13E307);
	r4 = D(r4, s0_1_0, 0x06EDDF01, 0x0CF9F603, 0xF4EDF427, 0xF82BF804);
	r5 = D(r5, s0_1_0, 0xF60404E2, 0xF2CD00FC, 0xF7C5FBD9, 0x06FC0C03);
	r6 = D(r6, s0_1_0, 0x0AE9DFFE, 0x1DCFFFEB, 0x10EAF9F7, 0x170099E7);
	r7 = D(r7, s0_1_0, 0xFD050704, 0xF4E6FCEA, 0x1020070A, 0x140C121C);
	r0 = D(r0, s0_1_1, 0xFC140106, 0x182B8103, 0x1312F803, 0x252916FA);
	r1 = D(r1, s0_1_1, 0x183108F7, 0x1E18FA0E, 0xF7FBE4F9, 0x0004E6F1);
	r2 = D(r2, s0_1_1, 0x3103FF0A, 0xF412FB12, 0x0DDA10FD, 0xE336EF05);
	r3 = D(r3, s0_1_1, 0x041A04F5, 0x00E82426, 0x1EE13705, 0x0C14F700);
	r4 = D(r4, s0_1_1, 0x0EA704F7, 0x2A240F05, 0x01F220EA, 0x1E1537FB);
	r5 = D(r5, s0_1_1, 0x17063217, 0xF606F618, 0xF602D914, 0xE2165A07);
	r6 = D(r6, s0_1_1, 0x08C0E702, 0x1BC30A0C, 0xECDF060B, 0xF7CFF80C);
	r7 = D(r7, s0_1_1, 0xFD05F600, 0x050FF7E9, 0x01FE022D, 0x0920EF03);
	r0 = D(r0, s0_1_2, 0xFB041DFB, 0x184102FA, 0x14E9FC00, 0xE9DCFC0B);
	r1 = D(r1, s0_1_2, 0x0A020EF9, 0xFB0815F2, 0x0AF818F9, 0xFB82E603);
	r2 = D(r2, s0_1_2, 0x0BE0F10F, 0x10EAD1F8, 0x0EDD1FF6, 0xF9230507);
	r3 = D(r3, s0_1_2, 0x080827F1, 0x03F0CAE7, 0x0201F3E6, 0xFC32F20B);
	r4 = D(r4, s0_1_2, 0xF00123FB, 0x160033F7, 0xF90DFFF3, 0x08231611);
	r5 = D(r5, s0_1_2, 0xF2020D0D, 0x0C0BE3EC, 0x080CF503, 0xFD23FE02);
	r6 = D(r6, s0_1_2, 0xE5F52205, 0xFE0502FE, 0x031E0F0E, 0xE71401E8);
	r7 = D(r7, s0_1_2, 0x080C0105, 0xE7F8F318, 0x11030D03, 0x0AF307F3);
	r0 = D(r0, s0_2_0, 0x210EF009, 0xF309EFF2, 0x000C10F6, 0xA4F61B12);
	r1 = D(r1, s0_2_0, 0xC6E9F9EF, 0xDFF50017, 0x16EA0813, 0xECF40702);
	r2 = D(r2, s0_2_0, 0x09F81C15, 0x202B0108, 0xF001060D, 0x03F22C11);
	r3 = D(r3, s0_2_0, 0xF1190409, 0xE315FE10, 0x14ED0728, 0xFA08D1F7);
	r4 = D(r4, s0_2_0, 0x2136FB0A, 0xF5F681F5, 0xFDF90502, 0x0514FC0B);
	r5 = D(r5, s0_2_0, 0xF6E7350A, 0x23F5F3F1, 0x06EB061D, 0x14F3EFE1);
	r6 = D(r6, s0_2_0, 0xFCFBD602, 0xE6EDD0F4, 0x0EE8F801, 0x2616F118);
	r7 = D(r7, s0_2_0, 0x1204F9F2, 0x0B08F4D8, 0xFAE3FB1B, 0xFE08F8EF);
	r0 = D(r0, s0_2_1, 0x09E8F2FD, 0x0CE84806, 0x14FAEBEC, 0xEE0208F2);
	r1 = D(r1, s0_2_1, 0xFB09B706, 0x0404200C, 0x06E027DF, 0x14001FFB);
	r2 = D(r2, s0_2_1, 0x0C020706, 0xE427F307, 0xE610F208, 0x02E3E103);
	r3 = D(r3, s0_2_1, 0xE6FEFA0E, 0x03F8EBFC, 0xFEFBE3F6, 0x20FE19FD);
	r4 = D(r4, s0_2_1, 0xE7C20902, 0xEFFB2609, 0xFDCEFF0B, 0x13F4E60D);
	r5 = D(r5, s0_2_1, 0xFE19C513, 0xFB170314, 0xFFFAF8FD, 0xE795B4FB);
	r6 = D(r6, s0_2_1, 0x15CEE104, 0xFAE7FA04, 0x1C4F1203, 0xDBE80608);
	r7 = D(r7, s0_2_1, 0xF6F606DE, 0xEA081925, 0x06EEF8EC, 0xEC0BED11);
	r0 = D(r0, s0_2_2, 0x090FFB0B, 0xE6F60AF0, 0x0BFF0AFA, 0xE5081806);
	r1 = D(r1, s0_2_2, 0xD2D190F3, 0xFD0BEFFE, 0xF6CED6FF, 0x08DBD913);
	r2 = D(r2, s0_2_2, 0x060508EB, 0x080425F4, 0xFCFDFBFC, 0x110217F5);
	r3 = D(r3, s0_2_2, 0x03191AEE, 0x0DF5F5EF, 0xF20C07FC, 0x0A12D206);
	r4 = D(r4, s0_2_2, 0xFA06DFFD, 0xFCBC7109, 0x0305FB06, 0xFF1303FB);
	r5 = D(r5, s0_2_2, 0xEFDC8CDA, 0xF9FAD2FB, 0x06E411FE, 0x0AF4E008);
	r6 = D(r6, s0_2_2, 0xE30A21F4, 0x1DE1ED0E, 0x0A19E9E2, 0x172CFD0F);
	r7 = D(r7, s0_2_2, 0x0631E90D, 0xFCDEF5F8, 0xF707E2FB, 0xFBFF08ED);
	r0 = D(r0, s1_0_0, 0x00F5FE16, 0x0F0FD00C, 0xF8FBF804, 0x0D09FAF9);
	r1 = D(r1, s1_0_0, 0xF31D16F9, 0xFA00F7F5, 0xE6F110EB, 0x10F70E16);
	r2 = D(r2, s1_0_0, 0xE108FB2B, 0x18F608FE, 0x0E07FB0C, 0x0309F1F8);
	r3 = D(r3, s1_0_0, 0x05EEFCF3, 0xE2FE0314, 0x07F300FA, 0x0801FD02);
	r4 = D(r4, s1_0_0, 0x0CE6F708, 0xF8F7171A, 0xFDFF0D0E, 0x0802F403);
	r5 = D(r5, s1_0_0, 0x1011DE10, 0x04FAF5F2, 0x0304F529, 0xEDF6ED04);
	r6 = D(r6, s1_0_0, 0x19F90515, 0xF3FF0B1B, 0xF504F10D, 0x0D100AFE);
	r7 = D(r7, s1_0_0, 0x0AFBEF04, 0x06FEF316, 0xD91081D2, 0x1702EAFE);
	r0 = D(r0, s1_0_1, 0x11FAFB03, 0xE4F3FD20, 0x04F60BFF, 0xEEEF0008);
	r1 = D(r1, s1_0_1, 0xEBEEDA10, 0xF504E414, 0xFB05F30D, 0x01FFF709);
	r2 = D(r2, s1_0_1, 0xED090D1C, 0x0003F4F6, 0x090610FD, 0xF4FFFA0D);
	r3 = D(r3, s1_0_1, 0xEB0BF6EA, 0x0A03FF09, 0x09FD0602, 0xF700F1E1);
	r4 = D(r4, s1_0_1, 0xCFFA1106, 0x0010FAF5, 0x071B030A, 0x29FDEDFC);
	r5 = D(r5, s1_0_1, 0x12D5FCD6, 0xE8EF0000, 0x1601090C, 0xEDF6F607);
	r6 = D(r6, s1_0_1, 0xF70606FE, 0xFDF1F822, 0x2E0513FD, 0xFB08E8FE);
	r7 = D(r7, s1_0_1, 0x040408FF, 0x0E08FDFF, 0xBBADE0FE, 0x0800FC0E);
	r0 = D(r0, s1_0_2, 0x011708F8, 0xFFFDE401, 0xF7110526, 0x04FAFCFF);
	r1 = D(r1, s1_0_2, 0x0BFAEA1A, 0xFB0E0C05, 0x05F5E9FA, 0xE0130020);
	r2 = D(r2, s1_0_2, 0xFC0708FE, 0x17EBF501, 0x03F5FCF8, 0xFF0AF9FB);
	r3 = D(r3, s1_0_2, 0xF2E704D6, 0x13E8F216, 0x09130202, 0xEEF9F908);
	r4 = D(r4, s1_0_2, 0x0DEA1CE8, 0x12ECF213, 0xF4E2FFFA, 0xEEE8FFF8);
	r5 = D(r5, s1_0_2, 0xF94DFC02, 0xF9FD14F5, 0xFA0D08F3, 0x001412E4);
	r6 = D(r6, s1_0_2, 0x1309F2F7, 0x0DF3FA06, 0x170AEF06, 0x040004EC);
	r7 = D(r7, s1_0_2, 0x02F605FD, 0xF0ECEFF3, 0xECE614EC, 0xFDFDF504);
	r0 = D(r0, s1_1_0, 0x0D041A14, 0xFC0BFE02, 0xFA1602E0, 0xFFFA06FB);
	r1 = D(r1, s1_1_0, 0xC6F4F1F9, 0x1E1DF1EC, 0xE4F2F3FA, 0xFC02FCEC);
	r2 = D(r2, s1_1_0, 0xFEFAF70D, 0xECDA1318, 0xFF000EF9, 0xFC01E805);
	r3 = D(r3, s1_1_0, 0x2BEE12FE, 0x06F807FD, 0x19030209, 0x0E05F70B);
	r4 = D(r4, s1_1_0, 0xED010313, 0xF408120E, 0x05F2FC0F, 0x0FF51002);
	r5 = D(r5, s1_1_0, 0x180F08ED, 0xEB1616EA, 0x1400ED0D, 0xECED0807);
	r6 = D(r6, s1_1_0, 0xE2F901FF, 0xF3040911, 0xE8F9F0F3, 0x01F91AFA);
	r7 = D(r7, s1_1_0, 0x01F0080C, 0xF2150400, 0xDDF214D3, 0x010814FD);
	r0 = D(r0, s1_1_1, 0x01F1EF14, 0x1415EEE6, 0x080FFEE8, 0x0C04E9FC);
	r1 = D(r1, s1_1_1, 0x06EB100B, 0x0EEE3214, 0x2216F41F, 0x150F25F9);
	r2 = D(r2, s1_1_1, 0xE1FA26F3, 0xFE2208F5, 0x08F7F1FB, 0x02F51816);
	r3 = D(r3, s1_1_1, 0xEA1709B9, 0xCD200904, 0x0A0405F3, 0x0EFC06D6);
	r4 = D(r4, s1_1_1, 0x0909F20A, 0xE9FAFA21, 0xF4070CF6, 0xF3FD20C4);
	r5 = D(r5, s1_1_1, 0xE9EDF0F7, 0x0CF80C2C, 0xF7080C15, 0x07F90305);
	r6 = D(r6, s1_1_1, 0xF0D1E5EF, 0x0B01FDF6, 0x01F919F5, 0xFED1ED10);
	r7 = D(r7, s1_1_1, 0x0C0D12E9, 0xF703F8F4, 0xE8F7D830, 0xEDF11AFD);
	r0 = D(r0, s1_1_2, 0xF4041104, 0x0C03F7D7, 0x04FBE709, 0x02F412FD);
	r1 = D(r1, s1_1_2, 0xEC1BFD0C, 0x03FDF405, 0xFDFA0DE1, 0xFBDBF507);
	r2 = D(r2, s1_1_2, 0xFFC3090D, 0xF90C191F, 0x0613F5F4, 0x0203040C);
	r3 = D(r3, s1_1_2, 0x1C01F80C, 0x100EEF0B, 0xEF0301FC, 0x0305F2EF);
	r4 = D(r4, s1_1_2, 0x0BF3E9F1, 0x180EF31B, 0x0D0DF604, 0x08030315);
	r5 = D(r5, s1_1_2, 0xF10D252A, 0xE7FD04E4, 0xFF070EFB, 0x08F01CF6);
	r6 = D(r6, s1_1_2, 0x011B08EF, 0x15050FF6, 0x00F61617, 0xE1E203F8);
	r7 = D(r7, s1_1_2, 0xFFFA040C, 0xF4FFF50D, 0x1F931017, 0xF807FAFA);
	r0 = D(r0, s1_2_0, 0xFA01FA08, 0x050D29D8, 0x04FDFF00, 0xF9FB0605);
	r1 = D(r1, s1_2_0, 0x04EBD017, 0x0DDA1AFA, 0x1406E6F1, 0x110203F6);
	r2 = D(r2, s1_2_0, 0xFB09EBF7, 0xF601FEE9, 0xF50902F4, 0x16FA1504);
	r3 = D(r3, s1_2_0, 0x0D07F9F9, 0x1A0D1118, 0x05F1FE05, 0x090710FF);
	r4 = D(r4, s1_2_0, 0x0C1503F2, 0xD6FFF0F7, 0x0217FA18, 0x0BF2E7E1);
	r5 = D(r5, s1_2_0, 0x191C0DD3, 0x0C06E701, 0x0AFDEDFC, 0xF101F800);
	r6 = D(r6, s1_2_0, 0x02EF0AEC, 0xFF0EE917, 0xE808E4F9, 0xF8D0E8EC);
	r7 = D(r7, s1_2_0, 0x04F4EF03, 0x08F8F408, 0xE230F4FC, 0x07FFFBED);
	r0 = D(r0, s1_2_1, 0x03F0F3F9, 0xE6F4310C, 0xF90E09ED, 0x050F0303);
	r1 = D(r1, s1_2_1, 0xF0D61AD2, 0x0209F6E2, 0x14FE1E00, 0xE9EBF0EA);
	r2 = D(r2, s1_2_1, 0x01FEE427, 0xFD11E6F0, 0xF4F80808, 0x06021204);
	r3 = D(r3, s1_2_1, 0xFD1904C4, 0x0A0403F0, 0x0B05FCE3, 0x050EFED9);
	r4 = D(r4, s1_2_1, 0xEC2DF3F8, 0xEF0E188D, 0xFF040027, 0x14CFFEF3);
	r5 = D(r5, s1_2_1, 0xF4C41ED0, 0x0309FCFD, 0xF9FCF8D4, 0xE90EF91E);
	r6 = D(r6, s1_2_1, 0x01FEF5FB, 0x07130225, 0xE1E8FC0C, 0x0D2A0111);
	r7 = D(r7, s1_2_1, 0xFCF5F403, 0x11FC0916, 0xF9EC10E7, 0x01F8F7E7);
	r0 = D(r0, s1_2_2, 0xF81C0305, 0xF9E30BFA, 0x19D0DB08, 0xFD12FCF0);
	r1 = D(r1, s1_2_2, 0x0E130905, 0x0EEDE5EA, 0xF7090EFB, 0xF717E2EE);
	r2 = D(r2, s1_2_2, 0x1481EAF5, 0x07FE09CC, 0x05FC041F, 0xF4FF0000);
	r3 = D(r3, s1_2_2, 0xFCDD1402, 0xFAF7010F, 0xFB1709F1, 0x08000B03);
	r4 = D(r4, s1_2_2, 0x04F42005, 0x03E3FFF6, 0xFF020104, 0xF2071514);
	r5 = D(r5, s1_2_2, 0xEF1BF3ED, 0x02F0FEC3, 0xF1080EF7, 0x02F0EF1C);
	r6 = D(r6, s1_2_2, 0x10180811, 0xFE0CFD1E, 0x021B15EC, 0x0AFB10F2);
	r7 = D(r7, s1_2_2, 0x100CE702, 0x0BEF02EA, 0xF7F10410, 0xFD09F310);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x00020FC7, 0xF0FB07E4, 0x08F9EAEA, 0x03FA0D01);
	r1 = D(r1, s0_0_0, 0x1CEFE505, 0x151119C8, 0x070CFEDD, 0x02FB0CFD);
	r2 = D(r2, s0_0_0, 0x0D061028, 0xFE110F31, 0x04FB03F5, 0x050409FC);
	r3 = D(r3, s0_0_0, 0x0FF80016, 0x08F208F0, 0x0403FC25, 0xFBEC0A35);
	r4 = D(r4, s0_0_0, 0x0EDA021A, 0xF7010A0C, 0x0EFE0542, 0x06F01E14);
	r5 = D(r5, s0_0_0, 0xFD01F8E4, 0x252503EE, 0x0DD9F30D, 0x19F90BF1);
	r6 = D(r6, s0_0_0, 0xF501F6E9, 0x04FE05DD, 0x05DD070C, 0x1012F735);
	r7 = D(r7, s0_0_0, 0x0BFE0409, 0xF1F31207, 0xC402E9DF, 0x0D0708DB);
	r0 = D(r0, s0_0_1, 0xEF090304, 0xF203E401, 0x0806F8CE, 0xFB0F1406);
	r1 = D(r1, s0_0_1, 0x0C0B092A, 0xEAE71110, 0x04210813, 0xF0F4F819);
	r2 = D(r2, s0_0_1, 0xF30BE312, 0x0712E41A, 0x0604FCFF, 0x16E701FC);
	r3 = D(r3, s0_0_1, 0xECEFF70D, 0x0208030C, 0xFCFA140E, 0x09F4FAF2);
	r4 = D(r4, s0_0_1, 0xE2C9F631, 0xF9E7F5FF, 0xF50F0C06, 0xEF1AF6EC);
	r5 = D(r5, s0_0_1, 0x0FF50AF7, 0xD7000914, 0xEED9E7F1, 0x13F80E19);
	r6 = D(r6, s0_0_1, 0xF8090C07, 0x00FFEF12, 0xDCFA13C8, 0xED0FFD05);
	r7 = D(r7, s0_0_1, 0xF2FBF4F9, 0xF3F3F20B, 0x0CF5AC2A, 0x21FF05E9);
	r0 = D(r0, s0_0_2, 0xF114FA07, 0x26E3FA09, 0xD8CC1DFD, 0x1103E906);
	r1 = D(r1, s0_0_2, 0x08110624, 0x0C06F904, 0x0C0804F9, 0x0301EAF1);
	r2 = D(r2, s0_0_2, 0xE0F4FA09, 0x07FF02DC, 0xFBE8FCF4, 0x0AFF0406);
	r3 = D(r3, s0_0_2, 0x0FF4FCF6, 0xD0260DEF, 0xE9FB0DFC, 0xF2F7F219);
	r4 = D(r4, s0_0_2, 0x13DDFDE8, 0x02F8F6E0, 0x11FD000D, 0xE800F001);
	r5 = D(r5, s0_0_2, 0x0A0A0815, 0xE007FE0E, 0xECF6E819, 0x17CB14FC);
	r6 = D(r6, s0_0_2, 0xE70A030E, 0xF90304F0, 0xE9030500, 0xE8E90A24);
	r7 = D(r7, s0_0_2, 0x15FD03FC, 0xFFFFF80E, 0xF6D98110, 0xFB12FF00);
	r0 = D(r0, s0_1_0, 0x08F1002A, 0x230519EE, 0xF706FCCF, 0xFA11047F);
	r1 = D(r1, s0_1_0, 0x41F5FCF9, 0xF61EFE19, 0x020DFA13, 0x01F6FAF5);
	r2 = D(r2, s0_1_0, 0xF4ECF32D, 0xF8DAFDB7, 0x0C08FF01, 0x000BF2FF);
	r3 = D(r3, s0_1_0, 0xE1F70738, 0xF8F0F233, 0xFE0710FC, 0xF6F40847);
	r4 = D(r4, s0_1_0, 0xE4221630, 0x0DFEF8F8, 0x0F0F170F, 0x18FFFA2D);
	r5 = D(r5, s0_1_0, 0x141411E3, 0x0DE6F1EA, 0x04060CDD, 0x0116EBD2);
	r6 = D(r6, s0_1_0, 0x29161909, 0xF9EA14DD, 0xFCFFFD81, 0x1C041EBE);
	r7 = D(r7, s0_1_0, 0x0A0D0410, 0xED02E718, 0xFC292BC5, 0xF407F913);
	r0 = D(r0, s0_1_1, 0xFF05FEFE, 0xED0003C3, 0x05E5DF01, 0xF914FFFC);
	r1 = D(r1, s0_1_1, 0x0F24EFE0, 0xD8C907DD, 0x081E0CE4, 0x2AF106D9);
	r2 = D(r2, s0_1_1, 0x0EF4FF0D, 0x23D61538, 0x1213FBF0, 0xF6DAFCF5);
	r3 = D(r3, s0_1_1, 0x0A0501E0, 0x3210FBFF, 0xFF3EF813, 0xE804FBE5);
	r4 = D(r4, s0_1_1, 0xBB1A00DB, 0x0DF10F29, 0xF1F9F705, 0x2AE20F14);
	r5 = D(r5, s0_1_1, 0x12BCF4E1, 0xDDE3EF05, 0x101D130C, 0x311904F1);
	r6 = D(r6, s0_1_1, 0x94F9FE99, 0x0DE0F9E3, 0xE4E8F681, 0xA91420C3);
	r7 = D(r7, s0_1_1, 0xFE010225, 0xFC0C0610, 0x1C1B8129, 0x0404FEF9);
	r0 = D(r0, s0_1_2, 0x07FBF206, 0x910F0436, 0xFC13F80E, 0xF6CBF3FE);
	r1 = D(r1, s0_1_2, 0xE9DAF80D, 0x0110E421, 0x0AF50AFB, 0xF6F50023);
	r2 = D(r2, s0_1_2, 0x0A1AFE05, 0xF9E60FDD, 0x0407E902, 0xEE0D0103);
	r3 = D(r3, s0_1_2, 0xFCEB04D2, 0xE72C0F05, 0xFBFF0B11, 0xFF0700CF);
	r4 = D(r4, s0_1_2, 0xF1EFF205, 0xC210F8FD, 0xEE2E00E5, 0xD90D22FA);
	r5 = D(r5, s0_1_2, 0xD90EDE20, 0x1BEAEBFB, 0x0FF9050B, 0xEDE50FFD);
	r6 = D(r6, s0_1_2, 0x01E90319, 0xF9DEF80B, 0x2115F5DC, 0x02FEF106);
	r7 = D(r7, s0_1_2, 0x05170205, 0x1118F9E6, 0x3FF33B28, 0xEB0B05FE);
	r0 = D(r0, s0_2_0, 0xF7FEFDE3, 0xF710F406, 0x20041311, 0x03FCFAF1);
	r1 = D(r1, s0_2_0, 0x09FBC70F, 0x01CCF9EC, 0xD3E9EBF6, 0x0A0C0BBE);
	r2 = D(r2, s0_2_0, 0xF8F80316, 0xFAF80700, 0x0CF61800, 0x1E08FDFF);
	r3 = D(r3, s0_2_0, 0xFD181707, 0xFFF9F9C3, 0xFAF3FA05, 0xF1F30202);
	r4 = D(r4, s0_2_0, 0x2802F10C, 0x10F000AB, 0x080F0BF4, 0xF21403DA);
	r5 = D(r5, s0_2_0, 0xF80B0CE3, 0x080716F2, 0xFF1C1209, 0xFFEEE802);
	r6 = D(r6, s0_2_0, 0x2609E0BC, 0x1328FCF5, 0xE216F2DF, 0xFED9E814);
	r7 = D(r7, s0_2_0, 0xFCECFF2F, 0x08EB090D, 0x1B04F9EC, 0x011600F2);
	r0 = D(r0, s0_2_1, 0xF2FC0104, 0xEB210312, 0x18FF0C0E, 0x030FF700);
	r1 = D(r1, s0_2_1, 0x26EF0DE1, 0xFC041406, 0x17CEF208, 0xF413FE2A);
	r2 = D(r2, s0_2_1, 0xFFDEFC09, 0xF800F4C9, 0x04060401, 0xFE051805);
	r3 = D(r3, s0_2_1, 0x07140DEF, 0xFBF4FC33, 0x0803F9EE, 0xFC1701D7);
	r4 = D(r4, s0_2_1, 0xD50BFAF3, 0x23D41ADF, 0x19FCE6E0, 0x14EAF91A);
	r5 = D(r5, s0_2_1, 0x13F2E23B, 0x17130FC1, 0x1905FC08, 0xF81DFA13);
	r6 = D(r6, s0_2_1, 0x000808FF, 0xF51910F9, 0xEB12FBD9, 0x0501F6CC);
	r7 = D(r7, s0_2_1, 0xFE0BFEF7, 0x02030C1B, 0x07FFE517, 0x0AE501EC);
	r0 = D(r0, s0_2_2, 0x00F814FF, 0xD5F4FF2B, 0x020BF1F0, 0x06FC0FFF);
	r1 = D(r1, s0_2_2, 0x0E1C2DF1, 0x04FDF701, 0x04E3FD13, 0xF901FBDD);
	r2 = D(r2, s0_2_2, 0x04FFF304, 0x151F032A, 0x03E70706, 0x0401F8ED);
	r3 = D(r3, s0_2_2, 0xFF11EAF0, 0xFB05FE07, 0x0C07EDED, 0xD7DBF40A);
	r4 = D(r4, s0_2_2, 0xF31912F3, 0xE91205EB, 0xF3040E14, 0xD808E604);
	r5 = D(r5, s0_2_2, 0xE9FC0AE9, 0xFAF3F6EF, 0xE80201FB, 0xF324FBE6);
	r6 = D(r6, s0_2_2, 0xEAEDF8F4, 0x13F9FE16, 0xEF1C0A12, 0x10EDF411);
	r7 = D(r7, s0_2_2, 0xFC100AFB, 0x0C08F514, 0x26E6F104, 0xFCEDEF01);
	r0 = D(r0, s1_0_0, 0x19F50303, 0xE7F9FF0F, 0x190BFCFF, 0x19FB0D04);
	r1 = D(r1, s1_0_0, 0x15DEF3FA, 0xEA10E703, 0x05FA1A0A, 0xFEFCFBFE);
	r2 = D(r2, s1_0_0, 0xE2FEE6F8, 0xE2F216FB, 0x100A0E0C, 0x150601F0);
	r3 = D(r3, s1_0_0, 0x1C0F1FF1, 0x0F00F207, 0x0313FF02, 0x06FAF013);
	r4 = D(r4, s1_0_0, 0x160F0D05, 0xDA03FFF8, 0xC9F804FC, 0xEA07020C);
	r5 = D(r5, s1_0_0, 0x16FA06F1, 0xEFF914E8, 0x06FC11FB, 0x10040209);
	r6 = D(r6, s1_0_0, 0x0AE7FAFA, 0xFE07F3F9, 0x0BE50405, 0x080E09FA);
	r7 = D(r7, s1_0_0, 0xE40BFA04, 0xE0F7FE0A, 0x010CD019, 0xFC08F706);
	r0 = D(r0, s1_0_1, 0x0AEC03F9, 0xFC13FAFB, 0xF512E8F4, 0x0206FD09);
	r1 = D(r1, s1_0_1, 0xE7DF0C15, 0xFCDD02FC, 0x0A020407, 0xF3FCED03);
	r2 = D(r2, s1_0_1, 0x16D8DFF7, 0xFA0E0B14, 0x04F3FF0A, 0x0B07FC12);
	r3 = D(r3, s1_0_1, 0x1CFFFBE7, 0xEF020A15, 0x04FB04F5, 0xF4300817);
	r4 = D(r4, s1_0_1, 0xF6EB03FA, 0x0305F018, 0x10FDEED7, 0xEFFFE911);
	r5 = D(r5, s1_0_1, 0xF91204FF, 0xEDFBFCF2, 0x12E9E30E, 0x1BF6FFF0);
	r6 = D(r6, s1_0_1, 0x06F301E5, 0xF900FBFA, 0xFAFE060E, 0xFC100BF7);
	r7 = D(r7, s1_0_1, 0xF1F81D06, 0x1B01F2FF, 0xE43BE2E6, 0xFB010506);
	r0 = D(r0, s1_0_2, 0x03F9F6FF, 0x1A161DF2, 0xFD01EC0A, 0x0805FF05);
	r1 = D(r1, s1_0_2, 0x0FE326EA, 0xFCF50704, 0x05FB0B00, 0xEEE5F5FF);
	r2 = D(r2, s1_0_2, 0xF6D50905, 0x0AF6FFF6, 0xFCF60211, 0x03FA0304);
	r3 = D(r3, s1_0_2, 0x0318F61E, 0xFEF6F3F3, 0xF5FF01F5, 0x06230810);
	r4 = D(r4, s1_0_2, 0xF9EDF9D6, 0xEDF3010A, 0x0314EFE3, 0xFB1CFE04);
	r5 = D(r5, s1_0_2, 0xF9050112, 0xF1F100CD, 0x0B01080B, 0x01E30022);
	r6 = D(r6, s1_0_2, 0x063309F7, 0xF308EF12, 0x0010FA21, 0x0F06F716);
	r7 = D(r7, s1_0_2, 0x04F8F30C, 0x010D0A00, 0x0AE38143, 0x02FC09F5);
	r0 = D(r0, s1_1_0, 0x000E1005, 0xFBC0F5ED, 0x031D0F23, 0xD8071A0F);
	r1 = D(r1, s1_1_0, 0xF516E8EE, 0xF7E0EBFA, 0xEC0C0001, 0x1009E9F9);
	r2 = D(r2, s1_1_0, 0xFD12E201, 0x10EE09FE, 0x18030EFB, 0xDBE91608);
	r3 = D(r3, s1_1_0, 0xFEFCFC0B, 0x06F811FF, 0xFEEAFCF8, 0x03120125);
	r4 = D(r4, s1_1_0, 0x180BEEED, 0x13EFFF06, 0xF60CF5EF, 0xFF08E6EC);
	r5 = D(r5, s1_1_0, 0x1D1CFEEF, 0x1EF4FE15, 0xFC02031D, 0x01EF00EA);
	r6 = D(r6, s1_1_0, 0x1310F8E8, 0x0AF3F904, 0xFF14F504, 0xF9060701);
	r7 = D(r7, s1_1_0, 0x0A0A0402, 0x090BFC09, 0x0217321B, 0x1EFBF6F4);
	r0 = D(r0, s1_1_1, 0xF3F1F7E8, 0xE1EAEC15, 0xFE11F11C, 0xF5F4F613);
	r1 = D(r1, s1_1_1, 0xC2F01212, 0x0B09061B, 0xF4FD1FE4, 0x2DDF04F9);
	r2 = D(r2, s1_1_1, 0xFE0CE6D1, 0xFCF1FAFD, 0xF0F20414, 0xF3F90F08);
	r3 = D(r3, s1_1_1, 0xFC19F601, 0x0702FBEB, 0x071C0204, 0xFE092B2D);
	r4 = D(r4, s1_1_1, 0x05F2E00A, 0xFCDDF503, 0x1FFB04EB, 0x1E08FAF9);
	r5 = D(r5, s1_1_1, 0xEEE6F124, 0xF21FE014, 0xFDFCF7FD, 0x01E5F10E);
	r6 = D(r6, s1_1_1, 0xF9DD0F02, 0x000BF9FF, 0x1FCC03F1, 0xE1EDFEEB);
	r7 = D(r7, s1_1_1, 0x1D01040D, 0xF8FC0601, 0x06E8E33A, 0x03060D06);
	r0 = D(r0, s1_1_2, 0x030C0016, 0x0B1008FA, 0x0A1414F1, 0x0B0101C0);
	r1 = D(r1, s1_1_2, 0x0B20EE02, 0xF5FC0308, 0x0CFCF0FF, 0x07080907);
	r2 = D(r2, s1_1_2, 0x07ED1919, 0x101209EF, 0x0C0416F4, 0xFB0602F7);
	r3 = D(r3, s1_1_2, 0xEEF4E1E1, 0xFC0805E7, 0xF906F207, 0xF50600FE);
	r4 = D(r4, s1_1_2, 0x0AF9FFCA, 0x0108120E, 0xF8D713DB, 0xFAEDF3FF);
	r5 = D(r5, s1_1_2, 0x0E0BF611, 0x01EAF7FA, 0x01FD0D20, 0xF6FF0511);
	r6 = D(r6, s1_1_2, 0x0AF0FEE8, 0x01EA11EC, 0x0E2512FC, 0x0210F810);
	r7 = D(r7, s1_1_2, 0xFB100A05, 0xE502FAF8, 0x0501EC60, 0x0AFCF912);
	r0 = D(r0, s1_2_0, 0xF4F7FE02, 0xEFDF0E07, 0xDFFE0401, 0xFD010AF7);
	r1 = D(r1, s1_2_0, 0xFB070BF8, 0x09F91607, 0xE816F419, 0x1105080F);
	r2 = D(r2, s1_2_0, 0x020AE1FC, 0xF318D904, 0xF30502EE, 0xF206E8F1);
	r3 = D(r3, s1_2_0, 0xE9F61105, 0xFEFB04FC, 0x0AEC0C0D, 0xEB200B16);
	r4 = D(r4, s1_2_0, 0xF75124E9, 0x0724FF13, 0x04EB0CDD, 0xF9050B04);
	r5 = D(r5, s1_2_0, 0x06F60CEB, 0x110C141B, 0x030CF8F0, 0xE1F7FB18);
	r6 = D(r6, s1_2_0, 0xE50C0401, 0x01F80DED, 0xFE12FEFE, 0x0C0D0218);
	r7 = D(r7, s1_2_0, 0xFDF90AFC, 0x0F03090D, 0x08E0DEF5, 0xF317FA07);
	r0 = D(r0, s1_2_1, 0x08000113, 0xEE20071D, 0xDD06F7EA, 0xF6F7EEF8);
	r1 = D(r1, s1_2_1, 0x19E7FBFB, 0xF92BFF1B, 0xFCECFA02, 0x081B1B1C);
	r2 = D(r2, s1_2_1, 0xEBEBF38D, 0x0AFB0625, 0xF2FEF5F7, 0xFC00FB12);
	r3 = D(r3, s1_2_1, 0xF90B0B05, 0x010DF61E, 0xF4FC1101, 0x0BDFEA0D);
	r4 = D(r4, s1_2_1, 0x02C0E8AD, 0xE72DFDAF, 0x13F201FF, 0x1501FD16);
	r5 = D(r5, s1_2_1, 0xF600ED09, 0x1217FA21, 0x12E61C04, 0x0421FEE9);
	r6 = D(r6, s1_2_1, 0xDF10F0F7, 0x090A08D2, 0xE1D7F617, 0x1D10F9ED);
	r7 = D(r7, s1_2_1, 0xF808F6F6, 0xE40309F2, 0xFAEDEBFD, 0xF0FBFC2A);
	r0 = D(r0, s1_2_2, 0xFEFC0D06, 0x02D10115, 0x03E419F9, 0x0708ECF9);
	r1 = D(r1, s1_2_2, 0x0141F1F2, 0x06FC1807, 0x01F6EC0C, 0xF9F601E3);
	r2 = D(r2, s1_2_2, 0x100F01FD, 0x06EFE6FD, 0x07F2F2F8, 0x0400EAF9);
	r3 = D(r3, s1_2_2, 0xF70B05F5, 0x0AF003DC, 0x0CFEF213, 0x011EE7EE);
	r4 = D(r4, s1_2_2, 0xF3DB1403, 0x09D606F2, 0xFDF70DEA, 0xEE0702EA);
	r5 = D(r5, s1_2_2, 0x083CFCEA, 0xEFEBFF26, 0x0604D9F5, 0xFD100E1E);
	r6 = D(r6, s1_2_2, 0xFFFE11C1, 0x09D5EEDB, 0x040EF40E, 0xF2FE1100);
	r7 = D(r7, s1_2_2, 0xFDFFFA11, 0x00EB01F8, 0xFD0E0CF6, 0x0209F812);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0CF7FF05, 0xFFFAE20A, 0xDB1C070D, 0xF90E070C);
	r1 = D(r1, s0_0_0, 0x080501FF, 0x16FC0308, 0xF007DAF2, 0x01092200);
	r2 = D(r2, s0_0_0, 0x1503DD16, 0x0F0A08F9, 0xF609FD03, 0x0AF10EFB);
	r3 = D(r3, s0_0_0, 0x0A0208D0, 0x12050101, 0x051AFEFB, 0xFA1D110D);
	r4 = D(r4, s0_0_0, 0xD7271A0F, 0xF912F8FC, 0xFEEBECEA, 0xE9F003F7);
	r5 = D(r5, s0_0_0, 0x10061E01, 0x23DD07EF, 0xE5FBF5F3, 0xEA08CF0D);
	r6 = D(r6, s0_0_0, 0xFDFBF0FF, 0x02E90B02, 0xE8090BEF, 0xD3FE0021);
	r7 = D(r7, s0_0_0, 0x07F2FE0D, 0x09F01714, 0xC4DD2114, 0x0604FC15);
	r0 = D(r0, s0_0_1, 0x010705E3, 0x0F0CF726, 0x09F9FFEC, 0x09F2FD09);
	r1 = D(r1, s0_0_1, 0x24DFF8FD, 0x020B02D2, 0xF901ED0A, 0x0F01060D);
	r2 = D(r2, s0_0_1, 0xF00CFB03, 0xEF1B3519, 0x0F01EC02, 0xFB0116F1);
	r3 = D(r3, s0_0_1, 0x11030AE7, 0xEFECEE16, 0x0FF3F7F6, 0xFC0900FB);
	r4 = D(r4, s0_0_1, 0x07080E15, 0x0AF70E08, 0xFEFE1920, 0x24F10BFC);
	r5 = D(r5, s0_0_1, 0x19F63911, 0xD8F9DE04, 0x080D1713, 0xF90410F9);
	r6 = D(r6, s0_0_1, 0x070A1C1D, 0xF2091EDF, 0xFA091EDE, 0x07D8F9F8);
	r7 = D(r7, s0_0_1, 0xEAFC03F9, 0xF9120E0D, 0xCE0CD1CE, 0x15F5E8EF);
	r0 = D(r0, s0_0_2, 0x040DF00E, 0xF4F80709, 0xFAEB07EF, 0xFF0208A9);
	r1 = D(r1, s0_0_2, 0xFC141B1B, 0xFEF4E620, 0xF9FF090C, 0xF80C04F5);
	r2 = D(r2, s0_0_2, 0x1122060F, 0x0CEE051D, 0xFE120EC8, 0x00F8FDF7);
	r3 = D(r3, s0_0_2, 0x04F5071C, 0x09141DF9, 0x09F5FD11, 0xFDED1DE9);
	r4 = D(r4, s0_0_2, 0x080934FB, 0x00081CFB, 0xFFF70422, 0x00ECFB05);
	r5 = D(r5, s0_0_2, 0xF7F1E0EF, 0xFB1C02F5, 0xEA00FCEA, 0xFF0716DF);
	r6 = D(r6, s0_0_2, 0x041202E6, 0xFD030DAB, 0xFEE7F519, 0xFA0116F6);
	r7 = D(r7, s0_0_2, 0xFF050907, 0xF6F7F3E5, 0xC6F48192, 0x05F5FD00);
	r0 = D(r0, s0_1_0, 0xEDE817FE, 0x031BDAFC, 0xFE0CE6FD, 0xE4E7F806);
	r1 = D(r1, s0_1_0, 0xD8F20211, 0x220511F2, 0x03FE0FDF, 0xF9F8F3F2);
	r2 = D(r2, s0_1_0, 0x0106001F, 0xE0F3F304, 0xEF040B1D, 0xF70C00F7);
	r3 = D(r3, s0_1_0, 0xE2EFF5DC, 0xF70002F7, 0xF5FC11DF, 0xE1050912);
	r4 = D(r4, s0_1_0, 0x1C0A0C28, 0x1D09FCFF, 0x1103F900, 0x0BFF15F8);
	r5 = D(r5, s0_1_0, 0x17022FD9, 0x0E0F19F1, 0xFC18E2FB, 0xE80AE201);
	r6 = D(r6, s0_1_0, 0x0BFB031B, 0x10F4F337, 0x01EDE7EE, 0xE2F71310);
	r7 = D(r7, s0_1_0, 0xFD07F314, 0xF602E300, 0x0B0043F7, 0x1CF1FD03);
	r0 = D(r0, s0_1_1, 0x0EF6FCF7, 0xED05F6FF, 0x1EF02003, 0x17012401);
	r1 = D(r1, s0_1_1, 0x072208D6, 0x09F32745, 0x090F00F7, 0xE318EC0A);
	r2 = D(r2, s0_1_1, 0x05E71612, 0x10F30D00, 0xF7F6F2FF, 0xF30FEE3B);
	r3 = D(r3, s0_1_1, 0xF703121A, 0xF00FCEF7, 0x0DF9F2F6, 0xFF18FFEC);
	r4 = D(r4, s0_1_1, 0x0AD9C700, 0x1EFF0512, 0x07F7D2FA, 0x03112D06);
	r5 = D(r5, s0_1_1, 0x05EF0501, 0x0FF318FE, 0xECF8DBFA, 0x29F2F917);
	r6 = D(r6, s0_1_1, 0xDDF71802, 0xF500140F, 0x03E6E8ED, 0xD8FFE71D);
	r7 = D(r7, s0_1_1, 0xFF02FEF3, 0x02E3010B, 0xF823FF26, 0xF808FC00);
	r0 = D(r0, s0_1_2, 0xF90FFE05, 0x00F624F1, 0x01DA01ED, 0x0001F12E);
	r1 = D(r1, s0_1_2, 0x06F30729, 0xF000FFF4, 0x12031B2B, 0x18F81B81);
	r2 = D(r2, s0_1_2, 0x041E0E81, 0xF00403FC, 0xF3FDFF0C, 0x06F90518);
	r3 = D(r3, s0_1_2, 0x0EEF0204, 0x25EF0512, 0xFF08F71C, 0xEFDBF3F4);
	r4 = D(r4, s0_1_2, 0xF4F1F0E0, 0x06FDF6ED, 0xFAF5FFFD, 0x090911F8);
	r5 = D(r5, s0_1_2, 0xEA2210FC, 0x0EF6F909, 0xF8F2F906, 0xF40415ED);
	r6 = D(r6, s0_1_2, 0x040F22FF, 0xFCF0F1EC, 0xF2FE0826, 0xEA1F07F9);
	r7 = D(r7, s0_1_2, 0x05FD0704, 0x060AE8E6, 0xA9CD2EE4, 0xEF0604FE);
	r0 = D(r0, s0_2_0, 0xE7100A0C, 0x15F7230C, 0xCB1BF1FF, 0xEE0CFEFC);
	r1 = D(r1, s0_2_0, 0x0CDDA2EB, 0xF4031BF8, 0x27160AF5, 0xE0070802);
	r2 = D(r2, s0_2_0, 0xF8D4E50F, 0xD9F7ECE9, 0x080A120D, 0x2C05F3FC);
	r3 = D(r3, s0_2_0, 0xF72600F6, 0xF70407FA, 0xEC02FB00, 0xF8EB010B);
	r4 = D(r4, s0_2_0, 0xE1FABEFA, 0xFFF2FE0A, 0xF70AF609, 0xEC000A09);
	r5 = D(r5, s0_2_0, 0x2A00F7E1, 0xE1F9E7F8, 0xEBF7DC12, 0xE2F10AFF);
	r6 = D(r6, s0_2_0, 0x06EA0BFF, 0x1103FC19, 0x01152C0A, 0xF613DDF9);
	r7 = D(r7, s0_2_0, 0x14E11510, 0xF3051802, 0xF7101203, 0x07EE0405);
	r0 = D(r0, s0_2_1, 0x1204F8F5, 0xEBF81B01, 0xD30E2CFC, 0x1508FD07);
	r1 = D(r1, s0_2_1, 0x152C12DD, 0xE41018FD, 0x05F70D02, 0xB9F6F61B);
	r2 = D(r2, s0_2_1, 0xEBE9FDEF, 0x000D070B, 0x1B0604FB, 0x13050EF5);
	r3 = D(r3, s0_2_1, 0x09150C06, 0x04F30A05, 0xED13F8FF, 0x10F815FC);
	r4 = D(r4, s0_2_1, 0x1D10DDE8, 0x03F2EBF1, 0x061806DB, 0xDC0505EE);
	r5 = D(r5, s0_2_1, 0xE609FA07, 0x2DE9EC0A, 0x220007FE, 0x0907F0FB);
	r6 = D(r6, s0_2_1, 0xE7FBECFE, 0x1208FA0C, 0x00110707, 0x070C0911);
	r7 = D(r7, s0_2_1, 0x0012E3F9, 0xF3F20807, 0xFAE42706, 0xE9FE0B01);
	r0 = D(r0, s0_2_2, 0xFBFA00FC, 0x06FBEFF9, 0xE1F5060C, 0xF800F305);
	r1 = D(r1, s0_2_2, 0x0EF91DD5, 0xF8FFDE08, 0xEDDD02FD, 0x12F30517);
	r2 = D(r2, s0_2_2, 0xF4F1F618, 0x0D0EE8EF, 0x11F802FD, 0xFDF510EE);
	r3 = D(r3, s0_2_2, 0x140EFC03, 0x00081EF9, 0x0AFA04F8, 0xFC04F5E8);
	r4 = D(r4, s0_2_2, 0x13F40115, 0x0FF91B0D, 0x05FFFF07, 0xFF0CFFF7);
	r5 = D(r5, s0_2_2, 0x0310FEDF, 0x0E1829FE, 0xF6FBF2F9, 0x10F00EF3);
	r6 = D(r6, s0_2_2, 0x05FDEC05, 0x0A0A01FD, 0x08180DED, 0x0E0C1AF9);
	r7 = D(r7, s0_2_2, 0xFDFB09FD, 0x1AF6F2FD, 0x0E011C06, 0xFC050101);
	r0 = D(r0, s1_0_0, 0xF8EAF403, 0xE453E5FD, 0xD581F001, 0xFF2CE605);
	r1 = D(r1, s1_0_0, 0x1717F7FA, 0x0CDE08F9, 0x0A12050C, 0x00F613F7);
	r2 = D(r2, s1_0_0, 0x060AFBFA, 0xF956EB0B, 0x06FDED16, 0x14EB17EB);
	r3 = D(r3, s1_0_0, 0xF43327F1, 0x2222F7FD, 0xEFFE040F, 0x1BE8E7F5);
	r4 = D(r4, s1_0_0, 0xF4D5CAF3, 0x2FF00609, 0xECDC1308, 0xE52FEBE5);
	r5 = D(r5, s1_0_0, 0x20EA27FC, 0xFBF8EBF0, 0xE1E71213, 0x1B0A0913);
	r6 = D(r6, s1_0_0, 0xF6E33701, 0x23EEE7DB, 0xF038E415, 0x160D2919);
	r7 = D(r7, s1_0_0, 0x03051403, 0x09FAE0EF, 0xF811D3D7, 0x231B1310);
	r0 = D(r0, s1_0_1, 0x1205DB09, 0xF3F9F004, 0x18FC2510, 0x420581E7);
	r1 = D(r1, s1_0_1, 0x0335FAF0, 0x19E6F1E2, 0xEA1EE208, 0x11F0E4F1);
	r2 = D(r2, s1_0_1, 0x19101DE5, 0x2C090AEE, 0xF4E0160F, 0x080BF7FC);
	r3 = D(r3, s1_0_1, 0x05D111D5, 0x09F9011F, 0xFF2CE1FF, 0xA7D40215);
	r4 = D(r4, s1_0_1, 0x2519CAFF, 0xD2EDDC07, 0xF80A2C02, 0x97FC1005);
	r5 = D(r5, s1_0_1, 0x260600EB, 0x393FC9C4, 0x271F040B, 0xE4F217F7);
	r6 = D(r6, s1_0_1, 0xDC0F0B12, 0xFF1905E9, 0x1EE1E1E0, 0x3407F002);
	r7 = D(r7, s1_0_1, 0x1E16F80A, 0x24C6FC14, 0x150602D9, 0xEF0A0E02);
	r0 = D(r0, s1_0_2, 0x05141CE9, 0xF8FAE51A, 0xDCDBF80D, 0x0CC9D2FB);
	r1 = D(r1, s1_0_2, 0x14431AE2, 0xD7EA1905, 0xFFFC10F3, 0x15F713F3);
	r2 = D(r2, s1_0_2, 0x04F9E908, 0x030903F2, 0xF944F10A, 0xF51A0202);
	r3 = D(r3, s1_0_2, 0xE8DFD217, 0xE0F8F2F7, 0xF60C1418, 0xC904EFF9);
	r4 = D(r4, s1_0_2, 0xE40E16EC, 0x02F8FAF9, 0xEDF1EF06, 0x05ECEBF2);
	r5 = D(r5, s1_0_2, 0xEA0E30E6, 0x19B604DB, 0xFFDBF909, 0xEB0811FD);
	r6 = D(r6, s1_0_2, 0x0DF9FBF6, 0x09FE1608, 0x3328EC12, 0x022206F8);
	r7 = D(r7, s1_0_2, 0xF91C08FE, 0x21F1F2F3, 0x26F5D1C5, 0x011B02FF);
	r0 = D(r0, s1_1_0, 0x0A81E305, 0xE5021B09, 0xF9131A08, 0x0267E80E);
	r1 = D(r1, s1_1_0, 0xDCE50EFC, 0xD2FD1002, 0xEEF30501, 0x0102F70F);
	r2 = D(r2, s1_1_0, 0xEA2E06F2, 0xFFDBF6FF, 0xE3DC021C, 0xE0F5E5EE);
	r3 = D(r3, s1_1_0, 0x233710F4, 0xEEFBF733, 0x1DA4FD09, 0x2ACAF8EF);
	r4 = D(r4, s1_1_0, 0x15172CE6, 0xCE450E08, 0x03000708, 0xFEF0DBEC);
	r5 = D(r5, s1_1_0, 0xFB1121FE, 0x00C2FE1D, 0x1D06FEF7, 0x1D01050E);
	r6 = D(r6, s1_1_0, 0xC2000E02, 0xFAF1CDFF, 0xDEFDF4F2, 0x20FA151F);
	r7 = D(r7, s1_1_0, 0x0BEAF1FF, 0x01EC00F6, 0x265C1F2F, 0xF600EC06);
	r0 = D(r0, s1_1_1, 0xEB0AF705, 0xFBE30309, 0xF5F2F0F9, 0xB27CE704);
	r1 = D(r1, s1_1_1, 0x81E00818, 0x413CFDE6, 0xE0B618F5, 0x250EEFFC);
	r2 = D(r2, s1_1_1, 0x221D3101, 0x31B5E5F7, 0xE5FAFD0E, 0xF811FCEC);
	r3 = D(r3, s1_1_1, 0x44F1010F, 0x17B23312, 0x3516FE11, 0xD00FF0EC);
	r4 = D(r4, s1_1_1, 0xFF080BF4, 0x8130F9C8, 0xEE01FD09, 0x33F306F6);
	r5 = D(r5, s1_1_1, 0x11E3FF1D, 0x11114201, 0x1CEB0EF9, 0x9C06F7DD);
	r6 = D(r6, s1_1_1, 0xAB1DFC04, 0xBFE309FD, 0xDC812A14, 0xFCFDF7FD);
	r7 = D(r7, s1_1_1, 0x3DFE05F9, 0x25B62F17, 0x0C581EE9, 0x47180AF4);
	r0 = D(r0, s1_1_2, 0x0414FD0A, 0xF63422F2, 0xFC28E6F9, 0x07021108);
	r1 = D(r1, s1_1_2, 0xF80BED04, 0xF50B1A01, 0xEDFE0705, 0x160EFCED);
	r2 = D(r2, s1_1_2, 0xFE0F1618, 0x09CE1A1B, 0x1705FF02, 0xE9EEF3F9);
	r3 = D(r3, s1_1_2, 0x00100B05, 0xE8D1F8E8, 0xE7BAE406, 0xE3EE0C0D);
	r4 = D(r4, s1_1_2, 0xFEEBFDF8, 0xD41119F7, 0xEDDBF5F9, 0x10FB25FB);
	r5 = D(r5, s1_1_2, 0xF9EE120C, 0x1C8613F9, 0xE304E61A, 0x00DD00F1);
	r6 = D(r6, s1_1_2, 0xEF0DDD0C, 0x07F3FD02, 0x29460F20, 0x10D1D202);
	r7 = D(r7, s1_1_2, 0x2DFEFB0B, 0x05C00304, 0x112DECF0, 0x0309F707);
	r0 = D(r0, s1_2_0, 0xFFA90FF6, 0x00D4FBE6, 0x08EFFEF7, 0xFF7FFC00);
	r1 = D(r1, s1_2_0, 0x05E3DE38, 0x0CC103E8, 0xD9CDE8EF, 0x0AD1FAF5);
	r2 = D(r2, s1_2_0, 0x04D8F4E6, 0xE8160EFD, 0xFFCD0005, 0x0DEFFE06);
	r3 = D(r3, s1_2_0, 0x0A91F0F0, 0x051507F6, 0xEFBAF20D, 0x10151AFC);
	r4 = D(r4, s1_2_0, 0xE6F9E62B, 0xFC01F61A, 0x10241114, 0x09E506ED);
	r5 = D(r5, s1_2_0, 0x1E0CDEEC, 0xE9D0F4EF, 0xF515140B, 0x203709FF);
	r6 = D(r6, s1_2_0, 0x0B26EDFC, 0x151F12F8, 0xFB870A05, 0xF40AEE0B);
	r7 = D(r7, s1_2_0, 0xEFEF03FD, 0xFE16FB03, 0x2381C404, 0xFF0408E1);
	r0 = D(r0, s1_2_1, 0xFB8AFC09, 0x22E8EA09, 0x1AF5FBE9, 0x0829E1F0);
	r1 = D(r1, s1_2_1, 0x00E002F2, 0x120DDC15, 0x17101CFA, 0xD8EE1718);
	r2 = D(r2, s1_2_1, 0x02E10900, 0x000DFEE7, 0x05CE0DF6, 0x0310F909);
	r3 = D(r3, s1_2_1, 0xFB23E901, 0x161901FF, 0x07D1FD0F, 0x1A29F902);
	r4 = D(r4, s1_2_1, 0x2B14F105, 0x810103DA, 0x02011610, 0xF736FAF0);
	r5 = D(r5, s1_2_1, 0xF5B301FB, 0x0C5504DD, 0xFF0DE0FB, 0xF91D2236);
	r6 = D(r6, s1_2_1, 0x140DEC00, 0xFB1A0804, 0x121114F0, 0x0B15F9FC);
	r7 = D(r7, s1_2_1, 0x0403170A, 0xFF2612EE, 0x0CCC3EF7, 0x1CDEE203);
	r0 = D(r0, s1_2_2, 0xFA2009FA, 0xFADF1AFF, 0x2309F708, 0x061BFA07);
	r1 = D(r1, s1_2_2, 0x04011903, 0xF4FC0E0B, 0x0E2FED16, 0xFB17FE22);
	r2 = D(r2, s1_2_2, 0x0EFDF9F8, 0xFDF8E305, 0x2333FC04, 0xFE0222FC);
	r3 = D(r3, s1_2_2, 0x0FFAE407, 0xF2FFF2F2, 0xF40DF602, 0xE3F00400);
	r4 = D(r4, s1_2_2, 0x10061F07, 0xCDF2FD0C, 0x07CA0903, 0xF500F40D);
	r5 = D(r5, s1_2_2, 0xEDF803E8, 0x0CF417F4, 0xEFFC1105, 0x0021F70D);
	r6 = D(r6, s1_2_2, 0x2F0C1FF2, 0x010B0807, 0x1A81E801, 0x01451CF0);
	r7 = D(r7, s1_2_2, 0x0E1CF1FC, 0x1009ED0A, 0x050FEFE2, 0x111503F8);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0D16FCF0, 0xE7FCEB10, 0xFEED0EFD, 0xEE093EFD);
	r1 = D(r1, s0_0_0, 0xE3DEDAFD, 0x0DF7F8F4, 0xFC0AFC0F, 0x02EFF6FE);
	r2 = D(r2, s0_0_0, 0x0EE4B311, 0x0F121909, 0x01FC0FF2, 0xFB100207);
	r3 = D(r3, s0_0_0, 0xFEFC06F2, 0x0BFAEEFA, 0x051403F7, 0x0A0EE509);
	r4 = D(r4, s0_0_0, 0x02071C22, 0x1A010B11, 0xF6F41002, 0xFDF7F904);
	r5 = D(r5, s0_0_0, 0x210552F7, 0xE70A09E9, 0x08E7F60C, 0x080C0409);
	r6 = D(r6, s0_0_0, 0xFC0CFC23, 0x0FFD0719, 0xF30102F7, 0xFAFCEC0C);
	r7 = D(r7, s0_0_0, 0xFB0B0701, 0x040A0B12, 0xF7F1FF0E, 0x10FF09FF);
	r0 = D(r0, s0_0_1, 0xF805F0F9, 0x03FD0C1E, 0x0607F612, 0x0B070BFF);
	r1 = D(r1, s0_0_1, 0xF6BDF8DB, 0xD20309F8, 0xF1FCF501, 0xED02EE03);
	r2 = D(r2, s0_0_1, 0x02E0E6FE, 0xEEFE0C12, 0x0A020B04, 0xF308F702);
	r3 = D(r3, s0_0_1, 0xED01F7F0, 0x1A000EF2, 0x07F6ED0E, 0x09FDEEE1);
	r4 = D(r4, s0_0_1, 0xF40EEE07, 0x151603E5, 0x1304F41B, 0xFCEFDE02);
	r5 = D(r5, s0_0_1, 0x1AF1F208, 0xF5FBFADB, 0xF81C10E1, 0x0901F3F9);
	r6 = D(r6, s0_0_1, 0xFFF9F3FA, 0x0102F3F4, 0xE8F1FAF2, 0x0AF805EA);
	r7 = D(r7, s0_0_1, 0x12F8EBEF, 0xEEF80DFE, 0xF2D4BCD0, 0x00FB0706);
	r0 = D(r0, s0_0_2, 0x051B0308, 0x0E1DF623, 0xFB09120E, 0xF9120501);
	r1 = D(r1, s0_0_2, 0x10DDDB14, 0xFF0F050A, 0x0B020808, 0x0BF2FB0A);
	r2 = D(r2, s0_0_2, 0xE70EDCFA, 0xED072302, 0xE70B090C, 0x0208FEF8);
	r3 = D(r3, s0_0_2, 0x0AEF04FA, 0x150AEA1C, 0x051507ED, 0x0815DA06);
	r4 = D(r4, s0_0_2, 0x1114D904, 0xFA01080B, 0xF210FB0F, 0xFEDB0303);
	r5 = D(r5, s0_0_2, 0x0BEB4004, 0x051009D8, 0xF201040A, 0x011205FA);
	r6 = D(r6, s0_0_2, 0x0A12F310, 0xFAF10411, 0x130A0B04, 0x01EDEC06);
	r7 = D(r7, s0_0_2, 0xFC030F10, 0xF50201FF, 0xD4A134F1, 0xF6000202);
	r0 = D(r0, s0_1_0, 0x0A00080F, 0x0B07090A, 0x0603F7F4, 0xFEF57FEF);
	r1 = D(r1, s0_1_0, 0xD3D77F11, 0x1C0011E8, 0x06100823, 0xFAF8F5FB);
	r2 = D(r2, s0_1_0, 0x16F7A4FF, 0x0302E50F, 0xFD080104, 0x10F02613);
	r3 = D(r3, s0_1_0, 0x1507EAF9, 0xF9EB00FC, 0xE5F6F20B, 0x04F61DF6);
	r4 = D(r4, s0_1_0, 0x11F9F928, 0x03121904, 0xFD03F926, 0x11013002);
	r5 = D(r5, s0_1_0, 0x02EC1EF6, 0x08F819F3, 0xFEDA081D, 0xF1EF10FA);
	r6 = D(r6, s0_1_0, 0x17FC00CD, 0x0D0C1DE5, 0x05F604EA, 0xEEF5190A);
	r7 = D(r7, s0_1_0, 0x0B100E14, 0x0608F703, 0x04D65CFC, 0x1000E50E);
	r0 = D(r0, s0_1_1, 0x0119FFF8, 0x1EE414FD, 0xFE05E6FD, 0x160445F8);
	r1 = D(r1, s0_1_1, 0x18DC3E06, 0x0106EFEC, 0xF3F00108, 0x010400EB);
	r2 = D(r2, s0_1_1, 0x0FF58E0C, 0xFF16EEF2, 0x18F2EB1A, 0x07FFFDFC);
	r3 = D(r3, s0_1_1, 0x090CEE17, 0x04F90AFD, 0x16EAF5F8, 0x02F40D1C);
	r4 = D(r4, s0_1_1, 0x31FD0CEB, 0xD609FFF8, 0xF204FB1A, 0x0201B30F);
	r5 = D(r5, s0_1_1, 0x0ED9D2E7, 0xDBFFD22D, 0x45110FE9, 0xFB03F506);
	r6 = D(r6, s0_1_1, 0xFFEE29D6, 0xFE17DFD8, 0x000017F5, 0x13FEE2F8);
	r7 = D(r7, s0_1_1, 0x010D0E02, 0xECF6FA2D, 0x1CEF6813, 0xD802F1F5);
	r0 = D(r0, s0_1_2, 0xF00F0A07, 0xF0EDFBF9, 0x062D0F13, 0xFEF517FB);
	r1 = D(r1, s0_1_2, 0x0AF904FE, 0xE1FAF309, 0xFD1506FD, 0x021CFAF3);
	r2 = D(r2, s0_1_2, 0x03F5E502, 0xF6FAF200, 0xE7090308, 0xFE0C04FA);
	r3 = D(r3, s0_1_2, 0xF00D0E0A, 0xCF0312F7, 0x12010201, 0x02020EEB);
	r4 = D(r4, s0_1_2, 0xF5030605, 0xFC001004, 0x1AFE1002, 0xFCEAE6E8);
	r5 = D(r5, s0_1_2, 0xCC0E04EC, 0x111DEF09, 0x040E06FF, 0x18131010);
	r6 = D(r6, s0_1_2, 0xF90F00FF, 0xFDF1FDFE, 0x0F0CEF22, 0xEE022003);
	r7 = D(r7, s0_1_2, 0xFADAFE04, 0x130EFAFB, 0x0EF918BC, 0xF7FDFAFE);
	r0 = D(r0, s0_2_0, 0x0BFE0BF5, 0x0906F306, 0xF3E1F415, 0x0CFB3B11);
	r1 = D(r1, s0_2_0, 0x1BEFB9E3, 0xDBF209F3, 0x00FF0A2E, 0x030FFFE8);
	r2 = D(r2, s0_2_0, 0xDFF05FCF, 0x0DFF0303, 0xFA11F000, 0xF4EEF123);
	r3 = D(r3, s0_2_0, 0x01010B05, 0x07050317, 0xEC0C0728, 0x020321F2);
	r4 = D(r4, s0_2_0, 0xE50CFD18, 0x0EFDF9E5, 0x1300F00E, 0xE10AE717);
	r5 = D(r5, s0_2_0, 0x08F4D903, 0x08F723FF, 0xEBF2E719, 0x040003F3);
	r6 = D(r6, s0_2_0, 0xF9FF0CFE, 0x01060CCA, 0xF6F0F3FA, 0x040D0ADC);
	r7 = D(r7, s0_2_0, 0xFC02F3FF, 0x14F60B0A, 0x04F013EA, 0xF0101B02);
	r0 = D(r0, s0_2_1, 0xDDF5F9FE, 0x00F7F2FE, 0x02020D00, 0xF1FB1502);
	r1 = D(r1, s0_2_1, 0xDEFDCB17, 0x48F81105, 0xFAF6F6F0, 0x050C2D9C);
	r2 = D(r2, s0_2_1, 0x11DD1DDD, 0x03F51509, 0x06F614FD, 0x01FDF428);
	r3 = D(r3, s0_2_1, 0x0E11EDF2, 0xEEE8E602, 0xFAE8080B, 0xF1E8F915);
	r4 = D(r4, s0_2_1, 0xFCF80F00, 0xF7F9D806, 0xF0FD1216, 0x18102AFC);
	r5 = D(r5, s0_2_1, 0xEBC5C41A, 0x17F604EE, 0xCA09F2E4, 0xE6E6EF09);
	r6 = D(r6, s0_2_1, 0xF3EFEE1C, 0xFEFDF7FD, 0xF5010BEB, 0x03E1CEEB);
	r7 = D(r7, s0_2_1, 0x06FB01F8, 0x0A150BFF, 0x07D2EBFA, 0x280D15F2);
	r0 = D(r0, s0_2_2, 0x020FFE03, 0xD7FB1502, 0x0B12050A, 0x0106F2FC);
	r1 = D(r1, s0_2_2, 0x08EC1812, 0xF2F50CFD, 0x18F6F50B, 0x02F70ADF);
	r2 = D(r2, s0_2_2, 0x00DBDF00, 0x05DFE4F3, 0x040E0202, 0x0BF70208);
	r3 = D(r3, s0_2_2, 0xF1F1FE08, 0x0D140FFE, 0xF9FEFE00, 0xEC080408);
	r4 = D(r4, s0_2_2, 0xEFE702FC, 0xF2F2F80A, 0xFBEDEAF8, 0xF6FDC6EA);
	r5 = D(r5, s0_2_2, 0xF616F9F1, 0x03061B03, 0x0A09FE00, 0x0204F9FA);
	r6 = D(r6, s0_2_2, 0xFC07080A, 0xEE0E0CFF, 0x0B18EC13, 0x0512F102);
	r7 = D(r7, s0_2_2, 0xEEF61403, 0xEFF3F50A, 0xE607DDF4, 0xFAF8FE02);
	r0 = D(r0, s1_0_0, 0xF704EBE5, 0xE4EB0313, 0xFC10D1E1, 0xF90BF401);
	r1 = D(r1, s1_0_0, 0x06F2062F, 0x0CEB1B12, 0x0602F101, 0xDE0BEB04);
	r2 = D(r2, s1_0_0, 0x0D040A28, 0xF0000C19, 0xFFFD0119, 0xF8F705E5);
	r3 = D(r3, s1_0_0, 0x26092B15, 0xE502EEFE, 0xF8FDF4EB, 0xF318F50A);
	r4 = D(r4, s1_0_0, 0x0F1BFF04, 0x0303FCD3, 0xFDEEF3F7, 0xFCF2DC06);
	r5 = D(r5, s1_0_0, 0xE6EF00DA, 0x13FBF820, 0xF605DA01, 0xF416F9FE);
	r6 = D(r6, s1_0_0, 0xEBFCF1FE, 0xFA0EF3E2, 0x13FA09F7, 0xE2F8FC24);
	r7 = D(r7, s1_0_0, 0x01F10C07, 0xF80E08FD, 0x1CDE09E7, 0xFCF7F0F0);
	r0 = D(r0, s1_0_1, 0xF70B18DC, 0xDCFE9C1B, 0xF705FBFF, 0xFFE9E5A0);
	r1 = D(r1, s1_0_1, 0xFE06FD19, 0x0FFD1AF9, 0xE9FF031C, 0x06180413);
	r2 = D(r2, s1_0_1, 0xD008F222, 0xFA0C1231, 0xEAFBF72A, 0xF9010718);
	r3 = D(r3, s1_0_1, 0x1BF7BE81, 0xFC05E104, 0xFEF408FB, 0x0E14012D);
	r4 = D(r4, s1_0_1, 0x250620FB, 0x090115D3, 0x08F003CD, 0x08173A1B);
	r5 = D(r5, s1_0_1, 0xECD8F911, 0xF0EDF72A, 0x01FDE9E0, 0x180CF3D7);
	r6 = D(r6, s1_0_1, 0xFEB90616, 0xD90C06C0, 0xF4D30CC9, 0xF61A1613);
	r7 = D(r7, s1_0_1, 0xF806E70E, 0x11ECFE06, 0xED1526C8, 0xEF06FB26);
	r0 = D(r0, s1_0_2, 0x0DF5F081, 0x0AFAF60C, 0xF0F6DABD, 0x07FFFD46);
	r1 = D(r1, s1_0_2, 0x05FAE731, 0xDFFC1015, 0x25F918A5, 0x011A10DC);
	r2 = D(r2, s1_0_2, 0xF5DE1723, 0x0A1D140D, 0x0AF80BF5, 0x06070708);
	r3 = D(r3, s1_0_2, 0xF505F906, 0x04DB21EE, 0x0EF8E451, 0xFC0A02C6);
	r4 = D(r4, s1_0_2, 0xE8FF19D3, 0xEC192BEE, 0xE8E9F3F7, 0x10060467);
	r5 = D(r5, s1_0_2, 0xD4E928D2, 0x1706B0ED, 0xF01909D8, 0x1F05F8F2);
	r6 = D(r6, s1_0_2, 0x09F40D02, 0xFC141BBB, 0xFD13D102, 0x12EA1A0E);
	r7 = D(r7, s1_0_2, 0xFFFF0F19, 0x0602E1FD, 0xF8F211CE, 0xFFFFFCDE);
	r0 = D(r0, s1_1_0, 0x03FAFB06, 0xF1F53BF4, 0xE7EE2105, 0xF6F40A0E);
	r1 = D(r1, s1_1_0, 0xD0FEB9E6, 0xF00E0506, 0x07FF1A0E, 0x0106FEF3);
	r2 = D(r2, s1_1_0, 0xF3151EEF, 0xD51213EA, 0xFAF00B06, 0xF20AF92F);
	r3 = D(r3, s1_1_0, 0x000FF049, 0x02F90106, 0x0004EF04, 0x1E18EDF5);
	r4 = D(r4, s1_1_0, 0x06AF3527, 0xE3FFF9DB, 0x2AFFFF0B, 0x0FF80800);
	r5 = D(r5, s1_1_0, 0xF51E1105, 0x0712E8F1, 0xF918FAF5, 0xF9EBFD07);
	r6 = D(r6, s1_1_0, 0x1DE80D03, 0x2109F9FD, 0xF9F3E5D7, 0xF9EF0DF6);
	r7 = D(r7, s1_1_0, 0xF4060701, 0x0D0B0D09, 0x231A0A0C, 0x01FDFC07);
	r0 = D(r0, s1_1_1, 0x0A08FBFD, 0xDA16CD08, 0xDCE422FC, 0xEFFA18FB);
	r1 = D(r1, s1_1_1, 0x0FEB0032, 0x00140EFB, 0x1D14FDDF, 0x10E71104);
	r2 = D(r2, s1_1_1, 0xE8042213, 0x0311E4E0, 0xF0090438, 0x1214F5F8);
	r3 = D(r3, s1_1_1, 0xDFFB0108, 0x00D6F505, 0xFB0AF7F5, 0xF80700F8);
	r4 = D(r4, s1_1_1, 0x0BCA18EC, 0xF7C97FF6, 0xF00219E5, 0x1015CA0B);
	r5 = D(r5, s1_1_1, 0x11F600D5, 0xE60AF51C, 0x230C1625, 0x0CC6D00F);
	r6 = D(r6, s1_1_1, 0x3F81FBF6, 0xF9F7120C, 0xFAC2E835, 0x10FD0C2D);
	r7 = D(r7, s1_1_1, 0xF6040B20, 0x1A01F816, 0x03212C7B, 0x041E3312);
	r0 = D(r0, s1_1_2, 0xED04F91C, 0x42DE150B, 0x2416DAA5, 0x000FF93D);
	r1 = D(r1, s1_1_2, 0x2A1AF207, 0xFD13FEE5, 0x030DDF2A, 0xE2B7B9BE);
	r2 = D(r2, s1_1_2, 0x81E42513, 0xFA11F0D6, 0x0D0EEEE3, 0xF602FD06);
	r3 = D(r3, s1_1_2, 0xF8E81527, 0xF5D60B13, 0x24F9EDFF, 0x1C0F3D0B);
	r4 = D(r4, s1_1_2, 0x0FF9F109, 0xF51309CA, 0x230C06DA, 0x0EDBF525);
	r5 = D(r5, s1_1_2, 0x0FF00700, 0x1EF103B4, 0xF00F11DC, 0x0C15DDE6);
	r6 = D(r6, s1_1_2, 0x15E3F803, 0xDC00EAF3, 0x0EF5F5E0, 0x01FC2AD2);
	r7 = D(r7, s1_1_2, 0xFB0AFB15, 0xEBF305EF, 0x05E5FB07, 0x030D02EF);
	r0 = D(r0, s1_2_0, 0xF1F50605, 0xDFEAF5FE, 0x1404EFFE, 0xEB11FFFC);
	r1 = D(r1, s1_2_0, 0xD4E629FB, 0x4F25EEE2, 0xFF0AFC04, 0xF4FA0002);
	r2 = D(r2, s1_2_0, 0x060B0B06, 0x1EED16DD, 0xF201F912, 0xF7040005);
	r3 = D(r3, s1_2_0, 0xF81C06EF, 0xD812F70F, 0x1306F6E0, 0xD31A1327);
	r4 = D(r4, s1_2_0, 0xE89B0E07, 0x07FEF116, 0xF4FBFA03, 0xDC0310FA);
	r5 = D(r5, s1_2_0, 0x22E7000D, 0xFDF8F207, 0xF6040706, 0x3D0D0A0A);
	r6 = D(r6, s1_2_0, 0xFAE800F9, 0x0206040A, 0xF123FF10, 0x08FA0900);
	r7 = D(r7, s1_2_0, 0x0006F800, 0xEE0BEF05, 0x0E06E311, 0xF60408F9);
	r0 = D(r0, s1_2_1, 0x00150EF1, 0x17F7E309, 0x0014FA26, 0x69FB071F);
	r1 = D(r1, s1_2_1, 0x59FAE6FB, 0xE6F9E4FD, 0x2408DE18, 0xF4F510F3);
	r2 = D(r2, s1_2_1, 0x0A0C071C, 0x17F6FC2C, 0x2D08EE18, 0x36FE0107);
	r3 = D(r3, s1_2_1, 0x1AECF630, 0xFB15FBED, 0xCDFDF5E8, 0x2FFDEB04);
	r4 = D(r4, s1_2_1, 0x0CE8C23B, 0x7FEA43FF, 0x3F0B06DC, 0x1FF207DD);
	r5 = D(r5, s1_2_1, 0x0CF9DFF4, 0xD5FEFF1A, 0x2101FF05, 0x1D08FA14);
	r6 = D(r6, s1_2_1, 0x7FE7ED1A, 0x1BF724EF, 0x2D26D617, 0xF0F1D70D);
	r7 = D(r7, s1_2_1, 0xE3051E1E, 0xF900000B, 0xDA10F512, 0xDD12FD03);
	r0 = D(r0, s1_2_2, 0x090100ED, 0xE2DF1719, 0xE31907F8, 0xF308F2E9);
	r1 = D(r1, s1_2_2, 0x70D10215, 0xE209F31B, 0xF308EEE8, 0xDA050FFF);
	r2 = D(r2, s1_2_2, 0xE412E70C, 0xCBF6FD81, 0xEC07F9F7, 0x35F2FF17);
	r3 = D(r3, s1_2_2, 0xFDFBF20E, 0x2F0AFE05, 0xACEF09FA, 0x4EEEFEF2);
	r4 = D(r4, s1_2_2, 0x0E2523E5, 0x7FEF4DCC, 0x210E030F, 0x070D12EE);
	r5 = D(r5, s1_2_2, 0x2DCB1925, 0x2CEC19E2, 0xD600F908, 0x54031A20);
	r6 = D(r6, s1_2_2, 0x81061416, 0xBB00F1F9, 0xA8FF00DC, 0xEEFA07FA);
	r7 = D(r7, s1_2_2, 0xF9110BF9, 0xFEF111FF, 0x28FB1D2E, 0xC706F803);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(2.754e-03, 1.515e-02, 4.704e-02, -2.774e-01);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(1.288e-02, 3.051e-03, 8.179e-03, 2.974e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-1.557e-02, -9.140e-04, -4.592e-03, 6.188e-03);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(3.775e-03, -3.334e-03, 5.531e-03, 3.858e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(2.128e-03, 4.425e-02, 3.301e-03, 1.028e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(2.313e-02, 1.254e-02, 1.288e-02, 1.412e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(5.334e-02, 2.423e-02, -5.628e-03, 5.142e-03);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(1.418e-02, 3.864e-02, -4.677e-03, 1.317e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-BILINEAR-MPV-NVL-conv2
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x27FB0605, 0x16010CFB, 0xDE0C02DF, 0xFDFB0F1B);
	r1 = D(r1, s0_0_0, 0x0EF114FF, 0xF5FEF4F7, 0x9DF81A07, 0x000BECFE);
	r2 = D(r2, s0_0_0, 0xE900D7EE, 0xF6F413F9, 0xFAE806FD, 0xEBF60124);
	r3 = D(r3, s0_0_0, 0x07ED1EFF, 0xF6FF2309, 0xF0F2F3F6, 0x23031A0A);
	r4 = D(r4, s0_0_0, 0xF308FF01, 0x1200180B, 0xEC0FEEF1, 0x091114FC);
	r5 = D(r5, s0_0_0, 0xED11F5F2, 0xE90EF508, 0xC1E912F5, 0x1E0B0708);
	r6 = D(r6, s0_0_0, 0x06090AF8, 0x2B01F8FB, 0x13BDFAFC, 0x0C1600FB);
	r7 = D(r7, s0_0_0, 0xE0090603, 0xE70EBE01, 0xC113F70D, 0x0EF2F4FB);
	r0 = D(r0, s0_0_1, 0x22F60C04, 0x3B0D04FE, 0xBCF315FD, 0x27E70C06);
	r1 = D(r1, s0_0_1, 0x44F30C15, 0x0BF20B0C, 0x4DEFFEFA, 0xEA05FAFD);
	r2 = D(r2, s0_0_1, 0x32F90B0B, 0x1F00070E, 0x07EA17F6, 0x2515F70A);
	r3 = D(r3, s0_0_1, 0x3D02080D, 0x2A15CE0C, 0xFC0605F8, 0x52C819DB);
	r4 = D(r4, s0_0_1, 0x24020A1E, 0x3BEB0921, 0xBFFEF9ED, 0x160CF412);
	r5 = D(r5, s0_0_1, 0xB70EF3F4, 0x2402E7F6, 0x3DF600FF, 0xF7FC00ED);
	r6 = D(r6, s0_0_1, 0x10F8FF02, 0xBB171C1F, 0x68D8D507, 0x0EF71CD8);
	r7 = D(r7, s0_0_1, 0xA10D1200, 0x21F5F8FB, 0x23F9EB04, 0x3CB90BE6);
	r0 = D(r0, s0_0_2, 0x06FEFD03, 0x13FEFDEC, 0x0B0C0BF1, 0x0EEAD000);
	r1 = D(r1, s0_0_2, 0x3F0601F7, 0xE8001600, 0x2C001E11, 0x24F6F4F2);
	r2 = D(r2, s0_0_2, 0xDEF2E8E2, 0x14F500F1, 0xD7E31EF8, 0xEDF82C07);
	r3 = D(r3, s0_0_2, 0xBFF8F3EC, 0xEB0C30C4, 0xFFFB0000, 0x05FCFF02);
	r4 = D(r4, s0_0_2, 0x1EFF090E, 0x37F3FDF4, 0x07F4F803, 0xF7FBF300);
	r5 = D(r5, s0_0_2, 0xF0EAEC20, 0x03050F16, 0x0C1C0D09, 0x21001114);
	r6 = D(r6, s0_0_2, 0xEBF316F8, 0x0002F2F7, 0x01DE09EC, 0xE704E804);
	r7 = D(r7, s0_0_2, 0x9713130C, 0x04FB310B, 0x250EE906, 0x0AE70DE9);
	r0 = D(r0, s0_1_0, 0xE4F8F100, 0x14F3EB08, 0xAA0F15F0, 0x28EFF1EF);
	r1 = D(r1, s0_1_0, 0x0AFD0202, 0x17EEE5FC, 0xCC110DF1, 0xB7F704F7);
	r2 = D(r2, s0_1_0, 0xF5060C15, 0xCD0B1AF7, 0xF520CC0B, 0x21FE050A);
	r3 = D(r3, s0_1_0, 0x4009FE0D, 0xC3F7DFFF, 0xD911F1EE, 0xF317F101);
	r4 = D(r4, s0_1_0, 0x5E01E9F4, 0xD0F2010C, 0xEBF0F9F8, 0x28FD0D09);
	r5 = D(r5, s0_1_0, 0xD3111BF5, 0xFD021903, 0xFD030A05, 0xE6DF1104);
	r6 = D(r6, s0_1_0, 0x3C0C0012, 0xFC0D06FF, 0xA4E42614, 0x2CEE0D05);
	r7 = D(r7, s0_1_0, 0x0DF302F4, 0x2D001C0C, 0x4F06E706, 0x211C14F8);
	r0 = D(r0, s0_1_1, 0x4CF8F70B, 0xB2E7F6F4, 0x23FD2810, 0xBFEDDCE6);
	r1 = D(r1, s0_1_1, 0xD1060200, 0xA8000F01, 0xEFE808F7, 0xA4130AF5);
	r2 = D(r2, s0_1_1, 0x17F6EE03, 0x18F81613, 0x29010CF3, 0x2108F00A);
	r3 = D(r3, s0_1_1, 0xEC120AFE, 0x89D6F904, 0x11F70C0C, 0x81FDFCD0);
	r4 = D(r4, s0_1_1, 0x30F5F811, 0x1909FFF7, 0x81F12101, 0x44F8E809);
	r5 = D(r5, s0_1_1, 0x2DFD0105, 0x4402F00B, 0x23F417FB, 0x11FA0308);
	r6 = D(r6, s0_1_1, 0xA5F60AFD, 0xFB1003EF, 0x9432FAF0, 0x4E0BF80B);
	r7 = D(r7, s0_1_1, 0xBE0EFB12, 0x08023203, 0xCCF211F2, 0xC80913E0);
	r0 = D(r0, s0_1_2, 0x2909F911, 0xF908E0EB, 0x200C080C, 0xBBFDF805);
	r1 = D(r1, s0_1_2, 0x230A01F5, 0xF902F308, 0x0213E60B, 0xDE000000);
	r2 = D(r2, s0_1_2, 0x0AFC1208, 0xDF0C0BFB, 0x0E221712, 0x190DF60E);
	r3 = D(r3, s0_1_2, 0xBAFE160E, 0xA8D6EFE7, 0x0200F901, 0x8106FCA9);
	r4 = D(r4, s0_1_2, 0x1B0AFF1D, 0xB1172B07, 0xAAF810FA, 0x27F808FC);
	r5 = D(r5, s0_1_2, 0xE1E1FD0F, 0xD5E2F8E8, 0x23FF0DEF, 0x0FF9F5ED);
	r6 = D(r6, s0_1_2, 0x0F0D1214, 0xBA021901, 0x560C00E0, 0x0D06F307);
	r7 = D(r7, s0_1_2, 0xC4F9FC16, 0x7F1F0713, 0xD7030DF3, 0xE9F7ECE2);
	r0 = D(r0, s0_2_0, 0xDF0DF8F3, 0x031508FB, 0x0CFAF803, 0xC1020308);
	r1 = D(r1, s0_2_0, 0x02040706, 0xDF000506, 0x02F3FF04, 0xF7FF05FA);
	r2 = D(r2, s0_2_0, 0xF403FF0D, 0xEEFE0701, 0x1F1901FF, 0x07080604);
	r3 = D(r3, s0_2_0, 0x17FFFFFD, 0xFDE4FCFB, 0x0E03EF19, 0xE700E905);
	r4 = D(r4, s0_2_0, 0x1BFF0808, 0x05F5EFDC, 0xF80C1A0D, 0x270B0505);
	r5 = D(r5, s0_2_0, 0xEFEFF90B, 0xEB01FE04, 0x061CFF0B, 0x12FDFFF7);
	r6 = D(r6, s0_2_0, 0x40F010FA, 0xDF070DF8, 0x01D3D20B, 0xFDF6F007);
	r7 = D(r7, s0_2_0, 0xB0F9FA01, 0x23F310D2, 0xF1FEE710, 0x0909FBE7);
	r0 = D(r0, s0_2_1, 0xF11915F1, 0x2AF31016, 0x0DF4050F, 0xF725E8FF);
	r1 = D(r1, s0_2_1, 0xDD08050F, 0xF10DFC13, 0xE71EF804, 0xAC090D00);
	r2 = D(r2, s0_2_1, 0xFEECE407, 0xF1090A06, 0x09E3E5EE, 0x000CE3FB);
	r3 = D(r3, s0_2_1, 0xEC13F8EE, 0x355ACADC, 0x530B0D21, 0x62BFFAE5);
	r4 = D(r4, s0_2_1, 0x2E0EFDF7, 0xEB260F00, 0xB8120F0C, 0x43200709);
	r5 = D(r5, s0_2_1, 0x5D0FF7F8, 0xEAFBED05, 0xD012EFF8, 0x22F8EB19);
	r6 = D(r6, s0_2_1, 0x1105F4FE, 0xFFF8EBE3, 0xE9DE380B, 0x130F04FF);
	r7 = D(r7, s0_2_1, 0xAAF91006, 0x811CD3C4, 0x0719E2F5, 0xD404EFF2);
	r0 = D(r0, s0_2_2, 0x06020BFA, 0x0015F0F9, 0x2408F31A, 0x150018FC);
	r1 = D(r1, s0_2_2, 0x18EF06EA, 0x0C0E0AEE, 0xFE08380A, 0x02F6F303);
	r2 = D(r2, s0_2_2, 0x16FEFBF7, 0xEF08FFF6, 0xEB10140F, 0x23E813FC);
	r3 = D(r3, s0_2_2, 0xEB110CF9, 0x81E613F3, 0x0FF7FF09, 0xEEF9F1EB);
	r4 = D(r4, s0_2_2, 0x27FDF808, 0x1FEB0F0B, 0xED0FFBFA, 0x30F01915);
	r5 = D(r5, s0_2_2, 0xFE16FC05, 0x43012AEE, 0xD10A0207, 0x151BF115);
	r6 = D(r6, s0_2_2, 0x04FD0808, 0x1D03FD12, 0xF30235D2, 0x0804F4F9);
	r7 = D(r7, s0_2_2, 0xC1F51210, 0xCCCFF2D1, 0xFA03FEF2, 0xE7EBF10E);
	r0 = D(r0, s1_0_0, 0x0AFF0000, 0xF40301F8, 0x14FAFBFF, 0xF008950E);
	r1 = D(r1, s1_0_0, 0xF305060D, 0x021204FC, 0xF3EB0314, 0x06FEFDFC);
	r2 = D(r2, s1_0_0, 0x001201F9, 0xF6FCF5FB, 0x231D32F1, 0xF6FFF704);
	r3 = D(r3, s1_0_0, 0x081BFF10, 0x2CF4E007, 0x10FBFDFB, 0xAEFFFEDC);
	r4 = D(r4, s1_0_0, 0xF8FE13E9, 0x0406E400, 0xFDEDEDF7, 0x0B10E607);
	r5 = D(r5, s1_0_0, 0x05FFE9FD, 0x020AF800, 0xF6061511, 0x040FEAFB);
	r6 = D(r6, s1_0_0, 0x0503FF02, 0x15E4EEFE, 0xE7DE03FA, 0xFC120205);
	r7 = D(r7, s1_0_0, 0x08F3FBFC, 0x021018D6, 0x0ED01DE1, 0x1BEC03F0);
	r0 = D(r0, s1_0_1, 0xF00827ED, 0x040A1008, 0x0CBCEC11, 0x31150ADF);
	r1 = D(r1, s1_0_1, 0xEB160925, 0x0200D617, 0xFCCF0D24, 0x050AFF08);
	r2 = D(r2, s1_0_1, 0xFC1A06F1, 0x10F605FB, 0xFAEE150D, 0xE6F6DF29);
	r3 = D(r3, s1_0_1, 0xDEF7CFCD, 0x02FFF212, 0x03040906, 0xE606F540);
	r4 = D(r4, s1_0_1, 0xF0FDF6DC, 0x06E0110D, 0x04F32703, 0x0806F80E);
	r5 = D(r5, s1_0_1, 0x04000302, 0xFEF3061A, 0x00D1F02D, 0xF10AF427);
	r6 = D(r6, s1_0_1, 0x1E0AFFF3, 0xF5E70C0D, 0x0400FEE4, 0xE5CD02BA);
	r7 = D(r7, s1_0_1, 0xF00F02DF, 0x080513F7, 0x0418E8EE, 0xE4F8FE0A);
	r0 = D(r0, s1_0_2, 0xFEF4FFF1, 0x06FB07FD, 0xE8F8E232, 0x01FD28F2);
	r1 = D(r1, s1_0_2, 0xF7FF0BF4, 0x120BF217, 0xF51116DD, 0xFF0104F6);
	r2 = D(r2, s1_0_2, 0x1B1111EA, 0x08F9F607, 0x01D6E325, 0xF2EDF306);
	r3 = D(r3, s1_0_2, 0xFDF8D402, 0x2008DD1D, 0x09FCFC00, 0x02D1FDD6);
	r4 = D(r4, s1_0_2, 0xF7F4000D, 0xF4DCFCE9, 0x03F4150F, 0x03EEF00F);
	r5 = D(r5, s1_0_2, 0x20E81EF6, 0xF2F8EEF6, 0xDED6DE38, 0xF003FC0E);
	r6 = D(r6, s1_0_2, 0x07F50EF6, 0xEEE30805, 0x08DF091A, 0xF0FCFB18);
	r7 = D(r7, s1_0_2, 0xFAF6F926, 0x26D6D41F, 0xFFF007FF, 0xE911FEFA);
	r0 = D(r0, s1_1_0, 0xF3FF0401, 0xE31A0C0A, 0x17EDF101, 0x14F3F7E3);
	r1 = D(r1, s1_1_0, 0xFE0200F3, 0x01F9F005, 0xFF0009F2, 0x01FE0311);
	r2 = D(r2, s1_1_0, 0x030603E6, 0xFA1101E9, 0xCE082908, 0xE6070CE4);
	r3 = D(r3, s1_1_0, 0x0300030D, 0xFEFDF605, 0x21FB0600, 0xF0F90A0E);
	r4 = D(r4, s1_1_0, 0x02040F04, 0x15151919, 0xE908F5F6, 0x010B0006);
	r5 = D(r5, s1_1_0, 0x0108EB04, 0xF810F30F, 0xD90B050E, 0xE4F2FF05);
	r6 = D(r6, s1_1_0, 0x0AFA01FA, 0x05F40F06, 0xE92A2709, 0x0302F804);
	r7 = D(r7, s1_1_0, 0xE9EA10EE, 0x24FE1F02, 0x0A09020A, 0x15F10FDB);
	r0 = D(r0, s1_1_1, 0x090AF832, 0x0700100E, 0x01E80CF5, 0x0F0CF0AA);
	r1 = D(r1, s1_1_1, 0xF50D0C1C, 0xF903F906, 0xF70AC1F4, 0x020C0423);
	r2 = D(r2, s1_1_1, 0x092309E4, 0x010CF31E, 0xE4EDEDCA, 0x0303E007);
	r3 = D(r3, s1_1_1, 0x060CFB09, 0xC60F1F2D, 0x0EFF09ED, 0xFA1B18D7);
	r4 = D(r4, s1_1_1, 0xEA0407DB, 0x070DF015, 0xFB01F201, 0x02011305);
	r5 = D(r5, s1_1_1, 0x0EFDEAEB, 0x0B1108FF, 0xB504010C, 0x10FC0312);
	r6 = D(r6, s1_1_1, 0x0C0E160D, 0x1FFB04F8, 0xF70A2E00, 0xFEEF020A);
	r7 = D(r7, s1_1_1, 0x021F0AEB, 0x1A320923, 0xFE130F29, 0xFAEB12F4);
	r0 = D(r0, s1_1_2, 0x0406FB04, 0xEDF70D1B, 0xE90E2708, 0x15E1060D);
	r1 = D(r1, s1_1_2, 0x0AFBEBF1, 0xFEF313F3, 0xFDFCD6FC, 0xFE040828);
	r2 = D(r2, s1_1_2, 0x010109CC, 0x10000DFF, 0xEBDBE630, 0xEFF8F6E3);
	r3 = D(r3, s1_1_2, 0x020FFEDE, 0x000E294C, 0xF9040BF0, 0xE301E123);
	r4 = D(r4, s1_1_2, 0x1510F1F9, 0x0CFCFDF5, 0x0D0421E8, 0x0E0807EA);
	r5 = D(r5, s1_1_2, 0x00F4DB2C, 0x12E205FC, 0xD2E11A0A, 0x2607120C);
	r6 = D(r6, s1_1_2, 0x0200F0ED, 0xFB0B20FA, 0x2E053906, 0xEF0600C8);
	r7 = D(r7, s1_1_2, 0xE80AE9EE, 0xE8E600FC, 0x080BE508, 0x101A2DE5);
	r0 = D(r0, s1_2_0, 0xF0100FF9, 0x0A1102F5, 0xF2FBFDEE, 0xF00E0C18);
	r1 = D(r1, s1_2_0, 0x050002FC, 0x01030706, 0x14F4F3EE, 0x0A1008F7);
	r2 = D(r2, s1_2_0, 0x10F1F4EF, 0x12F8F2FA, 0xF507FB11, 0x0E0BFDF1);
	r3 = D(r3, s1_2_0, 0xF0000209, 0x05F6F602, 0x0F01F700, 0xF7FB08F6);
	r4 = D(r4, s1_2_0, 0x0909FFFD, 0x0C0A06F5, 0x0A08F0EE, 0x170F11FA);
	r5 = D(r5, s1_2_0, 0xFE02F40A, 0xFF07FBF7, 0xE30A04E7, 0xF9091506);
	r6 = D(r6, s1_2_0, 0xFFF1F7FD, 0x05F8F60C, 0xBEE1F9FC, 0x05FEF609);
	r7 = D(r7, s1_2_0, 0x1500FE02, 0xBEF5F825, 0xEEF0F406, 0xF71EF237);
	r0 = D(r0, s1_2_1, 0xF814EF0A, 0xE90F1301, 0xEDF713EA, 0x09FDE7FA);
	r1 = D(r1, s1_2_1, 0x04FE0C0C, 0xF6FB00F9, 0xEC0BEDF0, 0xEF0E01FE);
	r2 = D(r2, s1_2_1, 0xF20C0FEB, 0xF80803FF, 0x0CFBFEFF, 0xFAE6FF06);
	r3 = D(r3, s1_2_1, 0x10F201E2, 0xB2E81425, 0x080A0CF9, 0xF0E7F306);
	r4 = D(r4, s1_2_1, 0x02FBFBF9, 0xF71018F7, 0x16EEEC07, 0x05FB16F9);
	r5 = D(r5, s1_2_1, 0x0EEEE50D, 0xF9FCFEFE, 0xC6E30419, 0xF4FDEA18);
	r6 = D(r6, s1_2_1, 0xECFD02F3, 0x0100FB0F, 0xEE01F8E4, 0x03E7EEED);
	r7 = D(r7, s1_2_1, 0x0D010113, 0xEFF9F3F0, 0x0FF9FF08, 0xFA0EFDFA);
	r0 = D(r0, s1_2_2, 0xFA14F9FB, 0xFCFE13EE, 0x05092DF3, 0x0E02F800);
	r1 = D(r1, s1_2_2, 0x0604040B, 0x09050F0F, 0xF01B08EB, 0x030A0510);
	r2 = D(r2, s1_2_2, 0x020BF8FF, 0x0102FB03, 0x011EEFFF, 0xF11E0BBA);
	r3 = D(r3, s1_2_2, 0xFA041807, 0x0AD3E628, 0xFE040CF8, 0x0A172512);
	r4 = D(r4, s1_2_2, 0x00000A24, 0xFA00F6EB, 0xFC0604DC, 0x001019FA);
	r5 = D(r5, s1_2_2, 0x0907F2DF, 0x070BF206, 0xE71AFC03, 0x0A0302DE);
	r6 = D(r6, s1_2_2, 0xFE0A03ED, 0xFC0803FC, 0xF0FAC3BC, 0xFDFDEA02);
	r7 = D(r7, s1_2_2, 0xFC00F1EE, 0xF809F4D5, 0xFFF8051F, 0x0107E8DD);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0E0006F8, 0x0AF70A15, 0xDBEDF201, 0x01F9F4E3);
	r1 = D(r1, s0_0_0, 0x0902F3F4, 0x09FAFA0D, 0x12FB08FB, 0x090808FD);
	r2 = D(r2, s0_0_0, 0xF9130024, 0xFCF41004, 0x14243220, 0x1B0817EE);
	r3 = D(r3, s0_0_0, 0x03011E00, 0x14110AD8, 0x06F8FFFC, 0x020D1BD9);
	r4 = D(r4, s0_0_0, 0xF702E3F4, 0xFBF3FD00, 0x0B011507, 0xFD030B15);
	r5 = D(r5, s0_0_0, 0x04EDFAF5, 0x12FF14F2, 0xF11306F9, 0x05160F09);
	r6 = D(r6, s0_0_0, 0xFEEA07FC, 0x010AEBF0, 0xF6FBE6F3, 0xDEF106FD);
	r7 = D(r7, s0_0_0, 0xF7E2FCF4, 0xF50CFD10, 0xF508FA0A, 0xFB090AF2);
	r0 = D(r0, s0_0_1, 0x070E03FC, 0xF3040EFD, 0x9BF304FA, 0x17050BF8);
	r1 = D(r1, s0_0_1, 0x2016FEDF, 0x06F508EB, 0xCE150BEF, 0x06FAF811);
	r2 = D(r2, s0_0_1, 0x03060A04, 0x010009FE, 0xE5F900E5, 0x1C0EFB14);
	r3 = D(r3, s0_0_1, 0x08F5F301, 0x10031D28, 0x09F6F1FE, 0x03FDFCFB);
	r4 = D(r4, s0_0_1, 0x07F2FF02, 0xFFF31412, 0x07FB0B13, 0xED0DFBFD);
	r5 = D(r5, s0_0_1, 0xEBE4000C, 0x0C06F104, 0xF01C090B, 0x03F818F9);
	r6 = D(r6, s0_0_1, 0xF50A08DE, 0xFA11FCFC, 0x1DFB1409, 0xCFF014F0);
	r7 = D(r7, s0_0_1, 0x06F00CDE, 0xE330E9FC, 0xED01F5FD, 0x0DE21CF4);
	r0 = D(r0, s0_0_2, 0xF9F9FDFD, 0x07FDFD13, 0xC10A0904, 0xF90203F9);
	r1 = D(r1, s0_0_2, 0x130B02E9, 0x01F60006, 0xF61304BE, 0x1A0AFDFB);
	r2 = D(r2, s0_0_2, 0x1AEF0708, 0xFEFBF90B, 0xCBF13702, 0xF3090B27);
	r3 = D(r3, s0_0_2, 0x060C0900, 0x0614D0E4, 0xFEF60103, 0x0BEE1005);
	r4 = D(r4, s0_0_2, 0x03FB09E7, 0x0106E5F3, 0x0B0E1108, 0x00F906F7);
	r5 = D(r5, s0_0_2, 0x29091408, 0x170306F6, 0xB0E706FD, 0xF906FE03);
	r6 = D(r6, s0_0_2, 0xF31A1C00, 0xFC1518F2, 0xFB191B08, 0xE90601ED);
	r7 = D(r7, s0_0_2, 0x000EFBFE, 0x000D2122, 0x221505EC, 0x141402E9);
	r0 = D(r0, s0_1_0, 0xFDF71510, 0x041C00E7, 0xEA03D31D, 0x12E6FC0D);
	r1 = D(r1, s0_1_0, 0x01FCFD18, 0x0C1309FA, 0x11F2251C, 0x00FE0A06);
	r2 = D(r2, s0_1_0, 0x0900FFF7, 0xFCFDFC07, 0xF9EEF90C, 0x0DE001EE);
	r3 = D(r3, s0_1_0, 0x000603ED, 0x0BE51830, 0x060305FE, 0xF90C1E17);
	r4 = D(r4, s0_1_0, 0xF007151A, 0x051314F9, 0xE20B0AF0, 0xEEFC0DC1);
	r5 = D(r5, s0_1_0, 0xECFDF507, 0xFAFFFC0F, 0x0022F90F, 0xFC050EF2);
	r6 = D(r6, s0_1_0, 0xFF060009, 0x180BFC09, 0x0CEB140C, 0xFF07FDFE);
	r7 = D(r7, s0_1_0, 0xF3FE12FC, 0x270EE70D, 0x15FC0D03, 0x0204EC07);
	r0 = D(r0, s0_1_1, 0x0C22F2CA, 0xEAFA140C, 0xDB03090E, 0x0F1B1505);
	r1 = D(r1, s0_1_1, 0xF6D9F20A, 0x0F1201FC, 0xF615F50A, 0x01FFEB08);
	r2 = D(r2, s0_1_1, 0x0EF3EFE2, 0xF12304FC, 0xC6E6F00E, 0xFDF6EFF0);
	r3 = D(r3, s0_1_1, 0xF8EE0BFB, 0x1BFA07CC, 0xF21513FF, 0xD4262248);
	r4 = D(r4, s0_1_1, 0xF81C01CF, 0xEADDFEDC, 0xFCFBEF1B, 0x00030CCF);
	r5 = D(r5, s0_1_1, 0x000E22E6, 0x02FB02DA, 0xE514D9B9, 0xF902FAFE);
	r6 = D(r6, s0_1_1, 0x19E0FC22, 0xF40CE414, 0xCD1C0432, 0x0516FBF4);
	r7 = D(r7, s0_1_1, 0xFD0CF804, 0xFCF1EBF0, 0xFAFE010A, 0x030A110E);
	r0 = D(r0, s0_1_2, 0x01F5140F, 0xF80A05F2, 0xF4EF03FE, 0x0A020713);
	r1 = D(r1, s0_1_2, 0xF10A1414, 0x14001409, 0xD509FE0A, 0xF2F2FD09);
	r2 = D(r2, s0_1_2, 0xFEF2FFF8, 0x0F01030E, 0xBB0200ED, 0xF8F6F6E3);
	r3 = D(r3, s0_1_2, 0x01F806F1, 0xF6D50220, 0xFEF2FBFC, 0x9905FCEA);
	r4 = D(r4, s0_1_2, 0x03F60724, 0xFAF8082B, 0x04040E13, 0x13F613E8);
	r5 = D(r5, s0_1_2, 0x1F0AEA19, 0x00F40DF0, 0x090034FD, 0x05F9F1DD);
	r6 = D(r6, s0_1_2, 0xFC0DFF1D, 0x07EEF0F4, 0x0915E70D, 0x021FD61D);
	r7 = D(r7, s0_1_2, 0x0E0DF5EC, 0x18C22FE2, 0x0D011A02, 0xFE270813);
	r0 = D(r0, s0_2_0, 0xF0F8F705, 0xF3F30205, 0x0218FBFC, 0x0DEC1304);
	r1 = D(r1, s0_2_0, 0x04F80507, 0x0CFB01FE, 0xF8FAD6F4, 0xF30C0D02);
	r2 = D(r2, s0_2_0, 0xFF0AE406, 0x05F4FAFD, 0x190CFCFF, 0x10FEFFDA);
	r3 = D(r3, s0_2_0, 0x06F70617, 0x0C07F30D, 0x07F4F6FD, 0xF401F804);
	r4 = D(r4, s0_2_0, 0xF403F3FE, 0x0EFBFDFD, 0xF619FAE9, 0x0002F524);
	r5 = D(r5, s0_2_0, 0x090BFAF9, 0xF9FC0116, 0x02FAF407, 0x020CE909);
	r6 = D(r6, s0_2_0, 0x01F9FAF1, 0x17F3F809, 0x141FABE0, 0x020510F7);
	r7 = D(r7, s0_2_0, 0xF5FD06ED, 0x16FED515, 0x05FEE9EC, 0x1A03F228);
	r0 = D(r0, s0_2_1, 0xFDF50721, 0xFC060507, 0xFE23F0E5, 0x24020AEE);
	r1 = D(r1, s0_2_1, 0x06F202F2, 0xF809EEE9, 0x09EBFF09, 0xF9EDF711);
	r2 = D(r2, s0_2_1, 0xFEF804F5, 0x04FE02EC, 0xF600EAF0, 0xFB03E1D8);
	r3 = D(r3, s0_2_1, 0xF7FAEE05, 0x12FFF015, 0x030501ED, 0x0207F313);
	r4 = D(r4, s0_2_1, 0x0118FCC5, 0xFF10CC03, 0xF5EFF236, 0xF0F706F8);
	r5 = D(r5, s0_2_1, 0x0E1602FF, 0x0F0DFDE1, 0xF8EAEAF7, 0x0908121A);
	r6 = D(r6, s0_2_1, 0x14F4E7F1, 0xEEEFEED6, 0xF6000401, 0xFC03EBFD);
	r7 = D(r7, s0_2_1, 0x03E704F6, 0x1322E32D, 0x110204EC, 0xF600E50D);
	r0 = D(r0, s0_2_2, 0xF7FFEFFF, 0x0306E31A, 0xFBFDF8EA, 0xEA06181C);
	r1 = D(r1, s0_2_2, 0xFD0602FF, 0x04FFFF05, 0x0C0306EF, 0xF808FE02);
	r2 = D(r2, s0_2_2, 0xF6150FF5, 0x080DFAFF, 0xE525F102, 0xF5F903C1);
	r3 = D(r3, s0_2_2, 0x11021905, 0xF205D3EB, 0x02FDFE07, 0xE216C8E5);
	r4 = D(r4, s0_2_2, 0xF8F7F60F, 0x0D23E9E4, 0x08FC09F8, 0x0BF5F201);
	r5 = D(r5, s0_2_2, 0xFBEFDF07, 0xF40EEA1C, 0x0408F509, 0xFCF3F0FF);
	r6 = D(r6, s0_2_2, 0xFCFEFFE6, 0x02F404FD, 0x1306D6EF, 0x0DF3FE01);
	r7 = D(r7, s0_2_2, 0x0106F7F2, 0x1EEDE512, 0xFAF7EFEA, 0x13FE0A24);
	r0 = D(r0, s1_0_0, 0xFBF901F8, 0xFDFEF907, 0x06FF13FF, 0xE8FFFE1A);
	r1 = D(r1, s1_0_0, 0x09F500FD, 0xF9F7F2F5, 0xF907101A, 0x140A0BF3);
	r2 = D(r2, s1_0_0, 0xE9E4F409, 0xF907F404, 0x02EC16DE, 0x040B0CFC);
	r3 = D(r3, s1_0_0, 0x080A15F0, 0x0910E5F3, 0xFDF802F8, 0x1BF50FF9);
	r4 = D(r4, s1_0_0, 0xF10906F6, 0xE6F90AF9, 0x13E51AF3, 0xFF000501);
	r5 = D(r5, s1_0_0, 0x15010DF6, 0x1E0DF0F4, 0x0605FD02, 0x0F0906F2);
	r6 = D(r6, s1_0_0, 0x010617F1, 0x06150AFC, 0x18E0ECF0, 0xF70109F4);
	r7 = D(r7, s1_0_0, 0xFA0A040E, 0xF4FC3FE2, 0xF0E60209, 0x00FB10F4);
	r0 = D(r0, s1_0_1, 0x061104FD, 0xF90B02FE, 0x11EFF301, 0x07D80302);
	r1 = D(r1, s1_0_1, 0x06211600, 0xFF1A0311, 0x06F1E0F8, 0xFCFE0507);
	r2 = D(r2, s1_0_1, 0x19070A08, 0x0904FDEE, 0x09F80913, 0x0EEAEC04);
	r3 = D(r3, s1_0_1, 0xFAD3E0F5, 0x1003141C, 0xFD030D01, 0xE902111C);
	r4 = D(r4, s1_0_1, 0x03F1F604, 0xF5F7F0F9, 0xE715100F, 0x05F40BFB);
	r5 = D(r5, s1_0_1, 0xE518F214, 0xF30909F6, 0x07F31603, 0xE7FEF50D);
	r6 = D(r6, s1_0_1, 0x120109F6, 0x080C00FB, 0x001916FB, 0xE5F40A06);
	r7 = D(r7, s1_0_1, 0x03F60503, 0xF31CE5D9, 0x0FF7E007, 0xFFF901FD);
	r0 = D(r0, s1_0_2, 0xF0FCFBFB, 0xFE0EF708, 0xF5F404FC, 0x01031301);
	r1 = D(r1, s1_0_2, 0x04030F10, 0xFCFAFDF8, 0xFF02FEEA, 0xFA18FF01);
	r2 = D(r2, s1_0_2, 0xD4F7FCFF, 0x0AFEFBFF, 0xDCF810EB, 0x1009E7D4);
	r3 = D(r3, s1_0_2, 0xFC06FAFC, 0xF9FF0D02, 0xF6FCFAFE, 0xFBF4F1ED);
	r4 = D(r4, s1_0_2, 0xE30405FB, 0x251C0105, 0xF7FDE5E8, 0xF4FB0AFD);
	r5 = D(r5, s1_0_2, 0xFD0905EA, 0xFC040107, 0x0C15EEF7, 0x140911FA);
	r6 = D(r6, s1_0_2, 0x150404F4, 0x03FAFFFE, 0xC4EE10F8, 0x0BF2000A);
	r7 = D(r7, s1_0_2, 0x00EB0CEA, 0xFBDC360E, 0x0304FA01, 0xED0E0A20);
	r0 = D(r0, s1_1_0, 0x090D0507, 0x17EFFA06, 0xFB020D00, 0xEAEA18C9);
	r1 = D(r1, s1_1_0, 0x0E0A01FA, 0x090AEB17, 0xF90D12E6, 0xECFBFE0E);
	r2 = D(r2, s1_1_0, 0xFD12F8F8, 0x07F507FB, 0x04140BFB, 0x22140113);
	r3 = D(r3, s1_1_0, 0x0C08F819, 0xEEF8050A, 0xFE011609, 0x050A16F4);
	r4 = D(r4, s1_1_0, 0xFF090718, 0x0F02121D, 0xF807FE13, 0xFA1604E0);
	r5 = D(r5, s1_1_0, 0xEBED01DA, 0xE7E2E503, 0xFFE9F3F5, 0x13FBE213);
	r6 = D(r6, s1_1_0, 0xFBF9E6F6, 0xD8FD04F4, 0x1DDB07FB, 0x06E70E07);
	r7 = D(r7, s1_1_0, 0xFD030CFC, 0x0D0DD3C6, 0xE4FCF3DB, 0x0FFFFBEE);
	r0 = D(r0, s1_1_1, 0x060E21F3, 0x06E80800, 0xF10A0711, 0xF7FD1402);
	r1 = D(r1, s1_1_1, 0x04F6F701, 0x1507FFF8, 0x0904FF01, 0x17F61200);
	r2 = D(r2, s1_1_1, 0x0210F6F3, 0x02150E0C, 0x1A04C1F4, 0xF2090306);
	r3 = D(r3, s1_1_1, 0x0BF7B504, 0x0CF40ED8, 0x000D0815, 0x04080C05);
	r4 = D(r4, s1_1_1, 0x32EE14F8, 0x06D9C5CA, 0x11FBF2FC, 0x0010000B);
	r5 = D(r5, s1_1_1, 0x02F9FE06, 0x0C14F918, 0xFC0801FC, 0xDC2E0C09);
	r6 = D(r6, s1_1_1, 0xF600FA17, 0xD41ED5F8, 0x2EFA0702, 0x0FFBFCF8);
	r7 = D(r7, s1_1_1, 0xE905F3F1, 0xFDF7F400, 0x0AF0201A, 0xF3E3FAFF);
	r0 = D(r0, s1_1_2, 0x04000F04, 0x071400F3, 0xFB030312, 0x1D0002C9);
	r1 = D(r1, s1_1_2, 0xED0E0CE5, 0x1101FE06, 0xDF161008, 0xFAEFFCF2);
	r2 = D(r2, s1_1_2, 0x07FB070C, 0xEEF7FEF1, 0xFBEF07EA, 0x03E80417);
	r3 = D(r3, s1_1_2, 0xE8D7EA14, 0xE39FC9F0, 0x1605F905, 0x05F5DED2);
	r4 = D(r4, s1_1_2, 0xF80DF1ED, 0xF5F2F906, 0xF1DEE514, 0xFB140AFA);
	r5 = D(r5, s1_1_2, 0xFDEFE9F4, 0x0500FB07, 0x03E5F533, 0x01E501E5);
	r6 = D(r6, s1_1_2, 0x04EBFBFF, 0x1EEBFD09, 0xF5FB2514, 0x112406F2);
	r7 = D(r7, s1_1_2, 0x0F0EF214, 0xE914FE15, 0x10F60102, 0xE5E2FD17);
	r0 = D(r0, s1_2_0, 0x0EF92208, 0x0BFF0C0F, 0x1205F5FF, 0xFBE80B0F);
	r1 = D(r1, s1_2_0, 0xFAFE07FF, 0x0210FFF6, 0x06EEFD0E, 0x0DF7030A);
	r2 = D(r2, s1_2_0, 0x08DFFA13, 0xFFFA1007, 0x05F914F2, 0x0CF90008);
	r3 = D(r3, s1_2_0, 0x0104DAF8, 0x0FF91901, 0x00FF04FB, 0x18FE011B);
	r4 = D(r4, s1_2_0, 0x01FEF503, 0xF3010AE5, 0x1DFEF71D, 0x08FAEE1A);
	r5 = D(r5, s1_2_0, 0x15F81104, 0x1F0A1BF5, 0x0E12070C, 0xFDF924F6);
	r6 = D(r6, s1_2_0, 0xFCEE011A, 0x02010303, 0xFFD80617, 0x0102F906);
	r7 = D(r7, s1_2_0, 0x05041BFC, 0xF2D615F9, 0x0C151AFF, 0xEBE501F6);
	r0 = D(r0, s1_2_1, 0xF6050DF7, 0xEC0211FF, 0x0218ED0F, 0x10FE0C0B);
	r1 = D(r1, s1_2_1, 0x0504EDF1, 0xF5090104, 0x0AD80C11, 0x12FF0FF8);
	r2 = D(r2, s1_2_1, 0xFD150F15, 0x170708F3, 0x0B0AEC22, 0xF7110D11);
	r3 = D(r3, s1_2_1, 0x0A08D61E, 0x061F06FF, 0xECF61507, 0xFF02F419);
	r4 = D(r4, s1_2_1, 0x0C0EEB05, 0x0AF7F10A, 0x02F90412, 0x00F702FE);
	r5 = D(r5, s1_2_1, 0xF9FCF317, 0xF0F506E8, 0x140F170C, 0x01F707DC);
	r6 = D(r6, s1_2_1, 0x04FFED19, 0x1A110BED, 0xF2051BEB, 0x0811F507);
	r7 = D(r7, s1_2_1, 0xF9FF0F07, 0xE707E20C, 0x03061AF9, 0xE30C06FB);
	r0 = D(r0, s1_2_2, 0xED000001, 0xF40305F2, 0xFAFC0805, 0x0D0603EF);
	r1 = D(r1, s1_2_2, 0xF8F2F7F9, 0x09FDEEEF, 0x04EDF801, 0x11020606);
	r2 = D(r2, s1_2_2, 0x0F0808EF, 0xFDED04FC, 0xFCF61E1B, 0x11FF01F3);
	r3 = D(r3, s1_2_2, 0xFCF2FCFF, 0x1BCBEA2A, 0xFD000A05, 0xCBE2E21A);
	r4 = D(r4, s1_2_2, 0x0F030602, 0xF70BF732, 0x01EE03F2, 0xFFEDE4FF);
	r5 = D(r5, s1_2_2, 0xF80908FC, 0xEE0BF00F, 0x000FF4F2, 0xF20208F3);
	r6 = D(r6, s1_2_2, 0xFBEFF901, 0xF9E20517, 0xBDEC06C6, 0xFC0A060A);
	r7 = D(r7, s1_2_2, 0x080F02EF, 0xEC061400, 0x081BF916, 0x16090717);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0E011BFC, 0xF6FF07FC, 0x0D06F1F6, 0x0B0C15FC);
	r1 = D(r1, s0_0_0, 0xFD050E01, 0xF303FDFE, 0xF4EDDA14, 0xFD07EB04);
	r2 = D(r2, s0_0_0, 0x14181008, 0x000705FE, 0xF104F108, 0xED02F208);
	r3 = D(r3, s0_0_0, 0xEA0B250E, 0x04E42008, 0x0D0D0004, 0x0FF82819);
	r4 = D(r4, s0_0_0, 0x07F70405, 0x17211A10, 0x0AFDECF4, 0xF3FE13FB);
	r5 = D(r5, s0_0_0, 0x0E00E500, 0x0701FB0A, 0x1AFAE905, 0xFBFCFD07);
	r6 = D(r6, s0_0_0, 0xF2030FFC, 0x0000C4F8, 0x10FB0617, 0x0FF2E703);
	r7 = D(r7, s0_0_0, 0x0EFA0902, 0x0E09F102, 0x020FF2E3, 0x240B2411);
	r0 = D(r0, s0_0_1, 0x01E715F5, 0xE40902EF, 0xFBF80916, 0x04EB0BF5);
	r1 = D(r1, s0_0_1, 0xFBF71505, 0x0BFD0A18, 0x12ED0918, 0x0C05FC07);
	r2 = D(r2, s0_0_1, 0x0305F0DF, 0xF40A0C09, 0xF4F411EC, 0x0005F309);
	r3 = D(r3, s0_0_1, 0x2702ED22, 0x131BF403, 0x10FAFE04, 0xF2DDCE11);
	r4 = D(r4, s0_0_1, 0x030CF506, 0x11FA3500, 0x03FFFFF4, 0xEF050A0D);
	r5 = D(r5, s0_0_1, 0x13F6FBFF, 0xE8E009ED, 0xF4DCD806, 0xF7F2FBEE);
	r6 = D(r6, s0_0_1, 0x130F0E09, 0x01F6F1FF, 0x0BE0DAFE, 0x05FF1615);
	r7 = D(r7, s0_0_1, 0x04E6F9FD, 0xFEE205F9, 0x00FCF0ED, 0x1CE8FBFF);
	r0 = D(r0, s0_0_2, 0x00FA160A, 0x0FFDFC15, 0xFBFFE801, 0xEE0C0AEE);
	r1 = D(r1, s0_0_2, 0xF5F31101, 0x17F9F5FB, 0xF50D1A09, 0x0F041210);
	r2 = D(r2, s0_0_2, 0x0008F508, 0x0AF80609, 0xF9140403, 0xF3FD1FFD);
	r3 = D(r3, s0_0_2, 0x08091DEE, 0xFF020F06, 0x09060103, 0x1C06FDDE);
	r4 = D(r4, s0_0_2, 0xF807F503, 0x04F22C27, 0x0D100D10, 0xFBFDD507);
	r5 = D(r5, s0_0_2, 0x0DF9E0F3, 0xF90CF117, 0x0D0507EF, 0xD709FAF8);
	r6 = D(r6, s0_0_2, 0xEA0DFFF6, 0x0101100B, 0x09DD0A15, 0x050602FD);
	r7 = D(r7, s0_0_2, 0xF9F5FB03, 0xEFFC16FA, 0xE91A1EF4, 0xF1DEE511);
	r0 = D(r0, s0_1_0, 0xD6FC0AF0, 0xF4F607DE, 0xF9FC0BF5, 0xF6F50ED9);
	r1 = D(r1, s0_1_0, 0x00F80305, 0xF80DEDFB, 0xF9050803, 0x03FFFE0C);
	r2 = D(r2, s0_1_0, 0xF8E4FCEB, 0x020B07F2, 0xF308ECE8, 0x02EDF6FF);
	r3 = D(r3, s0_1_0, 0xFCF70CF0, 0xF31C02EF, 0xFF0DF407, 0x0BE7D8E3);
	r4 = D(r4, s0_1_0, 0xE8F1F60C, 0xEAF3E8F2, 0xE60106E4, 0xE91B0A01);
	r5 = D(r5, s0_1_0, 0x0A06FBFD, 0xF9EBFA1E, 0x02FEFC00, 0xE7F608FD);
	r6 = D(r6, s0_1_0, 0x02EA14F8, 0x0E190712, 0xBCE014FC, 0x03F00906);
	r7 = D(r7, s0_1_0, 0x220BFA10, 0xEA06CB01, 0xF4F2D70E, 0xFBF209EF);
	r0 = D(r0, s0_1_1, 0xF31A0D0D, 0x180101FD, 0xF4E9E203, 0xF3EEEA16);
	r1 = D(r1, s0_1_1, 0x130E1FFF, 0xE7FAF009, 0xEF0C060C, 0x24FC0400);
	r2 = D(r2, s0_1_1, 0xE806FAFA, 0xFFF9F21C, 0xFBCAFBF5, 0x22F209F2);
	r3 = D(r3, s0_1_1, 0x08FC0706, 0x0B1FD603, 0xF00901FC, 0x2D1D44F6);
	r4 = D(r4, s0_1_1, 0x121CE8EA, 0x051C050C, 0xD5F511E2, 0xE31A1707);
	r5 = D(r5, s0_1_1, 0xF0070D1F, 0xDFFDFFEC, 0xEBFC031A, 0xF802F114);
	r6 = D(r6, s0_1_1, 0x0DF9F9FF, 0xE312D417, 0xB7390501, 0x00D620F5);
	r7 = D(r7, s0_1_1, 0xC5101700, 0x0CEB1AFB, 0x1E021CDC, 0x10EBF511);
	r0 = D(r0, s0_1_2, 0xFEE8FCF9, 0xF9050314, 0xF5F4EF10, 0x0E00EBE6);
	r1 = D(r1, s0_1_2, 0x011D02FA, 0xEBF1F90F, 0xFC032C0A, 0xFF050005);
	r2 = D(r2, s0_1_2, 0x11FECBF8, 0x08FCFE0F, 0x1211F508, 0x0A080018);
	r3 = D(r3, s0_1_2, 0x11040B10, 0x1A0F2125, 0xFFF2020F, 0x0BF6D0ED);
	r4 = D(r4, s0_1_2, 0xF60DF70B, 0xFAF9E712, 0xFFFBD704, 0xECF11502);
	r5 = D(r5, s0_1_2, 0xF3E81519, 0xF9F1E603, 0x0604FF01, 0xF40CF3F2);
	r6 = D(r6, s0_1_2, 0x080BFBF8, 0x080607FF, 0xD310FF15, 0xDCEEF315);
	r7 = D(r7, s0_1_2, 0x0DF5E303, 0x03220AED, 0x02E800FA, 0xFB141307);
	r0 = D(r0, s0_2_0, 0x020C03EC, 0xFFFDF8FE, 0xED00F8F2, 0xDF1220D2);
	r1 = D(r1, s0_2_0, 0xFC05FA01, 0xE30C0018, 0x2FEAE4C3, 0x0D0DF707);
	r2 = D(r2, s0_2_0, 0xFEE0EEF6, 0xFDFBF2F8, 0xE9130410, 0x07F6F7FD);
	r3 = D(r3, s0_2_0, 0x0A0A1312, 0xE4DB2EFC, 0x00FEFFFE, 0xF0F5EDF7);
	r4 = D(r4, s0_2_0, 0xFE0B0E0E, 0xE7FBEC0B, 0x06FC0C01, 0xFFF4FE10);
	r5 = D(r5, s0_2_0, 0x0407FFFA, 0xE80C1103, 0x061305F5, 0xEC00FDF4);
	r6 = D(r6, s0_2_0, 0x0AFBFB0C, 0x11FF0A00, 0xCE09E9EA, 0xD60C1007);
	r7 = D(r7, s0_2_0, 0x14FF0B01, 0x15CCF3FD, 0xE9DE1E01, 0xC3021412);
	r0 = D(r0, s0_2_1, 0x210A0101, 0xFAF8010F, 0x03FE06F4, 0x1001F810);
	r1 = D(r1, s0_2_1, 0x02FDFDF9, 0xF80A0508, 0x12D703DC, 0x00020D05);
	r2 = D(r2, s0_2_1, 0xEFF3F903, 0xF515F3FE, 0x00ECEDF0, 0xF5F6EFD6);
	r3 = D(r3, s0_2_1, 0x040CECF6, 0xFD020614, 0xFBF8FB07, 0x0742EB0A);
	r4 = D(r4, s0_2_1, 0x090005F7, 0x0BFDEBF5, 0xFB050900, 0xFFFF0925);
	r5 = D(r5, s0_2_1, 0xE3FC0BF4, 0xDFF203EE, 0x04EA10DC, 0xF401F80E);
	r6 = D(r6, s0_2_1, 0xFC2000F9, 0x0BE507EF, 0x3EF3DBC7, 0xEBE8F306);
	r7 = D(r7, s0_2_1, 0xC11202F2, 0x341ABC0F, 0x0BF4032C, 0xF60F26FB);
	r0 = D(r0, s0_2_2, 0xF709FDFD, 0xFC010810, 0x0712F6DF, 0xFA14EDE1);
	r1 = D(r1, s0_2_2, 0x0A07F30B, 0x08FCFCF3, 0xF3020AEC, 0xFF010000);
	r2 = D(r2, s0_2_2, 0x0B0EF5EE, 0xFD010013, 0x05EB1310, 0x00FF1800);
	r3 = D(r3, s0_2_2, 0x050AF71A, 0x1FCFD618, 0x04010A03, 0x02DFA821);
	r4 = D(r4, s0_2_2, 0x10F501FC, 0xE7DD04FC, 0xE8091212, 0xF003F905);
	r5 = D(r5, s0_2_2, 0x03F80810, 0xEEF4F4F4, 0x0FF619E9, 0x00F11901);
	r6 = D(r6, s0_2_2, 0x11F10308, 0x00F618F8, 0x37121635, 0xF70410FB);
	r7 = D(r7, s0_2_2, 0x09F50FF8, 0x16E1DDD8, 0xF803F4E1, 0x0FFEE8FB);
	r0 = D(r0, s1_0_0, 0x06FF01F7, 0x0514FA0F, 0xF1F3FB0A, 0x3422FC03);
	r1 = D(r1, s1_0_0, 0x0B10FF02, 0xFAF8FFE4, 0xFA0DF807, 0xF70107F6);
	r2 = D(r2, s1_0_0, 0x0EEB1109, 0x0202EAFD, 0x1A160F02, 0xFD04F60E);
	r3 = D(r3, s1_0_0, 0xEC10F008, 0xF1E001E6, 0x0AFA08F0, 0xE1F7FE05);
	r4 = D(r4, s1_0_0, 0xFA1412FC, 0xF0E4FDF3, 0xFE1AED06, 0xF3E4FE14);
	r5 = D(r5, s1_0_0, 0xF705F311, 0x0EFDFFFA, 0xF40E051E, 0x1AD71C1D);
	r6 = D(r6, s1_0_0, 0xF400F8F8, 0x0A14EFFA, 0xF5F2E5F3, 0x00EF0DF8);
	r7 = D(r7, s1_0_0, 0x04EEFE2D, 0x0D021E9D, 0xD11610EE, 0x0703EBFA);
	r0 = D(r0, s1_0_1, 0x08FF0CF8, 0xF6F7E406, 0x00FDF100, 0x06F8D3FA);
	r1 = D(r1, s1_0_1, 0xF50BF90A, 0xF5EFF700, 0x041B11F9, 0xF3010901);
	r2 = D(r2, s1_0_1, 0x11F6FBEA, 0x0B05F703, 0x0111F5FB, 0x04F7FEE6);
	r3 = D(r3, s1_0_1, 0xF0F8F900, 0xD9060BB7, 0x00FDFFFD, 0xED0DC803);
	r4 = D(r4, s1_0_1, 0x03E10D17, 0x00E6EDF6, 0x1F0AF8FB, 0x100CFF08);
	r5 = D(r5, s1_0_1, 0xDF00070A, 0x1FF3FDED, 0x1B1E0302, 0xE60BF2FD);
	r6 = D(r6, s1_0_1, 0x03160201, 0x02F30718, 0x30D1DBE7, 0x1404FD0C);
	r7 = D(r7, s1_0_1, 0xEE14F9FA, 0x101703D0, 0x07F1E501, 0x05122A09);
	r0 = D(r0, s1_0_2, 0xFE06FA07, 0xF6FB13F4, 0x13F410EF, 0xF6270BE9);
	r1 = D(r1, s1_0_2, 0x06FD03F9, 0xFFF70FEE, 0x071F01F8, 0xF801FEF2);
	r2 = D(r2, s1_0_2, 0xF605FE18, 0xF7F300F0, 0xF610F412, 0x12F70707);
	r3 = D(r3, s1_0_2, 0xFCEFFE01, 0xC50DE70F, 0xFD00FEFA, 0x09FDF403);
	r4 = D(r4, s1_0_2, 0xF4FC0205, 0xE1230C09, 0xF008F118, 0x0C011117);
	r5 = D(r5, s1_0_2, 0x0B101C09, 0x08F70116, 0x0FF9070E, 0x2106F905);
	r6 = D(r6, s1_0_2, 0xFFE9F904, 0x0EFF18F4, 0x0AFC0290, 0x1901EEF1);
	r7 = D(r7, s1_0_2, 0x0B131806, 0xEB0ADEC4, 0x06FF0803, 0xEF01E915);
	r0 = D(r0, s1_1_0, 0xF5F4FD16, 0xEB1509F9, 0xF5E9EDF9, 0x0E04FC18);
	r1 = D(r1, s1_1_0, 0xFFF8030B, 0xE5F712F7, 0xFE1DD90C, 0xF007EE02);
	r2 = D(r2, s1_1_0, 0xE0EC080E, 0x08F5FEFF, 0xDA0FF8FD, 0x1B19FB0F);
	r3 = D(r3, s1_1_0, 0xFE02250B, 0x0303F6E4, 0x01FC0B02, 0x010AF50D);
	r4 = D(r4, s1_1_0, 0xE705DDF9, 0x0A01F4FF, 0xFAFE0AFF, 0xFF18EAF1);
	r5 = D(r5, s1_1_0, 0x1304F506, 0x10E6EC10, 0xF416FDEB, 0xE4010E20);
	r6 = D(r6, s1_1_0, 0x10F903F9, 0x0E2E09FC, 0xF8280343, 0x1003080A);
	r7 = D(r7, s1_1_0, 0x080B0608, 0x2F01071D, 0x030DFB00, 0x1F09ED0C);
	r0 = D(r0, s1_1_1, 0xF80903FC, 0x04F7F3F0, 0x140F1505, 0xF5DF0A05);
	r1 = D(r1, s1_1_1, 0x03090EFC, 0x260DE11B, 0xE0F9EBE8, 0xFBFE0712);
	r2 = D(r2, s1_1_1, 0xF20C0B1C, 0x0A0B05F8, 0xF1E50F00, 0x07000019);
	r3 = D(r3, s1_1_1, 0x11FC03E9, 0x081007DF, 0x0004EC05, 0x08014805);
	r4 = D(r4, s1_1_1, 0xF60F20FB, 0x0A200124, 0xFEFD01F7, 0x130AF2E6);
	r5 = D(r5, s1_1_1, 0x041D0804, 0x0BF5E621, 0xF8FC1313, 0x1411F7F0);
	r6 = D(r6, s1_1_1, 0xE21F0E14, 0xF103E617, 0xD314ED18, 0x00111306);
	r7 = D(r7, s1_1_1, 0x0312FEF7, 0x0326CD3B, 0x03FC0BFA, 0x08F2F939);
	r0 = D(r0, s1_1_2, 0x01EAF9EC, 0x0F1709EE, 0x0019FE04, 0x0EF708F4);
	r1 = D(r1, s1_1_2, 0xFD14070A, 0x05FD0214, 0xFBECFE00, 0x070DFBF6);
	r2 = D(r2, s1_1_2, 0xF41CF6F8, 0x050701F6, 0xFFE1D8FD, 0x0405FC10);
	r3 = D(r3, s1_1_2, 0x0FEEFF1A, 0x2FC4E11D, 0x05FFF901, 0xDE0A231E);
	r4 = D(r4, s1_1_2, 0x101118EC, 0x0BFD3207, 0xDFF303F4, 0x1810F6E7);
	r5 = D(r5, s1_1_2, 0x02E804EC, 0x0B0D051F, 0x1AF1EA0E, 0x0021010A);
	r6 = D(r6, s1_1_2, 0xF3E7F205, 0xF4170705, 0xF3F50412, 0x07F8F5EF);
	r7 = D(r7, s1_1_2, 0x15E50DF3, 0x05CA21D9, 0x01EE05FB, 0x0AE10DE3);
	r0 = D(r0, s1_2_0, 0x0A02FC0C, 0x0313F9EB, 0xFDE8FE05, 0xF5E8F4EB);
	r1 = D(r1, s1_2_0, 0x02ED00F2, 0xFEFD23FD, 0x0A040E45, 0x0213F2EF);
	r2 = D(r2, s1_2_0, 0x1703ECEB, 0x06F9F200, 0xFCFD20FD, 0xFAF32918);
	r3 = D(r3, s1_2_0, 0xF1FF00EF, 0x0E09E9F8, 0xF303FEF8, 0x0C15F119);
	r4 = D(r4, s1_2_0, 0x0AFCFB0D, 0x0EF3E2FA, 0x11F806EF, 0xFAFC05F8);
	r5 = D(r5, s1_2_0, 0xEB07F70B, 0x23011309, 0x16021307, 0xEF04F914);
	r6 = D(r6, s1_2_0, 0x1404180F, 0xF808FBEB, 0xCF01380E, 0x1115060C);
	r7 = D(r7, s1_2_0, 0x0FFE01FB, 0x06C31B0C, 0x0F0C1BEF, 0x110B1AF9);
	r0 = D(r0, s1_2_1, 0x0EFAF4F9, 0x100606FD, 0xF0040F17, 0xD30EF9EB);
	r1 = D(r1, s1_2_1, 0xF8EADF04, 0x1208F201, 0x01F71807, 0x23F6FE13);
	r2 = D(r2, s1_2_1, 0x0009D9F5, 0xF8EA1409, 0x30F105E4, 0xE711E714);
	r3 = D(r3, s1_2_1, 0xEA0012FD, 0xF4061CDF, 0xF9081303, 0x0FED1D02);
	r4 = D(r4, s1_2_1, 0x1FF8000F, 0xFF0603DD, 0xE908081D, 0xFF06F4FD);
	r5 = D(r5, s1_2_1, 0x13FF01E4, 0x100330CA, 0x04051DFA, 0x0C031BFD);
	r6 = D(r6, s1_2_1, 0xE4FC02FA, 0x05F02506, 0x0A1FF8E3, 0x12F5F8F9);
	r7 = D(r7, s1_2_1, 0xFDF2F0DF, 0x16E6D3D8, 0x120FF7FC, 0xF9F4260E);
	r0 = D(r0, s1_2_2, 0x0212FD0E, 0x0205FDF4, 0x0E051201, 0xEEF71421);
	r1 = D(r1, s1_2_2, 0xFFEEFCEF, 0xF9080406, 0x15F5F107, 0x0504FBFF);
	r2 = D(r2, s1_2_2, 0x10090100, 0xF6FD07F6, 0xEBE4FFFD, 0xF8051111);
	r3 = D(r3, s1_2_2, 0xE8F8EB05, 0xEDD20DE7, 0x01F2F609, 0xF41904DD);
	r4 = D(r4, s1_2_2, 0xEC110BFD, 0xE806FCF9, 0xECF00CEB, 0xE6FBEEFA);
	r5 = D(r5, s1_2_2, 0xFDF9EB12, 0xEBFEF903, 0x09ED02F1, 0xE9D805E0);
	r6 = D(r6, s1_2_2, 0xFEEDFCFE, 0x16E8F9F8, 0xE1DF00C8, 0xF6FE0E1C);
	r7 = D(r7, s1_2_2, 0xF2F71513, 0xDEDBC60C, 0x01EFFAF3, 0xFA06ED03);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFFF60AFF, 0x18FB0F03, 0x08121123, 0xFB00D8F5);
	r1 = D(r1, s0_0_0, 0x0204FAFA, 0x0C03F80C, 0x0901FD2A, 0xF9F6F8ED);
	r2 = D(r2, s0_0_0, 0xFFF803F2, 0x1107010B, 0x000401F6, 0xFDFBF5E9);
	r3 = D(r3, s0_0_0, 0x1BFE000B, 0xF3FE07FB, 0x01F605F7, 0xF0EFF927);
	r4 = D(r4, s0_0_0, 0xE600F6FF, 0xDE19F50A, 0x14E40BE2, 0x0AFFF504);
	r5 = D(r5, s0_0_0, 0x13EDE3F8, 0x08E70100, 0xFE0E00F5, 0x0002FD08);
	r6 = D(r6, s0_0_0, 0x1906F5F5, 0x260AFF00, 0x2015E927, 0xDCFB0C1D);
	r7 = D(r7, s0_0_0, 0xFEF901EF, 0x0BFBF80F, 0xF2F9F7B0, 0x0A06E80A);
	r0 = D(r0, s0_0_1, 0xFE00FDF5, 0x050109FE, 0x01F623FB, 0x2ED30FF9);
	r1 = D(r1, s0_0_1, 0xEA01E5F6, 0xF7F30B12, 0xFF070002, 0xEB09FC05);
	r2 = D(r2, s0_0_1, 0x24F5F90A, 0x01011708, 0x171B10FD, 0x13DC07FE);
	r3 = D(r3, s0_0_1, 0xF4EC1EE0, 0x15F9FAEA, 0x0409010C, 0xF0E7E2C6);
	r4 = D(r4, s0_0_1, 0xEAF7091B, 0x090EF00E, 0x17ED11FA, 0xF90B0102);
	r5 = D(r5, s0_0_1, 0xF8E200EF, 0xF70507F1, 0xFC0C2318, 0x0CF50BF6);
	r6 = D(r6, s0_0_1, 0x050D1914, 0xFBF6EE15, 0x11EF03DC, 0xFEFA1520);
	r7 = D(r7, s0_0_1, 0xEFF4F0EA, 0xEE030CE3, 0x1CFBF8BA, 0x000B0A07);
	r0 = D(r0, s0_0_2, 0x08EB170C, 0x01010DF1, 0x030D0A02, 0x0CE7FF0A);
	r1 = D(r1, s0_0_2, 0xF812FA00, 0xFE1102F6, 0x0A07F720, 0xF90410F9);
	r2 = D(r2, s0_0_2, 0x09EFFB09, 0x0BF809F6, 0xD20428F6, 0xD5EAF9E5);
	r3 = D(r3, s0_0_2, 0xBC0D0DE2, 0x271BF5B0, 0x050110FD, 0x2CF9F215);
	r4 = D(r4, s0_0_2, 0xE906F203, 0xE9FFEFF4, 0xFCF915F9, 0xF2F4F7FC);
	r5 = D(r5, s0_0_2, 0x0D12FADF, 0xECFF0AF7, 0xF40E2816, 0x0108FE21);
	r6 = D(r6, s0_0_2, 0x0702F70A, 0xE7130DED, 0xFF031CFC, 0x03FE1EFB);
	r7 = D(r7, s0_0_2, 0x0413060C, 0x28FCF300, 0xEF07EF11, 0x0E00E50A);
	r0 = D(r0, s0_1_0, 0xFD05FA02, 0x14061000, 0xFE1B290F, 0x011C08C1);
	r1 = D(r1, s0_1_0, 0xF512040A, 0x09F90C05, 0x22F9F703, 0x03EFF409);
	r2 = D(r2, s0_1_0, 0xFE02041E, 0x0A19FF27, 0x0E1D101D, 0x09050206);
	r3 = D(r3, s0_1_0, 0xF2F41617, 0x021BF0FD, 0xFA06F3FB, 0xCFDD15DE);
	r4 = D(r4, s0_1_0, 0xDF0E04F7, 0x0AFF0D0B, 0x06120E08, 0x0FF40EF7);
	r5 = D(r5, s0_1_0, 0x030DFCFA, 0x06EB0DF8, 0x07FB15F0, 0xF20AFC1F);
	r6 = D(r6, s0_1_0, 0xF0F308F3, 0x03F9D31E, 0xFC16F1DF, 0x16F91317);
	r7 = D(r7, s0_1_0, 0xF9FC0900, 0xFF011AF4, 0xFD240FD9, 0x00110905);
	r0 = D(r0, s0_1_1, 0x0716F50A, 0xF200EEEF, 0xFFF7EE1B, 0x11D412F2);
	r1 = D(r1, s0_1_1, 0xF2F2F401, 0xF5EFEB01, 0xEBEC1503, 0x12160015);
	r2 = D(r2, s0_1_1, 0x12140913, 0xF70DEE14, 0x0D11FDF9, 0x0B07EB18);
	r3 = D(r3, s0_1_1, 0xB1FE22E8, 0xF5F6EAC9, 0x1810F607, 0xB3F3EFE1);
	r4 = D(r4, s0_1_1, 0xFC0CEDE6, 0xEF0AF4FE, 0x0F03F108, 0x0F061906);
	r5 = D(r5, s0_1_1, 0xF2FDFE07, 0x011A0913, 0xFBE5DE05, 0x0EF1F2F1);
	r6 = D(r6, s0_1_1, 0xF5F113FB, 0xF408E2F6, 0x0B0DD413, 0x010A0D01);
	r7 = D(r7, s0_1_1, 0x190C010C, 0xDAE7FECF, 0x1E000FC7, 0xF7FFF912);
	r0 = D(r0, s0_1_2, 0xF8220123, 0xFF0BF607, 0x00F8F107, 0xE313070C);
	r1 = D(r1, s0_1_2, 0x10FAEAF4, 0x02ED150D, 0x0FF9C317, 0x0C07020B);
	r2 = D(r2, s0_1_2, 0xE4031505, 0xF105F8F4, 0xDA1113CD, 0xC00FFDF3);
	r3 = D(r3, s0_1_2, 0xFAF4F0F5, 0xCBE30700, 0xF500040C, 0x0AE2FFF0);
	r4 = D(r4, s0_1_2, 0x07F6FA05, 0x2C18FFE3, 0x0A0EF3F6, 0xE5E5F414);
	r5 = D(r5, s0_1_2, 0xF4FFFEF9, 0x01FB0812, 0x1308210A, 0x2909DF06);
	r6 = D(r6, s0_1_2, 0xF4F9FA06, 0x071AF4F7, 0x0D15061B, 0x05F9FFD9);
	r7 = D(r7, s0_1_2, 0x1708FA0C, 0xE70222A6, 0xFFEEF1FB, 0x0E130402);
	r0 = D(r0, s0_2_0, 0x07F3FB0C, 0xF8020913, 0xFDF9FD04, 0x00DBE2E4);
	r1 = D(r1, s0_2_0, 0x0904FD05, 0xFA11F320, 0x14EA11F9, 0x01030509);
	r2 = D(r2, s0_2_0, 0x0EF204E2, 0x091207F8, 0x15FAEF18, 0x0208030E);
	r3 = D(r3, s0_2_0, 0xFB0AFDFF, 0x10030911, 0xFAFCEEF6, 0x08F5F728);
	r4 = D(r4, s0_2_0, 0xFAEF08FF, 0x0E1A05D6, 0x030EFEFC, 0x0E010305);
	r5 = D(r5, s0_2_0, 0x0A04F707, 0x12EAF8FE, 0x07100DF9, 0x1505EC0E);
	r6 = D(r6, s0_2_0, 0x0412F9E6, 0x0E1109D6, 0x01F7E91F, 0xFAE5ED16);
	r7 = D(r7, s0_2_0, 0x0509F105, 0x1917F01C, 0xF9E00309, 0x08D600E5);
	r0 = D(r0, s0_2_1, 0xE0F5ED07, 0xF3FC0315, 0xFCF90FFF, 0xFB010810);
	r1 = D(r1, s0_2_1, 0xF50CFB04, 0x04EFEC0A, 0x0A1D0903, 0xED000703);
	r2 = D(r2, s0_2_1, 0x18EEF4EF, 0xFE02F9F9, 0xFB17FD10, 0xF81110F7);
	r3 = D(r3, s0_2_1, 0x030FFEF1, 0xD237E5E4, 0x150E14FC, 0x1900F709);
	r4 = D(r4, s0_2_1, 0x0CE7EF00, 0x26F21AF3, 0x2A1706F3, 0xF017FCF1);
	r5 = D(r5, s0_2_1, 0xF2E60B0C, 0x030AE1F5, 0xFA02F404, 0xF2F5EFE8);
	r6 = D(r6, s0_2_1, 0x0B170503, 0x0AE2FA1B, 0x2ED21D11, 0xFB0905FE);
	r7 = D(r7, s0_2_1, 0x0C0FFDFB, 0x000E2E2C, 0x0FFFFF0D, 0xF3EFFBFA);
	r0 = D(r0, s0_2_2, 0x070BF6FC, 0x0A02F6FE, 0xF214FD0A, 0x00F7EC18);
	r1 = D(r1, s0_2_2, 0xF704F9F5, 0x02F9F1EE, 0x040BECFD, 0x01F4F8EC);
	r2 = D(r2, s0_2_2, 0xF112F01A, 0xF8FD0AFF, 0xC903070B, 0x1309E30F);
	r3 = D(r3, s0_2_2, 0xF4100A09, 0x0DFDF7D0, 0x0A090904, 0xFD02EF12);
	r4 = D(r4, s0_2_2, 0xF81718EC, 0xE7FDFE0D, 0xCA1D02F4, 0x070C0E09);
	r5 = D(r5, s0_2_2, 0xFEFBFC12, 0xF3F61101, 0xE8EEF6EB, 0xEB0C0CE5);
	r6 = D(r6, s0_2_2, 0xE6121201, 0x141003F9, 0xFFE41ACA, 0x040914FC);
	r7 = D(r7, s0_2_2, 0x1E080505, 0x17FBDFF3, 0xFCFA0415, 0xED01F203);
	r0 = D(r0, s1_0_0, 0xF30E0405, 0x0D0AF1F8, 0xFA0C14FB, 0xFADFF2CB);
	r1 = D(r1, s1_0_0, 0xF5FCF7F8, 0x0AF7F2F7, 0x0310F8F1, 0xFCE8F60C);
	r2 = D(r2, s1_0_0, 0x0B07FA01, 0x00F709FB, 0x053900D5, 0xD6080000);
	r3 = D(r3, s1_0_0, 0x050500CC, 0x15CB0D0C, 0x09F1F702, 0xF1FBD7FE);
	r4 = D(r4, s1_0_0, 0xFA11080A, 0xFD1210F1, 0x1501F5FE, 0x0018FFFB);
	r5 = D(r5, s1_0_0, 0x01050707, 0x00E5030D, 0x1AF80404, 0x073BE611);
	r6 = D(r6, s1_0_0, 0x1206130E, 0x041AFE30, 0x071E0CF9, 0x01070608);
	r7 = D(r7, s1_0_0, 0xF60E0FF7, 0xECE41607, 0x0CFCF90E, 0xFCD7F801);
	r0 = D(r0, s1_0_1, 0x01FC0FF8, 0xEF220E12, 0xF9F8FC1D, 0xFE2C020A);
	r1 = D(r1, s1_0_1, 0xE2F6ECDF, 0x091BF6F9, 0x0BDAFFE9, 0x05F9F114);
	r2 = D(r2, s1_0_1, 0x0FF21FFC, 0xF913FB18, 0xF0E809E1, 0x14321A0B);
	r3 = D(r3, s1_0_1, 0x030EFCEC, 0x14FBF4F9, 0xFEFAF806, 0xF6FC1EEB);
	r4 = D(r4, s1_0_1, 0x17F408FE, 0xE5E8F900, 0xF4071809, 0x0E0817FF);
	r5 = D(r5, s1_0_1, 0x12FBF118, 0xEC1404FA, 0x0717DFE8, 0x15FA17E7);
	r6 = D(r6, s1_0_1, 0x0B0803F6, 0xFD0C1EFB, 0xF81F0A17, 0x10140F08);
	r7 = D(r7, s1_0_1, 0x070EFE15, 0x0813F5FE, 0xDF16080A, 0x053AE9F6);
	r0 = D(r0, s1_0_2, 0x02F4F801, 0xF3FA0A08, 0x0F0A0B08, 0xDF2804F5);
	r1 = D(r1, s1_0_2, 0x0EF9FFFA, 0x00010212, 0xFCE6F001, 0xF8FD0111);
	r2 = D(r2, s1_0_2, 0xFEE7FDF3, 0xF9160907, 0xF313F11A, 0x09EE0C0E);
	r3 = D(r3, s1_0_2, 0x15130829, 0xF43912F0, 0xFF010500, 0xFF080515);
	r4 = D(r4, s1_0_2, 0x100F071A, 0xC3070210, 0x03140AFF, 0xFD080608);
	r5 = D(r5, s1_0_2, 0xFA090CF8, 0x0FFF01D3, 0xE7E6EFE5, 0x04E5ED03);
	r6 = D(r6, s1_0_2, 0xDD1B0E02, 0x14EDFEEE, 0x01F80F00, 0x1FF1F3F8);
	r7 = D(r7, s1_0_2, 0x03DAE5E8, 0xF40F10ED, 0x03F40C04, 0xF02B031B);
	r0 = D(r0, s1_1_0, 0xFB2712FC, 0xE522EA01, 0x0BFDF7FF, 0x190E06F7);
	r1 = D(r1, s1_1_0, 0x1017EC06, 0x19D8F5E1, 0x0A23000D, 0xF6120CF2);
	r2 = D(r2, s1_1_0, 0xFE0DEDF8, 0x05FE1302, 0x23E9EB1B, 0x00040BEC);
	r3 = D(r3, s1_1_0, 0xF81EF012, 0x0A0D1B20, 0x07F70423, 0x0117EF13);
	r4 = D(r4, s1_1_0, 0xE92CFFFF, 0xE5940D0A, 0xF8500605, 0x010FECF6);
	r5 = D(r5, s1_1_0, 0xF3EB05E6, 0xF319F315, 0xFFF3F8F2, 0x0945060D);
	r6 = D(r6, s1_1_0, 0x0217D8F1, 0x18FE0418, 0xED04020D, 0xECF4E407);
	r7 = D(r7, s1_1_0, 0x00FF09F0, 0xF5EDE21E, 0x0901DCEC, 0xF8180D15);
	r0 = D(r0, s1_1_1, 0xF516EEEA, 0x210A0313, 0xF1FEEBF0, 0xEE2519F1);
	r1 = D(r1, s1_1_1, 0x122B0B0F, 0x0C2D0DFC, 0x0003FCF9, 0x0420ED0C);
	r2 = D(r2, s1_1_1, 0x2DFE1915, 0xDD25DBF1, 0xFE08D2EF, 0x03FD1CFA);
	r3 = D(r3, s1_1_1, 0xFA0200EC, 0xFA25E1F8, 0xFE0C1015, 0x1C1D370A);
	r4 = D(r4, s1_1_1, 0xF521F8EB, 0x02C8ECF2, 0x18D8FF08, 0xEB000A02);
	r5 = D(r5, s1_1_1, 0x123E1116, 0x0903FDFE, 0xF8000200, 0xFC02FFE7);
	r6 = D(r6, s1_1_1, 0x11E80312, 0xF320F1E9, 0x18DC2513, 0x1615110C);
	r7 = D(r7, s1_1_1, 0xE6D80E08, 0x1128D001, 0x050504F8, 0x13021D11);
	r0 = D(r0, s1_1_2, 0xE4EF0A07, 0xFF19EB0F, 0x0EEAF6FF, 0xFEE3F0FD);
	r1 = D(r1, s1_1_2, 0xEFF008FA, 0x07020107, 0x03F30206, 0x1717FE00);
	r2 = D(r2, s1_1_2, 0xED30FBF9, 0x1B0AF906, 0xDCE3F7F8, 0xFF04EA0D);
	r3 = D(r3, s1_1_2, 0xECEDFB03, 0xF867F00E, 0xF504F206, 0xD60BF200);
	r4 = D(r4, s1_1_2, 0x06C5ECFF, 0xF8A7EFF9, 0xF934F10C, 0x0922FAFE);
	r5 = D(r5, s1_1_2, 0xF9EBF10E, 0x1F392605, 0xC1FFFD03, 0xE53202F0);
	r6 = D(r6, s1_1_2, 0xE04AFF07, 0xF608F4FA, 0x0905EEFE, 0x001FF901);
	r7 = D(r7, s1_1_2, 0x12F5F318, 0x0121E90C, 0x0B010716, 0x0508050D);
	r0 = D(r0, s1_2_0, 0x0D00F5F9, 0x022A0CF8, 0x0B3CFB04, 0xF881030F);
	r1 = D(r1, s1_2_0, 0x04CA0309, 0x09E4EC0F, 0xF91002F6, 0xF5C7F209);
	r2 = D(r2, s1_2_0, 0xE8E8F8EB, 0x0503120C, 0xFC1A16FA, 0xF957F8EB);
	r3 = D(r3, s1_2_0, 0x0E0518F3, 0x162D07F5, 0xFAD91FE7, 0xFD1AD205);
	r4 = D(r4, s1_2_0, 0xFA4FFE06, 0x19370807, 0x0A2B0FE7, 0xFBDEECFE);
	r5 = D(r5, s1_2_0, 0xFAEAFC08, 0xF702FF26, 0x07CFF0FD, 0xF74A0610);
	r6 = D(r6, s1_2_0, 0xF0C41105, 0x02F1FAF4, 0xD34DF0E9, 0x18130BF7);
	r7 = D(r7, s1_2_0, 0x040106F7, 0x02C9E7EF, 0x0E35010C, 0x1D24E5F3);
	r0 = D(r0, s1_2_1, 0x0A101312, 0xFEFF0BF6, 0x0635080F, 0xF0D91212);
	r1 = D(r1, s1_2_1, 0x02391100, 0x09F60F0D, 0xFA0CF105, 0x1C1BF80C);
	r2 = D(r2, s1_2_1, 0x0207FD0A, 0x130704F6, 0x2711F105, 0xF92B00FF);
	r3 = D(r3, s1_2_1, 0xFB3618FB, 0x0CFFF1E9, 0xF4FDFCED, 0x0A140C08);
	r4 = D(r4, s1_2_1, 0x03F8F707, 0x162C06F5, 0xFA0A180B, 0xFD0004F5);
	r5 = D(r5, s1_2_1, 0x07FBFB1C, 0x0CB8F908, 0x0800EFFD, 0x11021DFF);
	r6 = D(r6, s1_2_1, 0x0C0100FE, 0xF5300406, 0x02681CF4, 0xEE410903);
	r7 = D(r7, s1_2_1, 0xE62FEF1F, 0xEE300CE3, 0xFE0C0404, 0x01081819);
	r0 = D(r0, s1_2_2, 0xFD08FC00, 0x0BD604FA, 0xF0F002FF, 0x0115E60A);
	r1 = D(r1, s1_2_2, 0x05E9FCF4, 0xF5011605, 0x0E030DFC, 0xECC10108);
	r2 = D(r2, s1_2_2, 0x02E5F4FD, 0xEEEAF80C, 0xC8F2020A, 0x113C0715);
	r3 = D(r3, s1_2_2, 0xFB201109, 0xE708ECF3, 0x1D101101, 0xDF4FF3F0);
	r4 = D(r4, s1_2_2, 0xE8E7FBFF, 0x0939FE10, 0x0038ED0C, 0x0DFA0405);
	r5 = D(r5, s1_2_2, 0x0D2502E7, 0xF23FF2FF, 0x0D251A23, 0xFA07E50B);
	r6 = D(r6, s1_2_2, 0xF0E9040D, 0xF3F605EB, 0x139A11FE, 0xF81DEF03);
	r7 = D(r7, s1_2_2, 0x0B0EFCEE, 0xEBE0F9F2, 0x0A02FAF5, 0xF6630CEA);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(3.047e-03, 1.465e-02, 2.425e-02, 3.201e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-1.010e-02, -1.066e-02, 3.089e-02, 3.238e-03);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-3.759e-03, 2.438e-02, 8.277e-02, -7.171e-03);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(3.058e-02, -9.758e-03, -1.285e-02, 5.459e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-1.184e-02, 4.965e-02, 1.814e-02, -4.798e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(1.935e-02, -9.868e-04, 6.497e-02, 1.015e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(5.738e-03, 2.916e-02, -3.844e-02, 1.727e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(1.099e-02, -7.078e-04, -1.760e-02, -9.370e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-BILINEAR-MPV-NVL-conv3
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xE00EFD16, 0x0B1E1611, 0xFAF9F400, 0x0DF909EC);
	r1 = D(r1, s0_0_0, 0xF8F909F0, 0xFB2E1610, 0xD9EB07EC, 0x11101E09);
	r2 = D(r2, s0_0_0, 0x00F7EF07, 0xE3EBFB07, 0x0A10F5E6, 0x0201FBF3);
	r3 = D(r3, s0_0_0, 0xFEF00B16, 0x020EEDFC, 0xFF04FD01, 0x1520D9F0);
	r4 = D(r4, s0_0_0, 0x2107FCF8, 0x1308ECF7, 0xEE0ADCEE, 0xF9EDF1E4);
	r5 = D(r5, s0_0_0, 0x0103EA09, 0xFF0AFA04, 0xF50B0C00, 0xF60E0607);
	r6 = D(r6, s0_0_0, 0x1010FEF2, 0xF9EE0A0A, 0x0104F304, 0xFEEE06FC);
	r7 = D(r7, s0_0_0, 0x0609F80E, 0x0D171008, 0xF3CFFF00, 0xE7E9FB01);
	r0 = D(r0, s0_0_1, 0xE3DCF1FB, 0xFD07ED02, 0xF9F9FC0D, 0xF60205E8);
	r1 = D(r1, s0_0_1, 0xFBFF0BF8, 0x1616E601, 0x37F8F5F5, 0xF11EFFE2);
	r2 = D(r2, s0_0_1, 0xEDEEFC1C, 0x00DDFD2E, 0x0F01FFF0, 0x0D0C03BD);
	r3 = D(r3, s0_0_1, 0x0423F4CD, 0x0BFA15FA, 0x03EF050E, 0x15F11524);
	r4 = D(r4, s0_0_1, 0xF80E0412, 0xF806FA0B, 0x16EE060B, 0xF900EDF3);
	r5 = D(r5, s0_0_1, 0xA5FE0804, 0x13FE1106, 0x050F07FB, 0x0107FDFE);
	r6 = D(r6, s0_0_1, 0x1101FFEE, 0xFBF7FD07, 0xFC030005, 0xF607F4FB);
	r7 = D(r7, s0_0_1, 0xFCDCED1A, 0xF70309F8, 0xF5FC1106, 0xF9F0FB18);
	r0 = D(r0, s0_0_2, 0xA7030007, 0x271106FA, 0x09FC0EFA, 0x00030C05);
	r1 = D(r1, s0_0_2, 0xFC01FA0C, 0xF8F30C12, 0x0ACB04FC, 0x3B140205);
	r2 = D(r2, s0_0_2, 0xF707ECFC, 0xE6CF0E1A, 0xFAFC1408, 0x0F0902EF);
	r3 = D(r3, s0_0_2, 0xF81D07E4, 0xFE23E817, 0x0DE3F710, 0xD6180C15);
	r4 = D(r4, s0_0_2, 0x02DDF501, 0xE9FBFA0B, 0x290CF008, 0x0FF4F80C);
	r5 = D(r5, s0_0_2, 0xC31BF6FA, 0xFF1611F5, 0xFB0CFFFD, 0x0CFBFD01);
	r6 = D(r6, s0_0_2, 0x1100E5FB, 0xDF13FB09, 0x04FDF508, 0x18F80A03);
	r7 = D(r7, s0_0_2, 0x29F505E1, 0x0EEDF6F2, 0xF9120C13, 0x0DF2F6FD);
	r0 = D(r0, s0_1_0, 0xF8EB1DFC, 0x05F1E117, 0xF6FE10F2, 0xF502F3EF);
	r1 = D(r1, s0_1_0, 0xFB010F01, 0x01E9EE27, 0xF200100A, 0x0B21EBF8);
	r2 = D(r2, s0_1_0, 0xF2F20102, 0x02F90F08, 0x0C14EBEC, 0x1203FA26);
	r3 = D(r3, s0_1_0, 0x07EF12FD, 0xFBFA0301, 0x100DFDEA, 0x2610ECE7);
	r4 = D(r4, s0_1_0, 0x06F71BFF, 0x00F40105, 0xF21732FA, 0xFEFC16D3);
	r5 = D(r5, s0_1_0, 0xF0F30C1A, 0x17150AFB, 0x0806FD0A, 0xF6181D00);
	r6 = D(r6, s0_1_0, 0x04090804, 0xF813F8D4, 0x070E0202, 0xFB040106);
	r7 = D(r7, s0_1_0, 0x0F01EEF5, 0x13F0020F, 0xF20A1915, 0xD9DE2DE6);
	r0 = D(r0, s0_1_1, 0xF2FB1113, 0xDA0C0A03, 0x02101500, 0xF8DB20E5);
	r1 = D(r1, s0_1_1, 0x051EF408, 0xDB1719F7, 0xF4331E12, 0x11F60A05);
	r2 = D(r2, s0_1_1, 0xF7E21813, 0xFF0712ED, 0xF5E3EAEC, 0xEBE5ECF4);
	r3 = D(r3, s0_1_1, 0x02070AE4, 0x1B03E5F7, 0xFED8E213, 0xC5D304E1);
	r4 = D(r4, s0_1_1, 0x0C0103E2, 0xFBF10B07, 0xEFFA1E0D, 0x020AFACC);
	r5 = D(r5, s0_1_1, 0xDCF3EE11, 0xFDD5EFFE, 0x000523FF, 0xECFFEC25);
	r6 = D(r6, s0_1_1, 0x06F826F0, 0xD5C9F5D1, 0x0FF1110E, 0x0DD60DE1);
	r7 = D(r7, s0_1_1, 0xF80401F3, 0xF5361713, 0x012C0E12, 0xFCDDFCF0);
	r0 = D(r0, s0_1_2, 0x23BDEED9, 0x25080613, 0x0007EFF9, 0x03FFF807);
	r1 = D(r1, s0_1_2, 0x0A040302, 0xF516F500, 0xFD0D130C, 0xE51DF032);
	r2 = D(r2, s0_1_2, 0xFE0107F3, 0x06EFDD03, 0xE8E5FF06, 0x14070DF5);
	r3 = D(r3, s0_1_2, 0x1013FAC3, 0xFB0EF605, 0x140A1106, 0xE2F3140C);
	r4 = D(r4, s0_1_2, 0x07F5FDF1, 0xF700EAE3, 0xF6F2E6EF, 0xF20A17EB);
	r5 = D(r5, s0_1_2, 0x13DC0407, 0xEBFDFAFA, 0xF70807F4, 0xFCFEE6F7);
	r6 = D(r6, s0_1_2, 0x13F40017, 0xC5ECE803, 0xFD0EF91C, 0xEBED03FD);
	r7 = D(r7, s0_1_2, 0xD218FAEF, 0x02F10CF5, 0xB3F3F706, 0x0D20F3F0);
	r0 = D(r0, s0_2_0, 0x09090CF1, 0x07EB0105, 0xFD07F1FC, 0x0702EEFE);
	r1 = D(r1, s0_2_0, 0xFBF50204, 0x0530DE1D, 0xE4F702FE, 0xF80C060A);
	r2 = D(r2, s0_2_0, 0xFC04FA00, 0xF8F30007, 0x04FCFD00, 0xFDFFF80A);
	r3 = D(r3, s0_2_0, 0x04F00E06, 0x06190406, 0x0606080B, 0x0F052ACF);
	r4 = D(r4, s0_2_0, 0xFFE9040D, 0xF0FDEDF9, 0x11130315, 0xF7ED0A10);
	r5 = D(r5, s0_2_0, 0x150EF20B, 0xF9FE030B, 0x09FBFC0B, 0xFEFCEF0F);
	r6 = D(r6, s0_2_0, 0x08071FF2, 0x1AF7EA21, 0x0E09FCF8, 0xEBEE0A15);
	r7 = D(r7, s0_2_0, 0x1D1BF901, 0xFFEBF1F5, 0x070104F3, 0xF7F8FEF0);
	r0 = D(r0, s0_2_1, 0x06E4F2FB, 0x13F5FBFD, 0xEFF7F102, 0xFE0802FB);
	r1 = D(r1, s0_2_1, 0x060705FF, 0xCDEE0DF0, 0x36FDF600, 0xE6E4E8FB);
	r2 = D(r2, s0_2_1, 0x19F90C01, 0x0D0FF6EB, 0x0D02DB08, 0x01FF0310);
	r3 = D(r3, s0_2_1, 0x0C06ED22, 0x010AF701, 0x0B0DE4FD, 0x27FBECFB);
	r4 = D(r4, s0_2_1, 0xE213FE09, 0xEB140902, 0x38F6DDE2, 0xF1040407);
	r5 = D(r5, s0_2_1, 0x18010415, 0xFA0BF512, 0x0C0A03F6, 0x020BE3F5);
	r6 = D(r6, s0_2_1, 0xFD0D280D, 0x1113E7F8, 0x06ED0B04, 0x170E0423);
	r7 = D(r7, s0_2_1, 0x13190913, 0x0AEA0EF2, 0x3CFACE07, 0xFF08FC15);
	r0 = D(r0, s0_2_2, 0xEBF1D7EF, 0x1711030C, 0x10020E08, 0x0904FEFF);
	r1 = D(r1, s0_2_2, 0xF8F80603, 0x0DFD04F1, 0x01FBF211, 0x0FED07FF);
	r2 = D(r2, s0_2_2, 0xEC03F800, 0x2EFCF5FB, 0xFDF5F4FC, 0x0FF809F0);
	r3 = D(r3, s0_2_2, 0xF50F1308, 0x1A080807, 0x1B020207, 0x07A80318);
	r4 = D(r4, s0_2_2, 0xFD01EAF3, 0x06EC010D, 0x02D8FE15, 0x0AFB04F1);
	r5 = D(r5, s0_2_2, 0xF9F5FCFE, 0xF101020A, 0xFF00FEFA, 0x1CF4FA07);
	r6 = D(r6, s0_2_2, 0xFFF60513, 0x07FA06E4, 0x04FD0A08, 0x01F30800);
	r7 = D(r7, s0_2_2, 0xEB08EA11, 0x0BBA1300, 0x0C080412, 0x1413EFE8);
	r0 = D(r0, s1_0_0, 0xF5E6270C, 0xFC11F90F, 0xEF030708, 0xF5F6FFF2);
	r1 = D(r1, s1_0_0, 0xF6F1F600, 0x0AF60205, 0x03E12000, 0x02D10D0C);
	r2 = D(r2, s1_0_0, 0x08F6F8FD, 0xE403FDF3, 0xFA0AF9FE, 0x06E400EC);
	r3 = D(r3, s1_0_0, 0xE209FE05, 0xEF1402FA, 0x020503ED, 0xE00AFE1C);
	r4 = D(r4, s1_0_0, 0x0201FBF7, 0x0CF8FAF9, 0x0EF304D7, 0xF3FEFBF5);
	r5 = D(r5, s1_0_0, 0x0107E622, 0xFFFFFD0A, 0xE701F70C, 0xF8060314);
	r6 = D(r6, s1_0_0, 0x09FF010F, 0x080AF6F6, 0x05F8FAFC, 0xF90814FE);
	r7 = D(r7, s1_0_0, 0xF7FCF5FD, 0xEDFE07F4, 0x01DE0108, 0x059503E2);
	r0 = D(r0, s1_0_1, 0xE701EAE1, 0x19F3FCF5, 0x0BFC210F, 0x10FFFF02);
	r1 = D(r1, s1_0_1, 0xEF05F805, 0x04010A0B, 0xFB14E615, 0x0101E908);
	r2 = D(r2, s1_0_1, 0x03FF0FFB, 0x12EC1802, 0x0BF60D01, 0x030BE900);
	r3 = D(r3, s1_0_1, 0x031BFE14, 0x00190908, 0x00EC0CFE, 0x2B1C28D5);
	r4 = D(r4, s1_0_1, 0x1307F1F8, 0x04F9FBFB, 0xE914FB0A, 0x1007EE04);
	r5 = D(r5, s1_0_1, 0x0603E504, 0xF80B0A05, 0xFD021004, 0xF50504F9);
	r6 = D(r6, s1_0_1, 0xFA0508F6, 0x0419F904, 0x110201F5, 0xF809FBFE);
	r7 = D(r7, s1_0_1, 0x18BBF2F5, 0x1FEE07FB, 0x0F0412EC, 0xFB12FC0F);
	r0 = D(r0, s1_0_2, 0x0402DF0A, 0x0300F5FB, 0xEB0E1C0C, 0x0B070703);
	r1 = D(r1, s1_0_2, 0x0E0BFB00, 0xFB140BE7, 0xE6170F03, 0xE0F0F90A);
	r2 = D(r2, s1_0_2, 0x07F20C08, 0xDFE90704, 0x08FF03FE, 0x121AE4F0);
	r3 = D(r3, s1_0_2, 0xFE07F009, 0x0B0DEEF1, 0x0CFF0006, 0x08EBEB07);
	r4 = D(r4, s1_0_2, 0xFBFE0E0E, 0x092208FB, 0x0DDEFA11, 0x15F5F7DC);
	r5 = D(r5, s1_0_2, 0x16E1D3F9, 0xF4FEF204, 0xF3F9FD06, 0x010BF20D);
	r6 = D(r6, s1_0_2, 0x080D0E00, 0x0E0B1F00, 0xE8F705FC, 0x10010FFB);
	r7 = D(r7, s1_0_2, 0xFDF901FA, 0x030514FC, 0xF3120A0B, 0xE8E8F918);
	r0 = D(r0, s1_1_0, 0x0A350227, 0x0902FDDF, 0x0E18F310, 0x03F214E0);
	r1 = D(r1, s1_1_0, 0x02050D12, 0xFCEC01E8, 0xEE0811FE, 0x08EC0614);
	r2 = D(r2, s1_1_0, 0x0A050705, 0xF9F7030C, 0x19FA09FF, 0xF3E301E4);
	r3 = D(r3, s1_1_0, 0x0EE10111, 0x1207EB0D, 0x08121405, 0xFD0E0AE9);
	r4 = D(r4, s1_1_0, 0x040EFE04, 0x0EF9F704, 0xEA030528, 0xF002EE26);
	r5 = D(r5, s1_1_0, 0x0507E8F3, 0xDFF703FE, 0x01F9FE07, 0xFEFAF6F9);
	r6 = D(r6, s1_1_0, 0x070804D7, 0xF0F1E302, 0x090CF303, 0xE912E4DC);
	r7 = D(r7, s1_1_0, 0x1BE307FE, 0xD7FD08EC, 0xF409F10B, 0xF9103619);
	r0 = D(r0, s1_1_1, 0xE4F2F7F0, 0xF9150102, 0x07F2F323, 0x03F30216);
	r1 = D(r1, s1_1_1, 0x0C12FBF9, 0xFE17E9EF, 0x04FA0111, 0x0A1EF3FC);
	r2 = D(r2, s1_1_1, 0x100AFA08, 0xF002F10E, 0x0CE8FC06, 0xF2EDE5A9);
	r3 = D(r3, s1_1_1, 0xEA07FDF2, 0x01FB1BF3, 0xF8FC05E8, 0x1AF10100);
	r4 = D(r4, s1_1_1, 0x02020509, 0x110801F2, 0xE304FBD3, 0x14F5EC14);
	r5 = D(r5, s1_1_1, 0xFEFF12AE, 0x03FEEFF8, 0x1717FAF2, 0x07051AEC);
	r6 = D(r6, s1_1_1, 0xF3FCF800, 0xEA0AF706, 0xFD01FF0C, 0xDB07ED00);
	r7 = D(r7, s1_1_1, 0x020700EF, 0x03F1000A, 0x25E7EF03, 0x0C1812CE);
	r0 = D(r0, s1_1_2, 0x06EC17F3, 0x1AFFE7FC, 0xFF1007FE, 0x02FAF108);
	r1 = D(r1, s1_1_2, 0xF4020103, 0x0EE4080C, 0xF70AF7EA, 0x07E8051E);
	r2 = D(r2, s1_1_2, 0x0B010F05, 0xFBEEE2EA, 0xFDF90B14, 0x060903F0);
	r3 = D(r3, s1_1_2, 0x1304EEFC, 0x04F50206, 0x120720F7, 0xCE09E5EC);
	r4 = D(r4, s1_1_2, 0xF205F109, 0x01F605EA, 0xE408BB36, 0x000112FF);
	r5 = D(r5, s1_1_2, 0xEDF20A0E, 0x02FFF710, 0x03FD11F3, 0x0A0E12FD);
	r6 = D(r6, s1_1_2, 0x1A00F60E, 0xFF111FF7, 0xF2FF0CFA, 0xFC030A07);
	r7 = D(r7, s1_1_2, 0xEB0A0BF7, 0x1AFA110A, 0xEB1608F4, 0x01000103);
	r0 = D(r0, s1_2_0, 0x06FD011A, 0x020A03E9, 0x0CFD060C, 0xF5F00726);
	r1 = D(r1, s1_2_0, 0xFFFDFBFF, 0xE4EC0DC2, 0x01EA1BF9, 0xF923F102);
	r2 = D(r2, s1_2_0, 0xFE07F4FD, 0x05160E15, 0x05FBF009, 0xF6F407F1);
	r3 = D(r3, s1_2_0, 0xFEEA061B, 0xF6F6EF22, 0xE9EFF817, 0x01E5F223);
	r4 = D(r4, s1_2_0, 0xFBFCF6F3, 0x05EFFD08, 0x040909D0, 0xFB02F819);
	r5 = D(r5, s1_2_0, 0x1019F202, 0x08010700, 0xFBF10118, 0xEBF0F5EC);
	r6 = D(r6, s1_2_0, 0xF80E0BFE, 0xFFF60C3D, 0x06FFF7FA, 0xE0F5F103);
	r7 = D(r7, s1_2_0, 0x06FAE307, 0x010B0917, 0x131005F3, 0x1FD5DB05);
	r0 = D(r0, s1_2_1, 0xEE000229, 0x04EE0413, 0x14F30705, 0x11F30FEE);
	r1 = D(r1, s1_2_1, 0xF4FC030F, 0xE61EFEEE, 0x15F7E506, 0xF2F10A0D);
	r2 = D(r2, s1_2_1, 0xF10702FA, 0x0F1408DE, 0xED0A1CF9, 0xFEF50C0B);
	r3 = D(r3, s1_2_1, 0x06C00C0B, 0x050212F3, 0x0610FC0C, 0xFDDCDBEF);
	r4 = D(r4, s1_2_1, 0xF1EC1215, 0x0817FCC8, 0xFFE61907, 0x170FFD09);
	r5 = D(r5, s1_2_1, 0x010C15E1, 0xF2040E04, 0x0807FA13, 0x110EF711);
	r6 = D(r6, s1_2_1, 0x02F7F205, 0xFCF7F010, 0x2405F702, 0xC7000FC3);
	r7 = D(r7, s1_2_1, 0x06FAE7D5, 0x150AFCF4, 0x05DC02BA, 0x0720E70F);
	r0 = D(r0, s1_2_2, 0xE9041304, 0x0405F5F9, 0x03010206, 0x03080204);
	r1 = D(r1, s1_2_2, 0x001100F9, 0x0626FB1F, 0x08D6040F, 0xF6090014);
	r2 = D(r2, s1_2_2, 0xFFFBF80E, 0x120007F3, 0x0406F206, 0x0CF404FC);
	r3 = D(r3, s1_2_2, 0x091615E5, 0xFB04FFE9, 0x0606FA06, 0xDCDDC4F1);
	r4 = D(r4, s1_2_2, 0x03DE0C14, 0xF80A0A13, 0x10FA2335, 0x151108EF);
	r5 = D(r5, s1_2_2, 0xED0013EE, 0xFD01FC0D, 0x04F9FA03, 0xFCF6FAFB);
	r6 = D(r6, s1_2_2, 0xEFEFF8F5, 0x020901F4, 0xF604EDFB, 0xDC070BFD);
	r7 = D(r7, s1_2_2, 0x0411F207, 0x07F5F8EE, 0x05FE0CE8, 0x080809EE);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFE01FFF6, 0x1818F70A, 0x03F904FB, 0xFAF61005);
	r1 = D(r1, s0_0_0, 0xE9F3FEF1, 0xF61BF2F8, 0x10ED0107, 0xE2080306);
	r2 = D(r2, s0_0_0, 0xFCF70A05, 0x0DFB01FA, 0x110EFC09, 0x0D270F0D);
	r3 = D(r3, s0_0_0, 0xFE0A0DF1, 0x0A090809, 0xFC0C040B, 0x1309F908);
	r4 = D(r4, s0_0_0, 0x01EFF7FD, 0xE7141002, 0xF93BF0B4, 0xFB081600);
	r5 = D(r5, s0_0_0, 0x080CFF07, 0x120A02EF, 0xFD0BE9F9, 0x10FEFCF0);
	r6 = D(r6, s0_0_0, 0xF81B0CF5, 0x1BDCF117, 0x0B00FB08, 0xE306FAF9);
	r7 = D(r7, s0_0_0, 0x0FF9E812, 0x14FDE800, 0xE5160AFF, 0xE0D302E5);
	r0 = D(r0, s0_0_1, 0xEAD312FD, 0x04F104FE, 0xF60C0602, 0x03FDF507);
	r1 = D(r1, s0_0_1, 0x04F4FA04, 0xFC18FE0D, 0xF6CA17ED, 0xF4B510FD);
	r2 = D(r2, s0_0_1, 0xED030DE9, 0x09F2ED06, 0xFB0EFAFB, 0x152809FD);
	r3 = D(r3, s0_0_1, 0xF815FD08, 0x0AF61901, 0xFC0C1910, 0xF0FBFEFE);
	r4 = D(r4, s0_0_1, 0xFE09F919, 0x0E09FC0B, 0x021FF8BF, 0xF2FEEDF4);
	r5 = D(r5, s0_0_1, 0x230D100B, 0xF8FCF906, 0xFC0C03FF, 0xF503FF04);
	r6 = D(r6, s0_0_1, 0xE919F01B, 0x18F60E08, 0x0DFD04FC, 0x090BF916);
	r7 = D(r7, s0_0_1, 0xFFFB0CEF, 0xF417F704, 0x0A180702, 0xEAD30107);
	r0 = D(r0, s0_0_2, 0xF80AFEF8, 0xF6EB0809, 0xF007FA07, 0x0B020504);
	r1 = D(r1, s0_0_2, 0xF8FF0DFC, 0xFFFBF51D, 0x03CA1117, 0x03EAF505);
	r2 = D(r2, s0_0_2, 0x15FE0506, 0xF8051CC6, 0x02F2FB09, 0xFE1A0802);
	r3 = D(r3, s0_0_2, 0x011307F5, 0xFF05050E, 0xFE0AE3F6, 0xEEC1FA12);
	r4 = D(r4, s0_0_2, 0x070915F3, 0x03DFF230, 0x002EF6BF, 0xE106EC12);
	r5 = D(r5, s0_0_2, 0xEE030006, 0xFF150202, 0x0304F500, 0x03F61A08);
	r6 = D(r6, s0_0_2, 0xF5F40719, 0x15F20DEC, 0x03F105F8, 0x000009F0);
	r7 = D(r7, s0_0_2, 0xFD180018, 0xFC0BF0F3, 0xFC170FEE, 0xFEFBFD19);
	r0 = D(r0, s0_1_0, 0x1BA0F6FC, 0xF9F9FD19, 0x0BF5FB0D, 0xFB0B1501);
	r1 = D(r1, s0_1_0, 0x08F90908, 0x06F406F3, 0x09EEF8EF, 0x23DEF2EC);
	r2 = D(r2, s0_1_0, 0x0EFEFBF6, 0xFFE5F310, 0x00160002, 0x0F1AF8F7);
	r3 = D(r3, s0_1_0, 0xFDFBEFF3, 0x09F7FAEF, 0x0DEE0000, 0xFAE219E6);
	r4 = D(r4, s0_1_0, 0xF71118FB, 0x0EFD0A12, 0x08E702DB, 0x0E051408);
	r5 = D(r5, s0_1_0, 0x030DFCFF, 0x03021706, 0xFA0B23F8, 0xF600FDFD);
	r6 = D(r6, s0_1_0, 0x11E5FEFC, 0xE4EAFD15, 0x060F00F5, 0x10250310);
	r7 = D(r7, s0_1_0, 0xEEFF0903, 0xF207F3F8, 0x0403EEFA, 0x1006C211);
	r0 = D(r0, s0_1_1, 0x1908FC1C, 0xF801F819, 0x020BDF0F, 0xFE08B212);
	r1 = D(r1, s0_1_1, 0x0801F4FF, 0x0DF427E2, 0xECE817FC, 0x21FC19F3);
	r2 = D(r2, s0_1_1, 0x060D0B00, 0x09F9E8F9, 0xF8F6E9F6, 0xF10FF6E4);
	r3 = D(r3, s0_1_1, 0x05FAEEF4, 0x04E2FCF8, 0x1F030DF6, 0xB9E502F8);
	r4 = D(r4, s0_1_1, 0x01F0F813, 0x10F8FFD5, 0xE70111ED, 0xF404F001);
	r5 = D(r5, s0_1_1, 0x031F1DEB, 0x09FA1504, 0xFB0AEE09, 0x06011509);
	r6 = D(r6, s0_1_1, 0x01FDEF04, 0x21C6E90C, 0x00190603, 0xF3F6E7F8);
	r7 = D(r7, s0_1_1, 0x0D13FE10, 0x12EC1DEE, 0x1813FBEC, 0xF6121B01);
	r0 = D(r0, s0_1_2, 0x02E714F9, 0xF7F8FEFB, 0xF1FE0D01, 0xFE050207);
	r1 = D(r1, s0_1_2, 0xFFF3FC0E, 0x16E814FB, 0x07E8F5E3, 0x03B700FE);
	r2 = D(r2, s0_1_2, 0xFB09F401, 0xF00311EA, 0x0504F4F8, 0x00150C15);
	r3 = D(r3, s0_1_2, 0x0200E301, 0xE6DFF80E, 0xEE02D307, 0x19E3EDE3);
	r4 = D(r4, s0_1_2, 0xF3090FFE, 0xF605FC11, 0x12DBFCF3, 0xEC0119F5);
	r5 = D(r5, s0_1_2, 0x110B0BFE, 0xFAEEF6FC, 0x03030203, 0x0709F50E);
	r6 = D(r6, s0_1_2, 0x0807EDF7, 0x1E00FFFB, 0xF7012E1C, 0x10FF10EF);
	r7 = D(r7, s0_1_2, 0x1506FAFA, 0xF20EFF18, 0xF80BE8F4, 0xFF16140B);
	r0 = D(r0, s0_2_0, 0x0F120AEF, 0xFADE030C, 0xFA0B0107, 0x09080A0C);
	r1 = D(r1, s0_2_0, 0xF70001FD, 0x010AE4F5, 0x01DEEB24, 0x09E5F9E7);
	r2 = D(r2, s0_2_0, 0xF80208FB, 0xFEF7ED1A, 0xFB0806FB, 0x041CF403);
	r3 = D(r3, s0_2_0, 0x04F906FC, 0x191F0813, 0xFB1709FE, 0x01C813D6);
	r4 = D(r4, s0_2_0, 0x0BF3E802, 0x0BF30F07, 0xAD16F40F, 0xFAF6FE03);
	r5 = D(r5, s0_2_0, 0xF9CFF112, 0x03F6FEEE, 0x07FFFDFF, 0xFD16FBED);
	r6 = D(r6, s0_2_0, 0x09FC0BFD, 0xF3241404, 0x08040306, 0xFC0C050E);
	r7 = D(r7, s0_2_0, 0xF80BF8FE, 0xFD0C0902, 0x0DF8ECE0, 0x17E903EF);
	r0 = D(r0, s0_2_1, 0xFE1014EF, 0xFEF80007, 0x0A08F9FD, 0x08FDE8FD);
	r1 = D(r1, s0_2_1, 0xFA081207, 0x03190EFC, 0x0B1712D5, 0xE905120C);
	r2 = D(r2, s0_2_1, 0xFFFC150B, 0x0B0010FA, 0x0103020E, 0xFEFFF50D);
	r3 = D(r3, s0_2_1, 0x05E3E61A, 0xF3FDF4F7, 0xEF0506FB, 0xEFE2EE17);
	r4 = D(r4, s0_2_1, 0x0709F6EA, 0xD1070301, 0xA5080005, 0x1A0102EA);
	r5 = D(r5, s0_2_1, 0x03180E39, 0xFDFFFE1C, 0x08FA050A, 0xFD1610F6);
	r6 = D(r6, s0_2_1, 0x18FA050C, 0x0608FEDA, 0xFE00E807, 0xF7050601);
	r7 = D(r7, s0_2_1, 0xFC110C1A, 0x2525F1F9, 0x1B1709EA, 0xAB16F8E7);
	r0 = D(r0, s0_2_2, 0x0EE015F4, 0xF9FFF903, 0x0402FAEF, 0xFE020107);
	r1 = D(r1, s0_2_2, 0x0107F2F6, 0xF2FE1700, 0xF5A901FA, 0xD8D20FFB);
	r2 = D(r2, s0_2_2, 0x0302FE0F, 0x0C110CF5, 0xF6F60C0D, 0xF607FD0C);
	r3 = D(r3, s0_2_2, 0xF5FCEEFE, 0xF9F5040C, 0xF8080B10, 0xFE5B22DB);
	r4 = D(r4, s0_2_2, 0x0CF90314, 0xE50A0AFB, 0x14E30706, 0x0AFFF015);
	r5 = D(r5, s0_2_2, 0xE20E0318, 0x14F4F00B, 0x08010107, 0x0312FCEC);
	r6 = D(r6, s0_2_2, 0xF50A15FA, 0xD8E2E9EA, 0xFD08090B, 0x0CF9FB09);
	r7 = D(r7, s0_2_2, 0x22E409F8, 0xE914080D, 0x0F1DFCE6, 0xE5040F03);
	r0 = D(r0, s1_0_0, 0xFEDEA9EE, 0xE50632FB, 0x0611F100, 0x021A1305);
	r1 = D(r1, s1_0_0, 0xED19E701, 0xE7F36004, 0x4DF194EC, 0xC1DD2523);
	r2 = D(r2, s1_0_0, 0xF4F6EA0A, 0x0F0F0106, 0x1C0F09FD, 0x1F061301);
	r3 = D(r3, s1_0_0, 0x08FF1502, 0xF7FEF900, 0x16F8D2FA, 0x0402C8F7);
	r4 = D(r4, s1_0_0, 0x01EDEFFF, 0x2DF72EEF, 0x03E4D5F8, 0x070FE603);
	r5 = D(r5, s1_0_0, 0xF8FBD0F0, 0xFA08030C, 0xFA2611FF, 0x0EF41001);
	r6 = D(r6, s1_0_0, 0x0717FA08, 0x21ECE5E7, 0xF1FAEB03, 0x0C050702);
	r7 = D(r7, s1_0_0, 0x0A0306FB, 0x12121E00, 0x000D0AFF, 0xF1F1060F);
	r0 = D(r0, s1_0_1, 0x1A13FB00, 0xCFFCF600, 0xF1FA0B00, 0x0FEE01FE);
	r1 = D(r1, s1_0_1, 0x02240204, 0x06F54FF1, 0x38EF0AFD, 0xCFF6BD0C);
	r2 = D(r2, s1_0_1, 0x03E218F4, 0xF8DF06F0, 0x10F90EFC, 0x0C07F1FC);
	r3 = D(r3, s1_0_1, 0xD90CC409, 0xEF24E9F6, 0x06F5EA08, 0xBE062E18);
	r4 = D(r4, s1_0_1, 0x042FE109, 0xE80005FF, 0x1B051827, 0x10DC2900);
	r5 = D(r5, s1_0_1, 0xDFF6D2FB, 0xEB011007, 0xFE070000, 0xF314E710);
	r6 = D(r6, s1_0_1, 0x0415F409, 0x08F120EB, 0x01EF20FB, 0x110E19FA);
	r7 = D(r7, s1_0_1, 0x0D0BEF06, 0xEE09FBFC, 0xF1E11DFF, 0x26F3A602);
	r0 = D(r0, s1_0_2, 0x24FF1116, 0x01F80400, 0xFCE9E9FB, 0xF2FF05F9);
	r1 = D(r1, s1_0_2, 0xF817F8F9, 0xFE12EDFE, 0xFD0124D5, 0xEA161114);
	r2 = D(r2, s1_0_2, 0x00FDDEF4, 0xEAFA1A0A, 0x07030402, 0x081500ED);
	r3 = D(r3, s1_0_2, 0xF4F1EB05, 0xFFFEE9F0, 0x1AF511FE, 0x0CD6DADF);
	r4 = D(r4, s1_0_2, 0xFF05F0F2, 0xF5F9280D, 0xDEDFE6E9, 0x1CFA0C15);
	r5 = D(r5, s1_0_2, 0xEB09F912, 0xF2FBFCF0, 0x05FDF904, 0x03F1EBFB);
	r6 = D(r6, s1_0_2, 0x0BFA04FD, 0xEC1B04F4, 0xED0AFF02, 0xF4F9E006);
	r7 = D(r7, s1_0_2, 0x2CEE2100, 0x00F2E1FB, 0xFDFA03F3, 0x11F7EA02);
	r0 = D(r0, s1_1_0, 0x00F8B0BE, 0xF900F722, 0x03F11306, 0xEC012A10);
	r1 = D(r1, s1_1_0, 0xFBFBF2F7, 0x0C113A1E, 0x3DFA47E5, 0x09ED0FE8);
	r2 = D(r2, s1_1_0, 0x1006D800, 0x1211ECFF, 0x061B1C1F, 0xE5F5FF0A);
	r3 = D(r3, s1_1_0, 0xE00F33CF, 0xE610FEFF, 0xF5FFFBF1, 0xB0051CEA);
	r4 = D(r4, s1_1_0, 0xBB19EBF3, 0xE2FD1A12, 0x0811CAEA, 0x0F0602F5);
	r5 = D(r5, s1_1_0, 0xF4F181F4, 0x0C060B09, 0xFFFDEE01, 0x0F090AFB);
	r6 = D(r6, s1_1_0, 0x13121F0F, 0x41DED1E9, 0xF9F50C04, 0xFC0E29EF);
	r7 = D(r7, s1_1_0, 0x03FB2413, 0x04F9DFF7, 0x1FFA090E, 0x171C81EB);
	r0 = D(r0, s1_1_1, 0x9704E5CD, 0x46FF1709, 0xFD030E08, 0x1EECF00E);
	r1 = D(r1, s1_1_1, 0xFC1A1DFC, 0x1BBF39DC, 0x810A1421, 0xF2F095CE);
	r2 = D(r2, s1_1_1, 0x29070CFF, 0x08F61DEE, 0xFF09EF0A, 0xFB0532FA);
	r3 = D(r3, s1_1_1, 0xE4070CF3, 0x13F8020B, 0xF10527FB, 0x462B0E18);
	r4 = D(r4, s1_1_1, 0xF9DBEEF9, 0xF5F902E0, 0x0D131CF1, 0x3F0D09D2);
	r5 = D(r5, s1_1_1, 0xCDE3DBDB, 0x0EE7FE10, 0xFFE7040B, 0xFBF6EFFE);
	r6 = D(r6, s1_1_1, 0x03D41C04, 0xFA160D03, 0xFDFB01FF, 0x191DF109);
	r7 = D(r7, s1_1_1, 0xCFE81BFC, 0xFFE845FF, 0x31E1EAFB, 0xD707E3FC);
	r0 = D(r0, s1_1_2, 0xECE0FE02, 0xFE050B03, 0x0E1A1D0C, 0x03050D03);
	r1 = D(r1, s1_1_2, 0xF207FFF9, 0xB90325ED, 0xF6FB40E3, 0xD20811F0);
	r2 = D(r2, s1_1_2, 0x110AFAF4, 0xFEF6E8FC, 0x16ECF004, 0xFEFB0A0A);
	r3 = D(r3, s1_1_2, 0xE1ED1215, 0x0EECFBF9, 0x01E4FA0C, 0xEEABF70A);
	r4 = D(r4, s1_1_2, 0xFA16EAF9, 0xECFDE20D, 0xF5E5E5F9, 0x0F0C09F7);
	r5 = D(r5, s1_1_2, 0x18EEBC01, 0xEB012004, 0x030D0804, 0x0EEAFBFD);
	r6 = D(r6, s1_1_2, 0x09FFDEFE, 0x260B0AE2, 0xFF110EEF, 0xFD1A05FD);
	r7 = D(r7, s1_1_2, 0xF3FFEEF5, 0x14E009F5, 0xF7F5DB10, 0x0EFEDAEA);
	r0 = D(r0, s1_2_0, 0x00FF0BF1, 0x1B051117, 0xFA030011, 0xFE00011D);
	r1 = D(r1, s1_2_0, 0xFEFAF7F9, 0xB70CFD10, 0xF9F8C205, 0xA8ED00E4);
	r2 = D(r2, s1_2_0, 0x0B00FDF2, 0x2D0006F2, 0x260BFE21, 0x0D010414);
	r3 = D(r3, s1_2_0, 0xF5041214, 0x03FE090A, 0xF105FC05, 0x190B2D04);
	r4 = D(r4, s1_2_0, 0xFCF4E7F9, 0xF7EFFA18, 0x14EC0007, 0x170C02EE);
	r5 = D(r5, s1_2_0, 0x0702E7DC, 0xF807FEF8, 0xF00B0BFE, 0x0FEF1C0A);
	r6 = D(r6, s1_2_0, 0xFAFCFBFD, 0x0014CB36, 0xFA080704, 0x2B120902);
	r7 = D(r7, s1_2_0, 0xCE061E0F, 0xFDFAEF07, 0x11F22AE8, 0xEC0000D6);
	r0 = D(r0, s1_2_1, 0x431100E4, 0xE40C0010, 0xF70DFF02, 0xFEFC100F);
	r1 = D(r1, s1_2_1, 0x0710FCFA, 0x0BDE0691, 0x31052C05, 0x1600FDBC);
	r2 = D(r2, s1_2_1, 0x0C0DF8FA, 0x2CF41102, 0x0609F908, 0xF70B0519);
	r3 = D(r3, s1_2_1, 0xCE191210, 0x1CEDF9FD, 0x0301F9FE, 0x0E0C3C34);
	r4 = D(r4, s1_2_1, 0x000B0822, 0xFAF218FA, 0x06E7E5EB, 0x0E010F09);
	r5 = D(r5, s1_2_1, 0x2D0D27F2, 0x1FFA0600, 0x04F40207, 0xFB01ED0B);
	r6 = D(r6, s1_2_1, 0xE70BEBE5, 0xD9E90AF9, 0xF6F9F702, 0x14FB01F0);
	r7 = D(r7, s1_2_1, 0x0A170AF5, 0xF9050900, 0x07141009, 0x05FAEB2A);
	r0 = D(r0, s1_2_2, 0xE8F4E4E7, 0x141B0D00, 0xF20C08FE, 0xFA0405FA);
	r1 = D(r1, s1_2_2, 0x0A0109F2, 0x0A1207ED, 0xF512FEEC, 0xFB03F7E0);
	r2 = D(r2, s1_2_2, 0x0BFE0913, 0x1216E901, 0x05040B13, 0xFE0DEDEF);
	r3 = D(r3, s1_2_2, 0xFDF104F2, 0x00FD030E, 0xFF040505, 0xFFCAE804);
	r4 = D(r4, s1_2_2, 0x1DFD0702, 0xF9FC15F8, 0x17F0DE05, 0xFAFB03E4);
	r5 = D(r5, s1_2_2, 0x2AF0F4F2, 0x0DFD01FB, 0xF305F407, 0x01F30108);
	r6 = D(r6, s1_2_2, 0x1100070F, 0xEC02FADA, 0x14FB0000, 0x1F000203);
	r7 = D(r7, s1_2_2, 0x11100EBB, 0xECFA1C28, 0x02191CFD, 0xDCFAF706);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xE71120F4, 0x13D313EB, 0x15050307, 0x0FF80B0C);
	r1 = D(r1, s0_0_0, 0x040A06F1, 0xE5031CFF, 0xEF21D5C6, 0xDDF20922);
	r2 = D(r2, s0_0_0, 0xFB14FBF1, 0xF0FD1101, 0x04030103, 0x00F90D08);
	r3 = D(r3, s0_0_0, 0xF1FB0BE5, 0xF8F5FAF6, 0xF40BFEF8, 0x0DF1F00C);
	r4 = D(r4, s0_0_0, 0xFB11EEF2, 0x05F60201, 0xB2FB250E, 0xF30EF7FA);
	r5 = D(r5, s0_0_0, 0x040602E3, 0xFE0E06FE, 0xF70405F5, 0x050206FF);
	r6 = D(r6, s0_0_0, 0x1C100403, 0x0E1AD5E9, 0x01F801F8, 0x07F2F705);
	r7 = D(r7, s0_0_0, 0x0D050802, 0x02030305, 0xFB1A0215, 0x06ED0CE9);
	r0 = D(r0, s0_0_1, 0xEB11EC19, 0x01190802, 0xFA0805F4, 0x03F7FEF3);
	r1 = D(r1, s0_0_1, 0xFC0602F8, 0x0CECEAF6, 0x14080809, 0xE8030BE7);
	r2 = D(r2, s0_0_1, 0x060C101E, 0x05F100F8, 0x101426F6, 0x0CFFDE0C);
	r3 = D(r3, s0_0_1, 0xF5F606E4, 0x060B0800, 0xF8FEFB15, 0x0605E5F5);
	r4 = D(r4, s0_0_1, 0x02E20A0F, 0x10FEE9FC, 0x2BF4DFE7, 0xF40BCAD7);
	r5 = D(r5, s0_0_1, 0x06E4000A, 0x17010414, 0xF5070306, 0xFA1D0603);
	r6 = D(r6, s0_0_1, 0x030D0E0D, 0x10F81E11, 0x15FB0DF8, 0x0C0706FD);
	r7 = D(r7, s0_0_1, 0xF31F1E1C, 0xFFEEFAFE, 0x01F01FF0, 0x06140603);
	r0 = D(r0, s0_0_2, 0xFDCB00F0, 0x0601F703, 0xF10502FC, 0x0514F7F7);
	r1 = D(r1, s0_0_2, 0xED02F40E, 0xE6FCF710, 0xF2180BF7, 0x06FBF7FC);
	r2 = D(r2, s0_0_2, 0xF60D080C, 0xFCFEFD05, 0xF917F9FB, 0x08FFF6FB);
	r3 = D(r3, s0_0_2, 0xF90017F8, 0xFD03FF00, 0x07170B0C, 0xE7DEE710);
	r4 = D(r4, s0_0_2, 0xE415F6EB, 0x0405FBDA, 0xBCFEDE2D, 0xF00AFBF1);
	r5 = D(r5, s0_0_2, 0xF0E01CF5, 0xFE170811, 0x04FC0707, 0x06FDFA00);
	r6 = D(r6, s0_0_2, 0xF300F410, 0x1A0600FB, 0x0C08FE09, 0x06FCED00);
	r7 = D(r7, s0_0_2, 0x0E05FBC2, 0xF2FB0BFE, 0x07F6F30F, 0xEE00D509);
	r0 = D(r0, s0_1_0, 0xFA061405, 0xEEF70B07, 0xFEF905F3, 0x04F50B0B);
	r1 = D(r1, s0_1_0, 0x09FBFDF5, 0x17FB0AF7, 0x22F3F0E2, 0x2411E9E1);
	r2 = D(r2, s0_1_0, 0xF61CDCFF, 0xF10818DE, 0xF4FE08FE, 0xF411FBF3);
	r3 = D(r3, s0_1_0, 0x1707FB0C, 0x03FD021B, 0xFA05F7FA, 0xFA19DFFF);
	r4 = D(r4, s0_1_0, 0x1001FF0B, 0xE20A0AF5, 0x38EE13A1, 0x00060EF3);
	r5 = D(r5, s0_1_0, 0xFDF9F90B, 0xFCF902EC, 0x0F03F401, 0x0911ECFE);
	r6 = D(r6, s0_1_0, 0x0DF005F4, 0xCE21F3FD, 0xF302FAFA, 0xFF0509F5);
	r7 = D(r7, s0_1_0, 0x050E1D1A, 0xFE0EE116, 0x13F21216, 0x150620FF);
	r0 = D(r0, s0_1_1, 0x1BE6F614, 0x0401F00E, 0x05FFFCFF, 0xF6F5FF05);
	r1 = D(r1, s0_1_1, 0xFF07F7FA, 0x001208F9, 0x10F83310, 0xF8040DE3);
	r2 = D(r2, s0_1_1, 0xE5F6F7FA, 0x15EA0701, 0x000D1212, 0x11FFEC12);
	r3 = D(r3, s0_1_1, 0x1C070302, 0xFA09F9F9, 0x1A070EF7, 0xDB163FEE);
	r4 = D(r4, s0_1_1, 0x0E0B0510, 0x010DFAFD, 0xE603FDFF, 0xC6FB0409);
	r5 = D(r5, s0_1_1, 0xF10BF824, 0x06F7ED07, 0x0A00F4FA, 0x09140212);
	r6 = D(r6, s0_1_1, 0xF2F80DF5, 0x062FF001, 0xF0EE0D01, 0x11D11818);
	r7 = D(r7, s0_1_1, 0xDEF916E6, 0x15D305F7, 0x0815FEDE, 0x07F2FFF8);
	r0 = D(r0, s0_1_2, 0x0101E2EA, 0x0014E6F5, 0x0CF4FBFA, 0x021000F5);
	r1 = D(r1, s0_1_2, 0x080102FD, 0xF4FFE509, 0xFAE7CFDF, 0x140FE713);
	r2 = D(r2, s0_1_2, 0xF80706F3, 0x08F3FD02, 0x030302E6, 0xFA06F2F0);
	r3 = D(r3, s0_1_2, 0x110A0CFB, 0xF410010A, 0x040401E6, 0xCEDEF0FA);
	r4 = D(r4, s0_1_2, 0x08F00905, 0xF50709FE, 0xF7FDE83A, 0xEEF1091B);
	r5 = D(r5, s0_1_2, 0x0D0DE5F1, 0x1C190213, 0xF7F80EFE, 0xF306F8FC);
	r6 = D(r6, s0_1_2, 0x03FE06EE, 0xEBF50A09, 0x02E1EEFD, 0xFAEEF5F5);
	r7 = D(r7, s0_1_2, 0x02ECE51C, 0xF8FAEF14, 0xEFFBF411, 0xED0DE112);
	r0 = D(r0, s0_2_0, 0xCE160C08, 0x12071BF5, 0x02FD070A, 0x1C00F1FC);
	r1 = D(r1, s0_2_0, 0x0703FB07, 0x04E0F9E3, 0xF106D527, 0xE914E5FD);
	r2 = D(r2, s0_2_0, 0x0DFC0204, 0xF90EF40C, 0xFBF70B07, 0x020F0103);
	r3 = D(r3, s0_2_0, 0xE115020B, 0x12FCFE02, 0xEEFFFC05, 0x03083501);
	r4 = D(r4, s0_2_0, 0x0C17FCF1, 0xE002FCE2, 0xB9081881, 0xF30812F5);
	r5 = D(r5, s0_2_0, 0xE50412FD, 0xFB05F71A, 0x09F7FEFD, 0x0FF400F1);
	r6 = D(r6, s0_2_0, 0x09FB0300, 0x01FED4EE, 0xFA0BF7FB, 0xFAE3172B);
	r7 = D(r7, s0_2_0, 0x0A0307E9, 0xEF01FD07, 0xE9180C04, 0x28061708);
	r0 = D(r0, s0_2_1, 0x17ECE10C, 0x05000706, 0x07FAFCFE, 0xFC0A0203);
	r1 = D(r1, s0_2_1, 0xF804FB03, 0x25EF04F9, 0x10FB4634, 0xFE1A2006);
	r2 = D(r2, s0_2_1, 0xFBFF0505, 0xF8FDFCF4, 0x0409FDFE, 0x030101F8);
	r3 = D(r3, s0_2_1, 0xF4FCED0B, 0xF805F708, 0xFE0B030B, 0xF4D7FE1B);
	r4 = D(r4, s0_2_1, 0x02FF0ED9, 0xEF020605, 0x9C12F2E1, 0xECFF0BFD);
	r5 = D(r5, s0_2_1, 0xF6FD0325, 0x0C0600F4, 0xFA02F503, 0x1D19F609);
	r6 = D(r6, s0_2_1, 0xFA01FE0E, 0xE8EF0D0D, 0xFAF40809, 0xFDDA0816);
	r7 = D(r7, s0_2_1, 0xFAF6ECF3, 0xF6EE0606, 0x030811F4, 0xF8F6D617);
	r0 = D(r0, s0_2_2, 0xFEECE509, 0xF1F3110E, 0xFA0D0104, 0xF3FCFAFC);
	r1 = D(r1, s0_2_2, 0x0F0C0A02, 0xFD08E911, 0x0ADDF513, 0xEEFD0B0C);
	r2 = D(r2, s0_2_2, 0xF90103FF, 0xFAF2D817, 0xFD05FF07, 0x16000CEB);
	r3 = D(r3, s0_2_2, 0x06EFEEEA, 0xF5FB1207, 0x06FE0613, 0x21EEE005);
	r4 = D(r4, s0_2_2, 0x0417E503, 0x08150005, 0xBA2D13E6, 0x080C0200);
	r5 = D(r5, s0_2_2, 0xFA080E05, 0x0C090C14, 0xFAF608FB, 0xFB0B1701);
	r6 = D(r6, s0_2_2, 0x0E1FE602, 0xF50B1738, 0x030AFA09, 0x10EF1001);
	r7 = D(r7, s0_2_2, 0xFAEAFDFE, 0xFD08E81A, 0xFCFEF7EF, 0xF3F30D09);
	r0 = D(r0, s1_0_0, 0xE6FA08FA, 0xFC0BFE17, 0xF6FFF8FF, 0x09FBF2F6);
	r1 = D(r1, s1_0_0, 0x00F803FD, 0xF6E4F6E3, 0x05050025, 0x25D90603);
	r2 = D(r2, s1_0_0, 0xFC0D01FA, 0xF610FB0D, 0x0510FF07, 0x03DC10FC);
	r3 = D(r3, s1_0_0, 0xF7DA05FE, 0x0BFEF4F8, 0xFB00F3FF, 0x090BDEDA);
	r4 = D(r4, s1_0_0, 0xFEFFE7EC, 0xF90AF1ED, 0x3307F3D2, 0xFCDFE808);
	r5 = D(r5, s1_0_0, 0xDF290202, 0x05F9F6FF, 0xFD03FDF9, 0xFC0D0901);
	r6 = D(r6, s1_0_0, 0xEE07F5E3, 0xE9E30206, 0xFA0807FD, 0xFAFDF0F4);
	r7 = D(r7, s1_0_0, 0x2230E9DC, 0x09000CFF, 0x0C151727, 0xDD0B14F3);
	r0 = D(r0, s1_0_1, 0xCEDAF215, 0xF4F4F1DC, 0xF7F30BF0, 0xF4080AFE);
	r1 = D(r1, s1_0_1, 0xF80404F0, 0xFD0DE907, 0xCECDDDD9, 0xEFF9FD10);
	r2 = D(r2, s1_0_1, 0x15021407, 0xF222F6D7, 0x0A0CD903, 0x07EB0E13);
	r3 = D(r3, s1_0_1, 0x08F717FF, 0x180805ED, 0xF6FBF6FA, 0x0402021D);
	r4 = D(r4, s1_0_1, 0xF40B0B00, 0x0FE9F6FE, 0xE9FF1DA6, 0x0C120CF1);
	r5 = D(r5, s1_0_1, 0x11DFFF16, 0x12FB00F2, 0x0FFB0D01, 0x01F0F5FC);
	r6 = D(r6, s1_0_1, 0xFDF0F8FD, 0xFB02EDE6, 0x001DF2F9, 0x06FB0203);
	r7 = D(r7, s1_0_1, 0xFBEDEF0F, 0x1302F0FD, 0xF9EDF601, 0xE224EB12);
	r0 = D(r0, s1_0_2, 0x08262C0B, 0x010E0DFF, 0xF70905FB, 0xFEFF01ED);
	r1 = D(r1, s1_0_2, 0x05020503, 0x12F2141E, 0x1508050B, 0xFCFFEFFC);
	r2 = D(r2, s1_0_2, 0x1302F7FC, 0xE301F8E9, 0xFC07E600, 0xF3FC01EC);
	r3 = D(r3, s1_0_2, 0xFDEDF401, 0x1506F701, 0xF70EF305, 0x0F0C20F1);
	r4 = D(r4, s1_0_2, 0x110500FA, 0x1505ECF8, 0xE5E5FD1F, 0x0B0A0D08);
	r5 = D(r5, s1_0_2, 0xEF17F413, 0xFEF6110C, 0x0502FD04, 0xF008FC11);
	r6 = D(r6, s1_0_2, 0x00FFEAF5, 0xEFFD03FC, 0x11F8FE12, 0x0FF7FDF3);
	r7 = D(r7, s1_0_2, 0x11CFD9F6, 0xF813FE06, 0xEDE2F716, 0xF4FCDF26);
	r0 = D(r0, s1_1_0, 0xEBFAF00C, 0xFB1B0AEA, 0xFBFC07F5, 0xFDFC18EC);
	r1 = D(r1, s1_1_0, 0xF7F20607, 0x042B03E7, 0x13F2E806, 0xE71A02F4);
	r2 = D(r2, s1_1_0, 0xF9FC0912, 0xFEE3F0FA, 0x031107F2, 0xF80B0909);
	r3 = D(r3, s1_1_0, 0xF1EC06FE, 0x01FCFCF2, 0x0CECFDFB, 0x1AF7E1F8);
	r4 = D(r4, s1_1_0, 0xF8FC0D12, 0x23FE06FE, 0x10F0E1F4, 0xEA0FEDF4);
	r5 = D(r5, s1_1_0, 0x0A131504, 0x0AE5FDF3, 0x03F9F402, 0xF817F8FB);
	r6 = D(r6, s1_1_0, 0x0CF30F12, 0xE4F5FEFA, 0xFD0005FC, 0xED020A0A);
	r7 = D(r7, s1_1_0, 0xFB0C1D05, 0x06130B0D, 0x0B0F0BE8, 0x159B2600);
	r0 = D(r0, s1_1_1, 0x030AD6F5, 0x0BDFF9FC, 0x02F2020C, 0xF20C0105);
	r1 = D(r1, s1_1_1, 0xFC0C0B1D, 0x0EE9F7EC, 0x04F015E1, 0x1708080A);
	r2 = D(r2, s1_1_1, 0xFAF90FF6, 0xF0D91CEE, 0xFC09FD06, 0x1105F10A);
	r3 = D(r3, s1_1_1, 0xF313F616, 0xF517080B, 0xF903F9FC, 0xF31BF813);
	r4 = D(r4, s1_1_1, 0x0CE508F3, 0xDC02F11C, 0x15FD0DEE, 0x05E8E9F1);
	r5 = D(r5, s1_1_1, 0x06050B00, 0x00F501E5, 0xF3F90306, 0x0CF61009);
	r6 = D(r6, s1_1_1, 0x200002F2, 0x01D50007, 0x11070213, 0x0D02090C);
	r7 = D(r7, s1_1_1, 0xF4BD13E4, 0x0EED08FD, 0xFBFFFBF6, 0x1BC40905);
	r0 = D(r0, s1_1_2, 0xD4F9091D, 0x05FC0AFB, 0xFCFB1103, 0xFCFC03F9);
	r1 = D(r1, s1_1_2, 0x06FFF405, 0x06DD00F7, 0xECFC360C, 0x03F2FE0F);
	r2 = D(r2, s1_1_2, 0x00040004, 0x18E40002, 0x05F50500, 0xFA031004);
	r3 = D(r3, s1_1_2, 0xFDFBE3DF, 0xF815EF0D, 0x10030427, 0x0F1EF918);
	r4 = D(r4, s1_1_2, 0x12000300, 0xFEFAEE04, 0xC0BF211C, 0x0A02100C);
	r5 = D(r5, s1_1_2, 0xFFE8FA04, 0x04F9FA09, 0x02FEFEF9, 0xE009F8EA);
	r6 = D(r6, s1_1_2, 0xFB07EEFB, 0xFB40D9DE, 0xFCFE0600, 0xFD02EEED);
	r7 = D(r7, s1_1_2, 0xF81619FB, 0xE90DF9F6, 0x02E800E7, 0x08010114);
	r0 = D(r0, s1_2_0, 0xFF04EEF8, 0x12E104FB, 0xFCFDFCF7, 0x0BFEEB00);
	r1 = D(r1, s1_2_0, 0xFCF706FA, 0x0303FBED, 0x30EB3408, 0x01F5F8F6);
	r2 = D(r2, s1_2_0, 0xF40C00FF, 0x19E9FAF5, 0x06F80A14, 0xFE01F6FA);
	r3 = D(r3, s1_2_0, 0x16021000, 0x0403FCFB, 0xF10D0B08, 0x2A140AFB);
	r4 = D(r4, s1_2_0, 0x0010F8F8, 0x0EF80FFB, 0x13EA15FA, 0x00FA18F7);
	r5 = D(r5, s1_2_0, 0xFB17EDE2, 0xE9091509, 0x02030806, 0xEC001002);
	r6 = D(r6, s1_2_0, 0x0B080901, 0x0608FD08, 0xFB09FAFA, 0x0FFC070E);
	r7 = D(r7, s1_2_0, 0x23EAFA14, 0x0D10EFED, 0x06FE0BFB, 0xFEF9F2FF);
	r0 = D(r0, s1_2_1, 0xF11F06F6, 0x15EEF60F, 0x0BF90603, 0x01F2F014);
	r1 = D(r1, s1_2_1, 0xFB0DFF06, 0xDEFD20E8, 0x1A1707CB, 0xD80110F3);
	r2 = D(r2, s1_2_1, 0xF9F9ECFC, 0x15D0F3EB, 0xF7F71206, 0x1C1C06F5);
	r3 = D(r3, s1_2_1, 0x1513F122, 0xF2EB130A, 0xF7FA15FF, 0x030F1706);
	r4 = D(r4, s1_2_1, 0x040BF909, 0xE3EEECD8, 0xFE0A27FC, 0xFC1B0818);
	r5 = D(r5, s1_2_1, 0xE61315E2, 0x121004F6, 0x0307F708, 0xF028FF01);
	r6 = D(r6, s1_2_1, 0xFC0202F4, 0xF4CB250F, 0x23E70EF0, 0x16020322);
	r7 = D(r7, s1_2_1, 0x06BDEA19, 0xF00CF1FE, 0xFDE8F90C, 0xFA0D1601);
	r0 = D(r0, s1_2_2, 0x0B0FF30B, 0x03000607, 0x0302FD0A, 0x060705FE);
	r1 = D(r1, s1_2_2, 0x03FDF9FE, 0xE0EEFE0B, 0x05D61BFC, 0xF5F1F90A);
	r2 = D(r2, s1_2_2, 0xFEFEFFFD, 0x12F5F403, 0x180000FC, 0x1405FFE9);
	r3 = D(r3, s1_2_2, 0x0400F810, 0xF103FC08, 0xFA05060F, 0xDEEA2EF9);
	r4 = D(r4, s1_2_2, 0x050D1505, 0x0106E305, 0x45FCF50E, 0xFFFFFAFC);
	r5 = D(r5, s1_2_2, 0x1D06EBEC, 0x04050306, 0xFDFFF8F7, 0xF90AECE7);
	r6 = D(r6, s1_2_2, 0xF0FC090D, 0x19030BE2, 0x0A0B05FD, 0xEB14F6F5);
	r7 = D(r7, s1_2_2, 0x2003FEF1, 0xF7F4FFF1, 0x17E708DA, 0xF924EFFE);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x20EF040C, 0x04F10604, 0x09F601FE, 0x0C00F8F5);
	r1 = D(r1, s0_0_0, 0x08F50C02, 0xF9200613, 0x004DF9EB, 0xF8ED0EFA);
	r2 = D(r2, s0_0_0, 0x10F9FCFF, 0xF2B805EA, 0xFB39F9F9, 0xE410E20A);
	r3 = D(r3, s0_0_0, 0xFB2CF709, 0xFF1E0EF6, 0xEF020907, 0x11EAEFF9);
	r4 = D(r4, s0_0_0, 0x23E915FF, 0xF812E9F5, 0xE1140610, 0x1409F306);
	r5 = D(r5, s0_0_0, 0xE3E0FCEE, 0xF0F8EF00, 0xF00C0D0B, 0xF320000E);
	r6 = D(r6, s0_0_0, 0xF625EB07, 0xFA182304, 0x0317FFF3, 0xF7E70A08);
	r7 = D(r7, s0_0_0, 0x072CEAF0, 0x171214EE, 0xDA13DC16, 0xEA41B60C);
	r0 = D(r0, s0_0_1, 0x11BCF8DE, 0xF8F60B00, 0xFD1A02FC, 0xFE0B000F);
	r1 = D(r1, s0_0_1, 0x06060E14, 0xF5D517DB, 0xF12719CF, 0xEBC7FEF0);
	r2 = D(r2, s0_0_1, 0xE5FFF317, 0xDC21E21A, 0xFAFF02FE, 0x29FA03F1);
	r3 = D(r3, s0_0_1, 0x09E504F9, 0xECE9F7F1, 0x0DF3FAEE, 0x2CFDF9F4);
	r4 = D(r4, s0_0_1, 0x0EF60D09, 0x1AE105FE, 0x34E81D1B, 0xF107FD01);
	r5 = D(r5, s0_0_1, 0x27BEF0F6, 0x0AEE060B, 0xEDE8F505, 0x08F9F3F6);
	r6 = D(r6, s0_0_1, 0x060F01F8, 0x022C0CF1, 0xF1EB04FA, 0xF6FCFFF2);
	r7 = D(r7, s0_0_1, 0xF214F9D6, 0x12051100, 0x011B01FF, 0x083B0E28);
	r0 = D(r0, s0_0_2, 0x021DFA27, 0x0BF0FB01, 0xFC0002F7, 0x0BE5EDFD);
	r1 = D(r1, s0_0_2, 0xFA080802, 0x093BF904, 0xF4E4F723, 0xF2170AFA);
	r2 = D(r2, s0_0_2, 0xFEFB000B, 0x19FDE7FD, 0xFCED05FF, 0xFA0609F2);
	r3 = D(r3, s0_0_2, 0xFDF50EDF, 0x08F402F4, 0x08FCF502, 0xF41A09E2);
	r4 = D(r4, s0_0_2, 0xEFDCF8F1, 0xF6FF12FB, 0x0E100F2D, 0xDE1213F6);
	r5 = D(r5, s0_0_2, 0x031D1400, 0x06ECFDF3, 0xFA040700, 0xF80D05FC);
	r6 = D(r6, s0_0_2, 0x00F3F908, 0x08CEE6FE, 0xFA1011EA, 0x0112F704);
	r7 = D(r7, s0_0_2, 0xF3A8FE07, 0xFE010010, 0x05F319FD, 0xEB0116F4);
	r0 = D(r0, s0_1_0, 0x18F612F0, 0x0006EEEE, 0xEF080301, 0xF4DE16E5);
	r1 = D(r1, s0_1_0, 0x09F6F906, 0xF6FFA917, 0x100E1D07, 0x0B1BE325);
	r2 = D(r2, s0_1_0, 0x0505FDFF, 0xFEF62206, 0x212202E4, 0xF1F30E04);
	r3 = D(r3, s0_1_0, 0x13FF14EE, 0xEEF40A07, 0x1B0011FD, 0x05FDFC12);
	r4 = D(r4, s0_1_0, 0x09F6F406, 0xFFC005FF, 0xF7F7A80D, 0x0917FE08);
	r5 = D(r5, s0_1_0, 0xF9280415, 0x0F1B14EF, 0xEFFF01FD, 0xFFFDFEEB);
	r6 = D(r6, s0_1_0, 0x021E0AF7, 0x201A19FF, 0xF4F2F1F9, 0xFAF3EBFC);
	r7 = D(r7, s0_1_0, 0x17CBEBF1, 0xF802FA06, 0xD30A0CEE, 0xE81945ED);
	r0 = D(r0, s0_1_1, 0x03170D00, 0x011C0F19, 0x01F6020F, 0x0E13E924);
	r1 = D(r1, s0_1_1, 0x16F2FF01, 0x0906E9D2, 0x18E012DC, 0x041DE9DF);
	r2 = D(r2, s0_1_1, 0xE80BFEED, 0xDF091614, 0x03DAF223, 0x2629FC0D);
	r3 = D(r3, s0_1_1, 0x14320020, 0xF2050511, 0x0C0DFE12, 0xFF3E18F9);
	r4 = D(r4, s0_1_1, 0xFEFD0FFA, 0xF707FC0B, 0xF0EE2FB4, 0xF107FC04);
	r5 = D(r5, s0_1_1, 0x040EF816, 0xFD080609, 0x0A0B0A06, 0x07E902EE);
	r6 = D(r6, s0_1_1, 0xEBF7030A, 0x21190604, 0x0113EB16, 0x2010FA05);
	r7 = D(r7, s0_1_1, 0xF133DA18, 0x07E6F502, 0xE40DF704, 0x02EC12FB);
	r0 = D(r0, s0_1_2, 0x19F4DE05, 0xF0FF120F, 0x0B02F902, 0xF408F50C);
	r1 = D(r1, s0_1_2, 0x040C0DF1, 0x0A1129C4, 0xEF07DAE0, 0x062A28D5);
	r2 = D(r2, s0_1_2, 0xFA090CF7, 0xF9EB1508, 0x0C130128, 0x00310509);
	r3 = D(r3, s0_1_2, 0x13FEFF1D, 0x03F80108, 0x0904021F, 0xE7DEBB13);
	r4 = D(r4, s0_1_2, 0x11FE04FD, 0xF6122307, 0xFA2028F1, 0xFD030EF2);
	r5 = D(r5, s0_1_2, 0x12EFF0E8, 0xF103FFF8, 0xFE020301, 0xECF805FC);
	r6 = D(r6, s0_1_2, 0xF90FF2F2, 0xD70DE3F1, 0x080418DD, 0xF102F406);
	r7 = D(r7, s0_1_2, 0x0E1912FA, 0xFB0B0904, 0x16061309, 0x2015E6EB);
	r0 = D(r0, s0_2_0, 0xEC0CF2F0, 0x0AF90EED, 0x021305F8, 0x0DF5FDF8);
	r1 = D(r1, s0_2_0, 0xF819FCF8, 0x02DDF914, 0x24E22513, 0x1DED0209);
	r2 = D(r2, s0_2_0, 0xFD0DFAFC, 0x0CF30FF5, 0xF11513EC, 0xFFFAF7EA);
	r3 = D(r3, s0_2_0, 0xF219EAED, 0x0EF901FA, 0xFA03F6F3, 0xFA37EBF3);
	r4 = D(r4, s0_2_0, 0x03020BE9, 0x02F40FFA, 0x1A41D9FB, 0xFCE3FEF0);
	r5 = D(r5, s0_2_0, 0xE112EDFB, 0xFE02FE14, 0xEF02FF0C, 0x01FB070F);
	r6 = D(r6, s0_2_0, 0xFCF9FF04, 0x20DB0711, 0x05FDFD07, 0x020E0C07);
	r7 = D(r7, s0_2_0, 0xF3F4F407, 0xE9E2DBF7, 0xF2321417, 0x02300A08);
	r0 = D(r0, s0_2_1, 0xE2F3FF18, 0xF215F4E2, 0xF10C000A, 0x01F7EB02);
	r1 = D(r1, s0_2_1, 0xFE0101FE, 0xF41BD806, 0xEB27FD18, 0xF80FF606);
	r2 = D(r2, s0_2_1, 0x13F206F8, 0xFE04EAF4, 0xEC0CFDFA, 0x0F05F302);
	r3 = D(r3, s0_2_1, 0xF3F60C01, 0xFEEB0200, 0x01FFF8EE, 0xEBB4FC0B);
	r4 = D(r4, s0_2_1, 0xFE0F05FA, 0x0309FE10, 0xE1F93AFA, 0x011713EC);
	r5 = D(r5, s0_2_1, 0xC2190D40, 0x19060BF0, 0x00020EFA, 0x0BF3F2F5);
	r6 = D(r6, s0_2_1, 0xD707FAE7, 0x031E1708, 0xF5F90012, 0x03FB0CF8);
	r7 = D(r7, s0_2_1, 0xEFED06DE, 0x0710E908, 0xF617DEF5, 0x03EAF1DA);
	r0 = D(r0, s0_2_2, 0xDE1221FF, 0xF9EFF5F2, 0xF8F9F603, 0x0205F902);
	r1 = D(r1, s0_2_2, 0x0205F404, 0x1A100A16, 0x12F2E90F, 0xE4F4050E);
	r2 = D(r2, s0_2_2, 0x0407FB09, 0x2405F6F3, 0x17ECFFFA, 0x01EFF5FB);
	r3 = D(r3, s0_2_2, 0x00EDEE0F, 0x0BE20405, 0xF5F5FBEE, 0x132BE7DE);
	r4 = D(r4, s0_2_2, 0xEDFF0F17, 0x02FAF9EB, 0x24ADF53D, 0xF6F90405);
	r5 = D(r5, s0_2_2, 0x0FDA14CC, 0x0FF80601, 0xFF06030D, 0x1BE5F208);
	r6 = D(r6, s0_2_2, 0x06000701, 0xE32404FA, 0xFD071CF8, 0xF015DBF8);
	r7 = D(r7, s0_2_2, 0xFA11220D, 0x0E10F800, 0x1807E7EC, 0x1DF3ED00);
	r0 = D(r0, s1_0_0, 0x07FC190B, 0x1A0B32F4, 0xF7FB1109, 0x0502F30A);
	r1 = D(r1, s1_0_0, 0x01FAF2FA, 0x04DD3F08, 0xFFEF380A, 0xFA001EEB);
	r2 = D(r2, s1_0_0, 0x0702C501, 0xEC14DBFD, 0xF6FFF6F4, 0xFCF9131A);
	r3 = D(r3, s1_0_0, 0xFFF8CD03, 0x030915EF, 0xF1FB2700, 0xF1EE3DE6);
	r4 = D(r4, s1_0_0, 0x0B0207F4, 0x0900FB0B, 0xDCED0CE1, 0x14F4D60A);
	r5 = D(r5, s1_0_0, 0xF714D10E, 0xF614EBEE, 0xF80505FF, 0xFF122CFA);
	r6 = D(r6, s1_0_0, 0xFE061DFB, 0x0B0CCEE5, 0x0209EEFD, 0x170052EE);
	r7 = D(r7, s1_0_0, 0xCFECF4F8, 0xDBF1C50E, 0x33F2E0FB, 0xEAF2110A);
	r0 = D(r0, s1_0_1, 0xF720010A, 0x08F031FF, 0xEF030505, 0xEDFB1507);
	r1 = D(r1, s1_0_1, 0xFFF7FEF8, 0x021110FC, 0x131522E5, 0xEAFF3207);
	r2 = D(r2, s1_0_1, 0x0A0E1907, 0xE5F11A0E, 0x11FE17F8, 0xF6F6EBF9);
	r3 = D(r3, s1_0_1, 0xF7FB14CF, 0xEA130CEE, 0x1A07E902, 0xCF09251B);
	r4 = D(r4, s1_0_1, 0x0D09EB0D, 0xE4EE10E4, 0xDFEBF2F3, 0x1D1E4ECE);
	r5 = D(r5, s1_0_1, 0x100281E1, 0xF0EE06FC, 0xF906FD10, 0xDF0529FF);
	r6 = D(r6, s1_0_1, 0xD5DAF202, 0xFB08EEFE, 0xF105F20D, 0xF1190EE8);
	r7 = D(r7, s1_0_1, 0xF62310FD, 0x0DF62404, 0xD7E736FF, 0xF2D19903);
	r0 = D(r0, s1_0_2, 0x34F4F11F, 0xF7F00DF6, 0xF2020F04, 0x00FB02FB);
	r1 = D(r1, s1_0_2, 0x07060B01, 0x18F6E1F8, 0x03E8160E, 0x09EF1214);
	r2 = D(r2, s1_0_2, 0x0708F4FD, 0xF403311A, 0xF2F7FF08, 0x07EB1301);
	r3 = D(r3, s1_0_2, 0x00FAC1EE, 0x0F0B3307, 0xF7FEDCFA, 0x1EE9F709);
	r4 = D(r4, s1_0_2, 0x01F1C301, 0xE9EAF6E8, 0xDC182107, 0x0CF10706);
	r5 = D(r5, s1_0_2, 0x080BF50F, 0xFF090AF9, 0x040802FD, 0xF60907EE);
	r6 = D(r6, s1_0_2, 0xFDFCF0F6, 0xF012D5F6, 0x04FD11FA, 0x1F04EEF3);
	r7 = D(r7, s1_0_2, 0xFFF9D312, 0xEDE9CD02, 0xF7F4F8EE, 0x23F2CDF4);
	r0 = D(r0, s1_1_0, 0x10011DF9, 0xEF012406, 0xFC071608, 0xF8FE160B);
	r1 = D(r1, s1_1_0, 0xFB06070E, 0xF5060803, 0xF4F623E5, 0x191DF010);
	r2 = D(r2, s1_1_0, 0x06F8F2F5, 0x06F9EEF4, 0xF6F20701, 0xEDF5EEF5);
	r3 = D(r3, s1_1_0, 0x071007F6, 0x06F71AF7, 0xF70CF503, 0x08FBE8F9);
	r4 = D(r4, s1_1_0, 0xEBEF17F9, 0x23F8FB02, 0xF104E805, 0x09F8FDFD);
	r5 = D(r5, s1_1_0, 0xF8F8FEFB, 0xFD0702F6, 0x0F000214, 0x0E09FF01);
	r6 = D(r6, s1_1_0, 0xF2F9D027, 0xD50734F9, 0x04FBE606, 0xFFFA14E1);
	r7 = D(r7, s1_1_0, 0x0601E512, 0x0DF52611, 0xE0FEF1FC, 0x02041EEC);
	r0 = D(r0, s1_1_1, 0x2A12FE15, 0x05E818F9, 0x171405F9, 0xEB090FF9);
	r1 = D(r1, s1_1_1, 0xFD0D09FF, 0xC4CB3001, 0xF227F9FD, 0xF911DE0E);
	r2 = D(r2, s1_1_1, 0xF0F9071B, 0xFF15171B, 0xF7EE0210, 0xFFEE10ED);
	r3 = D(r3, s1_1_1, 0x0F10100F, 0x1F0505F5, 0xFA0813F5, 0x2A12FB16);
	r4 = D(r4, s1_1_1, 0xF1FAE9F3, 0x0B2518FD, 0x2D814206, 0x1B201424);
	r5 = D(r5, s1_1_1, 0xC2FDECEB, 0xF1E7DCFF, 0xFCF918F7, 0x03F023F5);
	r6 = D(r6, s1_1_1, 0xFFE90CF7, 0xE3350200, 0x06F70D1D, 0xF2F2DAF6);
	r7 = D(r7, s1_1_1, 0x16E40BDA, 0x2B11DDE2, 0xF7ECF002, 0xB7F4C22D);
	r0 = D(r0, s1_1_2, 0xD22A19F6, 0x01E8FEF2, 0xF6ECFCF5, 0xFEFAFAF8);
	r1 = D(r1, s1_1_2, 0xF80E08EE, 0xFB023A0C, 0x00FD1607, 0x1518240F);
	r2 = D(r2, s1_1_2, 0xF40A1B08, 0x0724E0F6, 0xF2F40804, 0x0AF7EEF9);
	r3 = D(r3, s1_1_2, 0xE7EDDAEF, 0xFC0F0502, 0xFB00F70A, 0xE30D1BD4);
	r4 = D(r4, s1_1_2, 0x14FB0DFB, 0x0FE0FD04, 0x23F5201F, 0x0EFB0DE3);
	r5 = D(r5, s1_1_2, 0xF50810FF, 0x05F42EFD, 0x010A0208, 0xF5FB0E1B);
	r6 = D(r6, s1_1_2, 0x02081E0D, 0x0AFDE511, 0x0BFAF102, 0x0E092AE3);
	r7 = D(r7, s1_1_2, 0x09EF01EB, 0xE806F810, 0xF7BBF311, 0xF62E1016);
	r0 = D(r0, s1_2_0, 0xF613F9F2, 0xFAFC0BF7, 0xFAFE03FE, 0x09040203);
	r1 = D(r1, s1_2_0, 0xF00A0C04, 0x031F0600, 0x0DE92DE0, 0x0E0B16F9);
	r2 = D(r2, s1_2_0, 0x010AF7FD, 0x02E81DF6, 0x0CFF04F0, 0x020B1002);
	r3 = D(r3, s1_2_0, 0x0E10F415, 0x0DFAF7F2, 0x040D1D07, 0x180BB004);
	r4 = D(r4, s1_2_0, 0xFAF30D04, 0xF80B1308, 0x0B1D22F3, 0xFF0A1AFA);
	r5 = D(r5, s1_2_0, 0x180A2C0A, 0x0E060C03, 0x130BEBFF, 0x160002F8);
	r6 = D(r6, s1_2_0, 0x010B0D03, 0xE6061812, 0xFFF802FF, 0x1B04DFD4);
	r7 = D(r7, s1_2_0, 0x1216A90B, 0xF1070A0D, 0x02FB0C01, 0x0508DA0E);
	r0 = D(r0, s1_2_1, 0x0610FA14, 0xFEF4F80C, 0x030805F2, 0x0E00FDF5);
	r1 = D(r1, s1_2_1, 0xFC05090C, 0xF4FFEC03, 0x0920DBE4, 0xE6DD0CEE);
	r2 = D(r2, s1_2_1, 0x050C0102, 0xFC05F500, 0xFA0406FA, 0xF8E90604);
	r3 = D(r3, s1_2_1, 0x181DEF15, 0xF3FF14F6, 0xF604010E, 0xF42614EB);
	r4 = D(r4, s1_2_1, 0xF3E10EFB, 0xE3ECE515, 0xE60FE6FB, 0x16E7EEE3);
	r5 = D(r5, s1_2_1, 0xC40E1921, 0xF800FBF5, 0xF8050508, 0x0CFB19F4);
	r6 = D(r6, s1_2_1, 0xFA0DFCFC, 0x0718DCF8, 0xF20AFF04, 0x0DF82DE3);
	r7 = D(r7, s1_2_1, 0xE70CDFFA, 0x17F802F4, 0xFC2AFD1F, 0xFFFB210F);
	r0 = D(r0, s1_2_2, 0x29E9E4EE, 0x07161305, 0xF601F603, 0x0A0D0D01);
	r1 = D(r1, s1_2_2, 0xFC06F909, 0xF9D41F10, 0x02FB3FF7, 0x03DDE20E);
	r2 = D(r2, s1_2_2, 0x0700FFFB, 0x100110F7, 0x0CFCFB0A, 0x11F71017);
	r3 = D(r3, s1_2_2, 0xF00AF60B, 0xFC040BF1, 0x04090606, 0xFCFDC63A);
	r4 = D(r4, s1_2_2, 0x09FDDA13, 0x0FF6F4F2, 0x1AD51209, 0x0B0AEBFC);
	r5 = D(r5, s1_2_2, 0x0AF5F1F3, 0x0300E900, 0x06F9FEF8, 0xFFEF0FE1);
	r6 = D(r6, s1_2_2, 0x0A0EF0E7, 0x17F95D17, 0xF4E00EFB, 0x0F290005);
	r7 = D(r7, s1_2_2, 0x20F9EE21, 0xEB0EF9F9, 0xECEBFDFB, 0x26E90EF7);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(9.935e-03, -6.860e-02, 2.141e-02, 3.418e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-8.277e-03, -2.228e-02, -2.386e-01, -3.007e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(2.020e-02, 6.569e-02, 5.053e-04, 4.163e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(1.091e-02, 9.552e-03, -9.723e-03, 4.977e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(7.292e-03, 1.293e-01, 3.272e-02, -1.065e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-3.348e-02, -8.940e-03, 3.652e-03, 3.176e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(9.702e-03, 2.142e-02, -2.949e-02, -5.436e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(3.522e-02, 9.859e-03, 3.611e-02, 4.149e-03);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-BILINEAR-MPV-NVL-conv4
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x04FCFF03, 0xE8081110, 0xFA0C0BDD, 0xF60CD720);
	r1 = D(r1, s0_0_0, 0xE7F7EBCD, 0xE5F21414, 0xFA08F902, 0xD0E1FCFD);
	r2 = D(r2, s0_0_0, 0x2ED4E742, 0xF2FFD8D4, 0xE7FDF60B, 0x21FC1A81);
	r3 = D(r3, s0_0_0, 0x1402FD3A, 0x1FB0F3FE, 0x05150300, 0x35ACEBEE);
	r4 = D(r4, s0_0_0, 0xE5F3F1B4, 0xF9F600D7, 0x00FDF906, 0xF505FB17);
	r5 = D(r5, s0_0_0, 0x07F50802, 0x07FEEF08, 0x21F4F2F5, 0xF317FD17);
	r6 = D(r6, s0_0_0, 0xFA0507FF, 0x03FE03F6, 0xF809FE0E, 0x0104FF04);
	r7 = D(r7, s0_0_0, 0x0803F1EB, 0xE7CEED13, 0xF40517D6, 0x0E040D04);
	r0 = D(r0, s0_0_1, 0x01FD00F7, 0x30110185, 0xF8052416, 0xEFFDCFCE);
	r1 = D(r1, s0_0_1, 0xF6FC14F8, 0xF20F190B, 0xFB000307, 0x01E111E3);
	r2 = D(r2, s0_0_1, 0xE3E038E4, 0x0ACC1607, 0xECFB0CD6, 0xCD173120);
	r3 = D(r3, s0_0_1, 0x200204E4, 0x190EE8D6, 0x0CF4F805, 0x14FCF30F);
	r4 = D(r4, s0_0_1, 0x150BECFA, 0xE9FFE9DC, 0xF9FBFD15, 0x18060D1D);
	r5 = D(r5, s0_0_1, 0x12FB10E9, 0x0CF5E803, 0x0EDDEAF6, 0xF6FFF721);
	r6 = D(r6, s0_0_1, 0xF4FCEC05, 0x090000EB, 0xF905FA08, 0x000203FD);
	r7 = D(r7, s0_0_1, 0xF3E8E1F5, 0x0CE21330, 0xE6FBEDF8, 0x2E0DF708);
	r0 = D(r0, s0_0_2, 0xFDF613FB, 0x1905FAF9, 0x140BEFF0, 0x0901F9C2);
	r1 = D(r1, s0_0_2, 0x0C072B22, 0xED0809F2, 0x0900F2FD, 0xC92001EF);
	r2 = D(r2, s0_0_2, 0x030BFCE9, 0x29810AC7, 0x04F40D08, 0x06F0FA00);
	r3 = D(r3, s0_0_2, 0x16F01DCD, 0x10EDFCEC, 0x0A2EB181, 0x17FC11DE);
	r4 = D(r4, s0_0_2, 0x0CF9E4A1, 0xD81D0E05, 0xF0FCF21E, 0x15FF0445);
	r5 = D(r5, s0_0_2, 0x13FE040A, 0x050507FC, 0x270BF5DC, 0xF40B050F);
	r6 = D(r6, s0_0_2, 0xF8040309, 0x020BFB05, 0xFAFA0AF5, 0x05FF02F8);
	r7 = D(r7, s0_0_2, 0x1FEA0325, 0x1608FAEB, 0xEB0FF5FA, 0x26CBF206);
	r0 = D(r0, s0_1_0, 0x050A07FF, 0xE2EDF704, 0xFE0318EC, 0x06EF1227);
	r1 = D(r1, s0_1_0, 0x0700FAB4, 0x1103F2F8, 0x021107FE, 0xF9FDE8F8);
	r2 = D(r2, s0_1_0, 0x28E7FEDD, 0x02130511, 0xD7E8DBFA, 0xEE2790F2);
	r3 = D(r3, s0_1_0, 0xFAFA11FC, 0x11E8F906, 0x0509FFE7, 0x31F0EDEB);
	r4 = D(r4, s0_1_0, 0xFA14F7F0, 0xEC0AF6FC, 0x05060BFF, 0x04081421);
	r5 = D(r5, s0_1_0, 0x03F20101, 0xFBF10E10, 0x1306F9CD, 0x01F1E600);
	r6 = D(r6, s0_1_0, 0xFE020BFD, 0xFBFBFD08, 0xFA0206F9, 0x080C05FE);
	r7 = D(r7, s0_1_0, 0xF6E020FA, 0xEAD40021, 0xDD1911FB, 0x0C050714);
	r0 = D(r0, s0_1_1, 0x03F7FC02, 0xC9D6E41A, 0x1D01EFD2, 0x08ECF54D);
	r1 = D(r1, s0_1_1, 0x030104B7, 0x4EFF0725, 0x0CE8F90C, 0x12FFF20E);
	r2 = D(r2, s0_1_1, 0x1F03E7DE, 0x1BFB0B07, 0x160817E3, 0xFF18B116);
	r3 = D(r3, s0_1_1, 0xB10110FF, 0x192DFB81, 0xDDE81D09, 0xFCFDFF44);
	r4 = D(r4, s0_1_1, 0xCBF1221A, 0xDAFC1E0F, 0xFC130ADA, 0x00D0BCF6);
	r5 = D(r5, s0_1_1, 0x24C6EAEC, 0xFC1A04F8, 0x07F7F5FA, 0x1C2CF80E);
	r6 = D(r6, s0_1_1, 0x06E5F3EB, 0x091115E2, 0x050C07F8, 0x1D23F8FD);
	r7 = D(r7, s0_1_1, 0xD9FE08EE, 0x060835E9, 0xFFFE072F, 0x0A0AFE08);
	r0 = D(r0, s0_1_2, 0x130602FC, 0xF31C0401, 0x11E3F7FC, 0xC0B3FAF0);
	r1 = D(r1, s0_1_2, 0xC01DEFD9, 0x2FFCDEFE, 0x1604FFF6, 0xA4E9EFFA);
	r2 = D(r2, s0_1_2, 0x0422EAFF, 0x1E3104D6, 0x110003FA, 0x1B25B596);
	r3 = D(r3, s0_1_2, 0xF506FBDF, 0x0ED5F513, 0xE3F8F097, 0x0E0EF411);
	r4 = D(r4, s0_1_2, 0x0D0214EF, 0xFD030207, 0xB806000B, 0x1AF2FD18);
	r5 = D(r5, s0_1_2, 0x1412FA19, 0x16E6F700, 0x01F10409, 0xE4FEF7FF);
	r6 = D(r6, s0_1_2, 0xF8F90100, 0xF0F9FB08, 0x0F04F2FD, 0x0100FBFF);
	r7 = D(r7, s0_1_2, 0x02F90DEF, 0xEB0BF8DC, 0x06CF0B0C, 0xD1ACE3FE);
	r0 = D(r0, s0_2_0, 0x05F2FDFF, 0xF5F4FD0E, 0xF9FF130A, 0xEF13E7E5);
	r1 = D(r1, s0_2_0, 0xDA21DAF2, 0x10F5CE0C, 0x04F9FA00, 0x120DEEF5);
	r2 = D(r2, s0_2_0, 0xF0201B0F, 0xF50C10EB, 0xEEF209FE, 0xD2D51318);
	r3 = D(r3, s0_2_0, 0x0BF9EBFF, 0x0CFBE0E5, 0xFB0EFBF7, 0x02FC10D2);
	r4 = D(r4, s0_2_0, 0xFDEFFB0B, 0xED1416E5, 0x0AF0ED09, 0x0EEAEEC0);
	r5 = D(r5, s0_2_0, 0x09F60DFF, 0xFF0C090D, 0x0B13E7BC, 0x05FD0313);
	r6 = D(r6, s0_2_0, 0xF5F4FF04, 0xFEF90501, 0xF906F90B, 0x04FBFBFE);
	r7 = D(r7, s0_2_0, 0xFA09050C, 0xF8FC130C, 0xDA0CE704, 0xF1EDF9F5);
	r0 = D(r0, s0_2_1, 0x0212F9F9, 0xF6F90213, 0xF7FEFDFD, 0xD50B023D);
	r1 = D(r1, s0_2_1, 0xB3142F00, 0x9E0EF305, 0xFE02FEF5, 0x0000E10A);
	r2 = D(r2, s0_2_1, 0xF5E9060B, 0xF008F50F, 0x1BFC1406, 0xD3F0EBEF);
	r3 = D(r3, s0_2_1, 0xFEEFFCF6, 0x2BD6EFFA, 0x101002DB, 0xCF1DFBF3);
	r4 = D(r4, s0_2_1, 0x1DF4E021, 0x01FEEBF6, 0x0DF9020B, 0x1EF5FE02);
	r5 = D(r5, s0_2_1, 0xFFFA07FB, 0x09EEF20F, 0x250943BB, 0x02F50EFB);
	r6 = D(r6, s0_2_1, 0xEDFA010A, 0xF8F1F6FE, 0xF1090107, 0x07FEFCF0);
	r7 = D(r7, s0_2_1, 0xF212E1EE, 0xE900F9FF, 0x09F61381, 0xDA0C0318);
	r0 = D(r0, s0_2_2, 0xFD050301, 0xDC05060A, 0xF1F40A1C, 0x100903FF);
	r1 = D(r1, s0_2_2, 0xC70D0B11, 0xC6FDC429, 0xFCFF0003, 0xA7FB1B04);
	r2 = D(r2, s0_2_2, 0xFB10F9FB, 0xFD070600, 0x081DF000, 0xF0F73D21);
	r3 = D(r3, s0_2_2, 0xF1FFF20C, 0x22FA0103, 0xD4F2FAFA, 0xF12A2399);
	r4 = D(r4, s0_2_2, 0xF9031A1D, 0xFE170809, 0xF8F70714, 0x00F814FA);
	r5 = D(r5, s0_2_2, 0x0402F3F9, 0xFD05030C, 0xF303F61E, 0x04F70D00);
	r6 = D(r6, s0_2_2, 0x05FF00FB, 0xFFF607FB, 0xFC13FAFC, 0x03F90402);
	r7 = D(r7, s0_2_2, 0x091415FF, 0x040AF307, 0x21E31AE7, 0xAF130AE9);
	r0 = D(r0, s1_0_0, 0xFEF7F8FD, 0x02190FF9, 0x08F60104, 0xFA2A0EF0);
	r1 = D(r1, s1_0_0, 0x23D9EBFF, 0xE6FB06F4, 0x060AFBFC, 0x05FDD7F1);
	r2 = D(r2, s1_0_0, 0x81C2EAD1, 0x29538CF1, 0xE2F70BFB, 0x36F7E9EE);
	r3 = D(r3, s1_0_0, 0x0818310E, 0x23FBD5FC, 0xEDF50513, 0xEC2EDF11);
	r4 = D(r4, s1_0_0, 0x43E3E8CB, 0xDDDED1F6, 0x14061EE7, 0x09FA1CEA);
	r5 = D(r5, s1_0_0, 0x24F6F6F3, 0x01E5FE01, 0x357FF1F4, 0x03EE29FD);
	r6 = D(r6, s1_0_0, 0x01FE07F8, 0xF9010AFA, 0xFF0E01F4, 0x0100FAFF);
	r7 = D(r7, s1_0_0, 0xFC0181FC, 0xD81CE1F7, 0xFD11F002, 0x0A15121C);
	r0 = D(r0, s1_0_1, 0x06FD0307, 0x10F1BCE6, 0x0CF6EA09, 0xC4B0F3F2);
	r1 = D(r1, s1_0_1, 0x14E62F0B, 0xF6F9F00C, 0xF209FD11, 0x0318EDFA);
	r2 = D(r2, s1_0_1, 0xEB10040F, 0xF9F92413, 0xE21512F2, 0x245087BF);
	r3 = D(r3, s1_0_1, 0x00051409, 0x260BED01, 0x0936101E, 0x102AF3F5);
	r4 = D(r4, s1_0_1, 0x990D821A, 0x0CE121EE, 0x141134FB, 0xD6140B0C);
	r5 = D(r5, s1_0_1, 0x100BE510, 0x0D19F3FB, 0xDBDC10FD, 0x07162DE7);
	r6 = D(r6, s1_0_1, 0x05000312, 0x08090700, 0x0112FCFB, 0xFE05FEFF);
	r7 = D(r7, s1_0_1, 0xE0F0CEEA, 0x00FAAAFD, 0xEEE5FDE9, 0x0C0F03FB);
	r0 = D(r0, s1_0_2, 0xF80603FE, 0x011DEDFF, 0x00050211, 0xF5271D0A);
	r1 = D(r1, s1_0_2, 0x19EFF802, 0xFF18FBF9, 0x04FAFD04, 0xFF19B5FA);
	r2 = D(r2, s1_0_2, 0xFF2E0B03, 0x3629EAE3, 0xF9D60C0A, 0xF03D81EB);
	r3 = D(r3, s1_0_2, 0xF808C3EA, 0xEF01F811, 0x81EDCA1F, 0x04EBEB21);
	r4 = D(r4, s1_0_2, 0xFC023319, 0xFFF20715, 0x0A1604F2, 0x191A3001);
	r5 = D(r5, s1_0_2, 0xFC0D0EF4, 0x12FBF5FC, 0x23FADF0F, 0x0D0700F5);
	r6 = D(r6, s1_0_2, 0xF9F504F9, 0xF9120300, 0x09FAF7FD, 0x03FEFC04);
	r7 = D(r7, s1_0_2, 0x1000DB01, 0xEE0622F4, 0xFC05FFFB, 0xF413E9F2);
	r0 = D(r0, s1_1_0, 0x02F707FD, 0x010CF905, 0x10FF12FB, 0xD481CE09);
	r1 = D(r1, s1_1_0, 0x0D21C7DB, 0xFB2709F5, 0x080409F2, 0xF83E04F0);
	r2 = D(r2, s1_1_0, 0xF1120DD5, 0xD116D2D6, 0xDF1804F7, 0x133A04FA);
	r3 = D(r3, s1_1_0, 0x031F0109, 0x310F02EB, 0xE90701CD, 0x291F17FF);
	r4 = D(r4, s1_1_0, 0xCE251DD8, 0x13C516E8, 0xECFAEEF3, 0x1C1200FC);
	r5 = D(r5, s1_1_0, 0x0D151AE1, 0xF0EF0814, 0xF6D0FB15, 0xF509E70F);
	r6 = D(r6, s1_1_0, 0x0D0809FF, 0xFD0CFEFC, 0x07F90217, 0x0BFF03FB);
	r7 = D(r7, s1_1_0, 0x261CEEE3, 0xFCFBE3E7, 0xC4E427FC, 0x1CF1F1FF);
	r0 = D(r0, s1_1_1, 0xFC0DF803, 0xFEFEF709, 0x1502ED01, 0xAB81DCF5);
	r1 = D(r1, s1_1_1, 0x1016DFF3, 0x3D2FE712, 0x0204030D, 0xE5EFDC07);
	r2 = D(r2, s1_1_1, 0x0FFE041E, 0x2BD53CF4, 0xFCF108D4, 0x95E63C09);
	r3 = D(r3, s1_1_1, 0xE3ACFF94, 0xF9811505, 0x09173303, 0xCD0B81DE);
	r4 = D(r4, s1_1_1, 0x0D54A80C, 0xE2E60B05, 0xE2DA040D, 0x2E140714);
	r5 = D(r5, s1_1_1, 0xFC00041A, 0x0FFF19DD, 0x1F1921F7, 0xF3FE14E4);
	r6 = D(r6, s1_1_1, 0x13F10004, 0xF6FD01F1, 0xFC0214EE, 0x020401F9);
	r7 = D(r7, s1_1_1, 0x1F01E402, 0xED2BEB22, 0xF5270E08, 0x08F4C406);
	r0 = D(r0, s1_1_2, 0x01F008FD, 0xF008F00C, 0x0BF9F804, 0xE4DB10F3);
	r1 = D(r1, s1_1_2, 0x1EFDE031, 0x0704FDF4, 0x0506F90A, 0x0E15010F);
	r2 = D(r2, s1_1_2, 0x0311FE10, 0x21FC25F8, 0xFC1C02F8, 0xA43C2E18);
	r3 = D(r3, s1_1_2, 0xD7DB28F4, 0x0FF3070B, 0xD9061DF2, 0xE9FEF5E5);
	r4 = D(r4, s1_1_2, 0xDF291606, 0xFF0F0D1C, 0x08F6FEFC, 0x13FCE6F1);
	r5 = D(r5, s1_1_2, 0xE7EE0EF4, 0x061102F8, 0x0828C503, 0x0C0FED01);
	r6 = D(r6, s1_1_2, 0xFF19FCFB, 0xFC1409FB, 0x00EC0609, 0x08FEFCFD);
	r7 = D(r7, s1_1_2, 0x0A19C5F2, 0x1BD3C82B, 0x05FEED0D, 0xF7CD2CF2);
	r0 = D(r0, s1_2_0, 0xFA170814, 0x002100F1, 0xFA0D030C, 0x0402FBE7);
	r1 = D(r1, s1_2_0, 0x04D10304, 0x18DE2AE9, 0xFB0407FE, 0x01FFF001);
	r2 = D(r2, s1_2_0, 0x0B140D03, 0xEAD7E803, 0x020417FC, 0xF7E516F9);
	r3 = D(r3, s1_2_0, 0x09D9F803, 0xC0F824FE, 0xE8E01CFF, 0xEEDA310A);
	r4 = D(r4, s1_2_0, 0xF5B2CCE3, 0x0BE907F6, 0x02F40B15, 0x13231F18);
	r5 = D(r5, s1_2_0, 0xEF1503E8, 0x15F8E007, 0x314B05F2, 0xF7030B00);
	r6 = D(r6, s1_2_0, 0xFE07FC1C, 0xFC0C05FC, 0x0FF0EC06, 0xFD0109FF);
	r7 = D(r7, s1_2_0, 0xE0F9EE0A, 0x11D3F217, 0x9F21EBEC, 0x102B0AF6);
	r0 = D(r0, s1_2_1, 0x05F0F407, 0xD6DF0CF0, 0x0B06FC00, 0xED811420);
	r1 = D(r1, s1_2_1, 0xF5B80CEE, 0xB5FC3CF6, 0xFF0BFDFF, 0x10CF110F);
	r2 = D(r2, s1_2_1, 0xF509FE01, 0xF2FC3534, 0xF0FF1AEF, 0x1313AAF7);
	r3 = D(r3, s1_2_1, 0xF9280E01, 0xFEC3EF0B, 0x810902D7, 0x0D3103F5);
	r4 = D(r4, s1_2_1, 0xE212BE2D, 0x05060AFA, 0x03131112, 0x0D24FEFC);
	r5 = D(r5, s1_2_1, 0xFDE31A07, 0x04F6EF00, 0x100EE9EE, 0xF417F7F3);
	r6 = D(r6, s1_2_1, 0x0A080813, 0xFBF30707, 0xF802FDDE, 0x05FFFC1B);
	r7 = D(r7, s1_2_1, 0xACFF27C2, 0x020BCFF0, 0x00052BEC, 0x041BED17);
	r0 = D(r0, s1_2_2, 0x0108FD07, 0xF118FFFE, 0x0816F50B, 0x1704F803);
	r1 = D(r1, s1_2_2, 0x07CA06F8, 0x81071F28, 0xFFFBFFFA, 0xE0140106);
	r2 = D(r2, s1_2_2, 0x0CF508F9, 0x17E91807, 0x04CDF202, 0x08EB2B06);
	r3 = D(r3, s1_2_2, 0xF43420EC, 0xFF0F07E0, 0x822BB6CC, 0xF1EE0A09);
	r4 = D(r4, s1_2_2, 0x01F71BF4, 0x0DE40603, 0x081B0A06, 0xF4FCFDFB);
	r5 = D(r5, s1_2_2, 0x08ECFB12, 0xF5F70602, 0x0213F90C, 0xF8050B09);
	r6 = D(r6, s1_2_2, 0xFAF4FFFC, 0x050B06F4, 0x04FDFBEB, 0x00F6FE08);
	r7 = D(r7, s1_2_2, 0x2514F317, 0x050A0B0D, 0xEA0C1022, 0x2623DD05);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x08F5FFFA, 0x020628F0, 0xFAFFF40A, 0x02D7E71B);
	r1 = D(r1, s0_0_0, 0x032D09FE, 0x0D13F90C, 0xFAFBFF02, 0xF6E923FC);
	r2 = D(r2, s0_0_0, 0xBB81C8A1, 0xF5170C0D, 0xF71502EE, 0x1E0806F3);
	r3 = D(r3, s0_0_0, 0x0D000E0F, 0x0C01F614, 0xF8030809, 0xD9F0EF00);
	r4 = D(r4, s0_0_0, 0xF51217DD, 0x0E03F90A, 0x06F40101, 0xF0F90307);
	r5 = D(r5, s0_0_0, 0xFFF80F0A, 0xED0A00FE, 0x06BD1EDC, 0xF702FAF0);
	r6 = D(r6, s0_0_0, 0x070AFD06, 0x0B00FFFF, 0x060D01FA, 0xFFFFFC04);
	r7 = D(r7, s0_0_0, 0x0CFC43FB, 0xE1F9BFE3, 0xE8140FFB, 0xF0130F14);
	r0 = D(r0, s0_0_1, 0xECFDF80E, 0x04F5F0FC, 0x03F90809, 0xF908F0C4);
	r1 = D(r1, s0_0_1, 0xE8F41105, 0xF8FA0EF1, 0x0CFFFFF8, 0xACD61BF7);
	r2 = D(r2, s0_0_1, 0xEDF81EFF, 0x002008C4, 0xFF060609, 0xF8111CFE);
	r3 = D(r3, s0_0_1, 0x16C81137, 0x20E6021A, 0x10D22BE8, 0x0E05C1EB);
	r4 = D(r4, s0_0_1, 0x06E5BC34, 0xFBFC0F05, 0xF0F90207, 0x04F7F615);
	r5 = D(r5, s0_0_1, 0x11FDED0C, 0xF5E9F9FA, 0x22082C03, 0x06EAFCE6);
	r6 = D(r6, s0_0_1, 0xFC120107, 0xE8F4FC07, 0x04080703, 0x01F7FFFF);
	r7 = D(r7, s0_0_1, 0xCBE3E7F2, 0x23ED2604, 0x0E10EBF0, 0x12FF1911);
	r0 = D(r0, s0_0_2, 0x0202FA01, 0xF0011501, 0xFBEEFAEF, 0x212C170F);
	r1 = D(r1, s0_0_2, 0xD611FB02, 0x03FBED01, 0x00020805, 0xFC050CE1);
	r2 = D(r2, s0_0_2, 0xFF06EA09, 0xABCB26FA, 0x07F600E4, 0x19FAE600);
	r3 = D(r3, s0_0_2, 0x19FEFCFF, 0xF6E2FC0E, 0xF7FBE4D8, 0x04F6FFEF);
	r4 = D(r4, s0_0_2, 0xEE0A01E4, 0x060DF8F7, 0xF306FF03, 0xF404FBF3);
	r5 = D(r5, s0_0_2, 0xF70F0401, 0x18F6F40A, 0xDC100F10, 0x0CEE05F6);
	r6 = D(r6, s0_0_2, 0x020B0601, 0x090CFCFF, 0x09ECFAF7, 0x01FC0102);
	r7 = D(r7, s0_0_2, 0xF110FB0F, 0xD7E5F5F8, 0x06FCFF0C, 0xE6FDE8F8);
	r0 = D(r0, s0_1_0, 0xFC0DF3FD, 0x13F00806, 0x09EF0615, 0x0C19F6FF);
	r1 = D(r1, s0_1_0, 0xED06FEFA, 0xF80D0FF6, 0x04FB08FE, 0xE6FCD30F);
	r2 = D(r2, s0_1_0, 0xDA0ED60F, 0x05F217FE, 0x0C15C2F2, 0xFAFECDE5);
	r3 = D(r3, s0_1_0, 0xFFF30BFD, 0xF400BEFD, 0x06090007, 0xE4D5E807);
	r4 = D(r4, s0_1_0, 0x14E51FF1, 0xF3E7131A, 0x0003F6FC, 0x07EF0CEC);
	r5 = D(r5, s0_1_0, 0xFDEFF504, 0xF40520F1, 0xE7140908, 0xFA07F2FA);
	r6 = D(r6, s0_1_0, 0x08DE0802, 0xFEFEF809, 0x060206F7, 0x05060406);
	r7 = D(r7, s0_1_0, 0xFDF7EE0A, 0xF83AB901, 0xF00F1D0F, 0x11F42B14);
	r0 = D(r0, s0_1_1, 0xE50005FC, 0x13220BF6, 0x2BEAFAE6, 0xA91CE51B);
	r1 = D(r1, s0_1_1, 0x18F2FA04, 0xFFDF1512, 0x16090A04, 0xB3110919);
	r2 = D(r2, s0_1_1, 0xFB24330C, 0x1D241925, 0xE4F5BEF1, 0xFADC33EC);
	r3 = D(r3, s0_1_1, 0x9708F60C, 0x10F707FA, 0x14F11921, 0xD310D40B);
	r4 = D(r4, s0_1_1, 0xEFF58108, 0x0EE20EF3, 0x181300F8, 0x29F527D8);
	r5 = D(r5, s0_1_1, 0x2405D7F0, 0x01F01A09, 0x03ECA3F2, 0xF9FD071A);
	r6 = D(r6, s0_1_1, 0xFFEC0503, 0xF80A0306, 0xE4020118, 0xFC0F0517);
	r7 = D(r7, s0_1_1, 0x1B13C405, 0x0619FE02, 0xEF0D1203, 0x2EE20F0D);
	r0 = D(r0, s0_1_2, 0x0001FBF5, 0x070707F7, 0xE6F60103, 0xE1B0CC13);
	r1 = D(r1, s0_1_2, 0x04E2FBFD, 0xFA040503, 0xF30605EF, 0xDDFAF505);
	r2 = D(r2, s0_1_2, 0x120FDDE6, 0x04EC0C16, 0x0BEAED11, 0x00D1F9E0);
	r3 = D(r3, s0_1_2, 0xF4FAF7DF, 0xF9191209, 0x0FD4D515, 0xE3F5FC10);
	r4 = D(r4, s0_1_2, 0x0B0E18DA, 0x02F0F607, 0x110EEFFF, 0x02FAFCDF);
	r5 = D(r5, s0_1_2, 0xFF030FF7, 0xE8E5E6F9, 0xE91AFDED, 0x0806F80A);
	r6 = D(r6, s0_1_2, 0xFD04FAFF, 0xFEFFF40B, 0xF5FC000F, 0xFCFCFF08);
	r7 = D(r7, s0_1_2, 0x1DEF4BE1, 0x0ADD1109, 0xF2BC1801, 0xEFEEECE6);
	r0 = D(r0, s0_2_0, 0x03FE0307, 0x060A190D, 0xFA002500, 0xE8EDB510);
	r1 = D(r1, s0_2_0, 0x0BFE4515, 0x17E433D5, 0xF8FF09FF, 0xFC0A1823);
	r2 = D(r2, s0_2_0, 0xF6F4D713, 0x0AF9CC0A, 0xFDFE0E00, 0x24F181EE);
	r3 = D(r3, s0_2_0, 0x05080215, 0xF712DE1C, 0x0A13070D, 0x0404FCE3);
	r4 = D(r4, s0_2_0, 0x071EE308, 0x0E08ECF0, 0xFEF381F5, 0xDBFCEF03);
	r5 = D(r5, s0_2_0, 0xF7E8F400, 0x0E0DF4F9, 0x0F0B16F8, 0x0EF5E9FD);
	r6 = D(r6, s0_2_0, 0x0411FAFD, 0xFF07FEF9, 0x04FE08F3, 0x00020306);
	r7 = D(r7, s0_2_0, 0xEFFFFDF2, 0xD6071304, 0x24197FDA, 0x05191609);
	r0 = D(r0, s0_2_1, 0x0BFB0006, 0x0DFBFE03, 0x060010F4, 0x3F12DB31);
	r1 = D(r1, s0_2_1, 0xF6160AD4, 0xB730EB9B, 0x080006FE, 0xA20AF7F6);
	r2 = D(r2, s0_2_1, 0x18002CFB, 0xFD2310E3, 0xF80C2000, 0x0C0E7FD7);
	r3 = D(r3, s0_2_1, 0xFA0C0A0D, 0x1AFEF004, 0xE7111F0C, 0x1717A3F4);
	r4 = D(r4, s0_2_1, 0xCD0AEA13, 0xFF01150D, 0xEB0EBEFC, 0xDE14C4F9);
	r5 = D(r5, s0_2_1, 0x09090811, 0xE20CFF03, 0xBE09031C, 0xE002FCF7);
	r6 = D(r6, s0_2_1, 0xFFFBFFF7, 0x000CEBFD, 0xEDFB0608, 0x01FE0300);
	r7 = D(r7, s0_2_1, 0xDAFDFE13, 0xFCEDCC18, 0xF51111C5, 0xF5082FDC);
	r0 = D(r0, s0_2_2, 0xFA0801FB, 0xF606D1F8, 0xFE0911F5, 0xFD10E1E3);
	r1 = D(r1, s0_2_2, 0x0A0905EA, 0xDCD081A7, 0xFD030404, 0x10F61F2B);
	r2 = D(r2, s0_2_2, 0xF6E8F7FD, 0xFFF5F5ED, 0x0CEEF80C, 0x041CD7F7);
	r3 = D(r3, s0_2_2, 0x0310F403, 0xEFF903F0, 0xBD21EA0D, 0xFDFC1F20);
	r4 = D(r4, s0_2_2, 0x15ED2A03, 0x040D040B, 0x1AFFD7F8, 0xEE16DC14);
	r5 = D(r5, s0_2_2, 0xF7F7EEFA, 0xF9FEE311, 0x230D161A, 0x0201FEFC);
	r6 = D(r6, s0_2_2, 0x020E05FD, 0x07F7FEF8, 0xFEF6FF06, 0xFC0502FE);
	r7 = D(r7, s0_2_2, 0xED1C1010, 0x0206320D, 0xF7C6B6FC, 0xFAF3E0DB);
	r0 = D(r0, s1_0_0, 0x0DF703FE, 0x13090C26, 0xFF00F6F7, 0xD2CC0604);
	r1 = D(r1, s1_0_0, 0xF7FFFFFF, 0xD30B02F2, 0x03F007FC, 0xE030E7DE);
	r2 = D(r2, s1_0_0, 0x9181B8C5, 0x27F013FA, 0x03FFF5EB, 0x810E0D07);
	r3 = D(r3, s1_0_0, 0x17111DFC, 0x15EE03FE, 0x0D01ECDF, 0x8108EDDC);
	r4 = D(r4, s1_0_0, 0x1E02C405, 0x18F8F904, 0xF5F7121C, 0x49D9F412);
	r5 = D(r5, s1_0_0, 0xFA010410, 0x0AECEFFB, 0x81F8F608, 0x0A04F215);
	r6 = D(r6, s1_0_0, 0x060003F4, 0xFF0B07F8, 0x0606FD03, 0x07FB0801);
	r7 = D(r7, s1_0_0, 0x8E2AFF39, 0x81ECD481, 0x0610EAE4, 0xE104F518);
	r0 = D(r0, s1_0_1, 0x0105FB03, 0xF3051519, 0xFEF3FE02, 0xC2F6E30D);
	r1 = D(r1, s1_0_1, 0x0EEF041A, 0x02FEFA10, 0x0BFD0009, 0x001EF0E2);
	r2 = D(r2, s1_0_1, 0x0112E211, 0x44C5FAF1, 0x07F30CFC, 0x530BEB10);
	r3 = D(r3, s1_0_1, 0x1917ED2C, 0xEB00F6FA, 0x1707F828, 0xCCFC0ED9);
	r4 = D(r4, s1_0_1, 0xECF619C5, 0x24E9FCF4, 0x00F912F6, 0xE1F3F1F4);
	r5 = D(r5, s1_0_1, 0x07F1FD15, 0xF10BFC01, 0xAF03ED15, 0x0BE80AF6);
	r6 = D(r6, s1_0_1, 0x0206F705, 0x0B01070A, 0x0408F901, 0xFC04FD06);
	r7 = D(r7, s1_0_1, 0xFF00FC12, 0x0603F9D7, 0xE41E0415, 0x0710F403);
	r0 = D(r0, s1_0_2, 0xFCFC0202, 0x012008F4, 0x0102F8EF, 0xD4F1EEF0);
	r1 = D(r1, s1_0_2, 0x2AF1EFE5, 0x1506F1FD, 0x040902FC, 0xDB0009FF);
	r2 = D(r2, s1_0_2, 0xDA0F1010, 0x2D12E596, 0x0202F6F8, 0x0B2409EA);
	r3 = D(r3, s1_0_2, 0xF6E401FA, 0x070EFFFC, 0xFC0DD6B6, 0xD6FBF5F6);
	r4 = D(r4, s1_0_2, 0xDE13EFD9, 0x01F5F9FA, 0xD6F0071A, 0xFE1B01FB);
	r5 = D(r5, s1_0_2, 0x02F105F5, 0x0710EF0F, 0xE50E15E2, 0xFCFB050F);
	r6 = D(r6, s1_0_2, 0x060203FF, 0xFA030101, 0xF5FF0008, 0x030500FE);
	r7 = D(r7, s1_0_2, 0x201AFDFF, 0xDEF214F2, 0x01F4070D, 0xF91007FD);
	r0 = D(r0, s1_1_0, 0x0501F9FF, 0xDC0AEF02, 0xF6E403FC, 0xC9EC0CF5);
	r1 = D(r1, s1_1_0, 0x29E00B0A, 0xF8FF1C17, 0xF20600FF, 0xE2CFFDF5);
	r2 = D(r2, s1_1_0, 0xE520D825, 0xDF052800, 0x17130AE1, 0xB9C7F520);
	r3 = D(r3, s1_1_0, 0xE5E20C15, 0xEFFBFA10, 0x02F711EE, 0x8C121225);
	r4 = D(r4, s1_1_0, 0x8103C400, 0x31F6F7D3, 0x140EF006, 0x81C411F8);
	r5 = D(r5, s1_1_0, 0x0E04FB03, 0xF6F50700, 0x811FD6E6, 0x0A09FB0C);
	r6 = D(r6, s1_1_0, 0xF1F1EAFE, 0x0DF808FF, 0x01EFFEF7, 0xF70B0009);
	r7 = D(r7, s1_1_0, 0x02072915, 0x1FC9E0E9, 0xF0EC0B23, 0x10FD1B1A);
	r0 = D(r0, s1_1_1, 0x01050CFC, 0x04FC0EFE, 0xF7FAEFF3, 0x17F50AD9);
	r1 = D(r1, s1_1_1, 0xF1230609, 0x01FFE114, 0xF9F809FD, 0x1C150B9D);
	r2 = D(r2, s1_1_1, 0x40F231FA, 0x19CCF709, 0x01FF01EB, 0xE5FCFB13);
	r3 = D(r3, s1_1_1, 0xD310F317, 0xEE00D7FF, 0xFF0F0D1C, 0x0D0BE920);
	r4 = D(r4, s1_1_1, 0x0FF71F0B, 0x14FD0010, 0x0201E20B, 0xE8081C25);
	r5 = D(r5, s1_1_1, 0xF61101F8, 0x04E519FC, 0xF8E6FECF, 0x07F6E500);
	r6 = D(r6, s1_1_1, 0x02170504, 0x0DFBFCFA, 0x0702070E, 0x00F6FC06);
	r7 = D(r7, s1_1_1, 0xBEEAD925, 0x17AA0305, 0xD2020D0C, 0x18DD1106);
	r0 = D(r0, s1_1_2, 0xFE070301, 0x07F4E3F7, 0x081214FF, 0x1717EB0B);
	r1 = D(r1, s1_1_2, 0xEB34DAF3, 0x070629E6, 0x060706F9, 0x4413F2A0);
	r2 = D(r2, s1_1_2, 0x290AFCFB, 0x030AD2DC, 0x01FD1004, 0x9FFF1BFF);
	r3 = D(r3, s1_1_2, 0x1AFDF21E, 0xECE815F1, 0xFAF1B6C3, 0x26DC040D);
	r4 = D(r4, s1_1_2, 0x140602DB, 0x1210050D, 0xF9ECFE02, 0x0A11D8F8);
	r5 = D(r5, s1_1_2, 0x0AEF030B, 0x1916EB08, 0x6D22F7B4, 0x05F2F80A);
	r6 = D(r6, s1_1_2, 0xFBFAF6FD, 0xF2FAF902, 0x0D05FAFE, 0x0201FFFF);
	r7 = D(r7, s1_1_2, 0x09EFFB14, 0x023DF3E1, 0xF7FBEF1F, 0xF608EFEC);
	r0 = D(r0, s1_2_0, 0x04FF0808, 0x1A0FF415, 0xF1F702FC, 0xA92BEE01);
	r1 = D(r1, s1_2_0, 0x37F40F0D, 0xF70416B0, 0x0A010203, 0x2715F60C);
	r2 = D(r2, s1_2_0, 0xDD002914, 0xFEFDF7F6, 0x0104F1E0, 0x1600DD1A);
	r3 = D(r3, s1_2_0, 0x0B041D18, 0xB10AFBFC, 0xE80101F4, 0xADFA00F9);
	r4 = D(r4, s1_2_0, 0xE9D8FAC6, 0x02F02613, 0x2C010908, 0x55FF3216);
	r5 = D(r5, s1_2_0, 0xEE0C0705, 0xF5FDEA02, 0x81FEE3F8, 0x02FE07FE);
	r6 = D(r6, s1_2_0, 0xFCEA0D08, 0xF906F0F7, 0x0AF505FA, 0x0407FD07);
	r7 = D(r7, s1_2_0, 0x34D80437, 0x8105F306, 0x280CF710, 0xFBFAF2FB);
	r0 = D(r0, s1_2_1, 0x11FBFCFB, 0x06EC0416, 0x27EA09F6, 0xE6DFF9F0);
	r1 = D(r1, s1_2_1, 0x15DAF81D, 0xC2ECF6F8, 0x08FFF702, 0xF8F40005);
	r2 = D(r2, s1_2_1, 0x2DF10A08, 0xCAEAEBEC, 0x0FF609EF, 0x1BFB2A02);
	r3 = D(r3, s1_2_1, 0xF11413EE, 0xB3FEE2EC, 0x0E1D1C1B, 0x8106F500);
	r4 = D(r4, s1_2_1, 0xD62BF0EB, 0x0FF3FE21, 0xFF1DEF08, 0x3211F9F6);
	r5 = D(r5, s1_2_1, 0x13F7F500, 0xECE2080A, 0x9CFD4C03, 0xF705050D);
	r6 = D(r6, s1_2_1, 0x09F3F90A, 0xF90DFFFD, 0xEE04FA02, 0x0AFE0405);
	r7 = D(r7, s1_2_1, 0x1203F70D, 0x81151617, 0x111EDE17, 0xD1EB2311);
	r0 = D(r0, s1_2_2, 0xFA03FBFE, 0x06E6FD0A, 0x03F001FA, 0xDA0BF6F0);
	r1 = D(r1, s1_2_2, 0xEDF6FDED, 0x38E3ED31, 0x00FEFE02, 0xCA11FEE7);
	r2 = D(r2, s1_2_2, 0xCA0017F9, 0x1B22DFCA, 0x140AF804, 0x3111F6C0);
	r3 = D(r3, s1_2_2, 0xFB11F40B, 0xF9FE07EF, 0xDCF2DEEB, 0x0F00F9DF);
	r4 = D(r4, s1_2_2, 0xF808F8F0, 0x15F40500, 0x0BEFEC16, 0x061CF80A);
	r5 = D(r5, s1_2_2, 0x0B1006EB, 0xF2EF0D08, 0xF80521F7, 0x0F0FEFF6);
	r6 = D(r6, s1_2_2, 0xFB030402, 0x030A0100, 0x040909FB, 0xFFFF00FD);
	r7 = D(r7, s1_2_2, 0xFF1001F3, 0xFC160C07, 0xF80CF8F7, 0xDEF30CF7);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFA030401, 0xEEDE1608, 0xFE10FFFD, 0xECEFEE04);
	r1 = D(r1, s0_0_0, 0xFBFEFDF4, 0xF407100E, 0xF9FB0103, 0x81F8D1EA);
	r2 = D(r2, s0_0_0, 0x1695F5C0, 0x07EAE702, 0x092C0C10, 0xF73617E9);
	r3 = D(r3, s0_0_0, 0x04F1CAF0, 0xF81B06F3, 0x0E012306, 0xFB37E22B);
	r4 = D(r4, s0_0_0, 0x1BFB1C0A, 0xEEFCF601, 0x020600F5, 0x16162301);
	r5 = D(r5, s0_0_0, 0x04EFF20E, 0xFA0F03FF, 0xF0EF1D00, 0xEAE6FAFD);
	r6 = D(r6, s0_0_0, 0x04030406, 0x0900FEF5, 0xFC0AFBFD, 0xFEFE03FD);
	r7 = D(r7, s0_0_0, 0x000C04E0, 0xBF09C717, 0xF62BF620, 0x0BFB0209);
	r0 = D(r0, s0_0_1, 0x010D05F7, 0x16C9E704, 0x0C15140C, 0xF7D2F8F5);
	r1 = D(r1, s0_0_1, 0x083CF11B, 0x011806FF, 0x07F302FD, 0x011FE8F7);
	r2 = D(r2, s0_0_1, 0x08F1D50C, 0x1933FC12, 0xE823EC0B, 0xF63FFFDE);
	r3 = D(r3, s0_0_1, 0x18E9F7F2, 0x10101AED, 0x07190207, 0xEE81DDEC);
	r4 = D(r4, s0_0_1, 0xDF341009, 0x0A091BF5, 0xF2061907, 0xEB0A1223);
	r5 = D(r5, s0_0_1, 0x0502FDFC, 0x0702F0F9, 0x25F15526, 0xFCEF0AFE);
	r6 = D(r6, s0_0_1, 0xF5F9FCF7, 0xFEFCF908, 0x0A000112, 0x050300FE);
	r7 = D(r7, s0_0_1, 0x1CF5D610, 0x0040D4F8, 0x0A0ED4F3, 0x0221F604);
	r0 = D(r0, s0_0_2, 0xFC08FE01, 0xFFDEFB15, 0x020103FB, 0xFE9CF816);
	r1 = D(r1, s0_0_2, 0x0ADD1816, 0x00230E19, 0x01FA07FF, 0x0614100B);
	r2 = D(r2, s0_0_2, 0x0523271C, 0xD1FAB8D5, 0xFC1B0708, 0x3DF7D72A);
	r3 = D(r3, s0_0_2, 0xF2222004, 0x0906F705, 0xCCF514DC, 0x1781FEE7);
	r4 = D(r4, s0_0_2, 0xDB2EDD03, 0xF31AFC09, 0x0105FBF6, 0x01EEF6E8);
	r5 = D(r5, s0_0_2, 0xF902FF07, 0x0C03F3FE, 0xBBCAD5E6, 0xF3140EF6);
	r6 = D(r6, s0_0_2, 0x02FEFFFC, 0xFDFCFBFC, 0x040903FF, 0x01000206);
	r7 = D(r7, s0_0_2, 0xEDF8E833, 0xEFECE3F1, 0xE0F21F0F, 0xDA020BF4);
	r0 = D(r0, s0_1_0, 0xF1FAED07, 0xE51102D9, 0xFFE6FBF0, 0x120DFC17);
	r1 = D(r1, s0_1_0, 0x030E0A16, 0x1703EF09, 0x0E02FF0A, 0x931D17E2);
	r2 = D(r2, s0_1_0, 0xC9F3FAD0, 0xEA1EE90F, 0xE81BF8FF, 0x1DCA1D10);
	r3 = D(r3, s0_1_0, 0xF1081509, 0xFD2B1AEB, 0xE20F0E07, 0x2041100F);
	r4 = D(r4, s0_1_0, 0xEE0B0BDA, 0xEA1704F2, 0x0422F500, 0x06321B11);
	r5 = D(r5, s0_1_0, 0x10F104E6, 0x02190DFD, 0xDE4B0706, 0x0D17F3E9);
	r6 = D(r6, s0_1_0, 0x1EF91001, 0x140200F6, 0xF913FDF8, 0x0703FB0C);
	r7 = D(r7, s0_1_0, 0x17DDF210, 0xF50A10DE, 0xFEEFE9E6, 0xF81E0102);
	r0 = D(r0, s0_1_1, 0xFB0EF9FE, 0xEFE80AE9, 0xF800FAF9, 0x05281803);
	r1 = D(r1, s0_1_1, 0xE71EFED1, 0xF401F90B, 0xF3020C0D, 0x24F7F3FF);
	r2 = D(r2, s0_1_1, 0xEF20EBF6, 0x033C0EFE, 0xDB030708, 0x01810514);
	r3 = D(r3, s0_1_1, 0xE7FCFEF3, 0x09A8F010, 0xDBEFFEF3, 0x0114DE15);
	r4 = D(r4, s0_1_1, 0x10810631, 0x1003E804, 0x15F814ED, 0x0DFFF9FB);
	r5 = D(r5, s0_1_1, 0xEC03FA08, 0xF8F10116, 0x819CB3E7, 0x180206FA);
	r6 = D(r6, s0_1_1, 0xFB0F0207, 0x34F70E02, 0xF0F9FA03, 0xFC090108);
	r7 = D(r7, s0_1_1, 0xDEC7FFE7, 0x0C4DFBF2, 0x103A25E9, 0xF5D0FB06);
	r0 = D(r0, s0_1_2, 0xFAEE0106, 0xF9FAF30F, 0xFAF608FF, 0xE11A06E9);
	r1 = D(r1, s0_1_2, 0x110C1FE7, 0x03090F19, 0x04050009, 0x81E4E904);
	r2 = D(r2, s0_1_2, 0x1FEB1721, 0x0B15F6B8, 0xF5DD0000, 0x0FE805F1);
	r3 = D(r3, s0_1_2, 0xE781E0F2, 0xC8000EFD, 0x243B81C5, 0x19F8EDF2);
	r4 = D(r4, s0_1_2, 0xFA6107FA, 0xF5FDF6FD, 0xFF0DFEEB, 0x0D201303);
	r5 = D(r5, s0_1_2, 0x06F7FEFE, 0x1BF9E5FB, 0x2EDFF6FC, 0x0300E5E9);
	r6 = D(r6, s0_1_2, 0xFF020707, 0x0FFE04F4, 0x09FFF604, 0x0205FF07);
	r7 = D(r7, s0_1_2, 0x40810005, 0x3AF00918, 0x00FF191C, 0x37FEF1E0);
	r0 = D(r0, s0_2_0, 0x06FEFCF9, 0x020E01FC, 0x0DE2E9FC, 0xFA15EF16);
	r1 = D(r1, s0_2_0, 0x03F70717, 0x28C981E0, 0x04F4FD01, 0x06221911);
	r2 = D(r2, s0_2_0, 0xFE34031E, 0x0BF70314, 0xED21F10B, 0x818CEDF8);
	r3 = D(r3, s0_2_0, 0xFBF10905, 0x1E0FF807, 0x040017F6, 0xCE00EC10);
	r4 = D(r4, s0_2_0, 0xFD13F701, 0x0A0911FB, 0xFAE1EAFE, 0xFC12EEE9);
	r5 = D(r5, s0_2_0, 0x0D2B00F3, 0xF9EDFA03, 0x0F4718F5, 0x08F8FC11);
	r6 = D(r6, s0_2_0, 0x0803FF04, 0xFCF70302, 0xEDFE0A08, 0x00FFFDFF);
	r7 = D(r7, s0_2_0, 0xF7D10F17, 0xE681F4E5, 0xEE22AAE4, 0x16120AF2);
	r0 = D(r0, s0_2_1, 0x0001FFF7, 0xF002E2EF, 0xF4EDFC09, 0x0452F9F5);
	r1 = D(r1, s0_2_1, 0xFB3AEA10, 0xF73F81BB, 0x05FDFE01, 0x1001F9DA);
	r2 = D(r2, s0_2_1, 0xF6FBEB02, 0x1D1F02F9, 0xE500F9E3, 0x9BC5F7EC);
	r3 = D(r3, s0_2_1, 0xF9070500, 0xFB29FDF0, 0x04F3E7F3, 0xD59E30E9);
	r4 = D(r4, s0_2_1, 0x2098F5FC, 0x07E1FBFB, 0x1DFAF716, 0xE6C2FEEE);
	r5 = D(r5, s0_2_1, 0x00F608F7, 0x0D050FF0, 0xE15701F1, 0x1DF80E04);
	r6 = D(r6, s0_2_1, 0xFBF8FB09, 0x19FAFA0A, 0x00F50C0C, 0x06FFFC02);
	r7 = D(r7, s0_2_1, 0xFD2506D7, 0x30282BFB, 0xE787FBE5, 0xC0E9FBFA);
	r0 = D(r0, s0_2_2, 0x100500F7, 0x000707EF, 0xFDE8FC03, 0xEA1C070F);
	r1 = D(r1, s0_2_2, 0x039500F7, 0x21E202B9, 0xF20200F8, 0xCE9F1F04);
	r2 = D(r2, s0_2_2, 0x08F1EA05, 0xDE1E0CE2, 0x0EFD0610, 0x132FF413);
	r3 = D(r3, s0_2_2, 0x051E15F1, 0x0E290DDE, 0xDC81811D, 0x11D614FC);
	r4 = D(r4, s0_2_2, 0xE21703EC, 0xFD190408, 0x03EB08FD, 0xEFA4E0D9);
	r5 = D(r5, s0_2_2, 0x0D12F610, 0x06F90D0B, 0x8181F1F6, 0xF412F410);
	r6 = D(r6, s0_2_2, 0x03F5F904, 0x0002F600, 0xEE0405F5, 0xFF03FF01);
	r7 = D(r7, s0_2_2, 0x0308FF02, 0xE2020302, 0xFE03F9F3, 0x02980008);
	r0 = D(r0, s1_0_0, 0x0708FD01, 0x15F8F0E0, 0xFEFAF8F5, 0x1B18000C);
	r1 = D(r1, s1_0_0, 0xEFFF011F, 0xEF09F8F5, 0xFD030E07, 0xF91208FA);
	r2 = D(r2, s1_0_0, 0xEDE7B7FB, 0x1406EF1E, 0x1204F1EC, 0xD6DF00BA);
	r3 = D(r3, s1_0_0, 0x00EA1BDB, 0x0DF20407, 0xF900091E, 0x07F7EC17);
	r4 = D(r4, s1_0_0, 0xEF0EEADC, 0xFF09EC0C, 0x0903000B, 0xAC0905C9);
	r5 = D(r5, s1_0_0, 0xFFF9E5F9, 0x08FEF50C, 0x101D17D6, 0x1816FEFB);
	r6 = D(r6, s1_0_0, 0xED060AF9, 0xFBFEEE03, 0xF902FB01, 0x02040003);
	r7 = D(r7, s1_0_0, 0xE20912E3, 0xD7FDFC09, 0xF40A2202, 0xEBF2FBC5);
	r0 = D(r0, s1_0_1, 0x09EEF817, 0xE5DFE909, 0xFCFB00EB, 0xE8060408);
	r1 = D(r1, s1_0_1, 0xCEF9FAD6, 0x15041707, 0xF7F90CFD, 0x38020D08);
	r2 = D(r2, s1_0_1, 0xE1F11DAA, 0xDBE02A17, 0x04060200, 0xDBB40B02);
	r3 = D(r3, s1_0_1, 0x36FD0F07, 0x0004F420, 0x05E50814, 0xFFEEEBDB);
	r4 = D(r4, s1_0_1, 0xEEF3ECF7, 0x011100F3, 0x041505FD, 0x04F71CB0);
	r5 = D(r5, s1_0_1, 0x11F80DF6, 0x000D05FF, 0x0A08ED05, 0x000CFBF5);
	r6 = D(r6, s1_0_1, 0xFCF9F6F7, 0x050FFA02, 0x02180501, 0xFD01FF06);
	r7 = D(r7, s1_0_1, 0xD11E0B06, 0xF70AFB09, 0xF3FEF016, 0xF1F8F0FE);
	r0 = D(r0, s1_0_2, 0xFE05FFF8, 0x0A0CFBEF, 0x04E60BFB, 0xF21C0DAB);
	r1 = D(r1, s1_0_2, 0xD2F40CCD, 0x0A0CFB05, 0x02F90B07, 0xEE08F5F4);
	r2 = D(r2, s1_0_2, 0xECFEF90D, 0xF7812BEB, 0xF8F40DF6, 0xD9C5DB81);
	r3 = D(r3, s1_0_2, 0xE116FFE5, 0x1EF70F13, 0xE41DCB14, 0x10051801);
	r4 = D(r4, s1_0_2, 0x0EE60110, 0x0CFA14E3, 0x07ECFA02, 0xE8E41DD4);
	r5 = D(r5, s1_0_2, 0x12F8F517, 0x0102FE11, 0x10EAEA17, 0xFD0F06F3);
	r6 = D(r6, s1_0_2, 0xFF07FF01, 0xF6FE0205, 0xF3130603, 0x04080301);
	r7 = D(r7, s1_0_2, 0x10D3ECEB, 0x1C13E5E8, 0x0A04FE02, 0x03D3F5EE);
	r0 = D(r0, s1_1_0, 0x0612FCF7, 0xFCFA1FE3, 0xF513F9F4, 0x060D1004);
	r1 = D(r1, s1_1_0, 0xD60601CB, 0xFB040C07, 0xFB08FAFE, 0xD2E807F8);
	r2 = D(r2, s1_1_0, 0x0FDED0E9, 0x0B050202, 0x08F30604, 0xE60E1FDD);
	r3 = D(r3, s1_1_0, 0x03DB061B, 0x03F00CFD, 0x001BFCF6, 0xDAC70F2B);
	r4 = D(r4, s1_1_0, 0x290E0424, 0xFA0F06BF, 0xF7FD0B03, 0xCB1012EF);
	r5 = D(r5, s1_1_0, 0x0B0F0BF8, 0x00FFF80E, 0xE1FFE410, 0xF5F0D7DD);
	r6 = D(r6, s1_1_0, 0xFD11FA09, 0xF6FEFFF6, 0xF7F8F90B, 0xFE04F401);
	r7 = D(r7, s1_1_0, 0x0417F7F7, 0xE6DAF904, 0x0DE8F7DE, 0xE605E605);
	r0 = D(r0, s1_1_1, 0xFBFE0A00, 0xF4F8EC10, 0xEAE8FBE1, 0xEAF916C8);
	r1 = D(r1, s1_1_1, 0xF6E82792, 0xDA020A05, 0x06F70402, 0xEF2D0E0A);
	r2 = D(r2, s1_1_1, 0xFB0AE005, 0xD22EDDE4, 0xF2FE0A0D, 0xF7F30E81);
	r3 = D(r3, s1_1_1, 0xF7EE05F9, 0xF81015A0, 0x25110110, 0xD0DF2581);
	r4 = D(r4, s1_1_1, 0x15F3F7FF, 0xFDE8FCFE, 0xFA1E0F0D, 0xFD0EF6EE);
	r5 = D(r5, s1_1_1, 0xF300E7F3, 0xE6F8F807, 0xC50001ED, 0x0400F4F1);
	r6 = D(r6, s1_1_1, 0x0DEF00FF, 0xFB08FFF0, 0x0BEF06F9, 0xEF07FFFB);
	r7 = D(r7, s1_1_1, 0xE5F7ED0E, 0xD41525D5, 0x05040228, 0xF7EDE706);
	r0 = D(r0, s1_1_2, 0x010F00F6, 0x0924E5EF, 0x170C0AFB, 0x22D6FCDD);
	r1 = D(r1, s1_1_2, 0x23181829, 0x1CFCFA31, 0xFB20FAFD, 0x02CDFEFA);
	r2 = D(r2, s1_1_2, 0x0F1C0103, 0xF315F325, 0xF508F5FA, 0x0B0A1FAE);
	r3 = D(r3, s1_1_2, 0xF1EA05C5, 0xEDD6EF20, 0xDFE8F2F6, 0x0CFFF8BF);
	r4 = D(r4, s1_1_2, 0xF42A09FF, 0x09F303F3, 0x1AD70AF7, 0x0F020CE3);
	r5 = D(r5, s1_1_2, 0xFB09EEFC, 0x0BF8FD13, 0x09F50E08, 0x1A02FA11);
	r6 = D(r6, s1_1_2, 0x020E04FF, 0xFEE805FB, 0x0C05FFFE, 0xFFE1FDFC);
	r7 = D(r7, s1_1_2, 0x100EF8C1, 0x1FE2FAEF, 0x131CF8EF, 0x0FF40C22);
	r0 = D(r0, s1_2_0, 0x0707FF05, 0xF30016F2, 0xFD0A0813, 0xF0FA02FB);
	r1 = D(r1, s1_2_0, 0x250EF51B, 0xE2E589B4, 0x03FBFFFE, 0x06E5F424);
	r2 = D(r2, s1_2_0, 0xEE060830, 0x0BF7180B, 0x08E3F80A, 0x130BC516);
	r3 = D(r3, s1_2_0, 0x0BFFF702, 0x06170C0A, 0x17F41000, 0x1323CE21);
	r4 = D(r4, s1_2_0, 0xFC0134EE, 0x0B090904, 0x07F905EA, 0x09F9E0D1);
	r5 = D(r5, s1_2_0, 0xF9F30EF7, 0x15010008, 0x41F0F2AB, 0x09FDFEEF);
	r6 = D(r6, s1_2_0, 0x02020009, 0x04050505, 0x06030A08, 0x0305F802);
	r7 = D(r7, s1_2_0, 0x12F61D00, 0xF008CCEC, 0xF7F8D4EE, 0x01030505);
	r0 = D(r0, s1_2_1, 0x0412FF03, 0x13FDF8F9, 0x1801EFF0, 0x1404FE08);
	r1 = D(r1, s1_2_1, 0xFB14E306, 0xAE1DDD68, 0x04FF04FA, 0x001A10F6);
	r2 = D(r2, s1_2_1, 0xFB12F8EF, 0x21FEF304, 0xD401FEFC, 0x0DFEE81C);
	r3 = D(r3, s1_2_1, 0xF210E8FD, 0x020A1406, 0xE20006EB, 0xFCF9FDB9);
	r4 = D(r4, s1_2_1, 0xFF02EDFB, 0x130AF204, 0xFD03F2FC, 0x0108DFFC);
	r5 = D(r5, s1_2_1, 0x000605FD, 0x11FE0FFE, 0xE5F7E7E5, 0xDEF20807);
	r6 = D(r6, s1_2_1, 0x0AFDF405, 0x0908FE06, 0xFEF412F1, 0x03FD02F9);
	r7 = D(r7, s1_2_1, 0xE7E51EFF, 0x0C000CE6, 0xFC2EDE3A, 0x02050C0D);
	r0 = D(r0, s1_2_2, 0xFB150802, 0xF80A09EF, 0x0214F313, 0xE2F7E508);
	r1 = D(r1, s1_2_2, 0x020DEC11, 0x1698F500, 0xFBFA0E06, 0x09F918E9);
	r2 = D(r2, s1_2_2, 0x05ED170C, 0xE9F11325, 0x090EF7E9, 0x1C05FA0C);
	r3 = D(r3, s1_2_2, 0x06F1FCE0, 0xDAFFDD35, 0xDD130DEB, 0xEB10FF1F);
	r4 = D(r4, s1_2_2, 0xE5D20909, 0xD51408F0, 0x06F305E4, 0xC2FE0981);
	r5 = D(r5, s1_2_2, 0xFB0DFDF9, 0xF0E8FF0D, 0xE8150603, 0x0609FE06);
	r6 = D(r6, s1_2_2, 0xFA0405FC, 0xFFF6F702, 0xFE0B0F07, 0xFE0AFF02);
	r7 = D(r7, s1_2_2, 0xE6F602D4, 0xFCEDF8FC, 0xDFEA06F5, 0x07110816);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0404F2FA, 0xF6083901, 0xF7EF0007, 0x1FEEE80F);
	r1 = D(r1, s0_0_0, 0xE5F1A7FC, 0x1906FFFC, 0x0B0306FB, 0xE7F9B202);
	r2 = D(r2, s0_0_0, 0xDEF32B1E, 0xDC0EDF34, 0xFC04FBF9, 0xF70727EB);
	r3 = D(r3, s0_0_0, 0xEBF513E8, 0x13F411F5, 0x02F4F0E8, 0x420C37FD);
	r4 = D(r4, s0_0_0, 0xE2EEF52D, 0xE4EB160C, 0x13EB0C0E, 0xB9EAD90F);
	r5 = D(r5, s0_0_0, 0x08F3300D, 0x090D150D, 0x0102CAEF, 0x10FAE206);
	r6 = D(r6, s0_0_0, 0xF0040903, 0x06FD000A, 0xFC020901, 0x05FFFFF9);
	r7 = D(r7, s0_0_0, 0xEA0E040F, 0xEEFC0CF9, 0x12FD0D11, 0x100700FB);
	r0 = D(r0, s0_0_1, 0x0BFFF3F9, 0x1E020F0E, 0xFDFCF703, 0xB8292FF9);
	r1 = D(r1, s0_0_1, 0xFACA1812, 0x010800E6, 0x29FF0C0B, 0x03FEBAE9);
	r2 = D(r2, s0_0_1, 0xE113ECC8, 0xFDC912E3, 0xDEFA1F0F, 0x13EEF42B);
	r3 = D(r3, s0_0_1, 0x91D919FC, 0xD8F2DA05, 0x18F1F3DE, 0x0B17620F);
	r4 = D(r4, s0_0_1, 0xD0E9DEED, 0xD8F500F5, 0xCEFE08F9, 0xC2D70A0C);
	r5 = D(r5, s0_0_1, 0xE70B0321, 0xF40AFE02, 0xEBE051F8, 0xF50AC4F1);
	r6 = D(r6, s0_0_1, 0x13FFFCFA, 0x02FB0302, 0x010809F1, 0xFE0B0407);
	r7 = D(r7, s0_0_1, 0xFD1A0DEE, 0x9203E3F5, 0xE1142803, 0x291917FE);
	r0 = D(r0, s0_0_2, 0x09FF020D, 0x0EFBFFED, 0x0701F000, 0xF2E82E10);
	r1 = D(r1, s0_0_2, 0x0AF3DCF8, 0xF7F5F5FA, 0x1903FBFD, 0x0AFB30FD);
	r2 = D(r2, s0_0_2, 0x02FA03FF, 0xE1AF4A85, 0x0BFE0315, 0xE708FDEE);
	r3 = D(r3, s0_0_2, 0x241902FE, 0x0B1101E4, 0xE70915B1, 0x18EF1B06);
	r4 = D(r4, s0_0_2, 0x200F0308, 0x16FC041C, 0x01FF08F4, 0xBAFA03F6);
	r5 = D(r5, s0_0_2, 0x03F701E0, 0xF605300E, 0x1410C401, 0xFEFA09F2);
	r6 = D(r6, s0_0_2, 0xFD010AFD, 0x10FEF100, 0x1402FD02, 0xFD030203);
	r7 = D(r7, s0_0_2, 0x060C1EDB, 0x06F1EB1F, 0xF8F7E0F0, 0xDF2406F9);
	r0 = D(r0, s0_1_0, 0x0611FCF4, 0xE0EA07FF, 0xF00104EF, 0x05DDFF0D);
	r1 = D(r1, s0_1_0, 0x18E902FA, 0xD8F7FBFD, 0xFEF50202, 0x0501FB0E);
	r2 = D(r2, s0_1_0, 0xF01A1714, 0x02DFBDFE, 0x09C7FF11, 0xCCBBF3F8);
	r3 = D(r3, s0_1_0, 0x16F7072A, 0xF5E5A7FE, 0xF0FC2417, 0xF6E13B1F);
	r4 = D(r4, s0_1_0, 0x21E5FAD2, 0xE8E4030E, 0x00D7F00A, 0x20FDF105);
	r5 = D(r5, s0_1_0, 0x00FC1B00, 0x081E0503, 0x090D06F3, 0x02F4F313);
	r6 = D(r6, s0_1_0, 0x0E1409F6, 0x06FA0216, 0xFC0FFD04, 0xFBF6FD02);
	r7 = D(r7, s0_1_0, 0x1DD821EE, 0x3B22381C, 0x10E7FFD9, 0xFBF9F902);
	r0 = D(r0, s0_1_1, 0xF905F8FD, 0x09F5FA12, 0x02070706, 0x140DD019);
	r1 = D(r1, s0_1_1, 0xF4FE13E4, 0x3226132A, 0x0DF7060B, 0xC6103819);
	r2 = D(r2, s0_1_1, 0x07F310FB, 0x07F52D23, 0x0F05010D, 0x19DC10F3);
	r3 = D(r3, s0_1_1, 0x30EB0300, 0x07001C0C, 0x16CD0240, 0x0108F3E0);
	r4 = D(r4, s0_1_1, 0xF8F047F6, 0x0405E7FB, 0xEEE6FD00, 0xE7E454FE);
	r5 = D(r5, s0_1_1, 0x0DF60D06, 0xF80C1507, 0x1BED5B22, 0x09FDFAF7);
	r6 = D(r6, s0_1_1, 0xF20702FF, 0xFC03FCF9, 0x1117020D, 0xFE0E0506);
	r7 = D(r7, s0_1_1, 0xDFE2A1F3, 0x121ED5D8, 0xC1151F0E, 0xF7ED18E2);
	r0 = D(r0, s0_1_2, 0xFDFF0B05, 0xF7ED1F11, 0xF5EDF607, 0x1011FDF5);
	r1 = D(r1, s0_1_2, 0xF4D3D716, 0xEDF90AD9, 0x03FFFA06, 0x021E1AE4);
	r2 = D(r2, s0_1_2, 0xDB021D07, 0xF7FAF0DE, 0x08FA08F1, 0xEFAF0C2C);
	r3 = D(r3, s0_1_2, 0xDC11F4F6, 0xF003D9F6, 0xEDE3A8F0, 0x1F23D305);
	r4 = D(r4, s0_1_2, 0xF10015F6, 0x0AF3FB07, 0xFE12E6FF, 0x1213D200);
	r5 = D(r5, s0_1_2, 0x0C061B0A, 0x01042104, 0x049F81D4, 0xF407F0FF);
	r6 = D(r6, s0_1_2, 0x09030409, 0x0F010B05, 0xF900FAEF, 0xFBFCFFFB);
	r7 = D(r7, s0_1_2, 0x30F4FF03, 0xEDFC0C03, 0x0BF5F802, 0x0AF501F8);
	r0 = D(r0, s0_2_0, 0xF90702FA, 0xF6010101, 0xF606FC01, 0xFEF22F11);
	r1 = D(r1, s0_2_0, 0x07BE0627, 0x36EE0FAD, 0x03050306, 0xF408080D);
	r2 = D(r2, s0_2_0, 0x01090926, 0xEC06FDFE, 0x0806001D, 0xFEAD16EC);
	r3 = D(r3, s0_2_0, 0xFFFFF2F6, 0xF3210CEC, 0x030AE81E, 0xEEC31BD8);
	r4 = D(r4, s0_2_0, 0x01FD02F7, 0x211100F1, 0x07F2FA05, 0xFBF6FC0A);
	r5 = D(r5, s0_2_0, 0xFC111802, 0xFDEDF5ED, 0xF4FDEF07, 0x01E6FE01);
	r6 = D(r6, s0_2_0, 0xF60EFEFA, 0xF9FFFFF4, 0x0604FFFD, 0xFE060001);
	r7 = D(r7, s0_2_0, 0xF10CF313, 0xF1150414, 0x02BB0712, 0xFBE709F9);
	r0 = D(r0, s0_2_1, 0xF9FFF802, 0x0F041A12, 0xF6E80604, 0xE1E1EFFB);
	r1 = D(r1, s0_2_1, 0x06E0E1FD, 0x1CE01332, 0x03020E02, 0x1E1CFC0C);
	r2 = D(r2, s0_2_1, 0x0106FEF2, 0xFE15E01C, 0xFB10FEF5, 0x06DD18F8);
	r3 = D(r3, s0_2_1, 0x0D0BFCE2, 0x130204F0, 0x10FA050D, 0x00F9D2E1);
	r4 = D(r4, s0_2_1, 0x1528F6DF, 0xEEF7F80A, 0xFEF810FF, 0xEF0CF709);
	r5 = D(r5, s0_2_1, 0xFC1115FD, 0x020DF5F9, 0xE2FC2014, 0x05130CF9);
	r6 = D(r6, s0_2_1, 0xFEFFFCF9, 0x03FD06F8, 0x0B001002, 0xFA010009);
	r7 = D(r7, s0_2_1, 0x09281CE4, 0xEE10EEE4, 0x1D06020F, 0x0A04EE04);
	r0 = D(r0, s0_2_2, 0x08FC0306, 0xF7030AFD, 0x1000E3F9, 0x010ADE04);
	r1 = D(r1, s0_2_2, 0xF7FCE5EF, 0xAEA04E0C, 0x0409FF06, 0xE5F9F5C4);
	r2 = D(r2, s0_2_2, 0x1DFBFC0C, 0x1712FFEC, 0x0A05100D, 0x1EF8D10F);
	r3 = D(r3, s0_2_2, 0x09FCF7FF, 0xFD12F11E, 0xF4230A0D, 0xFFDEC1DE);
	r4 = D(r4, s0_2_2, 0x0CF6BF1C, 0x07050007, 0xFBF7FE0C, 0x0A08D6EB);
	r5 = D(r5, s0_2_2, 0x11F32401, 0x06160902, 0x1DCEDFF3, 0x02FE12F8);
	r6 = D(r6, s0_2_2, 0x0004F602, 0x00FEFF02, 0x00FEF904, 0x04030204);
	r7 = D(r7, s0_2_2, 0x0E0D2902, 0x1CF9E9FB, 0x09FCFFDF, 0xFBF7FDF2);
	r0 = D(r0, s1_0_0, 0x0205FC01, 0xF4C5CEFE, 0x00050316, 0x0604FD31);
	r1 = D(r1, s1_0_0, 0x1F160CFF, 0x0D061102, 0x0600FC0B, 0xEC1EFAEE);
	r2 = D(r2, s1_0_0, 0xEA81AF81, 0xEBE9E420, 0x15030F1F, 0xE2E5E5DE);
	r3 = D(r3, s1_0_0, 0xCCF1072C, 0x12D803DE, 0xFBFEDC01, 0x0E010775);
	r4 = D(r4, s1_0_0, 0x1AF3D0FD, 0x15EF0DF8, 0xE90016F3, 0xE2101A08);
	r5 = D(r5, s1_0_0, 0xF0F6F803, 0xF1EFFAF0, 0xDFE9FFC6, 0xF1050FFF);
	r6 = D(r6, s1_0_0, 0xFD06F603, 0xFF0100F5, 0xFFFB03FF, 0x04000004);
	r7 = D(r7, s1_0_0, 0xD013EDF8, 0x250ADDDC, 0x2E1EF6EC, 0xEEFBD804);
	r0 = D(r0, s1_0_1, 0x08FEF60A, 0xE617DCFE, 0xF8000212, 0x14E206EB);
	r1 = D(r1, s1_0_1, 0x130400FB, 0xF504030F, 0xFCFD0001, 0xE81704D3);
	r2 = D(r2, s1_0_1, 0xDCDB07DF, 0x150CEDEC, 0x0B01010D, 0xFCE912DE);
	r3 = D(r3, s1_0_1, 0xFFA7112F, 0xF618E9ED, 0xEDD81127, 0xE218130E);
	r4 = D(r4, s1_0_1, 0x0912F61A, 0x03F7D0F1, 0x0115040B, 0xDAFFECEC);
	r5 = D(r5, s1_0_1, 0xFEFDFB16, 0xEFF1DAE2, 0x06F1B9AF, 0x010FF701);
	r6 = D(r6, s1_0_1, 0xFCFAFB02, 0x050005FC, 0x0DF701F7, 0x02F902FE);
	r7 = D(r7, s1_0_1, 0xF117FAD9, 0x1801F72A, 0xF4060FE2, 0x07F800F3);
	r0 = D(r0, s1_0_2, 0x060A0602, 0xF8F5FD0E, 0xFDFE061E, 0x0A3900E8);
	r1 = D(r1, s1_0_2, 0xEEF31401, 0xEF0DF710, 0xFBFDFAFF, 0x1AE61907);
	r2 = D(r2, s1_0_2, 0xF702F8F9, 0xE2E4E8E1, 0x1E03FCFB, 0x04F319D5);
	r3 = D(r3, s1_0_2, 0x200E0A07, 0xE2FE0FF6, 0x81ACF85F, 0x2F1C0E25);
	r4 = D(r4, s1_0_2, 0x00E303EC, 0xF70EEF11, 0xE11809FF, 0xDF13F203);
	r5 = D(r5, s1_0_2, 0xFBFEF10E, 0x03FA00F4, 0xAFAF0035, 0xEB1610FC);
	r6 = D(r6, s1_0_2, 0xF9FE03F4, 0x0D03FE02, 0xFB090F05, 0xFF02FDFE);
	r7 = D(r7, s1_0_2, 0xFAFCD9E3, 0xFB0B18F3, 0x0BFB1002, 0xF00AE9DA);
	r0 = D(r0, s1_1_0, 0xF9FF09F2, 0xE8F6FAE0, 0xF5090203, 0xE9ECF416);
	r1 = D(r1, s1_1_0, 0x14161112, 0x1606FB02, 0x09FCFB03, 0xF005F8EC);
	r2 = D(r2, s1_1_0, 0x1700E609, 0x0416021F, 0x15CCEF15, 0xE14681D3);
	r3 = D(r3, s1_1_0, 0x000D02FE, 0xECE5E0D9, 0x030D0AE9, 0xF40CCC03);
	r4 = D(r4, s1_1_0, 0x112A0FBD, 0xFD021218, 0xD1FA0C0A, 0xE6FCCFFF);
	r5 = D(r5, s1_1_0, 0xF6E6E2F8, 0x0208FF0C, 0xE0FBE6DF, 0xFFF51306);
	r6 = D(r6, s1_1_0, 0x0612FE04, 0x01060AFF, 0x020102F4, 0x03FCFFFA);
	r7 = D(r7, s1_1_0, 0x02CDF1EB, 0xE0F308E0, 0x04F517DB, 0xEEFAEDFD);
	r0 = D(r0, s1_1_1, 0x06FDF807, 0xF1BE0203, 0x150ADD0B, 0xF6D5A410);
	r1 = D(r1, s1_1_1, 0xFE1FFBF6, 0xF4EE0F1F, 0x0EFFF8FE, 0xFADAD689);
	r2 = D(r2, s1_1_1, 0xFDDA2D09, 0xFCECE6EC, 0x9FE71203, 0x3443E9B2);
	r3 = D(r3, s1_1_1, 0xD210F0F3, 0x08DCF611, 0x0E010221, 0xE602AE17);
	r4 = D(r4, s1_1_1, 0xEDFD1D2B, 0xD2FB1014, 0xEFF1F219, 0xFB81CE31);
	r5 = D(r5, s1_1_1, 0xFCF4D7EB, 0x050AE0E5, 0x0D3D0304, 0xCB02080E);
	r6 = D(r6, s1_1_1, 0x070601FE, 0x001008FE, 0x0EFA0806, 0x08FAFF02);
	r7 = D(r7, s1_1_1, 0x16DBEEC6, 0x031010F9, 0xE6F700D5, 0xF900FE1A);
	r0 = D(r0, s1_1_2, 0xFE05F905, 0x1BC4ECF7, 0x15EC040C, 0xD41C290B);
	r1 = D(r1, s1_1_2, 0x04E4EA0E, 0x0FFD100B, 0x0B000CFE, 0xCC05D6A9);
	r2 = D(r2, s1_1_2, 0x0210ECF7, 0xE9FE2BD8, 0x170B00F9, 0xE53A0210);
	r3 = D(r3, s1_1_2, 0x17041B09, 0xE4FC01EC, 0x09F5F1F3, 0x31F6E501);
	r4 = D(r4, s1_1_2, 0x21020904, 0xF301F308, 0x0D04F2F9, 0xE5EB07FD);
	r5 = D(r5, s1_1_2, 0x13F1DEF1, 0xF4FAFA07, 0xE5B6D82B, 0xF1F8F910);
	r6 = D(r6, s1_1_2, 0xF7FDFA01, 0xFB0AE5FD, 0x0205FA06, 0x020303FE);
	r7 = D(r7, s1_1_2, 0x93FCDFFE, 0x201BE91D, 0x04F7F6E2, 0x18F52EDB);
	r0 = D(r0, s1_2_0, 0xFAFAF5FD, 0xFC0510FB, 0x0DEDF80D, 0xDD0B09FC);
	r1 = D(r1, s1_2_0, 0x2FC8F2EF, 0xF4F4E61C, 0x00FB08F8, 0xE6F0FE18);
	r2 = D(r2, s1_2_0, 0x060FECE3, 0xF4F00300, 0xECF6F209, 0xF20E0721);
	r3 = D(r3, s1_2_0, 0xE6FFF00B, 0x020A0F0A, 0x1004F6EE, 0x0FAEE8CD);
	r4 = D(r4, s1_2_0, 0x3FE2ECE4, 0xF7F90001, 0xD30301FF, 0xD9F7F100);
	r5 = D(r5, s1_2_0, 0xF9080AFB, 0xF1EFFA09, 0x9EF800EA, 0xF509FC0E);
	r6 = D(r6, s1_2_0, 0xF7F8FB04, 0xF6FDFA02, 0x04020109, 0xFEF904FB);
	r7 = D(r7, s1_2_0, 0x2CFBE9ED, 0x1932E3C8, 0x4219E9EC, 0xFAEC0BE7);
	r0 = D(r0, s1_2_1, 0xF3F9F8FC, 0xF01E0C06, 0x0903F1FE, 0xC4E51012);
	r1 = D(r1, s1_2_1, 0xEBEB2319, 0xF1E1D1BC, 0x05040404, 0x04FBE502);
	r2 = D(r2, s1_2_1, 0x110A0802, 0x0BF506F2, 0x0B1806FF, 0x45F3FDE4);
	r3 = D(r3, s1_2_1, 0x0002FC08, 0xC3B9E011, 0xE5F0FF0C, 0xE8022385);
	r4 = D(r4, s1_2_1, 0xF3020D1D, 0x21F1FEFB, 0x0F02EC01, 0xF300141E);
	r5 = D(r5, s1_2_1, 0x0D10F6EA, 0xF002F8FC, 0x273CB1BC, 0x1005F1FA);
	r6 = D(r6, s1_2_1, 0xE8FB0807, 0xF9FCFA06, 0x1709F100, 0x04000303);
	r7 = D(r7, s1_2_1, 0x1E0D0CF4, 0xD8F3FAD7, 0x81FDFFFA, 0x0DECFC1D);
	r0 = D(r0, s1_2_2, 0xFE05F8FD, 0xED0E03F7, 0xF7F6211A, 0xFE101407);
	r1 = D(r1, s1_2_2, 0xDC080D0E, 0x172803B1, 0x04000801, 0xC10505FD);
	r2 = D(r2, s1_2_2, 0x12FE0B0D, 0x02E2180C, 0x0305E8F6, 0x08E2170D);
	r3 = D(r3, s1_2_2, 0xE305FEEC, 0x1103FFF7, 0xF4C195F3, 0x20F6E2C8);
	r4 = D(r4, s1_2_2, 0xFAEBF2EF, 0x18050302, 0xF4F8F40C, 0x222406F9);
	r5 = D(r5, s1_2_2, 0xF5EF0001, 0x0A07FBF7, 0xD4812A2B, 0x0302FEF9);
	r6 = D(r6, s1_2_2, 0x08FE0501, 0x05FEF9FF, 0xF9FCFDFF, 0xFE00FF00);
	r7 = D(r7, s1_2_2, 0xDD0203F1, 0xE40BF004, 0x09F0F82C, 0x30022113);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(1.178e-02, 5.594e-03, 1.024e-02, 6.763e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-2.873e-02, 6.465e-03, -5.156e-03, -1.873e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(2.313e-02, 1.744e-03, 3.845e-02, -1.122e-01);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(6.718e-03, -3.031e-02, -3.483e-02, 1.108e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-1.320e-02, -6.428e-03, 5.234e-03, -5.481e-03);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-6.251e-03, 5.157e-02, -1.193e-01, 1.689e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(2.538e-02, 1.068e-02, 1.691e-02, 3.317e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(1.837e-02, -2.739e-02, 1.098e-02, 5.367e-03);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-BILINEAR-MPV-NVL-conv5
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE conv5
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv4_pt;
			r = conv4_gather(p, 0);
			g = conv4_gather(p, 1);
			b = conv4_gather(p, 2);
			a = conv4_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv4_pt;
			r = conv4_gather(p, 0);
			g = conv4_gather(p, 1);
			b = conv4_gather(p, 2);
			a = conv4_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFDFB0C03, 0x1BFAFB03, 0x0AFF0FFF, 0x13FEF40D);
	r1 = D(r1, s0_0_0, 0xFCFA010D, 0x18F4FA06, 0x030CFAF9, 0x0CFEF7FE);
	r2 = D(r2, s0_0_0, 0x00F90005, 0x0DFF04FE, 0xFD03FE0C, 0xFFF1FDEE);
	r3 = D(r3, s0_0_0, 0xF801F705, 0x08DD0BFF, 0x13E60EFF, 0x1E10BD11);
	r4 = D(r4, s0_0_0, 0x010115F3, 0x1D0803FB, 0x00F9F8FD, 0xFCFD04FE);
	r5 = D(r5, s0_0_0, 0xF60DF6FB, 0x060D05F7, 0xFF12FCFB, 0x151EFEFC);
	r6 = D(r6, s0_0_0, 0xF20004FC, 0x08010107, 0x0710FF0A, 0x01FC08F2);
	r7 = D(r7, s0_0_0, 0x052509F5, 0x2CF40A01, 0x02F80E01, 0xFEFD10FC);
	r0 = D(r0, s0_0_1, 0xE9F4040D, 0x16D1FCF9, 0x0FE808E1, 0x0104F108);
	r1 = D(r1, s0_0_1, 0x03FDF9F8, 0x0C180002, 0xF907EC0F, 0x0E03080D);
	r2 = D(r2, s0_0_1, 0x03F11512, 0xFEF4F808, 0x06FA06F3, 0x1EF11219);
	r3 = D(r3, s0_0_1, 0xFD03FBF7, 0x06FF110F, 0x2E08F30E, 0x03D1F306);
	r4 = D(r4, s0_0_1, 0x020AECF0, 0x1C0BF0D8, 0xFDF801FC, 0xF50006F9);
	r5 = D(r5, s0_0_1, 0xF6060106, 0xFCEFF5FF, 0x090C0C02, 0x07EC08F2);
	r6 = D(r6, s0_0_1, 0x1107F608, 0x0CF901F4, 0x0309F8F6, 0x030C0515);
	r7 = D(r7, s0_0_1, 0x1515FDE4, 0x0EF208EF, 0xFEEFF811, 0x0209F9FB);
	r0 = D(r0, s0_0_2, 0xFEFE1013, 0x0AE30202, 0x040003F8, 0xFEF2040A);
	r1 = D(r1, s0_0_2, 0xF9F300FC, 0x12FEFFFD, 0xF312FBF4, 0x0AF7F806);
	r2 = D(r2, s0_0_2, 0x09FBFB13, 0x06FE0605, 0xFF01FB08, 0x1105FFF4);
	r3 = D(r3, s0_0_2, 0xFF0BFA00, 0x0F0100EB, 0x101AFAFD, 0x1FFCEB00);
	r4 = D(r4, s0_0_2, 0xFE07FFFB, 0x1500F200, 0xF608F909, 0xFFF805FB);
	r5 = D(r5, s0_0_2, 0xFDF70302, 0xED0A0116, 0xF00A020B, 0x0EECFEDD);
	r6 = D(r6, s0_0_2, 0xFCFDF802, 0x0BF8FEFA, 0x05F9FF04, 0x07030003);
	r7 = D(r7, s0_0_2, 0xF90CF6E4, 0x0F030401, 0x0D0EFE01, 0x00FCF9F8);
	r0 = D(r0, s0_1_0, 0xFC140B0E, 0x13CCEF00, 0xE2E80CFB, 0x06BFCE14);
	r1 = D(r1, s0_1_0, 0x010BFA05, 0x09F70B18, 0x02070FFE, 0x0FF407F1);
	r2 = D(r2, s0_1_0, 0x0D07F80E, 0x0B0400FB, 0x06F6FE05, 0x12F70B09);
	r3 = D(r3, s0_1_0, 0xF106F505, 0x2D04FDF0, 0x290DF807, 0x1DDEB5FA);
	r4 = D(r4, s0_1_0, 0xFD07F9F8, 0x2C20BBFE, 0x0204F914, 0xFDEF08F9);
	r5 = D(r5, s0_1_0, 0x1100F512, 0xED02F209, 0x0A11FEFA, 0x0CD31EF3);
	r6 = D(r6, s0_1_0, 0x03F90104, 0xF5FAD6ED, 0xF400E6F6, 0x1003FFF5);
	r7 = D(r7, s0_1_0, 0x00F414FE, 0x0DCB0BFE, 0x10F5FE0F, 0x100F030F);
	r0 = D(r0, s0_1_1, 0x02F8F5F8, 0x13CC0CF4, 0x13C1EC1A, 0x08DCF2FB);
	r1 = D(r1, s0_1_1, 0xFCF20701, 0x0F11FDFC, 0x06F20800, 0x10F2F6F7);
	r2 = D(r2, s0_1_1, 0x0CF9E101, 0x060CED00, 0xF4F803ED, 0x10EF1C1E);
	r3 = D(r3, s0_1_1, 0xF112E6F3, 0xF019EE0D, 0x0EF00101, 0x10C0CA03);
	r4 = D(r4, s0_1_1, 0x10D1E1F6, 0x40EAF5E6, 0x0612F519, 0xFF090A18);
	r5 = D(r5, s0_1_1, 0xFE0DF2F3, 0xF80CF7F9, 0xFB0719F5, 0x0EC31100);
	r6 = D(r6, s0_1_1, 0xF10F1EE7, 0x08FBEF02, 0x0904F503, 0x0AF9010D);
	r7 = D(r7, s0_1_1, 0xF4F2240E, 0xF8C2130B, 0x111710F5, 0x1D0704F7);
	r0 = D(r0, s0_1_2, 0xFE030102, 0x0FF8F5FC, 0x08F012ED, 0x0CF411FE);
	r1 = D(r1, s0_1_2, 0xF8E609F4, 0xFDF713FF, 0x02010303, 0x19EAF909);
	r2 = D(r2, s0_1_2, 0x090CF805, 0xFD06F60F, 0xFB09FB05, 0x0F0FF910);
	r3 = D(r3, s0_1_2, 0xFC03F607, 0xFBF21008, 0x21EFED05, 0x1716CFE8);
	r4 = D(r4, s0_1_2, 0xEF020203, 0x2CFDFF06, 0xF606F802, 0xF5030905);
	r5 = D(r5, s0_1_2, 0xFF02F610, 0x00FCED09, 0xED0CFC11, 0x16DD14EF);
	r6 = D(r6, s0_1_2, 0xF5FBFFF9, 0xFD1506ED, 0xFEFFFFFB, 0x07020007);
	r7 = D(r7, s0_1_2, 0x11FE19F6, 0x1600000E, 0x0204FC00, 0x04F20505);
	r0 = D(r0, s0_2_0, 0xF8F4F400, 0x0FF5F811, 0x09031100, 0x18E90605);
	r1 = D(r1, s0_2_0, 0xF610FDF6, 0x15EAE9F6, 0x0205FD0A, 0x0DED0C00);
	r2 = D(r2, s0_2_0, 0xFFFC0502, 0x0006FA03, 0xFBF3F904, 0xF9F905F8);
	r3 = D(r3, s0_2_0, 0xFEFD0201, 0x0EE4F505, 0x1A09C618, 0x17CDE90D);
	r4 = D(r4, s0_2_0, 0xF6100010, 0x2FD6E619, 0x03FAFBFB, 0xFAF00208);
	r5 = D(r5, s0_2_0, 0xFAF2ECFF, 0x0400FBFE, 0x05000900, 0x0C000B07);
	r6 = D(r6, s0_2_0, 0x03FE00FA, 0xF91BFFFC, 0x050C0DF8, 0x040CFE01);
	r7 = D(r7, s0_2_0, 0xED0518FB, 0x08DCF503, 0x0806F401, 0xF5FD06FB);
	r0 = D(r0, s0_2_1, 0xF6F0F900, 0x10FB0611, 0x050C1800, 0x13190E0B);
	r1 = D(r1, s0_2_1, 0xF70AE505, 0x0AE2180A, 0x0B04FDF0, 0x13F6200C);
	r2 = D(r2, s0_2_1, 0x0609F9FC, 0x110B01F1, 0xF6F5F70A, 0x08F0110D);
	r3 = D(r3, s0_2_1, 0xFAEBED0B, 0x030C04FA, 0x2110EFF7, 0x150DC719);
	r4 = D(r4, s0_2_1, 0x050BDF0C, 0x1AFFB207, 0xFE010304, 0x070D0D05);
	r5 = D(r5, s0_2_1, 0xFCFB0CFB, 0x11E8FBFC, 0xFE1C07F2, 0x181E0FF1);
	r6 = D(r6, s0_2_1, 0x02FEFF01, 0xF5F5E71B, 0xEE11FBF0, 0x0308FB0B);
	r7 = D(r7, s0_2_1, 0xF50909FA, 0x08D7D9F0, 0x16E70B0B, 0xF507FF05);
	r0 = D(r0, s0_2_2, 0x010209FD, 0x0701EE06, 0xF506E40E, 0x1601EE16);
	r1 = D(r1, s0_2_2, 0x060D07F8, 0x14F12DF6, 0x070505F8, 0x1105F1FF);
	r2 = D(r2, s0_2_2, 0x0A0AFCFA, 0x00FB05F9, 0xFA06F9FF, 0x100220FF);
	r3 = D(r3, s0_2_2, 0xFF01FEFD, 0x06F02205, 0x150ABA08, 0x0F09B5F2);
	r4 = D(r4, s0_2_2, 0xFF04FE13, 0x1D0E0309, 0x00F9F9FC, 0xF5FEFBFA);
	r5 = D(r5, s0_2_2, 0x0404FD04, 0xF31004E7, 0x0408FEFE, 0x1BF8D10C);
	r6 = D(r6, s0_2_2, 0x07F8050B, 0xF70F0E02, 0xF80100EF, 0x0003FEFB);
	r7 = D(r7, s0_2_2, 0x0AFBE91C, 0x16011411, 0x0AF40CEE, 0x07FCFAF3);
	r0 = D(r0, s1_0_0, 0x0E0E2304, 0x1F154804, 0x00ED4BE6, 0x00148100);
	r1 = D(r1, s1_0_0, 0xEFFAE9F9, 0xF1125304, 0x070A9E12, 0xFA035CFA);
	r2 = D(r2, s1_0_0, 0x16F5B711, 0xFB01DB07, 0x01FF1003, 0xF80920F2);
	r3 = D(r3, s1_0_0, 0x05FA21FE, 0xFFF341F9, 0x0A1EF7FF, 0x52F197FA);
	r4 = D(r4, s1_0_0, 0xF3F1F604, 0x11FF5106, 0xFA102804, 0xFFF2C204);
	r5 = D(r5, s1_0_0, 0x02FDD0EF, 0x11FBE20F, 0x11ED81F5, 0x02DDFDF3);
	r6 = D(r6, s1_0_0, 0xF8078F06, 0xFF017FE4, 0xFEFEC407, 0x06F2D9F4);
	r7 = D(r7, s1_0_0, 0x07002FEC, 0x08FD30FC, 0xFD06C003, 0x050CC8FA);
	r0 = D(r0, s1_0_1, 0x06EA07EF, 0xE7FF46ED, 0x3DDAEF0B, 0xF6FB0EFD);
	r1 = D(r1, s1_0_1, 0x08031909, 0xFEF10DFA, 0xFC19D0F4, 0x0904C2FB);
	r2 = D(r2, s1_0_1, 0xFDFC040B, 0xF803AFFD, 0xFEEF3FF4, 0xFE07D208);
	r3 = D(r3, s1_0_1, 0x080A1105, 0xDFF0DFF0, 0xCB177115, 0x1ED931DB);
	r4 = D(r4, s1_0_1, 0x10163C0F, 0x0D059210, 0x060DEDF6, 0xF7F408FC);
	r5 = D(r5, s1_0_1, 0xF70441E2, 0xFBFC0C0D, 0x0CFB19F4, 0x27FD81F5);
	r6 = D(r6, s1_0_1, 0xEF0E060A, 0x08FF1EFC, 0x0C099005, 0xFB073202);
	r7 = D(r7, s1_0_1, 0xFF1DAC26, 0x09FC4104, 0x0DFD1410, 0xFD0EBBFF);
	r0 = D(r0, s1_0_2, 0xFAFE20EF, 0x0A0720F7, 0x0A06A0EE, 0x10FFFBFA);
	r1 = D(r1, s1_0_2, 0x140891FC, 0x1BF1D813, 0xF70403F7, 0x0AFE37F3);
	r2 = D(r2, s1_0_2, 0x02FA06FB, 0x0200F4F3, 0xFE05C8EE, 0xF5FFB9F0);
	r3 = D(r3, s1_0_2, 0xFE02FB08, 0x010D19DC, 0x1A0CACE6, 0xCF0B2CE0);
	r4 = D(r4, s1_0_2, 0xFCFE811D, 0x4618DF00, 0xFF0C22F6, 0x0BF92D0D);
	r5 = D(r5, s1_0_2, 0xFE011DFD, 0xF6014C07, 0x0905E8E0, 0x03FD30F6);
	r6 = D(r6, s1_0_2, 0x0E00FA00, 0x0DF224E5, 0xFDFBA409, 0xF3030F03);
	r7 = D(r7, s1_0_2, 0x15F36B25, 0xEA192902, 0xFD124EF0, 0xF105180C);
	r0 = D(r0, s1_1_0, 0xE60CE7F0, 0x11F50003, 0xFF0E4AF3, 0xFF1BF102);
	r1 = D(r1, s1_1_0, 0x03160E06, 0xFBFE0009, 0x05E9FA1F, 0xFCF216FF);
	r2 = D(r2, s1_1_0, 0xFB1E03ED, 0xEE061DF6, 0xF7FBE9EA, 0xF20F160D);
	r3 = D(r3, s1_1_0, 0xF2F723F2, 0xC9140011, 0x1C05FAF1, 0xAFED27F2);
	r4 = D(r4, s1_1_0, 0x09FB440B, 0x17F326EA, 0x040E23F3, 0xF5F01A08);
	r5 = D(r5, s1_1_0, 0x0A15FCD2, 0x08F3F102, 0xE7F6E4FF, 0xFB0C27F8);
	r6 = D(r6, s1_1_0, 0xFDF5F601, 0xFFFA3203, 0xFC0306F5, 0xFBE8121E);
	r7 = D(r7, s1_1_0, 0x07DC0702, 0xEEEE0BD6, 0x1FFEFFF2, 0xFE0A0704);
	r0 = D(r0, s1_1_1, 0x8C16F60D, 0x0FE9D409, 0xF3F4D1E4, 0x17E92218);
	r1 = D(r1, s1_1_1, 0x0117DBFE, 0x0301EB08, 0xEC2CED0D, 0x0DEB10FA);
	r2 = D(r2, s1_1_1, 0x092DFB05, 0xFBEA3F14, 0x0B0AFD19, 0xCD080304);
	r3 = D(r3, s1_1_1, 0xE6FDD506, 0x15B40D08, 0x18D4F305, 0x81EC21BD);
	r4 = D(r4, s1_1_1, 0x1F0B37E9, 0xF405FFFF, 0xF3141907, 0xF828260C);
	r5 = D(r5, s1_1_1, 0x04FB2100, 0xE6EC2100, 0x01E51FF1, 0xEEF5FC0C);
	r6 = D(r6, s1_1_1, 0x00E405FD, 0xF20FE6FF, 0xFAF715F6, 0x0806E008);
	r7 = D(r7, s1_1_1, 0x05D838ED, 0x1310C709, 0x05F24903, 0x0BEEFB06);
	r0 = D(r0, s1_1_2, 0xE3F8FA11, 0xE90002EA, 0x32EB14EB, 0xEDFDFBF3);
	r1 = D(r1, s1_1_2, 0xFEFDF1F3, 0x00010706, 0xEBFCF514, 0xEEFEFBF7);
	r2 = D(r2, s1_1_2, 0x11FCF6FA, 0x11020B08, 0xEF0A1EEF, 0x0FF2F1FD);
	r3 = D(r3, s1_1_2, 0xF80701F5, 0xE70E01E4, 0x280ACB0B, 0xFA050AF6);
	r4 = D(r4, s1_1_2, 0xE5FE1108, 0x810213F0, 0x0509F714, 0xF7FB1D07);
	r5 = D(r5, s1_1_2, 0xF4020B06, 0xFB0B0D2E, 0xF8160FF2, 0x17EA34DE);
	r6 = D(r6, s1_1_2, 0xF3FFEB0F, 0x0AF4F9E9, 0x11F7FC00, 0x01FB0807);
	r7 = D(r7, s1_1_2, 0xF307F8F5, 0xFA0411E6, 0x1505F4EB, 0xFD0AFB05);
	r0 = D(r0, s1_2_0, 0x09FEFEEC, 0xFFEE0EFA, 0x082F0E01, 0xEF1B09D0);
	r1 = D(r1, s1_2_0, 0xFDFF0E01, 0x1710FAE6, 0x14DE01FF, 0x00F6FDFA);
	r2 = D(r2, s1_2_0, 0x0006030A, 0x05FB0B03, 0xFA0BF306, 0x090FF9FA);
	r3 = D(r3, s1_2_0, 0x0B1600E3, 0x210900FA, 0x26EF0D01, 0xEA1E0203);
	r4 = D(r4, s1_2_0, 0x0508EF0C, 0xFF010FE9, 0xFE10FAEC, 0xF9090116);
	r5 = D(r5, s1_2_0, 0x12F800EA, 0x04FEFB2A, 0xF7000E04, 0x1514F8F9);
	r6 = D(r6, s1_2_0, 0xE7FEF90C, 0xFB0D0A00, 0x0106F11C, 0xFBFD0606);
	r7 = D(r7, s1_2_0, 0x08090007, 0x0FFF00E6, 0xF3FB05EF, 0xF8FE000A);
	r0 = D(r0, s1_2_1, 0x01090114, 0xF6E5FF04, 0xF520E50A, 0xF8ECF6D8);
	r1 = D(r1, s1_2_1, 0xF6EAF5FE, 0x04E00803, 0x1A040FF5, 0xFE03FFF4);
	r2 = D(r2, s1_2_1, 0xFC0EF907, 0x062BF3EF, 0xFCF302FA, 0x0CFDFAFC);
	r3 = D(r3, s1_2_1, 0x0B0FFDF6, 0x10F706E2, 0xBAEA17D6, 0xE3100711);
	r4 = D(r4, s1_2_1, 0x13F1010B, 0xECF5FA0B, 0x08031204, 0xFA050615);
	r5 = D(r5, s1_2_1, 0xFE0E0BEE, 0x0229F207, 0x06F8F3FF, 0xE5F90517);
	r6 = D(r6, s1_2_1, 0x0DF606F7, 0xFEF8FFF3, 0xFEF60E03, 0xF2F703FE);
	r7 = D(r7, s1_2_1, 0x05041612, 0x02F300EF, 0x07EE0BE4, 0xEFFDFEED);
	r0 = D(r0, s1_2_2, 0xE8040AF7, 0x01FCFF04, 0xF9FFF815, 0x07FA0CFF);
	r1 = D(r1, s1_2_2, 0x0CFAF6FD, 0xF9EFF02A, 0x1000F5FF, 0x08F8060E);
	r2 = D(r2, s1_2_2, 0x08F604FD, 0x1000FCFC, 0x07FF0202, 0x03090F10);
	r3 = D(r3, s1_2_2, 0xF4F603F6, 0xCC110C0A, 0x05FE0015, 0xF10EF60A);
	r4 = D(r4, s1_2_2, 0x17041201, 0x170C1A0D, 0xFDFE06FB, 0xFF0D0607);
	r5 = D(r5, s1_2_2, 0x0BFE0203, 0xFCF9039A, 0xE512F7E9, 0x0E0A0FED);
	r6 = D(r6, s1_2_2, 0xFA05FE06, 0xFDFE0513, 0x14F9FEFC, 0x000002FB);
	r7 = D(r7, s1_2_2, 0xF504FBED, 0x08070100, 0x0B1206ED, 0x09FAFBF9);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x1702FA05, 0x1F02FB03, 0xCDE604F7, 0x81DD1405);
	r1 = D(r1, s0_0_0, 0xF11602FB, 0xEF0DF901, 0x180C18F9, 0x0AFDFD0C);
	r2 = D(r2, s0_0_0, 0xFC04F5FB, 0xFBF1F905, 0x0F0A0B08, 0x2408FFFC);
	r3 = D(r3, s0_0_0, 0x0A02FBFE, 0x81110AFF, 0xFA0EF6F7, 0x370DF1FB);
	r4 = D(r4, s0_0_0, 0xF8F8060F, 0x18CFFBFD, 0x0FFD01FB, 0x03FF0306);
	r5 = D(r5, s0_0_0, 0x2606F9FC, 0x01F50303, 0x1CFF04F1, 0xAFE212FE);
	r6 = D(r6, s0_0_0, 0x1D0005FD, 0x0C07FDFF, 0x8801EE01, 0x00FB0903);
	r7 = D(r7, s0_0_0, 0x08F4F7FD, 0xF8EBF4FE, 0x25FC080D, 0x16EFFFFC);
	r0 = D(r0, s0_0_1, 0xFBFD16F2, 0x1C0A1104, 0x42EAEA16, 0xDFEB0E01);
	r1 = D(r1, s0_0_1, 0xEF010312, 0x08F1050E, 0x041305F6, 0x07FBFAFE);
	r2 = D(r2, s0_0_1, 0x09060709, 0x19041204, 0x07091CF8, 0x141A0408);
	r3 = D(r3, s0_0_1, 0x1501F902, 0xCF0A19FC, 0x1610E224, 0x2DEC1705);
	r4 = D(r4, s0_0_1, 0xE7251A04, 0x17DB080E, 0xF5FB0605, 0xFDF1FAF6);
	r5 = D(r5, s0_0_1, 0xED111002, 0x150E03F8, 0xDEF714F6, 0x09E01DF5);
	r6 = D(r6, s0_0_1, 0xEDF7FD05, 0x3028FE0E, 0xF80B0508, 0x0E0A0CFF);
	r7 = D(r7, s0_0_1, 0x8117F413, 0x05F723F9, 0xFA08FCF5, 0x01000409);
	r0 = D(r0, s0_0_2, 0xF1EA0D02, 0xF70A05FB, 0x1305F5EB, 0xCFF806F7);
	r1 = D(r1, s0_0_2, 0x12F6FCF8, 0xCEFE0BEA, 0xF8FC0505, 0xF5EA0402);
	r2 = D(r2, s0_0_2, 0xF90AFA01, 0xE5FCF9F6, 0xEF0CFBF9, 0xF70EEF08);
	r3 = D(r3, s0_0_2, 0xF3000C06, 0xDCFF03F4, 0x1114031B, 0x4403E6F2);
	r4 = D(r4, s0_0_2, 0x14FAF6F8, 0x0715F9F3, 0xF6EF0107, 0xE90907F5);
	r5 = D(r5, s0_0_2, 0xF7FFFEFB, 0x0C2107F3, 0x05120AF9, 0xE8D10B02);
	r6 = D(r6, s0_0_2, 0xC903FD0F, 0x030BFBF2, 0x0D03F9FD, 0x0B0502FE);
	r7 = D(r7, s0_0_2, 0xF11B06F7, 0xDDFBF10D, 0x0FFAFFFE, 0xFAF7FE07);
	r0 = D(r0, s0_1_0, 0x20DAC9FD, 0xEAFB0E06, 0xF804BDFA, 0x00E41C17);
	r1 = D(r1, s0_1_0, 0x0401070E, 0x230D1A03, 0x080B1DF2, 0x030011FF);
	r2 = D(r2, s0_1_0, 0xFDFEFE0E, 0x22F4FF04, 0x06050FEB, 0xF70E0A1A);
	r3 = D(r3, s0_1_0, 0xF109EE0F, 0x0EF12DF8, 0x15FF0B10, 0x8103021E);
	r4 = D(r4, s0_1_0, 0x19F10403, 0x1110EA20, 0x0CFD0707, 0xFE010F00);
	r5 = D(r5, s0_1_0, 0xF8FE15FB, 0x17F309F0, 0xFC110401, 0xAD19FEFA);
	r6 = D(r6, s0_1_0, 0x0DFF160A, 0x1406ED01, 0x2E11FC09, 0x06040208);
	r7 = D(r7, s0_1_0, 0x1C0EE5FB, 0xFEE4FE0A, 0xC7090CFB, 0x01F8F70B);
	r0 = D(r0, s0_1_1, 0xF2F90B33, 0x0CFF1213, 0x18E8ED04, 0xFEDBFAFA);
	r1 = D(r1, s0_1_1, 0x0505DB1C, 0xE402F108, 0xFF15FA04, 0xDFE001F6);
	r2 = D(r2, s0_1_1, 0x010FFE24, 0xF7F41903, 0x23F41F00, 0x0E0F0F25);
	r3 = D(r3, s0_1_1, 0xEBFE1309, 0xE3110117, 0x06143117, 0x9AF7F6E5);
	r4 = D(r4, s0_1_1, 0xF702044B, 0x5001DCEB, 0x08FCFB10, 0x060201ED);
	r5 = D(r5, s0_1_1, 0x02071616, 0xEE0A0303, 0x150EFDED, 0x370FF3F5);
	r6 = D(r6, s0_1_1, 0x18020B0F, 0xFEDB0704, 0xF203FEF5, 0xFFFDFC0C);
	r7 = D(r7, s0_1_1, 0x90EAEC0A, 0x09DB09EC, 0xF0F51624, 0x1AF7F105);
	r0 = D(r0, s0_1_2, 0xFCF7F921, 0xF0030AF4, 0x1605DEEA, 0x01FAF8F7);
	r1 = D(r1, s0_1_2, 0x140DFB01, 0x37E906F9, 0xF903FD1F, 0xF909F424);
	r2 = D(r2, s0_1_2, 0x110F01F2, 0x08EAFFF9, 0x02FDFCFF, 0x19FF14FE);
	r3 = D(r3, s0_1_2, 0xC704FFF4, 0x23FE0D0F, 0xEB050330, 0xE4EDFDE8);
	r4 = D(r4, s0_1_2, 0x21EAEA15, 0x300909F5, 0x0CF70A14, 0xC8FC0003);
	r5 = D(r5, s0_1_2, 0x0A02FCF8, 0x26BDEBFA, 0x180E0B0B, 0x040BFDD1);
	r6 = D(r6, s0_1_2, 0x14FCF82E, 0x09F7FEFA, 0x2F1103EC, 0x12F7FF12);
	r7 = D(r7, s0_1_2, 0xDBEED2DA, 0xF3F2183C, 0x03060A10, 0x29FDFF27);
	r0 = D(r0, s0_2_0, 0x1BFFD3F9, 0x23FFA904, 0x11158125, 0x01EB650B);
	r1 = D(r1, s0_2_0, 0x160277F9, 0xC40535EB, 0xEA103208, 0x14FBF212);
	r2 = D(r2, s0_2_0, 0x160404F6, 0xF4F7FFF9, 0xF4FCF207, 0xF50CE2E8);
	r3 = D(r3, s0_2_0, 0x040EA819, 0x1EF1440D, 0x81FDC808, 0x860AFEF4);
	r4 = D(r4, s0_2_0, 0xD9E07F0F, 0x0312C4E1, 0x10FF0100, 0x1802D60A);
	r5 = D(r5, s0_2_0, 0xF7120E02, 0xE4FD8109, 0x18F2E0F9, 0x25E5810E);
	r6 = D(r6, s0_2_0, 0xFEF326F6, 0x0C070BFA, 0x271A73FF, 0xEFFDE005);
	r7 = D(r7, s0_2_0, 0x0C15FD01, 0xC2CCDEF6, 0xFF02B50C, 0x09F6ECF9);
	r0 = D(r0, s0_2_1, 0xEAFC00CF, 0x19F6F5ED, 0x02EF083B, 0xFBF20932);
	r1 = D(r1, s0_2_1, 0x25111000, 0xF10AE311, 0x110A05E3, 0x1EEBFEE3);
	r2 = D(r2, s0_2_1, 0xDA02FE21, 0xF4061103, 0xF5080BF5, 0x3303E72B);
	r3 = D(r3, s0_2_1, 0x10FEF529, 0xFF090322, 0x11FFEBE0, 0xCF122B09);
	r4 = D(r4, s0_2_1, 0xF8ED3716, 0x7F0108F8, 0xF9F5010B, 0x100409FB);
	r5 = D(r5, s0_2_1, 0xED0BFAFD, 0x00FCEFF5, 0xEDF90B0B, 0xEB13E30E);
	r6 = D(r6, s0_2_1, 0x02F709F5, 0x0C0B093C, 0xDC15F23A, 0x0BFEFD20);
	r7 = D(r7, s0_2_1, 0x13FE0100, 0xFCE549D3, 0x1AFA0025, 0xEDFAFF09);
	r0 = D(r0, s0_2_2, 0x1506EF81, 0xEA03FF12, 0x12F40D88, 0x0DE713F5);
	r1 = D(r1, s0_2_2, 0x3E06F609, 0xF3FEEF10, 0xE60EF915, 0xD0FF05E3);
	r2 = D(r2, s0_2_2, 0x1D00FAF9, 0x1BF80E81, 0xDB05F55A, 0x3106068A);
	r3 = D(r3, s0_2_2, 0x1603F519, 0x1D0AF718, 0x810B08D9, 0x6D11EEF3);
	r4 = D(r4, s0_2_2, 0xFDFF1373, 0xA3FB135F, 0xFEEF000F, 0xFC01FC1C);
	r5 = D(r5, s0_2_2, 0xFF0104FD, 0xFB1801C6, 0x1006F90B, 0xF6FB170E);
	r6 = D(r6, s0_2_2, 0x060AF739, 0x10050994, 0x10FF0A54, 0xEC0100C7);
	r7 = D(r7, s0_2_2, 0x0C0203F5, 0xF9FE0537, 0xD604010D, 0xF3030115);
	r0 = D(r0, s1_0_0, 0x257FDBF6, 0xBC24FF02, 0x815FF7DE, 0xDFAE3902);
	r1 = D(r1, s1_0_0, 0xFA5CEF12, 0x03380801, 0xFEDBFFF8, 0x0A23F205);
	r2 = D(r2, s1_0_0, 0xFA130408, 0xFC09EF05, 0x0B450EFF, 0xFA2C01EA);
	r3 = D(r3, s1_0_0, 0x0E181805, 0xEB0420FF, 0xFB81D611, 0xC6E3F4FE);
	r4 = D(r4, s1_0_0, 0x0B7CEDFE, 0xEF7FB8E6, 0x06DC09FF, 0x13E90CF5);
	r5 = D(r5, s1_0_0, 0x187604FD, 0x1245F5EE, 0x01D5F0F1, 0x0603EAFB);
	r6 = D(r6, s1_0_0, 0x0CB9FFFD, 0x09D6F0FE, 0x0A0AFD0D, 0xFE4BFAF7);
	r7 = D(r7, s1_0_0, 0x1C59E104, 0xF951E8F1, 0xED8DE302, 0x11EAEBFB);
	r0 = D(r0, s1_0_1, 0x09E1F9FD, 0x180911FF, 0x11FBC7F9, 0xEBFCF0F2);
	r1 = D(r1, s1_0_1, 0x080AFFF2, 0x0F040FFC, 0xFFFC000D, 0x23FA0B0C);
	r2 = D(r2, s1_0_1, 0xF1F600FD, 0xF6070912, 0x15F80602, 0x040D140D);
	r3 = D(r3, s1_0_1, 0x0AFF12FA, 0xF91C03F2, 0x1815FE14, 0xDCF107F3);
	r4 = D(r4, s1_0_1, 0x10F402FA, 0x11FDC7DB, 0x0301F705, 0x0A01FFF7);
	r5 = D(r5, s1_0_1, 0xFE110900, 0x06F908FF, 0xE52AE400, 0x2FF42EF5);
	r6 = D(r6, s1_0_1, 0x0F1C0908, 0xF3E1F1FB, 0x09F70801, 0xF5F70FFB);
	r7 = D(r7, s1_0_1, 0xFD21FCF1, 0xE503F404, 0x0A0DF500, 0xFCF8FDFC);
	r0 = D(r0, s1_0_2, 0x1E0703FC, 0xEEFC0B01, 0x111E04EF, 0xCE0A130C);
	r1 = D(r1, s1_0_2, 0x09FB05FD, 0x130EE2F9, 0x040DE50D, 0xEC0CF90C);
	r2 = D(r2, s1_0_2, 0xE8FC0FFE, 0x0C01F002, 0x12FDF9FF, 0x030A0BED);
	r3 = D(r3, s1_0_2, 0x0C040E00, 0x16000309, 0xF50CD906, 0x0005F907);
	r4 = D(r4, s1_0_2, 0x2DEEEE05, 0xC6FBF4AD, 0x02FC0A08, 0xF3F703F8);
	r5 = D(r5, s1_0_2, 0xFEFEF20A, 0x00120102, 0xFFFFFA01, 0x81071303);
	r6 = D(r6, s1_0_2, 0x05FEF703, 0xFFF408F1, 0xE7F00D06, 0x0B04FEFF);
	r7 = D(r7, s1_0_2, 0xD003F710, 0x120B0008, 0xF0010205, 0x100D0803);
	r0 = D(r0, s1_1_0, 0x023702DA, 0xE71112FF, 0x3AA0FCD1, 0xD981F5FF);
	r1 = D(r1, s1_1_0, 0x15810FFF, 0x0E220604, 0xE318010F, 0x083D0F01);
	r2 = D(r2, s1_1_0, 0x1329F008, 0xFA16FDFF, 0x03E80104, 0x0CFB190E);
	r3 = D(r3, s1_1_0, 0x0D810813, 0xFE1CF010, 0xEA5B08FD, 0x0C3E1826);
	r4 = D(r4, s1_1_0, 0x2A81FEFA, 0xFE0CFFDB, 0x0416F500, 0xF62D0207);
	r5 = D(r5, s1_1_0, 0x07E014FB, 0xF60C04FA, 0xFD1CFEF6, 0xFF3901F7);
	r6 = D(r6, s1_1_0, 0xE61D08F9, 0x08810302, 0x11C50109, 0xF7330CF9);
	r7 = D(r7, s1_1_0, 0x10C70900, 0x9E81E6AE, 0xF61B0101, 0xFA1DE8F9);
	r0 = D(r0, s1_1_1, 0x1117FD1D, 0xF8060305, 0x02EBDDEE, 0xEF0909FD);
	r1 = D(r1, s1_1_1, 0x14FD1FEF, 0xF5F00E07, 0xFC07EE08, 0xF81003FD);
	r2 = D(r2, s1_1_1, 0x08070EF3, 0xF9B80805, 0xFD06020D, 0xF52FCE1B);
	r3 = D(r3, s1_1_1, 0xFFF3F5F9, 0xFFFFE904, 0xC708D7F3, 0x08E7F8F3);
	r4 = D(r4, s1_1_1, 0x21ED080C, 0x040017FA, 0x1F39F808, 0xF5150AFA);
	r5 = D(r5, s1_1_1, 0x0D080CF7, 0x25FFFE10, 0x0A11F60A, 0x141F0DF7);
	r6 = D(r6, s1_1_1, 0x020F000D, 0x02F81AF9, 0x050EC308, 0xFA1D07FF);
	r7 = D(r7, s1_1_1, 0x29E3EC15, 0x0C1317FA, 0x100DF701, 0x010BF811);
	r0 = D(r0, s1_1_2, 0x0B05F2FA, 0xCC1018EE, 0x14B80305, 0x0CF723F5);
	r1 = D(r1, s1_1_2, 0x1503F4EA, 0xFDF3E9FA, 0xFCF00909, 0xEBFB1003);
	r2 = D(r2, s1_1_2, 0x1004F906, 0xEF0DE805, 0x040FF0FA, 0xCBE619E4);
	r3 = D(r3, s1_1_2, 0x06FF0704, 0x000C070A, 0x1A08FBEA, 0xFBF220F9);
	r4 = D(r4, s1_1_2, 0x37F2FE0A, 0xEC10E581, 0xF404FE00, 0x170BF802);
	r5 = D(r5, s1_1_2, 0x0E010700, 0xEFF315F4, 0x080AFD03, 0x2401DAFD);
	r6 = D(r6, s1_1_2, 0x02111502, 0xE709F003, 0xE105080C, 0xF8FD0702);
	r7 = D(r7, s1_1_2, 0x23EB08F5, 0x11FB0907, 0x01F3FA0C, 0xF2FC0E05);
	r0 = D(r0, s1_2_0, 0x1D9818EE, 0x092509F6, 0x051A1100, 0xEA3BE41A);
	r1 = D(r1, s1_2_0, 0xE31B00FE, 0x0C5EF1ED, 0x0F06E707, 0xF4F2EF16);
	r2 = D(r2, s1_2_0, 0x02E905FF, 0x07CA19FB, 0xF0110102, 0x0E8102FB);
	r3 = D(r3, s1_2_0, 0x0BFAFD15, 0x1ACC170E, 0xE004DEF2, 0x0300ED14);
	r4 = D(r4, s1_2_0, 0x0651F80C, 0x090AEDED, 0x07F40714, 0x092AF105);
	r5 = D(r5, s1_2_0, 0x1530FD05, 0xFA0406F6, 0x1282F2F3, 0x05FF0312);
	r6 = D(r6, s1_2_0, 0xEA6E01FF, 0xFA81FC1B, 0x0334F901, 0x00F102FC);
	r7 = D(r7, s1_2_0, 0x035EF015, 0xF86B1ED3, 0x009CFE0C, 0xF5F40807);
	r0 = D(r0, s1_2_1, 0x05E8EEF4, 0x03E8FEDF, 0xF0F31B02, 0x07FC2A0A);
	r1 = D(r1, s1_2_1, 0x0AF910EC, 0xFFB20704, 0x1913E3F8, 0xF2E0F60B);
	r2 = D(r2, s1_2_1, 0xF708EEFA, 0x121DD909, 0x0313E80A, 0x00E90B02);
	r3 = D(r3, s1_2_1, 0xE2FA05FC, 0x0C00F3F7, 0xF1F6BEF4, 0x262BFA13);
	r4 = D(r4, s1_2_1, 0x040B0E0F, 0x1E1EF8FD, 0xFA0710FF, 0xFC0F0905);
	r5 = D(r5, s1_2_1, 0x0BFF1801, 0xFC0224E4, 0x0E1908F7, 0xEA02F0DE);
	r6 = D(r6, s1_2_1, 0xF8ECFA04, 0x0E0CE404, 0x0BF9070B, 0xFF080DF4);
	r7 = D(r7, s1_2_1, 0x03E20607, 0xED38C9EF, 0xF6FBF20E, 0xF9FA05FE);
	r0 = D(r0, s1_2_2, 0x1EF5FD06, 0xF4F90FF7, 0x1A07D9F8, 0xC90AF703);
	r1 = D(r1, s1_2_2, 0x06FB0E01, 0x050EF8F1, 0x04FFEFFD, 0x0001F30B);
	r2 = D(r2, s1_2_2, 0x0FFD01F9, 0x11F7FD01, 0x00FF0C02, 0x1A0C01F7);
	r3 = D(r3, s1_2_2, 0x07FB0EFF, 0x0B00FEFA, 0xFBF9F5F2, 0xF015EC0A);
	r4 = D(r4, s1_2_2, 0x1D1EE1FC, 0x2A06DEEC, 0xED0AF5FD, 0xFCF8EC03);
	r5 = D(r5, s1_2_2, 0x07FE1506, 0xC305E8CC, 0x0C0506FE, 0x2E0581E5);
	r6 = D(r6, s1_2_2, 0xF7FB0C05, 0x170211FF, 0x14F5DC01, 0x10FE03FD);
	r7 = D(r7, s1_2_2, 0xE3FDF706, 0xEB113FF1, 0x2E11E0FA, 0xFFFFFC03);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xDE0007EE, 0xF403FA10, 0xF60FE115, 0x0F00F608);
	r1 = D(r1, s0_0_0, 0x07FD04FD, 0x0AF50909, 0x10F5F900, 0x01020EF7);
	r2 = D(r2, s0_0_0, 0xF3F90A09, 0x0A0500F8, 0x0E040102, 0x22FBF61E);
	r3 = D(r3, s0_0_0, 0x07FC04F7, 0xD319040E, 0x040218F4, 0xF9FEF5FC);
	r4 = D(r4, s0_0_0, 0xF7EE0AE4, 0xF3DEE611, 0xFF02FEFE, 0xF40503FD);
	r5 = D(r5, s0_0_0, 0xFCF3EE02, 0x00EFF508, 0xF706F109, 0x910502E7);
	r6 = D(r6, s0_0_0, 0x0408040C, 0x0F00EFFF, 0x09FA0100, 0xFD03F508);
	r7 = D(r7, s0_0_0, 0x00010312, 0xEFF7FDFC, 0xFF0D07F1, 0xF303040C);
	r0 = D(r0, s0_0_1, 0xFC0A0101, 0xFE06FC23, 0x09D20102, 0xD3130C03);
	r1 = D(r1, s0_0_1, 0xF9F8FBFB, 0xF901010C, 0x1E0F00EF, 0xFAFC1011);
	r2 = D(r2, s0_0_1, 0xF105F608, 0xFF0B0003, 0x02060A02, 0x150E0212);
	r3 = D(r3, s0_0_1, 0xFA0FFAF3, 0xFBF5151F, 0x07F9FA14, 0xC4F4FC19);
	r4 = D(r4, s0_0_1, 0x10F9F118, 0xE7FD0122, 0xF80E0A1B, 0xECFD08FE);
	r5 = D(r5, s0_0_1, 0x0009FE03, 0x0E0207F4, 0x00F9F50F, 0xF408FC1C);
	r6 = D(r6, s0_0_1, 0x0CCC00F7, 0xF8F300FA, 0x0CFE04E0, 0xF9020202);
	r7 = D(r7, s0_0_1, 0xFC060400, 0x01030325, 0x10FA0112, 0xF8040907);
	r0 = D(r0, s0_0_2, 0xF8070320, 0xF1FB0217, 0x0BFAF10E, 0x0304F409);
	r1 = D(r1, s0_0_2, 0xF403EF00, 0x110D1620, 0x1115091F, 0x04FB0611);
	r2 = D(r2, s0_0_2, 0xECF509F3, 0xFA06F7EF, 0x04031309, 0x070D0116);
	r3 = D(r3, s0_0_2, 0xFDF8FE03, 0xFE020E15, 0x1FFE071A, 0xF705050D);
	r4 = D(r4, s0_0_2, 0x14FBF542, 0x0BFB04F8, 0x00FC08F9, 0xF60009EA);
	r5 = D(r5, s0_0_2, 0xF5F7FD06, 0x0404F7F3, 0xFE0B0703, 0xF207FD01);
	r6 = D(r6, s0_0_2, 0x20000C0D, 0x04EEFD15, 0xFE0A09F6, 0x030103FD);
	r7 = D(r7, s0_0_2, 0x060FED0A, 0xE3080CFF, 0x020504E8, 0x070311FF);
	r0 = D(r0, s0_1_0, 0xF90508FE, 0xFC0EFA02, 0xF1060DD2, 0xEF05ED0D);
	r1 = D(r1, s0_1_0, 0xECFDFF18, 0xECEB0C0F, 0x030008F2, 0x11F4FFFD);
	r2 = D(r2, s0_1_0, 0x050B02FE, 0x0D0B05F5, 0x050C0F06, 0xF8EDF0F3);
	r3 = D(r3, s0_1_0, 0x15EE0210, 0xE4F0FAF1, 0xF6FCFD14, 0xE60EF509);
	r4 = D(r4, s0_1_0, 0xF3FEFDE1, 0xFDF6F60A, 0x0FF2F802, 0xF607FBFC);
	r5 = D(r5, s0_1_0, 0xF506EBFC, 0x0B10FD16, 0xF313FF07, 0xDE0407FC);
	r6 = D(r6, s0_1_0, 0xECFAFB08, 0xF8070DCA, 0x05070908, 0xE6F8FC01);
	r7 = D(r7, s0_1_0, 0xF7FC0B01, 0xCB0809F3, 0xFFE5F106, 0x04000103);
	r0 = D(r0, s0_1_1, 0x0707E012, 0xAC19070A, 0xEA22111D, 0xE811FF16);
	r1 = D(r1, s0_1_1, 0xFC0AF30B, 0xE2ED17FA, 0xFFFE06EF, 0x1B0F0EFD);
	r2 = D(r2, s0_1_1, 0x0007FA06, 0x240201D6, 0xFB03000A, 0x0BEF07FE);
	r3 = D(r3, s0_1_1, 0xFD1DF60A, 0x12FAE0F6, 0xF1E6FEFC, 0xD3EA16E1);
	r4 = D(r4, s0_1_1, 0xF8E50203, 0x01FE0D1C, 0xFFFDFE1F, 0x00F50100);
	r5 = D(r5, s0_1_1, 0x02FF0204, 0x051616CD, 0x180308FA, 0x08F7202A);
	r6 = D(r6, s0_1_1, 0xEFED05EF, 0x07F4F401, 0x15F20FDB, 0xEBFB09FF);
	r7 = D(r7, s0_1_1, 0xA0EC0807, 0xF305F305, 0xF5FBF4F1, 0xFA060702);
	r0 = D(r0, s0_1_2, 0x01FDF00A, 0xCDF7030E, 0xD4070F2C, 0xEBF301F2);
	r1 = D(r1, s0_1_2, 0xA4FB0A02, 0x0704F123, 0x06F7010A, 0x06030BFB);
	r2 = D(r2, s0_1_2, 0x03F904FA, 0x0705F0F2, 0x0807030E, 0x1DECF01D);
	r3 = D(r3, s0_1_2, 0x030B00DC, 0xE7F3F214, 0xFA01F43B, 0x0D0AF5FD);
	r4 = D(r4, s0_1_2, 0x1213E4ED, 0xFEF80D29, 0xFF0907F4, 0x0B05FDFB);
	r5 = D(r5, s0_1_2, 0xFFFDF40E, 0x05F1F329, 0x180AF214, 0xE5CCFE10);
	r6 = D(r6, s0_1_2, 0xF8F9FA04, 0x11020215, 0x0BFB030B, 0xFEFD0011);
	r7 = D(r7, s0_1_2, 0xF9F60903, 0x0505060F, 0xF81AF00E, 0x06FB030A);
	r0 = D(r0, s0_2_0, 0xF6060404, 0x020404F5, 0xFAFC0D14, 0x000903F3);
	r1 = D(r1, s0_2_0, 0xEB05F90B, 0xF90E0410, 0x12080610, 0xFC03FDF6);
	r2 = D(r2, s0_2_0, 0x08000001, 0x010C0200, 0x07000502, 0x1005E504);
	r3 = D(r3, s0_2_0, 0x0C00F2FB, 0xEE061622, 0xF8010905, 0xFAF10424);
	r4 = D(r4, s0_2_0, 0xFF000604, 0xC012030C, 0x010705F2, 0x01FA0307);
	r5 = D(r5, s0_2_0, 0x01FDF312, 0x05F50CF2, 0xF8FB0B15, 0xD8FE062C);
	r6 = D(r6, s0_2_0, 0xFC05FEED, 0x03EEFA1B, 0x18EF0A15, 0xFAF5FDF9);
	r7 = D(r7, s0_2_0, 0xF2F5F3F1, 0xE50C130C, 0x00FC0705, 0x05FE05FE);
	r0 = D(r0, s0_2_1, 0xF8F80C1A, 0xE806FD0C, 0xECF908F7, 0xF60BFFEF);
	r1 = D(r1, s0_2_1, 0xEDFD0B08, 0x0707F303, 0x020A0207, 0x041005FB);
	r2 = D(r2, s0_2_1, 0x07000AFB, 0x0EFC0407, 0x00040907, 0xF103F8E6);
	r3 = D(r3, s0_2_1, 0x0D0CF7E9, 0x150501CB, 0xEF0F0CF9, 0x0A02F621);
	r4 = D(r4, s0_2_1, 0x1405EEF7, 0xCAFB041A, 0x080406F7, 0xFDEEF507);
	r5 = D(r5, s0_2_1, 0xF9FFF907, 0xFE07F911, 0x00F212F3, 0xF7F90E25);
	r6 = D(r6, s0_2_1, 0x0607FF01, 0xFDF1EF0A, 0x17F8FD08, 0x05FEFCFA);
	r7 = D(r7, s0_2_1, 0x15F9F9DB, 0xD5060302, 0x02FBEE1A, 0x05100EFD);
	r0 = D(r0, s0_2_2, 0x05F904F2, 0x0A01FDFE, 0x1815012D, 0xFCF8EF00);
	r1 = D(r1, s0_2_2, 0xF800FFFC, 0xF2060C3D, 0x0906051D, 0x09021113);
	r2 = D(r2, s0_2_2, 0x090C0603, 0xFF0808FB, 0x0202FD0F, 0x130AFFE5);
	r3 = D(r3, s0_2_2, 0x0804FFE7, 0xF3E303FA, 0xFBF01319, 0x0DFF071A);
	r4 = D(r4, s0_2_2, 0x22FFFCF5, 0x1AEE0D24, 0x09010505, 0x080202FB);
	r5 = D(r5, s0_2_2, 0xF9F4FBF7, 0xF8D30EFC, 0xFDF70014, 0xE9E802FB);
	r6 = D(r6, s0_2_2, 0x0501FD03, 0x0017F912, 0xFD160A13, 0xFDFC03FB);
	r7 = D(r7, s0_2_2, 0xFFF0F304, 0xE503FF16, 0xF8050017, 0xFE0B0DFF);
	r0 = D(r0, s1_0_0, 0x000B16FB, 0x0BD10500, 0x02F1F403, 0xEEE9100D);
	r1 = D(r1, s1_0_0, 0xE81D0B04, 0xF00CFE01, 0x0608F803, 0xF7250E00);
	r2 = D(r2, s1_0_0, 0xF9CA0BF4, 0xFDEA0AF5, 0x0AEE0703, 0xEC4BE910);
	r3 = D(r3, s1_0_0, 0xFE1E09F2, 0xFED9F707, 0xF60EDD0B, 0x1BB4C9ED);
	r4 = D(r4, s1_0_0, 0xDB0AFAF3, 0x02E4FDEF, 0xFB0402FE, 0x10F907FA);
	r5 = D(r5, s1_0_0, 0xF62801FD, 0x08290501, 0x0526FFFA, 0xE7180112);
	r6 = D(r6, s1_0_0, 0x09FDFD02, 0x0208020A, 0x122401F8, 0xF719FD03);
	r7 = D(r7, s1_0_0, 0xFF2BF9FF, 0xF7DA0C01, 0x021DF50C, 0x060308F7);
	r0 = D(r0, s1_0_1, 0xE71B0509, 0xEF1A071B, 0x24B91A09, 0xFE15F20B);
	r1 = D(r1, s1_0_1, 0x04FCFD05, 0xF7DCE7FB, 0xFA100C0E, 0xFDE6FCFA);
	r2 = D(r2, s1_0_1, 0x002103ED, 0x02E90304, 0xFB0F10F9, 0xFA081204);
	r3 = D(r3, s1_0_1, 0xFB0C0208, 0xEBECE811, 0x0CBB0DFA, 0x0EB416D6);
	r4 = D(r4, s1_0_1, 0xEC3DF308, 0x012AE80A, 0xF60103FD, 0x0408FAFE);
	r5 = D(r5, s1_0_1, 0xF508F012, 0xFF0004FC, 0x0623F1E8, 0xE018EC10);
	r6 = D(r6, s1_0_1, 0xEFFDF317, 0x0EF508FF, 0x0D020DF3, 0xFC12F607);
	r7 = D(r7, s1_0_1, 0xE6D9EF02, 0xEADAF70C, 0xFC05F104, 0x0CF3010C);
	r0 = D(r0, s1_0_2, 0x00D6EAFE, 0xFF08F905, 0x01210D05, 0xFFDE1100);
	r1 = D(r1, s1_0_2, 0x021600F5, 0xFC0CE7F6, 0xF2F807FE, 0x00C70AFA);
	r2 = D(r2, s1_0_2, 0x05E20001, 0xFFF90A00, 0x0609FE04, 0x01140310);
	r3 = D(r3, s1_0_2, 0x04F3FB02, 0x02250CF5, 0xEB811705, 0x04DC020D);
	r4 = D(r4, s1_0_2, 0x1151FAFC, 0x29BCFE08, 0xFAF806FB, 0xFD020706);
	r5 = D(r5, s1_0_2, 0x01F3F804, 0x01270501, 0xF712070C, 0xE41B1606);
	r6 = D(r6, s1_0_2, 0xFB0D0002, 0xF3EDFD06, 0xFDE60B02, 0xFF0E070A);
	r7 = D(r7, s1_0_2, 0xFA062300, 0x0508FF01, 0xF529030A, 0xFFF7020B);
	r0 = D(r0, s1_1_0, 0xE600F4F7, 0xED0F0513, 0xECD10E11, 0x0F9C2716);
	r1 = D(r1, s1_1_0, 0xEE280100, 0x0416F206, 0x1E0AF0EA, 0x1024FC09);
	r2 = D(r2, s1_1_0, 0xFFFD13F9, 0x05E40304, 0xEC2FFD0B, 0x1656E6FA);
	r3 = D(r3, s1_1_0, 0xF1181BFB, 0xE2E5FEF9, 0xF241D211, 0xEE81EEFE);
	r4 = D(r4, s1_1_0, 0xEF47F9FC, 0xEDF5F5E8, 0xFCF303F7, 0x01EE0A04);
	r5 = D(r5, s1_1_0, 0x091F0B09, 0xF6F50908, 0xFB07F603, 0x02D112DD);
	r6 = D(r6, s1_1_0, 0xFF05E7FC, 0xF5F90006, 0x0A290700, 0x01F40400);
	r7 = D(r7, s1_1_0, 0xFED30B12, 0xEDF501EE, 0x01170EDD, 0xF90200FB);
	r0 = D(r0, s1_1_1, 0xC206170C, 0xF3321AF7, 0xBCECEB00, 0xF91317E9);
	r1 = D(r1, s1_1_1, 0xF82AEC05, 0x05E6F908, 0xF00AF1F2, 0xF8C20118);
	r2 = D(r2, s1_1_1, 0xFB0E0CF7, 0x04100411, 0xE2040711, 0xBCFF0EFE);
	r3 = D(r3, s1_1_1, 0x122C04EC, 0xFC34FDF2, 0x0AF9B1EF, 0xFCE805D6);
	r4 = D(r4, s1_1_1, 0xBA07F311, 0xD8F796D1, 0xFAFAF403, 0xE6F9FB01);
	r5 = D(r5, s1_1_1, 0xFAEBFA15, 0xEC2CFF15, 0xFC10F9D7, 0xF011E4E1);
	r6 = D(r6, s1_1_1, 0x0B01FB01, 0x01EBF415, 0xF305F6FA, 0x0AFA0C04);
	r7 = D(r7, s1_1_1, 0xE72F0707, 0x03001013, 0xF70E08DC, 0x14F305FA);
	r0 = D(r0, s1_1_2, 0x01D303F7, 0xF6E20806, 0xF5A8F70C, 0xF9E60B13);
	r1 = D(r1, s1_1_2, 0x040CFCFA, 0xFDF8F2CC, 0x0D05FFFB, 0xFDEDFE11);
	r2 = D(r2, s1_1_2, 0x080AFFFE, 0x03EAF1F0, 0xEE1F0203, 0x0CB5FAFD);
	r3 = D(r3, s1_1_2, 0xF7FB0FF7, 0x061905FD, 0x0AFB07F8, 0x0531FF0B);
	r4 = D(r4, s1_1_2, 0x012514FC, 0xDA0CD306, 0x020907FB, 0xF2FDF9F2);
	r5 = D(r5, s1_1_2, 0x00FA070F, 0xFBFAF5FA, 0x0F29FAFA, 0xE82AF501);
	r6 = D(r6, s1_1_2, 0x05FE00FA, 0xFE1CF206, 0xF0F6F8F3, 0x04FD0508);
	r7 = D(r7, s1_1_2, 0xEF15F903, 0xFC07010C, 0xF42D0FF6, 0x08EF0209);
	r0 = D(r0, s1_2_0, 0x011E08FE, 0x00C10709, 0x06070F0B, 0xE30100FA);
	r1 = D(r1, s1_2_0, 0x040CF902, 0x00C8F70D, 0xF4D8F0F8, 0x0000F608);
	r2 = D(r2, s1_2_0, 0xF90B0B0D, 0xF2F90510, 0xF5EA06FF, 0x003EFCFF);
	r3 = D(r3, s1_2_0, 0x091010FF, 0xE61B30EE, 0xDF2BF703, 0xF9E6F20D);
	r4 = D(r4, s1_2_0, 0x0952070A, 0x083209D9, 0xF50A06F8, 0xFE07F900);
	r5 = D(r5, s1_2_0, 0x050AF9F9, 0xF8EEFC03, 0xF61706FB, 0xFF42080F);
	r6 = D(r6, s1_2_0, 0x040A00F5, 0xFF3B0DF8, 0x1710FB08, 0x07060202);
	r7 = D(r7, s1_2_0, 0x06BEFAF3, 0x06001719, 0xEF090205, 0x04E805FE);
	r0 = D(r0, s1_2_1, 0x0A1BECFC, 0x02EF01FB, 0xFBF815FF, 0x09FE2509);
	r1 = D(r1, s1_2_1, 0x0CEEF306, 0xFBB100FC, 0xE32DF7EB, 0xFED8F7FC);
	r2 = D(r2, s1_2_1, 0xF8150FFB, 0xF90FFF0C, 0xF113FEF6, 0xFA410A04);
	r3 = D(r3, s1_2_1, 0x060406F5, 0x0D4BFE01, 0xF188B7D0, 0x00ECD3F4);
	r4 = D(r4, s1_2_1, 0x0036281F, 0xCCF5E1E9, 0xFFDE0407, 0x11FE0609);
	r5 = D(r5, s1_2_1, 0xFE1A0409, 0xDD1910FE, 0x0A1CF1F4, 0xF62F1209);
	r6 = D(r6, s1_2_1, 0x07EB07F5, 0x1019E801, 0xF52EF30A, 0x01F9FD08);
	r7 = D(r7, s1_2_1, 0x0C15F621, 0xF7DB06DF, 0x08E1F5F8, 0xF7FAFDF9);
	r0 = D(r0, s1_2_2, 0xFEF103FA, 0x05D607F9, 0xFAE601F3, 0xF8EB07FD);
	r1 = D(r1, s1_2_2, 0x160B02FC, 0x0021D5C7, 0x00E6EEFD, 0xF9D2E302);
	r2 = D(r2, s1_2_2, 0x00F5FAFF, 0xF9CDF50B, 0xFF06020A, 0x032A02F6);
	r3 = D(r3, s1_2_2, 0x08EDFBF0, 0x1504F30C, 0x0BC1DBF6, 0x0431FF08);
	r4 = D(r4, s1_2_2, 0x11370E03, 0x1628E4F9, 0xEF05FCFB, 0x05F7FEF8);
	r5 = D(r5, s1_2_2, 0x0BFDFF03, 0x2494E5EE, 0x0923FE02, 0x12DE01E4);
	r6 = D(r6, s1_2_2, 0xF913F302, 0x0B1A0305, 0xFF10F5FA, 0xFB180404);
	r7 = D(r7, s1_2_2, 0x00211204, 0x07F7FF0E, 0xF12FFDEF, 0xF210F800);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x020002FF, 0xFA0901F2, 0x03FFFF07, 0x0A0C17EC);
	r1 = D(r1, s0_0_0, 0x10010408, 0x05010EFA, 0xED0A17F3, 0x07020203);
	r2 = D(r2, s0_0_0, 0x14F4F80C, 0xFBFFF601, 0x01FAFEF9, 0x17FA0018);
	r3 = D(r3, s0_0_0, 0x06F40A02, 0x1F050611, 0x19110B0C, 0x08DE0E06);
	r4 = D(r4, s0_0_0, 0x1603F919, 0x07FA1F0A, 0xFB0606FD, 0xFEF7FC02);
	r5 = D(r5, s0_0_0, 0xFFFAF4FD, 0xF40002FC, 0x0509F502, 0xFC080505);
	r6 = D(r6, s0_0_0, 0xFF04F905, 0x02070301, 0xFDF2FFFA, 0x1BF9FC08);
	r7 = D(r7, s0_0_0, 0xEC051300, 0x1100EFF7, 0x0902FC02, 0x04030805);
	r0 = D(r0, s0_0_1, 0x29F50D19, 0xFB05FAF3, 0xEBF2F0F0, 0xF7060BFE);
	r1 = D(r1, s0_0_1, 0x0103FB02, 0xFC08030F, 0x0701EFFF, 0xF707090D);
	r2 = D(r2, s0_0_1, 0x20EF000A, 0x0DEFF6F6, 0x15FA2309, 0xEA1A1B04);
	r3 = D(r3, s0_0_1, 0x05ECF4FE, 0xEF10E231, 0xF00EE816, 0x04E6E7DB);
	r4 = D(r4, s0_0_1, 0x19EEF705, 0xF4F50E02, 0xFC0800F7, 0x06010507);
	r5 = D(r5, s0_0_1, 0x0EFC05F1, 0xFFF7FAF8, 0xDE0200FD, 0xFC0E09E9);
	r6 = D(r6, s0_0_1, 0xF51EF8FF, 0xE4F2FD09, 0xFDFAF1EE, 0x0A030017);
	r7 = D(r7, s0_0_1, 0xE505FED9, 0x0C0B0D16, 0x0DF401FE, 0x0D020A02);
	r0 = D(r0, s0_0_2, 0x1A02040C, 0x0F10F9FF, 0x08F905FC, 0xF8FBFB04);
	r1 = D(r1, s0_0_2, 0x03FEFDFE, 0x00FAEFFB, 0x0702F8FF, 0x04FFF604);
	r2 = D(r2, s0_0_2, 0x07F90203, 0x03F8FFFA, 0x02F80205, 0xED04060D);
	r3 = D(r3, s0_0_2, 0x02FE04FD, 0x03FF0FF9, 0x13061DF6, 0x030F0C0C);
	r4 = D(r4, s0_0_2, 0x0C0401F9, 0x00FAF5EE, 0x0B0103FE, 0xF5010000);
	r5 = D(r5, s0_0_2, 0x06FF0C03, 0x06FD0DF0, 0x020503FB, 0xE61306FD);
	r6 = D(r6, s0_0_2, 0xF90706F5, 0xF10E0314, 0xF905FFFF, 0x00010D02);
	r7 = D(r7, s0_0_2, 0xDDF001F7, 0x0C0A0407, 0xF9030D06, 0xF00403FA);
	r0 = D(r0, s0_1_0, 0xEFFBF6F2, 0x0F0423FD, 0x2519F40D, 0x05D9F2EF);
	r1 = D(r1, s0_1_0, 0x0816FAF6, 0xF8131101, 0x0000060A, 0x0DF5FF06);
	r2 = D(r2, s0_1_0, 0xF1E3F5F3, 0x02FCFD02, 0x04EF0B00, 0xFFFCDBF6);
	r3 = D(r3, s0_1_0, 0x0DFE12FB, 0xF9DAE600, 0x01E409F7, 0xF8D6FD02);
	r4 = D(r4, s0_1_0, 0x0C00F9F8, 0xE6FA2CFE, 0x0AF7FBF6, 0xF5FE0606);
	r5 = D(r5, s0_1_0, 0xE6F8F8ED, 0x0B0C07FF, 0xFEF903FF, 0x17FBF20B);
	r6 = D(r6, s0_1_0, 0x070E01F9, 0x2C04060A, 0x190B1300, 0x1507F902);
	r7 = D(r7, s0_1_0, 0x0A18FC08, 0xFBF2CF06, 0xF50400F8, 0xF0FC06FC);
	r0 = D(r0, s0_1_1, 0xEBCF01EA, 0xEA0F08BF, 0xD5ECF0FF, 0x0612F025);
	r1 = D(r1, s0_1_1, 0xA202E304, 0x0F06E709, 0xEEFC09FA, 0x0313FE16);
	r2 = D(r2, s0_1_1, 0xE8D7F5F8, 0x2BE604FC, 0xF7FE250C, 0xED09E70A);
	r3 = D(r3, s0_1_1, 0x24E81FF5, 0x241812DD, 0x1A081BFE, 0xEDF5D2EE);
	r4 = D(r4, s0_1_1, 0xEBF7F70D, 0xAFF1FFF0, 0xD907FE04, 0xCA02DB07);
	r5 = D(r5, s0_1_1, 0x2C00080A, 0x2806F703, 0x110610FA, 0xF9FB1308);
	r6 = D(r6, s0_1_1, 0x2C142201, 0xE5E5F218, 0xFE14F517, 0xE5130D1A);
	r7 = D(r7, s0_1_1, 0x082DEC01, 0xE8F8F2D5, 0x1E0ADA04, 0x39F935E1);
	r0 = D(r0, s0_1_2, 0xFEF9EFF0, 0x0C0408E7, 0xE703FEF8, 0xFCEDF4EF);
	r1 = D(r1, s0_1_2, 0x01F80AF2, 0x200AEB05, 0x0200FBFD, 0xDB0AE422);
	r2 = D(r2, s0_1_2, 0xFEF9F4FE, 0x16FBE7F9, 0x01020C09, 0xFC00F3F6);
	r3 = D(r3, s0_1_2, 0x0CF3FFEE, 0xF9F5EEEE, 0xDCDBEF09, 0xEC001712);
	r4 = D(r4, s0_1_2, 0xFBFBF8FD, 0xF0F0DFE2, 0xEF0902EE, 0x0B0612F0);
	r5 = D(r5, s0_1_2, 0x04040107, 0xFDEFF40B, 0x10061302, 0xEF0DE8E1);
	r6 = D(r6, s0_1_2, 0x160E13EF, 0xF90A0009, 0xE7FAFD0F, 0xF5FF030B);
	r7 = D(r7, s0_1_2, 0xF4050CFA, 0x161010E2, 0x1AE9FBE7, 0xF902F6FA);
	r0 = D(r0, s0_2_0, 0xF6F6F4FF, 0xFE08FFFE, 0x150C1109, 0xE2F80F05);
	r1 = D(r1, s0_2_0, 0x0E07FAFC, 0x03FB09FC, 0xFEF8F3FE, 0x010D0805);
	r2 = D(r2, s0_2_0, 0x0102F902, 0x0306FA00, 0xFDF9FAFE, 0xFBFEEBF4);
	r3 = D(r3, s0_2_0, 0xFA0003FE, 0xF3ECFB02, 0xFFFDFAEC, 0x11F80C10);
	r4 = D(r4, s0_2_0, 0xF50010FB, 0x050ADF03, 0xFA05FA06, 0x020403FC);
	r5 = D(r5, s0_2_0, 0x0300F2FD, 0x0C00FA05, 0x0502FFFC, 0x0BFF0E02);
	r6 = D(r6, s0_2_0, 0x00FFF803, 0x11FBFF0A, 0x0E050104, 0x040502FD);
	r7 = D(r7, s0_2_0, 0x0CEE0C03, 0xF4ECFD02, 0xFE050204, 0x03030305);
	r0 = D(r0, s0_2_1, 0xF703F602, 0xF700F8F6, 0xF9F9FB04, 0xF2F9FEE3);
	r1 = D(r1, s0_2_1, 0xFE090C03, 0x00FAFD07, 0xFE09FA0A, 0xFC090F0A);
	r2 = D(r2, s0_2_1, 0xF3FDFD08, 0xF50A0600, 0xF7FE1303, 0xEF05EDFB);
	r3 = D(r3, s0_2_1, 0x01FBF90C, 0x0A13FAF5, 0xE6F1F2F0, 0xFE060FFF);
	r4 = D(r4, s0_2_1, 0x04FC04F0, 0xF3053702, 0x1E09F909, 0x271C0FF8);
	r5 = D(r5, s0_2_1, 0x08FEFD01, 0xDBEBDB03, 0x07040301, 0x0F0E19FE);
	r6 = D(r6, s0_2_1, 0xF2F8FCFA, 0xD90BFF14, 0x1A0B1E06, 0x0AFCF8FD);
	r7 = D(r7, s0_2_1, 0x11050D03, 0xE6F0D3F2, 0x11F901F0, 0x00FDF0FF);
	r0 = D(r0, s0_2_2, 0x00000207, 0x01FAFB02, 0xF606FBDB, 0x03F10DF4);
	r1 = D(r1, s0_2_2, 0xFCF90A11, 0xDF0FE109, 0xF5050307, 0xF70DFB0C);
	r2 = D(r2, s0_2_2, 0xF40002FF, 0x0202F70B, 0x00040705, 0xEAF7F802);
	r3 = D(r3, s0_2_2, 0xF4F6EC00, 0x09F00A0E, 0xF80804F6, 0x0803170B);
	r4 = D(r4, s0_2_2, 0xFAF6FEF7, 0x1202F504, 0x0301FAFD, 0x0E050C00);
	r5 = D(r5, s0_2_2, 0x05FB05F9, 0xD6FBF5FA, 0x000B14F7, 0x1606EEF5);
	r6 = D(r6, s0_2_2, 0xFEFCFE0B, 0x0207FA02, 0xFD01F300, 0xFF0501FA);
	r7 = D(r7, s0_2_2, 0x10F909F7, 0x0A0DFF03, 0x040CF6F9, 0xED02F902);
	r0 = D(r0, s1_0_0, 0x03F4FB1C, 0xDA0A050A, 0x04FEF5EC, 0x061AFD13);
	r1 = D(r1, s1_0_0, 0x0E06F909, 0xF9FD0E18, 0x0113FA00, 0xF201F71A);
	r2 = D(r2, s1_0_0, 0xFFFE06DC, 0xFCF3F7E8, 0x060602E8, 0xEF0A06D4);
	r3 = D(r3, s1_0_0, 0x0C0EF00B, 0xE624012E, 0xF7232FFB, 0x8114E9CD);
	r4 = D(r4, s1_0_0, 0x110AFE16, 0x1BD0069D, 0xFFFA00F3, 0xFDFDF70B);
	r5 = D(r5, s1_0_0, 0x1112FB10, 0x0C0A03ED, 0xF9EC02F8, 0x05E7D115);
	r6 = D(r6, s1_0_0, 0xF4050B06, 0x07FF04FA, 0xFDF80304, 0x03FF07E7);
	r7 = D(r7, s1_0_0, 0x1804DFF7, 0xEBE511E4, 0xFCF7F914, 0xFFF9FEF9);
	r0 = D(r0, s1_0_1, 0x1C08FB16, 0x0B13E0FA, 0xF8BDF5EE, 0xF4E3EF05);
	r1 = D(r1, s1_0_1, 0x0B0816E8, 0xF103F212, 0x0803F7FB, 0xEE030A01);
	r2 = D(r2, s1_0_1, 0xEF030BFF, 0x070A0611, 0x0A0D1507, 0xE42D1C06);
	r3 = D(r3, s1_0_1, 0x09FDF0F7, 0xE70AF3DC, 0x220109EA, 0xD8F4171D);
	r4 = D(r4, s1_0_1, 0xFE30D30D, 0x1A0A95D5, 0x1100EDF6, 0xFBE208FD);
	r5 = D(r5, s1_0_1, 0x0C15FEE0, 0x042905EF, 0xFCFB05F7, 0xFD061ACB);
	r6 = D(r6, s1_0_1, 0xFF0A050B, 0xF528FFFD, 0xE9F9050E, 0x0AFFF6FF);
	r7 = D(r7, s1_0_1, 0x0122C8F0, 0x16EE08E2, 0xF802FE06, 0xFE03F4FC);
	r0 = D(r0, s1_0_2, 0x01020B09, 0x06FBFAFB, 0x03F409E5, 0xF709F7F9);
	r1 = D(r1, s1_0_2, 0x09FFF807, 0xFBF317E3, 0xFF01F4FD, 0x01FD09F7);
	r2 = D(r2, s1_0_2, 0x00F9ED02, 0xF8F7FB07, 0x0103FEFE, 0x10FD0D0F);
	r3 = D(r3, s1_0_2, 0xF901E1F5, 0xFEF80B1F, 0x0D18F9D5, 0x0314E1F9);
	r4 = D(r4, s1_0_2, 0x0907D901, 0xFDF51D0A, 0xFEFD050A, 0xF9F2071B);
	r5 = D(r5, s1_0_2, 0x000C0D11, 0x060BFA13, 0x0008090B, 0xD1F9F0F1);
	r6 = D(r6, s1_0_2, 0x0B11EE03, 0xFF0CFAF5, 0x01F7FEFA, 0x03090200);
	r7 = D(r7, s1_0_2, 0x05F116F9, 0xFBFBFD37, 0xFE040AF9, 0x060CFEFD);
	r0 = D(r0, s1_1_0, 0x03F20D18, 0xCE031107, 0xF7071F05, 0xDF07F307);
	r1 = D(r1, s1_1_0, 0x18F41AF3, 0x020A0005, 0x0707FDFC, 0xEEFD120A);
	r2 = D(r2, s1_1_0, 0xE40C0F00, 0xE510031B, 0x01040AFD, 0x01030811);
	r3 = D(r3, s1_1_0, 0x1515F00A, 0xFF11070E, 0xF8F7EAD1, 0xF01F1229);
	r4 = D(r4, s1_1_0, 0x01050215, 0x09E4C4EB, 0x000B07FD, 0xFB0AFB07);
	r5 = D(r5, s1_1_0, 0x0DFE0500, 0x0BFE0AEE, 0xF5F609F9, 0xFE0D35FD);
	r6 = D(r6, s1_1_0, 0xF103F30B, 0xFD0A170F, 0x03FEFEE1, 0x03F7FAFD);
	r7 = D(r7, s1_1_0, 0x00FAF0C7, 0xAB04F313, 0xF8FC07F9, 0xF5FE02FB);
	r0 = D(r0, s1_1_1, 0x1A06FCF0, 0xE9EA0602, 0xB326FDEC, 0xF2DD0FFB);
	r1 = D(r1, s1_1_1, 0x0A0808EC, 0x1105100C, 0x110A1F1E, 0xF2102609);
	r2 = D(r2, s1_1_1, 0xF2F502F7, 0x10092400, 0x0CFA16F6, 0xFEF0ED2E);
	r3 = D(r3, s1_1_1, 0xFB06F5EF, 0xFFFDEE30, 0xD8F9FEEB, 0xD71F311B);
	r4 = D(r4, s1_1_1, 0xFE12F119, 0xFFFE0FF6, 0x1101F3F1, 0x1310FEF0);
	r5 = D(r5, s1_1_1, 0x11F4FFE9, 0x1EDE191D, 0x0E010213, 0x100BF623);
	r6 = D(r6, s1_1_1, 0x05090F10, 0x0202FF0F, 0xF8E603FB, 0x01FA09FE);
	r7 = D(r7, s1_1_1, 0xE01213C1, 0x1F10151E, 0x0BF31B08, 0xF8F50FFC);
	r0 = D(r0, s1_1_2, 0x080898F5, 0x02F2020F, 0xE3D40205, 0x01FA0706);
	r1 = D(r1, s1_1_2, 0x06EBEFF1, 0x03F11CCA, 0xF816D017, 0xFD0E160E);
	r2 = D(r2, s1_1_2, 0x08F703FF, 0xFD110012, 0x0208ECFF, 0x02E53618);
	r3 = D(r3, s1_1_2, 0xFD03D6D6, 0x051402DC, 0xE8FCE7C4, 0x0B0410ED);
	r4 = D(r4, s1_1_2, 0x04DA3600, 0x13110414, 0xFD1308ED, 0x0605030A);
	r5 = D(r5, s1_1_2, 0xFF00E805, 0x06FF0FFB, 0x0806FD0C, 0xF033EE0B);
	r6 = D(r6, s1_1_2, 0x07130EE1, 0x05F802F7, 0xFB1107F3, 0xFEEF1605);
	r7 = D(r7, s1_1_2, 0x1107061F, 0xFC24081B, 0x100019E5, 0xFA0D0200);
	r0 = D(r0, s1_2_0, 0x13E4EC0A, 0x0AFEF80E, 0x121306FC, 0xE904F203);
	r1 = D(r1, s1_2_0, 0xFA060B13, 0xFFE2FCF6, 0xF609F2F9, 0xF9EEF503);
	r2 = D(r2, s1_2_0, 0xFDF80904, 0xF8FF03E0, 0xFFFAFAF5, 0xFA0006F1);
	r3 = D(r3, s1_2_0, 0x0A05FE09, 0x000ADC07, 0xF0F301D2, 0xFBEE0F1D);
	r4 = D(r4, s1_2_0, 0x1C131000, 0x2AFB0AEA, 0xFFF714FC, 0x11F6FFFF);
	r5 = D(r5, s1_2_0, 0x0FFA00CA, 0xF70D0DF8, 0x0503F8FE, 0xFF041415);
	r6 = D(r6, s1_2_0, 0xF2F4FF04, 0xFDF0140A, 0xFA0B06F2, 0x020EFD01);
	r7 = D(r7, s1_2_0, 0xFC0302F8, 0x0BFF0608, 0x18EF0D06, 0xFF061000);
	r0 = D(r0, s1_2_1, 0xD904030E, 0xF204DF15, 0x1D06CF19, 0xFFE6DBFB);
	r1 = D(r1, s1_2_1, 0xEE0C10FD, 0x0C0EFEF7, 0xF00402E5, 0xEEFF110A);
	r2 = D(r2, s1_2_1, 0xFDFFF90C, 0xF500F4FC, 0xFFF91CF5, 0x0EF21911);
	r3 = D(r3, s1_2_1, 0xF8F6150D, 0xFFF31103, 0xC5D315E0, 0x04100E1A);
	r4 = D(r4, s1_2_1, 0x130DE41B, 0x14F9032A, 0x0C031702, 0x0B070D00);
	r5 = D(r5, s1_2_1, 0xF8F1FCDB, 0x0FEBE1DA, 0x040BFF0A, 0xFE0C1314);
	r6 = D(r6, s1_2_1, 0x0101160A, 0xFA0EDDFD, 0x01F7FEFD, 0x02FBF3F1);
	r7 = D(r7, s1_2_1, 0x040A171F, 0xF4FDF5EC, 0x13022200, 0xFBFF17F9);
	r0 = D(r0, s1_2_2, 0x01DD1606, 0xF9F5E5E0, 0x09FE2DFF, 0xF4FBF6DB);
	r1 = D(r1, s1_2_2, 0x0303DCE7, 0xFAEEC9F4, 0x08F5030B, 0xFC06FF0A);
	r2 = D(r2, s1_2_2, 0xFFFAFCF9, 0xFA01EDF3, 0xFD08FC01, 0xE704221D);
	r3 = D(r3, s1_2_2, 0x00FFFCFF, 0x030E1608, 0xE4090DD2, 0xFAFEEEFD);
	r4 = D(r4, s1_2_2, 0x14F5DDF9, 0xFE112E08, 0xFD06FCFE, 0x04F90DEF);
	r5 = D(r5, s1_2_2, 0xFD040F04, 0xEF0B3819, 0x00010307, 0x050A37F3);
	r6 = D(r6, s1_2_2, 0x01FE06FC, 0xFC0C1607, 0xFC0B0809, 0xFFFFF6F5);
	r7 = D(r7, s1_2_2, 0x09FDD920, 0xF70210E1, 0x02E5F1CD, 0xF8FF0FFF);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-1.574e-02, 5.115e-02, 1.613e-02, 1.114e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(4.137e-02, 5.184e-03, 3.797e-02, -1.389e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(3.060e-02, -4.267e-02, -1.080e-02, -3.141e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-2.104e-02, -2.920e-02, 2.933e-02, 5.504e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-3.156e-02, 8.715e-02, -1.569e-02, -1.123e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-3.559e-02, -1.910e-02, -1.344e-02, 1.789e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-5.210e-02, -2.938e-02, -2.129e-02, -8.616e-03);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-1.541e-02, 3.967e-02, -2.337e-02, 1.462e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-BILINEAR-MPV-NVL-conv6
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv5
//!BIND LUMA
//!SAVE conv6
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv5_pt;
			r = conv5_gather(p, 0);
			g = conv5_gather(p, 1);
			b = conv5_gather(p, 2);
			a = conv5_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv5_pt;
			r = conv5_gather(p, 0);
			g = conv5_gather(p, 1);
			b = conv5_gather(p, 2);
			a = conv5_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF801FF0A, 0x0B000300, 0xF6F5EA04, 0xF6F8F107);
	r1 = D(r1, s0_0_0, 0xF803FE04, 0xEE07F9FE, 0xF50AFF0F, 0xF3F50F01);
	r2 = D(r2, s0_0_0, 0x03F8FCFC, 0xF5FFF909, 0xFAF9FC03, 0x0006F701);
	r3 = D(r3, s0_0_0, 0x0B030002, 0xF0EFFC05, 0xEBEC1712, 0x02F4FD04);
	r4 = D(r4, s0_0_0, 0xF5040BFE, 0xEBF9FA03, 0x04FEFBFD, 0x07FFFB00);
	r5 = D(r5, s0_0_0, 0xFC02FE13, 0xCB271C2C, 0x1B08F8F8, 0xF602F6FF);
	r6 = D(r6, s0_0_0, 0x1508FCFF, 0xF8FB1518, 0x1000FAF9, 0xF1D92FF8);
	r7 = D(r7, s0_0_0, 0x00FC01FE, 0x240AF201, 0xC9AE2619, 0x9102F3F4);
	r0 = D(r0, s0_0_1, 0x0908EBE5, 0xFFDE060E, 0xF4F80905, 0x17EC0604);
	r1 = D(r1, s0_0_1, 0x0702F4F6, 0xF1F6F304, 0xE603FB0E, 0x05F8F302);
	r2 = D(r2, s0_0_1, 0x00040201, 0x01111600, 0xF3F8FBFB, 0xE7F709F2);
	r3 = D(r3, s0_0_1, 0x05FC0C02, 0xFC05F6F5, 0xEAFDF2CF, 0x0FFAF20B);
	r4 = D(r4, s0_0_1, 0x3314D6EB, 0xECF00309, 0xE8D6080C, 0xF2F7FEEF);
	r5 = D(r5, s0_0_1, 0x0FF70917, 0xEBD8000C, 0x11040B0A, 0xEDF4F4FD);
	r6 = D(r6, s0_0_1, 0xF1FD12FC, 0xE5090E02, 0x1D07EDF7, 0x81C111FD);
	r7 = D(r7, s0_0_1, 0xF3FDFC01, 0x0600F506, 0x1E21DB12, 0xDDF1D29A);
	r0 = D(r0, s0_0_2, 0xF306F11A, 0xFEF800F7, 0xEC080F01, 0xEEF7F50F);
	r1 = D(r1, s0_0_2, 0xFCFD0D10, 0x01FE0E07, 0x07000A02, 0xFEF6F8FD);
	r2 = D(r2, s0_0_2, 0x05020107, 0xE4FF0C19, 0x05FB010C, 0x01F703F6);
	r3 = D(r3, s0_0_2, 0x0702FEFE, 0x010201FF, 0xF90DFAF3, 0x00080F02);
	r4 = D(r4, s0_0_2, 0x1F06F6F8, 0xFAF90103, 0x25FF24EB, 0x040004FD);
	r5 = D(r5, s0_0_2, 0x1AF70912, 0xF7F3F0D4, 0x02FEF6F2, 0x0AE805F6);
	r6 = D(r6, s0_0_2, 0xFEFD0700, 0x07F10B0A, 0x0808FD09, 0xEADA0800);
	r7 = D(r7, s0_0_2, 0x0DFF0C0A, 0x08FB0C04, 0x271705F9, 0xDF3E032C);
	r0 = D(r0, s0_1_0, 0xF4F6F731, 0xE2F8D9F5, 0xEBF1F6ED, 0x02020B10);
	r1 = D(r1, s0_1_0, 0xFC0410FC, 0x100BF80A, 0x08F4F21D, 0xFBF908FA);
	r2 = D(r2, s0_1_0, 0xFE0BF905, 0x09F9F711, 0x0106FF04, 0x0502FDF8);
	r3 = D(r3, s0_1_0, 0x010308F5, 0xF7131C12, 0xFEE1DDE5, 0x07F6FF02);
	r4 = D(r4, s0_1_0, 0x0EF9F803, 0x05FB09F0, 0x09FBEFF2, 0x0105FCFB);
	r5 = D(r5, s0_1_0, 0x001303F0, 0x07F3FFDB, 0xFE0305E3, 0x0402FD01);
	r6 = D(r6, s0_1_0, 0x090702E4, 0x13F20015, 0x02F9FCFF, 0x0DDAEEC0);
	r7 = D(r7, s0_1_0, 0xFEF1F614, 0x0CFF0DF2, 0xD2F40603, 0xA6EEE842);
	r0 = D(r0, s0_1_1, 0xECDEDD13, 0xEBF90EC7, 0xE8F4F6F8, 0xF306030A);
	r1 = D(r1, s0_1_1, 0x0B16D3FD, 0xF4FDEE0D, 0x09F0F7FA, 0x01ED16E0);
	r2 = D(r2, s0_1_1, 0xFE0D0EFA, 0x02DAF61F, 0x100301FE, 0x0D19F7D7);
	r3 = D(r3, s0_1_1, 0xFD0CFFF2, 0xEB0406EA, 0xFEE90B01, 0x04EFFD0D);
	r4 = D(r4, s0_1_1, 0xD3D1E3DB, 0xDD111DF0, 0x26DE0929, 0x0B000C0D);
	r5 = D(r5, s0_1_1, 0x1D11E4EB, 0xF6B40918, 0x0DFEFDE0, 0xFF14FBCF);
	r6 = D(r6, s0_1_1, 0x1A1308F1, 0x150B0401, 0x0908DCF7, 0xE01ADDDB);
	r7 = D(r7, s0_1_1, 0xECEEF6FF, 0x0AF6E608, 0xF3D401CF, 0xFCF8F209);
	r0 = D(r0, s0_1_2, 0xED0BFCF4, 0xD7F01404, 0xFEF2F2FF, 0x08F8100E);
	r1 = D(r1, s0_1_2, 0x180ADCE4, 0x0AFBEEFC, 0xF40C1117, 0xF9F80B01);
	r2 = D(r2, s0_1_2, 0xF40A0122, 0x0DF7DF04, 0xFDF8FCF5, 0x14FB05F2);
	r3 = D(r3, s0_1_2, 0x050DF4ED, 0xEA00F9F7, 0xF204FF0B, 0xFD07E1E8);
	r4 = D(r4, s0_1_2, 0xF703B3F0, 0xEC040205, 0x0DFF010B, 0x00F2FAF6);
	r5 = D(r5, s0_1_2, 0x2003F203, 0x07C10D0D, 0xFB1205F6, 0x04F20104);
	r6 = D(r6, s0_1_2, 0x18F813F3, 0x21EB1210, 0x0DF9F301, 0xF503FBE2);
	r7 = D(r7, s0_1_2, 0x06F70F11, 0x1BF2000E, 0xCAEF081F, 0xE6FD1A0C);
	r0 = D(r0, s0_2_0, 0x0002091F, 0xF31A0B1B, 0xFB15E614, 0x00FAF9FE);
	r1 = D(r1, s0_2_0, 0xFD07F90B, 0x0501F706, 0x0FF5FDFD, 0xFEFBFCEA);
	r2 = D(r2, s0_2_0, 0x0704F5F9, 0xFC06E7EF, 0xFF00FDFB, 0xFCFF02F4);
	r3 = D(r3, s0_2_0, 0x0406FFFD, 0xFE0A05EB, 0x03EF0204, 0x00F50708);
	r4 = D(r4, s0_2_0, 0xFDC3F106, 0xEA00FC0D, 0x04FEFFFE, 0x01000004);
	r5 = D(r5, s0_2_0, 0xFBF1F116, 0x090C03FA, 0xFC030702, 0xEFEE0700);
	r6 = D(r6, s0_2_0, 0x00FE0502, 0xFDEA1404, 0x00FD0506, 0x102BF8E4);
	r7 = D(r7, s0_2_0, 0x0301F40F, 0x0505FCF7, 0x0B06F8FD, 0xCF1CF312);
	r0 = D(r0, s0_2_1, 0xFAF6EF18, 0xE6E70FE7, 0xD3F3F50D, 0xF90501F9);
	r1 = D(r1, s0_2_1, 0x1508EBF6, 0xFD1CE3E3, 0x00F7DDF8, 0x00EE0306);
	r2 = D(r2, s0_2_1, 0x0000FBFB, 0x11E4F3F8, 0x0010FF08, 0xFA09F4D3);
	r3 = D(r3, s0_2_1, 0x0E07FEF3, 0xEC05020C, 0xFFFBF102, 0xF3F1FEFC);
	r4 = D(r4, s0_2_1, 0xFAE602F0, 0xEFE10901, 0x00E904F9, 0x020404FD);
	r5 = D(r5, s0_2_1, 0x0CF808FD, 0xDD06EBEF, 0xFCFC04F4, 0xF70206DB);
	r6 = D(r6, s0_2_1, 0x060BE6F6, 0xFB0C00F8, 0x120CFBF2, 0xC6DAF2F4);
	r7 = D(r7, s0_2_1, 0x150BFE0B, 0x08F7FB04, 0xF8BAFFFB, 0x0DD00DE6);
	r0 = D(r0, s0_2_2, 0xDD07E2FB, 0xEB1E00F8, 0xFAEEFCFA, 0xF3040200);
	r1 = D(r1, s0_2_2, 0xFD11DAF9, 0xF6090014, 0xFBF9E2F4, 0xFBEF040D);
	r2 = D(r2, s0_2_2, 0xFF0C0301, 0xFB00F5FF, 0x09020301, 0xFA0905FE);
	r3 = D(r3, s0_2_2, 0xFC14F9FC, 0x00F4FE12, 0x160BF4F2, 0xFCF601FD);
	r4 = D(r4, s0_2_2, 0xD6E0F7E6, 0xFC090513, 0x01E7F9FD, 0xFC0C0004);
	r5 = D(r5, s0_2_2, 0xF505FC16, 0xECD2D1F6, 0xF60F0000, 0xE5DFF803);
	r6 = D(r6, s0_2_2, 0x040602FA, 0x0CC8FEFD, 0x080913FE, 0xF1F5F403);
	r7 = D(r7, s0_2_2, 0xFE08F1FA, 0x13F404FA, 0xF419E7F1, 0xF50DD6CA);
	r0 = D(r0, s1_0_0, 0x06F9F0F8, 0xF4010100, 0x09F80102, 0x170AFD0B);
	r1 = D(r1, s1_0_0, 0xF0041BF9, 0xF30204F9, 0xF20101FE, 0x07F5FA05);
	r2 = D(r2, s1_0_0, 0xFD05FEF7, 0xEEF30601, 0xFBFA0EFE, 0xF6F816F4);
	r3 = D(r3, s1_0_0, 0x0606F1FC, 0xFAFD09FA, 0x07F8EA0C, 0x0C0AF20B);
	r4 = D(r4, s1_0_0, 0x0407F7E5, 0xFDFCEEF8, 0xFE03F0F1, 0xFE04FBFF);
	r5 = D(r5, s1_0_0, 0xDDFC08F2, 0xE8F914F7, 0xF106F9F4, 0x03FA0601);
	r6 = D(r6, s1_0_0, 0xE6FF1402, 0xFD04E503, 0x07FA0709, 0xECF81F0F);
	r7 = D(r7, s1_0_0, 0xF9FE0608, 0xFB0AEB03, 0x03F2CD1F, 0xCD24FCDF);
	r0 = D(r0, s1_0_1, 0xF6160F07, 0xFFFE1CFD, 0x09F8FBFA, 0x0B0908FA);
	r1 = D(r1, s1_0_1, 0xF5F912F6, 0xE8F40B01, 0x0003FBF6, 0xFE08FB04);
	r2 = D(r2, s1_0_1, 0x03040D02, 0xFDF9F612, 0xF9FE0901, 0x0C0C0813);
	r3 = D(r3, s1_0_1, 0x080DF802, 0xFA04FDF2, 0xF514EEFB, 0x10FBE50C);
	r4 = D(r4, s1_0_1, 0xF114F20B, 0x06FDF8FD, 0xEC00E8F8, 0xF9FE0006);
	r5 = D(r5, s1_0_1, 0x02FBFCFA, 0xEA111EBB, 0xF1F906F1, 0x0D0710E7);
	r6 = D(r6, s1_0_1, 0xE7FF13FB, 0x04161214, 0x09060200, 0xE80CD6FE);
	r7 = D(r7, s1_0_1, 0x03FDFA05, 0x03F70E05, 0x06F30220, 0xF01102EA);
	r0 = D(r0, s1_0_2, 0x08EEF124, 0xF9F80CE9, 0x10FBEA01, 0x0A0FEBFA);
	r1 = D(r1, s1_0_2, 0x09E4F70D, 0xFEF60C02, 0x06090508, 0x02FEFD0F);
	r2 = D(r2, s1_0_2, 0xFB03FEF4, 0xFEEFFAF7, 0xFFFCFEF4, 0xF10901FC);
	r3 = D(r3, s1_0_2, 0xF30701FC, 0x0803F9FF, 0x07FD0119, 0x0401041F);
	r4 = D(r4, s1_0_2, 0xF1061605, 0x06F2F507, 0x15010BFB, 0x04FFFCFA);
	r5 = D(r5, s1_0_2, 0xFCEE0406, 0xF9F8080F, 0xFF00F908, 0x020EFDF4);
	r6 = D(r6, s1_0_2, 0xF700F2FB, 0xFAFFFCF2, 0x02FC0312, 0x05F0FB01);
	r7 = D(r7, s1_0_2, 0x06060807, 0x07F5FB09, 0x15E71D0A, 0xFD0DFC26);
	r0 = D(r0, s1_1_0, 0x00FD0BFC, 0xF704FDF4, 0x26F8F3FD, 0x0EFB07F1);
	r1 = D(r1, s1_1_0, 0x02F40BF2, 0xEC090312, 0x05FDEE03, 0x06FFEEF9);
	r2 = D(r2, s1_1_0, 0x040009F8, 0xE90D2C11, 0x05060603, 0xFAF307F5);
	r3 = D(r3, s1_1_0, 0xF90000FC, 0xC41A0C05, 0xF700F1E7, 0x0FFF000E);
	r4 = D(r4, s1_1_0, 0x1BFE0EFC, 0xD80AFF04, 0xFDE30207, 0x11FD0BFB);
	r5 = D(r5, s1_1_0, 0x0AF30301, 0x3BFFE00B, 0x0302F2F4, 0xF9FAFFFB);
	r6 = D(r6, s1_1_0, 0xFDFFFE04, 0x0801E2F9, 0x11F710F2, 0xF200FC05);
	r7 = D(r7, s1_1_0, 0x050117FE, 0x0DF5F109, 0x19FE31D3, 0xF6E2F9F5);
	r0 = D(r0, s1_1_1, 0x1A0DF908, 0xEE0EEBDC, 0x0B0209E6, 0xFDFD03F2);
	r1 = D(r1, s1_1_1, 0x080BEEE9, 0xE5F4F426, 0xFD0C0FC9, 0xED030800);
	r2 = D(r2, s1_1_1, 0x0CF7F7FB, 0xEF0EFA25, 0xFDF303F2, 0xFCF5F924);
	r3 = D(r3, s1_1_1, 0x1509F5FF, 0xF50208DC, 0x0D13E7F3, 0x0CF4F2E8);
	r4 = D(r4, s1_1_1, 0xE405F9DA, 0xFBF403FB, 0xF2F40211, 0x070808FF);
	r5 = D(r5, s1_1_1, 0xE023ED10, 0xF6EA02D8, 0xF717F702, 0x0DEEEBEC);
	r6 = D(r6, s1_1_1, 0xDD08FDEE, 0xE813FF03, 0x06030009, 0xF9F314F2);
	r7 = D(r7, s1_1_1, 0x09F50DEF, 0xEBF8FF02, 0xFD1D01F0, 0x13F5F6D3);
	r0 = D(r0, s1_1_2, 0xF8FF0013, 0x0306FDF2, 0xFB0A0016, 0x0412F2FE);
	r1 = D(r1, s1_1_2, 0x11F7F914, 0x0CD4001C, 0x04F802FE, 0x08FAFD09);
	r2 = D(r2, s1_1_2, 0x02F80310, 0xF50B0409, 0x07EAFEFC, 0x0DFAF7FE);
	r3 = D(r3, s1_1_2, 0x0FF7F7EF, 0x000C03E9, 0x18FAFF18, 0x0FF7E4FB);
	r4 = D(r4, s1_1_2, 0x02EBE4F1, 0x0806FE03, 0xE3FD0CEE, 0x0DF101E9);
	r5 = D(r5, s1_1_2, 0xECFCEB01, 0xFEE418F5, 0x16F2F600, 0x0DE9F4F3);
	r6 = D(r6, s1_1_2, 0x11EDF400, 0xF5E7EEEB, 0x0B03EAFD, 0x05F8FD04);
	r7 = D(r7, s1_1_2, 0xFB0DFAFF, 0xF5EB0D0E, 0xFB1701F4, 0x05FD1E05);
	r0 = D(r0, s1_2_0, 0x17E60EFF, 0xEEF701FA, 0xF1F801F5, 0x07FCFAF8);
	r1 = D(r1, s1_2_0, 0x06EA1006, 0x00ED0CF3, 0x12FB0A13, 0xFC09FF08);
	r2 = D(r2, s1_2_0, 0x0CFB0307, 0xEC06FF07, 0x03FBFF05, 0xFDF408F7);
	r3 = D(r3, s1_2_0, 0xFFF9FF08, 0x090D03F0, 0x02FB05FD, 0xFD04EFF8);
	r4 = D(r4, s1_2_0, 0x06ECED15, 0x050701F4, 0xFF050AF5, 0x0100F505);
	r5 = D(r5, s1_2_0, 0xF9F416FF, 0x0C19D70B, 0xFD09FAF5, 0x0BF7FDF6);
	r6 = D(r6, s1_2_0, 0xFFF01200, 0x0407DAE9, 0xF8FB170B, 0xF51CFE10);
	r7 = D(r7, s1_2_0, 0xF0081102, 0x0BFE09F8, 0x04FC27F4, 0x17D4F3F5);
	r0 = D(r0, s1_2_1, 0x090BEF18, 0x100D0CFE, 0xF3FBFAEE, 0xF4040402);
	r1 = D(r1, s1_2_1, 0x0C1FF315, 0xF7FC0D03, 0xEAF0FD02, 0x0106FFF6);
	r2 = D(r2, s1_2_1, 0xFFED06F4, 0xE2F8FC11, 0xFEF601FC, 0x07F7FAFB);
	r3 = D(r3, s1_2_1, 0xF7060607, 0x040108F2, 0xF709FC18, 0x0DEF05E4);
	r4 = D(r4, s1_2_1, 0x02F805ED, 0xFD0907F3, 0x0BFC0712, 0x02040004);
	r5 = D(r5, s1_2_1, 0xF9FAF3FB, 0xEB050602, 0x0A0000FD, 0x14F009EE);
	r6 = D(r6, s1_2_1, 0x10010204, 0x030FF506, 0x13ED0608, 0xF2060B09);
	r7 = D(r7, s1_2_1, 0x0105F807, 0xF4F9F6FE, 0xE9D1E2FF, 0xDE310B0D);
	r0 = D(r0, s1_2_2, 0x03F9F302, 0xF0E608F1, 0xFBF60A0D, 0x0EF006FD);
	r1 = D(r1, s1_2_2, 0xFBF6090E, 0x07081102, 0xF70B0403, 0x040E02FA);
	r2 = D(r2, s1_2_2, 0xEFF913FE, 0xEB00FE0D, 0x020A01F9, 0x0A0209FB);
	r3 = D(r3, s1_2_2, 0x09E203F4, 0xFE110CF9, 0xFBF5FF0D, 0xE700EDE4);
	r4 = D(r4, s1_2_2, 0xFEFF0DD1, 0xF4080DEF, 0xFBF4FCF0, 0x0407FEFC);
	r5 = D(r5, s1_2_2, 0xF4FE06FA, 0xE5FBF313, 0x000EF6F8, 0x0901F3E6);
	r6 = D(r6, s1_2_2, 0x020CFFF6, 0xDE08F5FC, 0x0EFEFCFF, 0xE7041BFA);
	r7 = D(r7, s1_2_2, 0x01FCFA07, 0xF814FC0D, 0xFCE1060A, 0x03252AF7);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0107070C, 0x16050C01, 0xED030106, 0x0A04F5FC);
	r1 = D(r1, s0_0_0, 0x04F800F9, 0x170C08F1, 0xFF0101F6, 0x06FB03FD);
	r2 = D(r2, s0_0_0, 0x0702FF01, 0xFE0BFE07, 0x03FCFFFB, 0x07FCF9FA);
	r3 = D(r3, s0_0_0, 0x01FC0001, 0x02F7F704, 0xFE080FEA, 0xFBFB0407);
	r4 = D(r4, s0_0_0, 0x0F07FC0F, 0x0020F5FD, 0xF209FD04, 0xFEFE03FD);
	r5 = D(r5, s0_0_0, 0xF5F6F1F0, 0x0009D9E2, 0xFB051204, 0x04F80B01);
	r6 = D(r6, s0_0_0, 0x04FD0EFB, 0x00100505, 0x0CF60B01, 0xF0FDE013);
	r7 = D(r7, s0_0_0, 0x090109F5, 0xF801FC01, 0x08F61AFA, 0x340EBEF6);
	r0 = D(r0, s0_0_1, 0xFD080409, 0x0EF70AE3, 0x01080BF0, 0x07FD02FD);
	r1 = D(r1, s0_0_1, 0xED02F80D, 0xFC12ED08, 0xF8F500FE, 0x120109FE);
	r2 = D(r2, s0_0_1, 0x0100F60C, 0x10F7E800, 0xF4040002, 0xF811E905);
	r3 = D(r3, s0_0_1, 0xF80A04F6, 0xFDFB0703, 0xF301FD03, 0x06030FED);
	r4 = D(r4, s0_0_1, 0x08130900, 0xF0E6FC01, 0xE3140CFE, 0xED030405);
	r5 = D(r5, s0_0_1, 0xF801F6F0, 0x1715ECED, 0x00F60AFF, 0xEA19FAFD);
	r6 = D(r6, s0_0_1, 0xF7F8FC00, 0x0E16EFE7, 0xF702FE12, 0xE9F3EBF4);
	r7 = D(r7, s0_0_1, 0xFEF8F215, 0x05F10101, 0x0F21DD01, 0x0508202D);
	r0 = D(r0, s0_0_2, 0x11FBFDE6, 0xFA07F8FD, 0xFFF700F1, 0xFAFA00FA);
	r1 = D(r1, s0_0_2, 0xF7F2F105, 0x04FB0104, 0x02060100, 0xFD07F809);
	r2 = D(r2, s0_0_2, 0xFCFE04FB, 0xFAFB06EC, 0xFFFD07FA, 0x030BFA07);
	r3 = D(r3, s0_0_2, 0x0B0404FF, 0x060906F6, 0xF70A0E11, 0xF6F219FA);
	r4 = D(r4, s0_0_2, 0x1410E3EB, 0xF604FDFE, 0x010BFAF7, 0xF9F7070E);
	r5 = D(r5, s0_0_2, 0x07FBFDF7, 0x0B1C06FF, 0xFA07F903, 0xEC030A01);
	r6 = D(r6, s0_0_2, 0xFB00FC0B, 0xF0040B03, 0x140008FE, 0x04F7FE05);
	r7 = D(r7, s0_0_2, 0xFDFB0CEC, 0xF902F707, 0x0CFCE1F9, 0x220CF3EF);
	r0 = D(r0, s0_1_0, 0x0F0607F9, 0x00051D00, 0xFA03F7F4, 0x071406F8);
	r1 = D(r1, s0_1_0, 0xF6FBFCEF, 0xFEFF07E7, 0x0E0B230A, 0xF9F4F2FF);
	r2 = D(r2, s0_1_0, 0xFB010AFB, 0x0F17DA06, 0xF7081500, 0x02F1EBFE);
	r3 = D(r3, s0_1_0, 0xFDFE03F8, 0x03F30D03, 0x03EBF805, 0x0EF8F100);
	r4 = D(r4, s0_1_0, 0x19080A02, 0x0621E507, 0xFA1D0410, 0x00FE0D01);
	r5 = D(r5, s0_1_0, 0x0415EA09, 0xF7C5E9F1, 0xFE202804, 0xFC010902);
	r6 = D(r6, s0_1_0, 0x0302FD02, 0x16010000, 0xF9FEFFEF, 0x12FEF60B);
	r7 = D(r7, s0_1_0, 0x04FF19FE, 0xF900F8FC, 0x09E4F5FF, 0xE5C002E7);
	r0 = D(r0, s0_1_1, 0xFB14FD02, 0xF016090A, 0x161716F7, 0xFFF2F80A);
	r1 = D(r1, s0_1_1, 0x0EFED810, 0x09FBE407, 0xFD121600, 0xF9ED0D1E);
	r2 = D(r2, s0_1_1, 0xFE05FC09, 0x09EF0703, 0xF81303EE, 0x12FCE0D2);
	r3 = D(r3, s0_1_1, 0x08FF0F06, 0xFF03110A, 0xF904ED13, 0x04EEF20D);
	r4 = D(r4, s0_1_1, 0xFF11020A, 0xF4000701, 0x17F6E5DD, 0x0EFFF3F3);
	r5 = D(r5, s0_1_1, 0x0AF0E102, 0x27122115, 0xF8041118, 0xDE09E0D9);
	r6 = D(r6, s0_1_1, 0xFAE803F4, 0x070101EB, 0x0D01EE12, 0x0F090803);
	r7 = D(r7, s0_1_1, 0x03FA19F7, 0x16F909E3, 0x0D0D1311, 0xF406F4F3);
	r0 = D(r0, s0_1_2, 0xF5191CF5, 0x00F10601, 0x1B0610E6, 0xF302F3F5);
	r1 = D(r1, s0_1_2, 0xF80EFC08, 0xEEFBEC0A, 0x070910FA, 0x02FFFA0C);
	r2 = D(r2, s0_1_2, 0xF1F504F1, 0x0C170AEE, 0xF3FA0107, 0x00F8F8FE);
	r3 = D(r3, s0_1_2, 0xF4180904, 0x0E0003FE, 0xF90101EF, 0x0BF4CFEA);
	r4 = D(r4, s0_1_2, 0xF3F6FE03, 0xFCEC03F3, 0xF3D91604, 0x00F1FC06);
	r5 = D(r5, s0_1_2, 0xFFFBFB1D, 0x0C000F23, 0xF9EAF907, 0x0100E010);
	r6 = D(r6, s0_1_2, 0xF9F5FEFB, 0x0C0503FE, 0x1600F003, 0x1F1007E9);
	r7 = D(r7, s0_1_2, 0x02FD0BF7, 0x08F2E111, 0x070002EA, 0x0B25FCFF);
	r0 = D(r0, s0_2_0, 0x19FE0CEB, 0x1DF2F7FA, 0xEC06F7FD, 0xFF0AF915);
	r1 = D(r1, s0_2_0, 0x01F7FFE0, 0x010708FA, 0xE909F710, 0xFCF1E613);
	r2 = D(r2, s0_2_0, 0x01050502, 0xFEFCEBFC, 0xFE01FF04, 0xFB0407EB);
	r3 = D(r3, s0_2_0, 0xFDF402F8, 0xFF100307, 0x01F50CE5, 0x05FD040C);
	r4 = D(r4, s0_2_0, 0x1503FFDF, 0x00FC00E6, 0x05E405F4, 0xFCF3FBF8);
	r5 = D(r5, s0_2_0, 0xF502F7E7, 0xE3EDE607, 0x02000EF5, 0x05FC0BF2);
	r6 = D(r6, s0_2_0, 0x000406F8, 0x08FFEF09, 0xF8FCF7F7, 0x13090CE1);
	r7 = D(r7, s0_2_0, 0xFC05F502, 0xFE10FB01, 0x08F9E629, 0x30D9E7FF);
	r0 = D(r0, s0_2_1, 0xE4EEDF07, 0x0F01FB00, 0x0D050D1F, 0xFA12F30F);
	r1 = D(r1, s0_2_1, 0xF8EEE916, 0x0A100A0C, 0x0F011531, 0x0801FEF9);
	r2 = D(r2, s0_2_1, 0x02ECF100, 0xF0EC0706, 0xF60E02FA, 0xF6FFF5F0);
	r3 = D(r3, s0_2_1, 0x031D0910, 0x08060006, 0x13F8F408, 0x1611020D);
	r4 = D(r4, s0_2_1, 0xEA01FA0A, 0xFEE70B08, 0xF9E8FBE8, 0xFBEF040F);
	r5 = D(r5, s0_2_1, 0xFAE212F1, 0xE103F116, 0x09E70AF1, 0xEB10FA0E);
	r6 = D(r6, s0_2_1, 0x07000213, 0x1A22FF0F, 0x05F50A06, 0x00FC02FD);
	r7 = D(r7, s0_2_1, 0xF70B022D, 0x18DF01F0, 0x1BC3D001, 0x1301F4E4);
	r0 = D(r0, s0_2_2, 0x04F6F9FF, 0xF80B060F, 0xF8F20313, 0xF9040FFD);
	r1 = D(r1, s0_2_2, 0x07FBFE08, 0xFA070AFD, 0x16090CF5, 0x06F2FDF6);
	r2 = D(r2, s0_2_2, 0x00F901FE, 0xE202EB19, 0x08FA01F6, 0xF10BFBE5);
	r3 = D(r3, s0_2_2, 0xF903F50F, 0x04FCFBF7, 0x09F10A04, 0xF9E703F6);
	r4 = D(r4, s0_2_2, 0x06EA00DF, 0x040600F0, 0x0C1709FA, 0x07FCFE12);
	r5 = D(r5, s0_2_2, 0xF2F4FEEB, 0x0AFAFA19, 0xFBFFFEF2, 0xF90CFD12);
	r6 = D(r6, s0_2_2, 0x090006F4, 0x28130105, 0xF9F401ED, 0xFEFDFC01);
	r7 = D(r7, s0_2_2, 0x02030401, 0xFF0CFFF1, 0xFF08F307, 0xEA150C1E);
	r0 = D(r0, s1_0_0, 0x08FBF102, 0xF40808F4, 0x02F3F8F1, 0xF8F40301);
	r1 = D(r1, s1_0_0, 0x090A0701, 0x05060A13, 0xF30500FE, 0xF4F7FD0B);
	r2 = D(r2, s1_0_0, 0x0402FFFB, 0xDFFB0403, 0x040B0BFB, 0x020A0505);
	r3 = D(r3, s1_0_0, 0x05FA02F9, 0x07FF08FF, 0xF10B0DF2, 0xF5F005ED);
	r4 = D(r4, s1_0_0, 0x02F90105, 0x07FA0A01, 0xECF30A01, 0x02090601);
	r5 = D(r5, s1_0_0, 0xF40AFEFD, 0xBE19E6EB, 0x0C04F601, 0x0102FB01);
	r6 = D(r6, s1_0_0, 0x030405F7, 0xD1D2ED19, 0x0EF8FC02, 0xE4FE00FB);
	r7 = D(r7, s1_0_0, 0xFA070306, 0xEC040AF3, 0x0ED50D0A, 0xF0E9F503);
	r0 = D(r0, s1_0_1, 0xE406F8F5, 0xFD1BEE0B, 0xFEEB06F6, 0xF1F607E5);
	r1 = D(r1, s1_0_1, 0x0A0CF903, 0x11120CD6, 0x0500F6F2, 0xF505FA0E);
	r2 = D(r2, s1_0_1, 0x0C01FA05, 0xFDFAF505, 0x05070401, 0x0F080D00);
	r3 = D(r3, s1_0_1, 0x09FC0CF5, 0x0509FFF0, 0xF61212FB, 0xFCEB0CEC);
	r4 = D(r4, s1_0_1, 0x090003FF, 0x040500E4, 0xF6F417DB, 0x040905FF);
	r5 = D(r5, s1_0_1, 0x15FF0104, 0xD30BF809, 0xFB0BF7FA, 0x0601EF07);
	r6 = D(r6, s1_0_1, 0x1105FC0F, 0xE0F6D70D, 0xFAF50BFC, 0xEB00150D);
	r7 = D(r7, s1_0_1, 0x02FA04FB, 0x05F20A18, 0xE5F21CDE, 0xD7DFFC12);
	r0 = D(r0, s1_0_2, 0xF803F4FF, 0x1417E9F6, 0xEBF50308, 0xEAEA0209);
	r1 = D(r1, s1_0_2, 0x1F02FAFB, 0x090B06F1, 0xF7F5F6FC, 0x08F0FD02);
	r2 = D(r2, s1_0_2, 0x08FEFE00, 0xF905F807, 0x03030EF8, 0x090B0C0F);
	r3 = D(r3, s1_0_2, 0x07030307, 0xFCFE05FF, 0xF40CF9F1, 0xD7E90DFE);
	r4 = D(r4, s1_0_2, 0x06070CED, 0x02060303, 0xF1C40705, 0x01FB0D01);
	r5 = D(r5, s1_0_2, 0xF0CE0FF4, 0xF700FCF0, 0x230DFAFE, 0x0E0104EA);
	r6 = D(r6, s1_0_2, 0x1C0503E2, 0xD602DBFD, 0x14FA0105, 0xF5FCF6F7);
	r7 = D(r7, s1_0_2, 0xFBFCFFFD, 0x0300FAFE, 0x26E2DE10, 0x153FF7E8);
	r0 = D(r0, s1_1_0, 0x08F80302, 0x0FFF03FE, 0xF9E90A12, 0x0700F4FF);
	r1 = D(r1, s1_1_0, 0x0E07FCFF, 0x120D080E, 0x12E413F7, 0xFA070100);
	r2 = D(r2, s1_1_0, 0x07FEF5FD, 0xFAF412DD, 0x07FE01FE, 0x1519FE09);
	r3 = D(r3, s1_1_0, 0xFB0C0306, 0x0018F60B, 0x0DFF0AF8, 0xF7E90306);
	r4 = D(r4, s1_1_0, 0xEC0105EF, 0xFEF9FC00, 0x14E6F700, 0x04FEFFF4);
	r5 = D(r5, s1_1_0, 0xE110030D, 0xFD0B221B, 0xFB15F5F8, 0x0317F20F);
	r6 = D(r6, s1_1_0, 0x0B0B000C, 0xEEBBE90E, 0x05090B05, 0xF410F1E9);
	r7 = D(r7, s1_1_0, 0xFA0609F7, 0xF8E90800, 0xCCDA0F11, 0xEBDC20F9);
	r0 = D(r0, s1_1_1, 0xFBED06D2, 0xE612ECFC, 0xDF07071F, 0xFFF8F20F);
	r1 = D(r1, s1_1_1, 0x0F110308, 0x0A1AFBDB, 0xE0EF0607, 0xFDF60413);
	r2 = D(r2, s1_1_1, 0xF40AFFF0, 0xF61501EA, 0xFE07FC0F, 0x0E190706);
	r3 = D(r3, s1_1_1, 0x0E09F819, 0xFF18FBFC, 0x09000213, 0xF4DDFC08);
	r4 = D(r4, s1_1_1, 0xD3EF18DB, 0xFAFEF4FD, 0x0DE801F5, 0x02FB0B05);
	r5 = D(r5, s1_1_1, 0xFD13F31C, 0xF4E0FEFC, 0xF9FA020D, 0x081DEFF9);
	r6 = D(r6, s1_1_1, 0x0EFCFDE9, 0xE40AED00, 0xFEF80D03, 0x0913FF17);
	r7 = D(r7, s1_1_1, 0xF2FE0B17, 0x060A07FC, 0xFAC228ED, 0xFBDE04D9);
	r0 = D(r0, s1_1_2, 0xFD000CEE, 0x0A18FBEC, 0xF40008FC, 0x0606EFFC);
	r1 = D(r1, s1_1_2, 0x12FC08E7, 0x141305F1, 0x0BE5F6EE, 0x0AFA0304);
	r2 = D(r2, s1_1_2, 0xF8F9F6FF, 0xBB0C07ED, 0x0506FD0E, 0x1218FAF7);
	r3 = D(r3, s1_1_2, 0x070FF8F9, 0xFBFB0706, 0xF3F80B0B, 0xE6D410F4);
	r4 = D(r4, s1_1_2, 0xE1FFF8FB, 0xFB03FF1C, 0x120DF6E8, 0x030C03FA);
	r5 = D(r5, s1_1_2, 0x11F701EE, 0x0FFC0CF9, 0x0C0CF00C, 0xFCF92903);
	r6 = D(r6, s1_1_2, 0x0F02FEFD, 0xF6ED0405, 0x00FA1103, 0x0C0D0306);
	r7 = D(r7, s1_1_2, 0x0303FB01, 0xF6E70BFD, 0xDF00FADF, 0xFCFE0CD4);
	r0 = D(r0, s1_2_0, 0x130CF103, 0x0A1BF50B, 0xE0F10EF8, 0xFDF7EF03);
	r1 = D(r1, s1_2_0, 0x070507FE, 0xF50606F6, 0x02ECF8F6, 0x04EC1105);
	r2 = D(r2, s1_2_0, 0xFB03FCF4, 0x07FFFEE7, 0xFF060201, 0xFD1C09FF);
	r3 = D(r3, s1_2_0, 0x040109F9, 0xF311F6F8, 0x020B0F07, 0xF600FB06);
	r4 = D(r4, s1_2_0, 0x3BE70717, 0xFC0A0003, 0x0D01FE01, 0xF80D0505);
	r5 = D(r5, s1_2_0, 0xF5030900, 0xFD02F3F2, 0xFC0BF5FD, 0x0718F907);
	r6 = D(r6, s1_2_0, 0x01080300, 0xECF3E80D, 0x08FBF90E, 0x2013FCFF);
	r7 = D(r7, s1_2_0, 0xFD04F506, 0xF7D40006, 0x0B001505, 0x29F61808);
	r0 = D(r0, s1_2_1, 0xF4E90F07, 0xEF15CA10, 0x0C0BED08, 0x0104EAFB);
	r1 = D(r1, s1_2_1, 0xF9030BFF, 0x090C0EEB, 0xF702FAF2, 0x02EE070B);
	r2 = D(r2, s1_2_1, 0xFAECFDF6, 0xCAF6FA0F, 0x000D0707, 0xFF1A080B);
	r3 = D(r3, s1_2_1, 0x040802F5, 0x01020C01, 0xFE0706F8, 0xEE02FA08);
	r4 = D(r4, s1_2_1, 0x0C0B1409, 0xE2F51301, 0xD9FB0AFA, 0xF60B07FD);
	r5 = D(r5, s1_2_1, 0x02F70109, 0xC128E1E4, 0xF80900F6, 0x0602EC02);
	r6 = D(r6, s1_2_1, 0xFE01FA01, 0xD6FECF1B, 0x13FFF80D, 0x0CFF07F9);
	r7 = D(r7, s1_2_1, 0x070AF1FB, 0xFFF518F4, 0x20F4270B, 0x08E01D18);
	r0 = D(r0, s1_2_2, 0x0C03FA07, 0x020DE6E9, 0xE8F50201, 0xF6F4F1FF);
	r1 = D(r1, s1_2_2, 0x0905EF21, 0xF50F08FF, 0x07F30904, 0x07FDFC0F);
	r2 = D(r2, s1_2_2, 0x02F60A0A, 0xCD0107F0, 0xF3001109, 0x030FFCFF);
	r3 = D(r3, s1_2_2, 0x060E0400, 0xF003070C, 0x1304FA0A, 0x01EE0FE6);
	r4 = D(r4, s1_2_2, 0xEF0316FD, 0xECFD1502, 0x07F80C0C, 0xFC080404);
	r5 = D(r5, s1_2_2, 0xEF02FDD0, 0xE121F208, 0xFE0DF6FD, 0xF30309F4);
	r6 = D(r6, s1_2_2, 0xFC01FCED, 0xC0E2FC05, 0xFC0202EA, 0x05110000);
	r7 = D(r7, s1_2_2, 0x0A0AF60E, 0xFFF51709, 0x1725DA26, 0x1919AEF0);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF4F60305, 0x0FFE0007, 0xFF10F2FA, 0xF3FBF3FC);
	r1 = D(r1, s0_0_0, 0xFC12EE02, 0xFC021202, 0xEAFC1311, 0xFFFE0002);
	r2 = D(r2, s0_0_0, 0xFC010308, 0x03E80307, 0x0305F805, 0x0517FC03);
	r3 = D(r3, s0_0_0, 0x03040108, 0xF5F7FD05, 0x110DF709, 0xF40A16F7);
	r4 = D(r4, s0_0_0, 0xF9F91018, 0x001506FC, 0xFC070507, 0xF9FDF70C);
	r5 = D(r5, s0_0_0, 0xFBF4F9FE, 0x0EEF1F00, 0xF4FE09FC, 0xF916F8FD);
	r6 = D(r6, s0_0_0, 0x0B0B0703, 0xEC00231D, 0xE7F3FD0C, 0x28F60EF2);
	r7 = D(r7, s0_0_0, 0xF8FB0606, 0x00141102, 0xFB041122, 0xD328FAF2);
	r0 = D(r0, s0_0_1, 0xFDFDF80A, 0x150D070B, 0x01FA1601, 0xF508F906);
	r1 = D(r1, s0_0_1, 0xDEF60801, 0x05040303, 0xFFF8EBFC, 0xFAFAED01);
	r2 = D(r2, s0_0_1, 0x06F5FBFA, 0xF90B060B, 0xF800FBF5, 0x040509F9);
	r3 = D(r3, s0_0_1, 0x0FFC02FD, 0x04FE030A, 0xF4FADC0F, 0xFC0D0506);
	r4 = D(r4, s0_0_1, 0xECF2F203, 0xFFFC18F9, 0xFF10FC00, 0x00EBF4F2);
	r5 = D(r5, s0_0_1, 0xF91917F4, 0xF4F9031F, 0x090CF3FC, 0xCF0EF002);
	r6 = D(r6, s0_0_1, 0xF810FFF1, 0xE6FB0DF5, 0xF2F5FE00, 0x1926EE01);
	r7 = D(r7, s0_0_1, 0x050EFFF4, 0x0DF101FB, 0xED13080B, 0xECE181F2);
	r0 = D(r0, s0_0_2, 0xEFF0FE03, 0x0FFFEF0A, 0x0702FB02, 0xF30A01FF);
	r1 = D(r1, s0_0_2, 0x04EF04F3, 0x0FF6FFFB, 0xFB01030B, 0xF2FBE101);
	r2 = D(r2, s0_0_2, 0xFC030A0C, 0x0EF81203, 0x0FF704FB, 0xFBFC06FD);
	r3 = D(r3, s0_0_2, 0xFE0703FC, 0x0906FDF9, 0xF4F7D9FE, 0xF5F30E03);
	r4 = D(r4, s0_0_2, 0x13FB0C09, 0x000311F9, 0x130A1809, 0x10F7FAF7);
	r5 = D(r5, s0_0_2, 0x0DFF130F, 0xF1FDFD06, 0xFEF90004, 0xF902FE0D);
	r6 = D(r6, s0_0_2, 0xFCF4F00D, 0xEE011C0E, 0xEEF50109, 0x1205F609);
	r7 = D(r7, s0_0_2, 0xF6F9FEFB, 0x090116F1, 0xE6E7180F, 0xF0ECC307);
	r0 = D(r0, s0_1_0, 0xFFFC02F7, 0xF809F717, 0xEEFED909, 0xE30BEF08);
	r1 = D(r1, s0_1_0, 0xF1060307, 0x18F50E0F, 0xFDE2C70B, 0x1904F700);
	r2 = D(r2, s0_1_0, 0xF30514FB, 0x21FE03EC, 0xFBFCF702, 0xFC01FD02);
	r3 = D(r3, s0_1_0, 0x01FF0202, 0x12FCF801, 0xEA0EF5FA, 0x05F4F417);
	r4 = D(r4, s0_1_0, 0x090300F2, 0x0E0DF900, 0x051312E8, 0xFC0DF9FD);
	r5 = D(r5, s0_1_0, 0x12F908FF, 0x00F8270B, 0xFF1201F9, 0xD70DEFFE);
	r6 = D(r6, s0_1_0, 0x0DF3090A, 0xE8F92802, 0x010E0201, 0x24FFFCFC);
	r7 = D(r7, s0_1_0, 0x00F90602, 0x06FB0C0E, 0xE8F5810E, 0x0C14A01B);
	r0 = D(r0, s0_1_1, 0x2A04D4F1, 0x19ECABD5, 0x0A202004, 0x0604E9FA);
	r1 = D(r1, s0_1_1, 0x04070007, 0x25FE12FE, 0x1702EA04, 0xED06F100);
	r2 = D(r2, s0_1_1, 0x2A1BFD08, 0xFF0FF614, 0xE9E40A06, 0x1F0E1000);
	r3 = D(r3, s0_1_1, 0x01ECF902, 0x001EF3FD, 0x070CF1E6, 0xD0F9AC09);
	r4 = D(r4, s0_1_1, 0x1819CB26, 0x0017FB05, 0xF902F6FF, 0x1A2AF50E);
	r5 = D(r5, s0_1_1, 0x16FF1307, 0x190D12D2, 0xF71014F4, 0xD60CEB17);
	r6 = D(r6, s0_1_1, 0xF8F30BFF, 0xE1F50F02, 0x090A1802, 0x12E6CB0F);
	r7 = D(r7, s0_1_1, 0xFF0412F8, 0x1500F815, 0xF10C97F5, 0x2FDB81F0);
	r0 = D(r0, s0_1_2, 0xF3FEFE03, 0x181D0603, 0xF60B02FC, 0xFDFC0407);
	r1 = D(r1, s0_1_2, 0xEAFD1203, 0x05FA12FF, 0x000CD80B, 0xFFFAF202);
	r2 = D(r2, s0_1_2, 0xF904090E, 0xEEE42B07, 0x08E9F511, 0x06F20BFD);
	r3 = D(r3, s0_1_2, 0x0007F7FF, 0x03F6F607, 0xFBF9EB16, 0x0508DD39);
	r4 = D(r4, s0_1_2, 0x03121A04, 0x01FFF4FD, 0xDC10C21B, 0x11FFF90C);
	r5 = D(r5, s0_1_2, 0xFFFC1A0B, 0xF5E90114, 0x06F60BF9, 0xEF0BFF06);
	r6 = D(r6, s0_1_2, 0x06FE0BFC, 0xF7ED08F4, 0xFAF507F6, 0x0BE9000C);
	r7 = D(r7, s0_1_2, 0xF5100303, 0xFC0F0BF7, 0x111FFD08, 0x020CED16);
	r0 = D(r0, s0_2_0, 0xF6FCFE0B, 0xFBF2CE14, 0xFD09FEF7, 0xF911F40E);
	r1 = D(r1, s0_2_0, 0xF001110F, 0x15FA11F9, 0x11F2D408, 0x05FFFAFF);
	r2 = D(r2, s0_2_0, 0x00020CFE, 0xED080AFB, 0x02FA00FB, 0xF80DFB04);
	r3 = D(r3, s0_2_0, 0x050103FF, 0x0B0D14E4, 0xF802F801, 0xFE04F604);
	r4 = D(r4, s0_2_0, 0x00060517, 0x010903F4, 0x00FB010E, 0xF8000706);
	r5 = D(r5, s0_2_0, 0x04FC0F02, 0x02EF1D1F, 0x020BFFF2, 0xF925E202);
	r6 = D(r6, s0_2_0, 0x09010B06, 0x030F0B11, 0xF6FD1508, 0xEFD420EF);
	r7 = D(r7, s0_2_0, 0xFAFF0104, 0x05F0CA08, 0x06ECF913, 0xFEECD608);
	r0 = D(r0, s0_2_1, 0xF10BF204, 0x07FD0110, 0xF40D0902, 0x0906F9F9);
	r1 = D(r1, s0_2_1, 0xF80709F6, 0x0900FCF2, 0x1909E408, 0x01FBF90C);
	r2 = D(r2, s0_2_1, 0x06F10BFA, 0xF1FC1211, 0x05060405, 0xF5FF04F9);
	r3 = D(r3, s0_2_1, 0x0B060700, 0x06F8030E, 0xFE01FD0E, 0xF5078704);
	r4 = D(r4, s0_2_1, 0xFC14EB08, 0x01FFF20A, 0x0EFE00ED, 0x06FEFB00);
	r5 = D(r5, s0_2_1, 0x05F528F5, 0xF619FDFB, 0xFE000205, 0x0E0DECDD);
	r6 = D(r6, s0_2_1, 0x040002FA, 0x0AFAFD1A, 0xF00D03EC, 0xF70EE416);
	r7 = D(r7, s0_2_1, 0xFB09FE08, 0x0EF70EFF, 0x020E150D, 0x0E10CDE4);
	r0 = D(r0, s0_2_2, 0xFE00FC0D, 0xFD0100FF, 0x04ECF0FD, 0xEF02FA04);
	r1 = D(r1, s0_2_2, 0xFCFD0216, 0xF9FBF9F1, 0xFF070706, 0x01FF0301);
	r2 = D(r2, s0_2_2, 0x0A04FEFC, 0xFBF5100D, 0x09F50501, 0xFAFDFE01);
	r3 = D(r3, s0_2_2, 0x08EE0003, 0x05F30212, 0xF807FE06, 0x131BDDF6);
	r4 = D(r4, s0_2_2, 0x0E19E415, 0x12010DFC, 0x05060212, 0x0E0AF901);
	r5 = D(r5, s0_2_2, 0x03F119F9, 0xF0EE0E12, 0xFD0AFDF9, 0x060BF204);
	r6 = D(r6, s0_2_2, 0x020100FD, 0xFBF1370C, 0xEB0411F3, 0x0BE80316);
	r7 = D(r7, s0_2_2, 0xF5F6FB04, 0xFC1D0DF9, 0x01FEF325, 0xFCF5F921);
	r0 = D(r0, s1_0_0, 0x0201E5FF, 0x010F0613, 0x0900FD01, 0x10F8FCF8);
	r1 = D(r1, s1_0_0, 0x14EE0CF6, 0xFFF61B05, 0x11FE0F01, 0x00FCF103);
	r2 = D(r2, s1_0_0, 0x06FDFFF9, 0x19F70D02, 0x01F906FE, 0x04FF1AF5);
	r3 = D(r3, s1_0_0, 0xFE090CFE, 0x02F2FFF2, 0xF0071205, 0x0905ECFF);
	r4 = D(r4, s1_0_0, 0xFAFEF40A, 0x0DF72B03, 0x14F318FF, 0x070BF904);
	r5 = D(r5, s1_0_0, 0x1E0028FD, 0x0E1A1513, 0x0407DEFC, 0x00EE0DF2);
	r6 = D(r6, s1_0_0, 0x0CEC09F9, 0x0313F8FA, 0x0901E5FF, 0xF0022C13);
	r7 = D(r7, s1_0_0, 0x0200F4FF, 0x1B03F5FE, 0x29F80707, 0x090CF505);
	r0 = D(r0, s1_0_1, 0x0E16DB11, 0xF716DF02, 0x0DF8FE0D, 0x0EECDD00);
	r1 = D(r1, s1_0_1, 0xF1F61F0F, 0x0EEB04F9, 0x06FAFB05, 0x0803EAFD);
	r2 = D(r2, s1_0_1, 0xFA140703, 0xF70E1CFE, 0x01020508, 0xE8F600FF);
	r3 = D(r3, s1_0_1, 0xFEF6F501, 0x0907FDFE, 0xFE1EF908, 0x0EFEE102);
	r4 = D(r4, s1_0_1, 0x1B08FDFE, 0x0601EA12, 0x15E0030C, 0x00FDF714);
	r5 = D(r5, s1_0_1, 0xF8F6020C, 0xF9172AFE, 0xFB0CF4FE, 0xF400D806);
	r6 = D(r6, s1_0_1, 0xFDF1D6F7, 0x15031400, 0x0B01D411, 0x0923FB0A);
	r7 = D(r7, s1_0_1, 0xFF0DFFFF, 0xF6ED1C0B, 0xE4F50BFF, 0xD1FAA033);
	r0 = D(r0, s1_0_2, 0x0FF6F106, 0xE4030EF1, 0xFD0DF004, 0x1200FEF5);
	r1 = D(r1, s1_0_2, 0x09FF0211, 0x0C00EE13, 0xFA0BE4FE, 0x0CFC01F8);
	r2 = D(r2, s1_0_2, 0x030108F6, 0x11141407, 0xFF00FA01, 0xFF00FF0E);
	r3 = D(r3, s1_0_2, 0xF7FEFC05, 0x08021004, 0x0B040FF8, 0xF7FDE60C);
	r4 = D(r4, s1_0_2, 0xEA02E820, 0x04FD1102, 0xF719E6FA, 0xFB05F705);
	r5 = D(r5, s1_0_2, 0x0B060323, 0x0505080B, 0xFFFB11FD, 0x0D0BCAFD);
	r6 = D(r6, s1_0_2, 0x0BF9D802, 0x160C05EA, 0x1002F4FF, 0xFF0D180B);
	r7 = D(r7, s1_0_2, 0x06F3FAF9, 0xF805FAFF, 0xF1EBFFF9, 0x230830C4);
	r0 = D(r0, s1_1_0, 0x040F0707, 0xCF0F19E9, 0xF4FB0201, 0x0C03EDFE);
	r1 = D(r1, s1_1_0, 0x180C0E11, 0x12FBE7F4, 0x14081104, 0xF8F203FF);
	r2 = D(r2, s1_1_0, 0xFC07FC07, 0xE1FC1BFB, 0xFFFDFFFC, 0x01FCFFFE);
	r3 = D(r3, s1_1_0, 0xFD090D00, 0x2201F7E8, 0xD8F80C0B, 0xFAF7F40F);
	r4 = D(r4, s1_1_0, 0xFD0F1B09, 0xEEFE20EB, 0xF6101FF5, 0xF40510FA);
	r5 = D(r5, s1_1_0, 0xF70D0E13, 0xC9E5EBF6, 0xF80EEA12, 0xECF2CD17);
	r6 = D(r6, s1_1_0, 0x07F4FA04, 0xE7051506, 0x16FED706, 0xBD00F6F8);
	r7 = D(r7, s1_1_0, 0x0BFB12FC, 0x17FB0A03, 0x30C51B11, 0x01080601);
	r0 = D(r0, s1_1_1, 0xEADEF304, 0x07F80D13, 0x0908080E, 0xF60EF30A);
	r1 = D(r1, s1_1_1, 0xFEF3C209, 0x020D01EA, 0xEF2506ED, 0x0AF90325);
	r2 = D(r2, s1_1_1, 0x14FAFF0A, 0xDA09F8E7, 0xFF0D0C0C, 0x0A0CF8FC);
	r3 = D(r3, s1_1_1, 0xFC12F50F, 0x020419E1, 0xE5F8E428, 0x14012607);
	r4 = D(r4, s1_1_1, 0x12FF00FC, 0x0DF71811, 0xEB070CEB, 0xF1FEFFF8);
	r5 = D(r5, s1_1_1, 0xF405F1EC, 0x1603270A, 0x02E30BF9, 0x011CBB06);
	r6 = D(r6, s1_1_1, 0x120DFF0C, 0xFBFEF303, 0x14ECBF09, 0xE7FAF70C);
	r7 = D(r7, s1_1_1, 0x0BFD01F2, 0x22FFEE0C, 0xED00EF1F, 0xB7FF0028);
	r0 = D(r0, s1_1_2, 0xF50EDF0A, 0xF607FDF3, 0xF9FF05EB, 0x050510EF);
	r1 = D(r1, s1_1_2, 0xF108F60D, 0x0301111B, 0x0B06EDE8, 0x0202FBFC);
	r2 = D(r2, s1_1_2, 0x0E090EF5, 0x160D0AFB, 0x05F802F5, 0x07070A06);
	r3 = D(r3, s1_1_2, 0x00FA0808, 0x0AF002FB, 0x041204E8, 0x1402F7EA);
	r4 = D(r4, s1_1_2, 0x17FF070A, 0x0A031611, 0xD6011914, 0xF5F3071E);
	r5 = D(r5, s1_1_2, 0x13F72318, 0xF4FA00FE, 0x03080009, 0xEDFF100B);
	r6 = D(r6, s1_1_2, 0xFD0DFB11, 0x08FC09E8, 0xFBF9D112, 0x1E0213EE);
	r7 = D(r7, s1_1_2, 0xFE0CFBFE, 0x03FCFB10, 0x081EF50B, 0x1F05DAF0);
	r0 = D(r0, s1_2_0, 0xF90D00F6, 0x1FF70CF3, 0x06EDF2F5, 0xFC06FDFD);
	r1 = D(r1, s1_2_0, 0x06FF0EFE, 0x0B1900F7, 0xECE8F608, 0x02F70D02);
	r2 = D(r2, s1_2_0, 0xF9090F02, 0x10060E13, 0x0500FF02, 0x1608FC0B);
	r3 = D(r3, s1_2_0, 0x05F903FC, 0x122702ED, 0xF8E1FE01, 0x1101F2F7);
	r4 = D(r4, s1_2_0, 0xE4030F01, 0x040C0F12, 0xE8061405, 0x07FF0101);
	r5 = D(r5, s1_2_0, 0x06050800, 0x2720DB07, 0x110AF9FD, 0x12FEF1F3);
	r6 = D(r6, s1_2_0, 0x0000FBFF, 0xE80BED0A, 0x0904EF08, 0xFD07F60F);
	r7 = D(r7, s1_2_0, 0xFEF5F201, 0x0FFA0C00, 0x27E228F5, 0x0AEE18EF);
	r0 = D(r0, s1_2_1, 0xE805F00A, 0x0201F7F6, 0x10FD01FC, 0x0913F9FF);
	r1 = D(r1, s1_2_1, 0x000B1504, 0xFDF8FFF7, 0x00DDF9E0, 0x0FED090C);
	r2 = D(r2, s1_2_1, 0x030DFDFE, 0x08FEFA0C, 0x050B0007, 0x090A0F0B);
	r3 = D(r3, s1_2_1, 0x040C03FB, 0x040901EF, 0xE4FB0404, 0x171701FF);
	r4 = D(r4, s1_2_1, 0x1DF70AFD, 0x0705F311, 0x06E8FC24, 0x060C02FA);
	r5 = D(r5, s1_2_1, 0x0C100506, 0x00C222E7, 0xFD010701, 0x062E1511);
	r6 = D(r6, s1_2_1, 0x100C03F8, 0x0613E110, 0x101BF7F7, 0x02EDF20E);
	r7 = D(r7, s1_2_1, 0xFF03FAF1, 0xECF000F8, 0xDD0DF6E9, 0xC623FB26);
	r0 = D(r0, s1_2_2, 0x0F0807E9, 0x08FA0B08, 0xFDFFF706, 0x0504F9F6);
	r1 = D(r1, s1_2_2, 0x10010604, 0x1EEEF5F3, 0x00FBF8ED, 0x02080302);
	r2 = D(r2, s1_2_2, 0x01FFF6F2, 0x030A02FF, 0x00020007, 0x11070804);
	r3 = D(r3, s1_2_2, 0x12FD0AEC, 0xFC12FF07, 0x02FE0708, 0xD70AEF17);
	r4 = D(r4, s1_2_2, 0xE11D0EEB, 0x08070405, 0xE0FEFCFF, 0x0703FFF7);
	r5 = D(r5, s1_2_2, 0xFA020716, 0xFC12F607, 0x09050A0F, 0x1A00F204);
	r6 = D(r6, s1_2_2, 0x09F9FF08, 0xF309FC07, 0x0F060404, 0xF6FD0008);
	r7 = D(r7, s1_2_2, 0x08F4FF0A, 0xED00FDF3, 0x0D172007, 0x36FB0CF8);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF8FF2100, 0xFE0BF9F9, 0x0CF2EC03, 0x08FD02F8);
	r1 = D(r1, s0_0_0, 0x090306F3, 0x00110907, 0x0605E7F5, 0xFF04FC03);
	r2 = D(r2, s0_0_0, 0x0A02140B, 0xF8F80104, 0x06080907, 0xFD100D05);
	r3 = D(r3, s0_0_0, 0xFBFC0B01, 0x0307F20D, 0xF50414F1, 0x020EF9FC);
	r4 = D(r4, s0_0_0, 0xFA070701, 0x0AF7050A, 0x05FB0611, 0x00090302);
	r5 = D(r5, s0_0_0, 0x07E802F4, 0x06D90BE6, 0x09F5FDF9, 0xFE0DF413);
	r6 = D(r6, s0_0_0, 0x0D04FB01, 0x03F81AEA, 0xF70109FB, 0x05F01502);
	r7 = D(r7, s0_0_0, 0x04050008, 0x0510E218, 0xF4281A21, 0xFF2015ED);
	r0 = D(r0, s0_0_1, 0x03E5FEF9, 0xFF06FCF6, 0xF9F7F503, 0x0D01D900);
	r1 = D(r1, s0_0_1, 0x06F2EF04, 0xF704F20B, 0x07FDEF07, 0xFFFF0D06);
	r2 = D(r2, s0_0_1, 0x05F4F7F8, 0x09F4F4FD, 0x130CFDF2, 0x0A011806);
	r3 = D(r3, s0_0_1, 0x0B0B18F1, 0x0C03E5FA, 0xE3EBD702, 0xFC0CE40D);
	r4 = D(r4, s0_0_1, 0x0205EEFB, 0xF2F8F404, 0x01020715, 0x060FFBF9);
	r5 = D(r5, s0_0_1, 0x02EF1905, 0xDC006106, 0xF6001AFB, 0x0BE10DFD);
	r6 = D(r6, s0_0_1, 0xFB09FD0B, 0xF4F3230E, 0xFF08E60A, 0x04191BD7);
	r7 = D(r7, s0_0_1, 0x08F7F800, 0xF1060AF2, 0xF7EDCCFC, 0x02D647EB);
	r0 = D(r0, s0_0_2, 0x03060007, 0xF1E0170A, 0xF4F110F6, 0x0DFFEFFE);
	r1 = D(r1, s0_0_2, 0x02EF03F6, 0xF8F4DAEE, 0x0001F4FF, 0x06000700);
	r2 = D(r2, s0_0_2, 0xFF04F8FB, 0xF9E307FD, 0xFD02F202, 0x02FE1AFB);
	r3 = D(r3, s0_0_2, 0x080905F8, 0x07FBF905, 0x10E4F4F2, 0x0B03D6F1);
	r4 = D(r4, s0_0_2, 0xE902E607, 0x0101FBFF, 0xF3FAE502, 0xFD01EAFC);
	r5 = D(r5, s0_0_2, 0xF5E9BCFE, 0x0B142613, 0xFB0E0809, 0xF506F7F6);
	r6 = D(r6, s0_0_2, 0xF608ECF4, 0xFA00FA0C, 0x0AEDFAF5, 0x07F11CFF);
	r7 = D(r7, s0_0_2, 0x000307FF, 0xF9E20709, 0x13BEF30A, 0x05E00028);
	r0 = D(r0, s0_1_0, 0xF9FC150E, 0xF9FF0404, 0xFEFF00F3, 0xFFF3F414);
	r1 = D(r1, s0_1_0, 0x02020D03, 0xF8F71802, 0xFC0101FC, 0xF80007F2);
	r2 = D(r2, s0_1_0, 0xFCF7FF0A, 0xFC0F08CF, 0x00F9050E, 0xF2FF150C);
	r3 = D(r3, s0_1_0, 0xFC040205, 0x0CD6040B, 0xF4141005, 0xF814EAED);
	r4 = D(r4, s0_1_0, 0xF4060CF9, 0xFCFCF1E2, 0x00090704, 0x04FB0204);
	r5 = D(r5, s0_1_0, 0x06FF04EB, 0xE40900CF, 0x08F5F100, 0xF915FE04);
	r6 = D(r6, s0_1_0, 0xED0E0104, 0xF7040CFB, 0x06FE0AF3, 0xF1FB31DE);
	r7 = D(r7, s0_1_0, 0xFC040302, 0x0417F6F8, 0xD9F2181A, 0x04F8FCFF);
	r0 = D(r0, s0_1_1, 0x021003FA, 0xF9E3141C, 0x0AF00F0B, 0x11F5EF33);
	r1 = D(r1, s0_1_1, 0x00EF17CC, 0xEBF4B2EB, 0xE5F5F405, 0xFCFC0AFF);
	r2 = D(r2, s0_1_1, 0x2D0BF1F9, 0xDC0D1408, 0x01060219, 0x1BF700F4);
	r3 = D(r3, s0_1_1, 0xF7F905EC, 0xDDD8E713, 0x0D0A080B, 0x0710EB03);
	r4 = D(r4, s0_1_1, 0x090C0A0C, 0xF20F1A08, 0xFC080003, 0x1F0514FE);
	r5 = D(r5, s0_1_1, 0xF4EC0CE2, 0x9CD31021, 0x13E6FDDE, 0xFCEDF3DF);
	r6 = D(r6, s0_1_1, 0xD601DCE9, 0xE701190B, 0x07F706F6, 0xE82214F5);
	r7 = D(r7, s0_1_1, 0x0C0010F3, 0x040C05CD, 0xE2250103, 0x14E4ECF3);
	r0 = D(r0, s0_1_2, 0x09ED08FA, 0xF10D140B, 0xEEE40EFD, 0x09FE0009);
	r1 = D(r1, s0_1_2, 0xFA20EAE8, 0xFEFCDFF3, 0xF9F9EEFA, 0xFE0B05FE);
	r2 = D(r2, s0_1_2, 0x07FB020A, 0xEFEC1AFC, 0x0E040205, 0x060DFB09);
	r3 = D(r3, s0_1_2, 0x110DEA03, 0xF7EBF4FB, 0x020C05F3, 0x14EEE4F1);
	r4 = D(r4, s0_1_2, 0x06BFF509, 0x06F2F8FD, 0xE4FD1907, 0xE8F80EFC);
	r5 = D(r5, s0_1_2, 0xE7E7DD0F, 0x0704CB0E, 0x0210EEF7, 0x090CFD00);
	r6 = D(r6, s0_1_2, 0xFB15FE08, 0x15002314, 0x0406FC0B, 0xFBEB06EC);
	r7 = D(r7, s0_1_2, 0x0C0603F9, 0xE903F2FB, 0xFAFFE60D, 0xF1FD0121);
	r0 = D(r0, s0_2_0, 0xE3F215F3, 0xFA0F0503, 0x0206F805, 0xF6F601F8);
	r1 = D(r1, s0_2_0, 0x08F40FE1, 0xFDFE0DF6, 0xF70E0D15, 0xF2050900);
	r2 = D(r2, s0_2_0, 0x06FFFFFC, 0x0FFEFDF7, 0x0102FE0B, 0x09FB01FA);
	r3 = D(r3, s0_2_0, 0xF1050B01, 0xF6ECE503, 0xF9120B00, 0x02F60EED);
	r4 = D(r4, s0_2_0, 0xE9F60D02, 0xFE030103, 0xFF07FA06, 0xF6030500);
	r5 = D(r5, s0_2_0, 0x0CFC0CFA, 0xE1200003, 0x05F9F30A, 0x06EF05EB);
	r6 = D(r6, s0_2_0, 0x09FFF9FF, 0x0C0AFB0B, 0x0DF30401, 0xFBEFFE00);
	r7 = D(r7, s0_2_0, 0x0E07FA03, 0xFEFBFE11, 0xFDF11209, 0x070F1BF4);
	r0 = D(r0, s0_2_1, 0x0D170BF5, 0xFA0223FC, 0x16FDDC14, 0xF0FEFE02);
	r1 = D(r1, s0_2_1, 0x1D0607C8, 0xEBFFEAF9, 0xFBEBFB04, 0xE6FC16E3);
	r2 = D(r2, s0_2_1, 0x06040319, 0xEF02200E, 0x00070302, 0xF90FF6DB);
	r3 = D(r3, s0_2_1, 0x090609FB, 0xEB0BDA16, 0x0405FEF6, 0xF7EA1D15);
	r4 = D(r4, s0_2_1, 0x26F50C06, 0x060E1017, 0x1905032C, 0x09070C0F);
	r5 = D(r5, s0_2_1, 0xFD091022, 0xD1ED03FA, 0xFDFEF9F6, 0xFA01F3F2);
	r6 = D(r6, s0_2_1, 0x0AF8F4FB, 0x031E21F5, 0xEEEC09D9, 0xFB02110A);
	r7 = D(r7, s0_2_1, 0x10FD09FA, 0x14F5F8E5, 0xF52E1BFE, 0xE61836E4);
	r0 = D(r0, s0_2_2, 0xFCF906FD, 0xFD0D01F5, 0x04061305, 0xFB03F90E);
	r1 = D(r1, s0_2_2, 0x0D0503EF, 0x0DFBEEEF, 0xFFF701FE, 0x08020302);
	r2 = D(r2, s0_2_2, 0xFD0B0308, 0xFCF61D03, 0x18050009, 0xFFFE05FD);
	r3 = D(r3, s0_2_2, 0x05F0F10B, 0x0A00F904, 0x0AFE0001, 0x0FFFF400);
	r4 = D(r4, s0_2_2, 0xE2EE0CED, 0x03080506, 0xFB0901FC, 0xFCFBFF07);
	r5 = D(r5, s0_2_2, 0xF000F9FA, 0x19230711, 0xFB01FB01, 0xFBF4FE0A);
	r6 = D(r6, s0_2_2, 0xFCF6ED01, 0xFBFB2513, 0xF7F4EAFE, 0x02060E0B);
	r7 = D(r7, s0_2_2, 0x08FEE608, 0x05FE1FEC, 0x13FE08E4, 0xFFECFD08);
	r0 = D(r0, s1_0_0, 0x05F1FA14, 0xEB10DDEF, 0x0AF8ED01, 0x1507FE0E);
	r1 = D(r1, s1_0_0, 0x1302F6ED, 0x10070AEC, 0x04FAF803, 0xF107FEFB);
	r2 = D(r2, s1_0_0, 0x04FC0203, 0xFDEE0F15, 0x0402FEFF, 0xFFF807EA);
	r3 = D(r3, s1_0_0, 0xFEF904FF, 0x0D041506, 0xF01BF1EF, 0x0CFFF904);
	r4 = D(r4, s1_0_0, 0xFFED010E, 0xF51002F1, 0xED0AFBF5, 0x06000002);
	r5 = D(r5, s1_0_0, 0x04F30D00, 0x0CE7E0F6, 0xFE06F8FE, 0xFB04F6E7);
	r6 = D(r6, s1_0_0, 0xF9FE0FEF, 0xD30CF6FE, 0x11F90610, 0xF508EBED);
	r7 = D(r7, s1_0_0, 0x01F90B04, 0xF504F5F2, 0x1400CDF1, 0x2E20F1B2);
	r0 = D(r0, s1_0_1, 0x060FF625, 0xFAF0EAF2, 0xFB09F4EF, 0xFA09FD15);
	r1 = D(r1, s1_0_1, 0x0113170E, 0x1006FC0A, 0x06FB010A, 0x06020103);
	r2 = D(r2, s1_0_1, 0x04FD0604, 0xF903F100, 0xFA0E04FC, 0xF9FE0FF6);
	r3 = D(r3, s1_0_1, 0x09FDF6FC, 0x01F50D00, 0x101DE01B, 0x0DFFFAF4);
	r4 = D(r4, s1_0_1, 0x1A1CF71E, 0x010FFC05, 0x0401F9FF, 0xFD010205);
	r5 = D(r5, s1_0_1, 0xDF0616B7, 0x0B0904FF, 0x09061301, 0xF61D200E);
	r6 = D(r6, s1_0_1, 0x0DFA12FB, 0xD008FD02, 0x0900130F, 0xEC27E6D1);
	r7 = D(r7, s1_0_1, 0xFF010BFD, 0x04FD05E5, 0x18E00404, 0x1425C61C);
	r0 = D(r0, s1_0_2, 0xF109FAFD, 0x1AF0E8FA, 0xF908070D, 0x000C0AF8);
	r1 = D(r1, s1_0_2, 0xFE0909E6, 0x060403FC, 0xFB03F6FC, 0x05FFFBFF);
	r2 = D(r2, s1_0_2, 0x02FCFC04, 0xF60A0A1C, 0x080804F7, 0xF907F7F9);
	r3 = D(r3, s1_0_2, 0xFEFEFEF9, 0xFCFD04FC, 0xFD01FF06, 0x0208FCF9);
	r4 = D(r4, s1_0_2, 0x02FD05FA, 0xFC11FAF3, 0x0400F3EE, 0x0A0409FA);
	r5 = D(r5, s1_0_2, 0x1BFFF100, 0x00091115, 0xFE030203, 0xFE2A07EE);
	r6 = D(r6, s1_0_2, 0x17030BF9, 0xF019F30C, 0x09F70502, 0xFFF5FFFA);
	r7 = D(r7, s1_0_2, 0xFDFFFE01, 0xFC05FA08, 0x0802F5F0, 0xD2CC0B15);
	r0 = D(r0, s1_1_0, 0x0EFCF40B, 0xFEF3DFEC, 0x0409EA09, 0x0AFC0404);
	r1 = D(r1, s1_1_0, 0x07FF0FF1, 0x16FC0805, 0x000CE413, 0xF3F8FEF5);
	r2 = D(r2, s1_1_0, 0xFC0D09F7, 0x18FA11FA, 0xFB0401FF, 0x0401F5FE);
	r3 = D(r3, s1_1_0, 0xF8FC08FF, 0xFD161DDE, 0x091606F1, 0x13F40708);
	r4 = D(r4, s1_1_0, 0xFF0418F1, 0xF6030300, 0xFD00E00F, 0xF6FC0FFF);
	r5 = D(r5, s1_1_0, 0x0EF1FF13, 0xD30211E6, 0xE00B05FC, 0xF7FBFCF3);
	r6 = D(r6, s1_1_0, 0x06F1090F, 0xE0FD070C, 0x0EFD0BFF, 0xFB05EA02);
	r7 = D(r7, s1_1_0, 0x08070605, 0xEAF2E923, 0xE5ECF400, 0xD815E09C);
	r0 = D(r0, s1_1_1, 0xF207100A, 0x070DC9F2, 0xE817DA11, 0x18F50BFC);
	r1 = D(r1, s1_1_1, 0xF9ED25F3, 0x0EF128CC, 0x0A0F001F, 0x2A14F7FA);
	r2 = D(r2, s1_1_1, 0xE709F60A, 0xE9180613, 0x0615FF03, 0x03EA0EDD);
	r3 = D(r3, s1_1_1, 0x3CEDFF05, 0x09F90F09, 0x1205F4D8, 0x06FBF0FF);
	r4 = D(r4, s1_1_1, 0xFA1EDCE5, 0x0005F4F7, 0xF20EF719, 0xFE040AFC);
	r5 = D(r5, s1_1_1, 0x06F30D1E, 0xF7050FF2, 0x1A14FE0D, 0x131D0FB9);
	r6 = D(r6, s1_1_1, 0x290506FD, 0xFE20F203, 0xE9021807, 0xF80732FF);
	r7 = D(r7, s1_1_1, 0x06F80A04, 0xEC12F0F9, 0x04F0DD00, 0x0CF3E4F8);
	r0 = D(r0, s1_1_2, 0xEB0BF4E8, 0xEFDE01E6, 0x0EFFF311, 0xEA01F70C);
	r1 = D(r1, s1_1_2, 0xF01118E2, 0xFB0214F7, 0xF8FD0407, 0x07FFFFFD);
	r2 = D(r2, s1_1_2, 0xD9FDF409, 0x06FDE70F, 0x02FA07FE, 0xED040AD7);
	r3 = D(r3, s1_1_2, 0xEFFB0DEF, 0x0EFA0110, 0xFB0AF40A, 0xDFFFFD18);
	r4 = D(r4, s1_1_2, 0xFB08E7DC, 0xEC01FE06, 0xFBF50003, 0x0A000C04);
	r5 = D(r5, s1_1_2, 0xF004180C, 0x1709051C, 0xFDFF08F2, 0x061203E2);
	r6 = D(r6, s1_1_2, 0x110311F5, 0x021DE611, 0x040F10EA, 0x08EACBF3);
	r7 = D(r7, s1_1_2, 0xF70AF9F8, 0x14F8FC02, 0x0319F9DF, 0x0206EFE4);
	r0 = D(r0, s1_2_0, 0x1105FE0A, 0x0903F3E9, 0xFFFFFFEA, 0x0205FD0F);
	r1 = D(r1, s1_2_0, 0x05FC09FF, 0x07FFF817, 0x020FF810, 0xECF50203);
	r2 = D(r2, s1_2_0, 0xF803FB03, 0x07110C12, 0xFE04FE06, 0xFE0006F1);
	r3 = D(r3, s1_2_0, 0xFCFD07FD, 0xF1F8F406, 0x02F4F306, 0x0605FC05);
	r4 = D(r4, s1_2_0, 0xFDF10606, 0xF6FBFCF4, 0xFC04F8F8, 0xFD000208);
	r5 = D(r5, s1_2_0, 0x09F80B16, 0x0ADC1A01, 0xFA02FD02, 0x0308EEF1);
	r6 = D(r6, s1_2_0, 0x06FA0B09, 0xDE15EF0B, 0xFD040B07, 0xEE0F00F8);
	r7 = D(r7, s1_2_0, 0xFA04FE00, 0x0BFC0A05, 0x0BF12F13, 0xE91BF400);
	r0 = D(r0, s1_2_1, 0xEF0BF708, 0x0EF4ECC2, 0xEC06F711, 0xFE04FC16);
	r1 = D(r1, s1_2_1, 0x01F2FD06, 0xFC040B21, 0xF0F918FB, 0x1E09F3FA);
	r2 = D(r2, s1_2_1, 0xFD0C10FB, 0xF30B17F9, 0x09FF0909, 0xFF01F109);
	r3 = D(r3, s1_2_1, 0xFBFEF608, 0xFEF50104, 0x00F0FF00, 0x1A030D04);
	r4 = D(r4, s1_2_1, 0x17EC0C05, 0xF8FC01F9, 0xFCEE0DE8, 0xFDFFFCFF);
	r5 = D(r5, s1_2_1, 0xEEFE0405, 0xFB042526, 0x0A030AF1, 0xE4FDF3CB);
	r6 = D(r6, s1_2_1, 0xF9FB0B0D, 0xE5F8F825, 0xFA000CFD, 0x0FFEEDEF);
	r7 = D(r7, s1_2_1, 0xFBF6010A, 0x05051503, 0x1D09E9CE, 0xFCF9EBA4);
	r0 = D(r0, s1_2_2, 0x0604FC05, 0x02F7F4F5, 0x20020EF5, 0xF2F907FE);
	r1 = D(r1, s1_2_2, 0xFCFA0B0A, 0xF10CF80E, 0xFDF6FD0F, 0x0400EDF3);
	r2 = D(r2, s1_2_2, 0x06050720, 0x10FE0311, 0x0503FF00, 0xFBFE03FB);
	r3 = D(r3, s1_2_2, 0x03F9030A, 0x0104FDFB, 0xE9F1FE0E, 0x0EFD0308);
	r4 = D(r4, s1_2_2, 0x10F2EC08, 0xFCFDF600, 0xEEE701F1, 0x030203F3);
	r5 = D(r5, s1_2_2, 0x02FE19F8, 0xE4030431, 0xF801FB07, 0xFA08FEC4);
	r6 = D(r6, s1_2_2, 0xFB050DF8, 0x020CFE38, 0xFF0714E9, 0x02E4FE19);
	r7 = D(r7, s1_2_2, 0xEEF80B02, 0xFFF7FAFA, 0xE2F6FFEE, 0xE7FF1F29);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(1.751e-02, 5.227e-02, 2.303e-02, -1.029e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-2.798e-02, -1.973e-02, 7.167e-03, -4.226e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-1.551e-02, -2.997e-02, 4.344e-02, -2.741e-03);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(4.085e-03, 1.161e-02, -2.365e-04, 2.608e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-1.945e-02, 1.040e-02, 4.313e-02, -1.329e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-4.461e-02, -2.968e-02, -5.508e-03, 4.941e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-6.389e-03, -3.171e-02, -1.269e-02, -5.167e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-2.691e-02, 3.006e-02, 2.926e-03, -3.255e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-BILINEAR-MPV-NVL-conv7
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv6
//!BIND LUMA
//!SAVE conv7
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv6_pt;
			r = conv6_gather(p, 0);
			g = conv6_gather(p, 1);
			b = conv6_gather(p, 2);
			a = conv6_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv6_pt;
			r = conv6_gather(p, 0);
			g = conv6_gather(p, 1);
			b = conv6_gather(p, 2);
			a = conv6_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x08060A0F, 0x05FB00FF, 0x01000304, 0x010AEC02);
	r1 = D(r1, s0_0_0, 0xFEFCFBF5, 0xF0F7FF0B, 0x06FB02FD, 0x0908FB03);
	r2 = D(r2, s0_0_0, 0x000818FC, 0x10F01AFE, 0xFD06FFEE, 0x09FCFAF7);
	r3 = D(r3, s0_0_0, 0x00F90F10, 0xFEF809F6, 0x04FF03F8, 0x05FE0CF5);
	r4 = D(r4, s0_0_0, 0xFE0200F3, 0xF3E7F0F4, 0xFCF8EE08, 0xF500EF0A);
	r5 = D(r5, s0_0_0, 0x0202F7F3, 0x0101FBF8, 0xFEF7000C, 0x11FD0806);
	r6 = D(r6, s0_0_0, 0x07010D05, 0x01F70A08, 0xF8FDFF03, 0x090B0511);
	r7 = D(r7, s0_0_0, 0x040100FB, 0xFFFBFDE9, 0xEAF8F6F7, 0x02FA0404);
	r0 = D(r0, s0_0_1, 0x070DF4F4, 0xFE05FD00, 0x03FC00FE, 0xF0050A01);
	r1 = D(r1, s0_0_1, 0x01E704FF, 0x18FE07FD, 0x0C020505, 0x011508E8);
	r2 = D(r2, s0_0_1, 0xEEE9FB0E, 0xF81706F6, 0x08F1F503, 0x0A0112FD);
	r3 = D(r3, s0_0_1, 0xFAFB8101, 0x0A01FA06, 0xF508ECFE, 0x0D0A0EFC);
	r4 = D(r4, s0_0_1, 0x0DF2F1F3, 0xE909FCE2, 0xFE18120F, 0xFC0D11F4);
	r5 = D(r5, s0_0_1, 0xFA02FE09, 0x00FFF90C, 0x06F70007, 0xFF1DF804);
	r6 = D(r6, s0_0_1, 0xE9F1F3F0, 0xFF07F505, 0x050A0505, 0xFAFFFE04);
	r7 = D(r7, s0_0_1, 0x01FA00F7, 0xF7F400F8, 0x15FC1916, 0xFDFBFF07);
	r0 = D(r0, s0_0_2, 0x09FF07FF, 0x010307FB, 0x02FF0200, 0xFB04EEEC);
	r1 = D(r1, s0_0_2, 0x03FA00FD, 0xFEFFE9F3, 0x01FF05FC, 0x0302F702);
	r2 = D(r2, s0_0_2, 0x0CFEFA03, 0x09E6F5F7, 0x030FFAF3, 0x0022C810);
	r3 = D(r3, s0_0_2, 0xF4EFEE09, 0xFEF2F0F7, 0xFE02050A, 0x0007F3D1);
	r4 = D(r4, s0_0_2, 0xFFEB01EF, 0xF806E119, 0x02ED0605, 0x000701FD);
	r5 = D(r5, s0_0_2, 0xF705FBFF, 0x0602FD01, 0xECFDFD03, 0x00F9FD0D);
	r6 = D(r6, s0_0_2, 0x00FA18F9, 0x05F8FB06, 0x010200F0, 0xFDF80707);
	r7 = D(r7, s0_0_2, 0xFCFB010B, 0xFF050206, 0x0DEEBF00, 0x01FDFB08);
	r0 = D(r0, s0_1_0, 0x0A07FBF4, 0x06F4FFFA, 0x05FE0005, 0xE3FE0D08);
	r1 = D(r1, s0_1_0, 0xFAF8FA0B, 0x0C01DF0E, 0x00FC1709, 0x01F6FBFC);
	r2 = D(r2, s0_1_0, 0xFF1BE7DC, 0x00FFE905, 0xF203F4F9, 0xF21AAFE9);
	r3 = D(r3, s0_1_0, 0x02F90F08, 0x01F415FA, 0xEEFFFC0B, 0xE9F5E4D6);
	r4 = D(r4, s0_1_0, 0xF1FB0303, 0x1DF8FA17, 0x0A010910, 0x05051328);
	r5 = D(r5, s0_1_0, 0xF3FDF50D, 0x0C03F2FF, 0x02F308FB, 0x07EC05FA);
	r6 = D(r6, s0_1_0, 0xDB13F3E8, 0x0AFDFD06, 0xEFF40505, 0xFE0604FA);
	r7 = D(r7, s0_1_0, 0x0901F901, 0x13FB0BF7, 0x04F9240C, 0xFD01FBEF);
	r0 = D(r0, s0_1_1, 0xF210DB07, 0xF702090B, 0xFE06FA09, 0x24023700);
	r1 = D(r1, s0_1_1, 0xFC06ECD4, 0xFE03E0F1, 0xEEF4FC0F, 0x0A04EDFB);
	r2 = D(r2, s0_1_1, 0xF5010A1B, 0xE2F3C7CE, 0xFB02AD03, 0xFFECBBC1);
	r3 = D(r3, s0_1_1, 0x12F60032, 0xE620DC06, 0xE708F5FB, 0xECFD02A8);
	r4 = D(r4, s0_1_1, 0xF9FED4DF, 0xDA08FEEE, 0xC7FCF8E5, 0x0FE009E6);
	r5 = D(r5, s0_1_1, 0xFC06F506, 0xF20FF901, 0x00051020, 0xCD0BF0F9);
	r6 = D(r6, s0_1_1, 0x0F0CFF19, 0x040EF7C1, 0xF4FE060E, 0xFD17FF01);
	r7 = D(r7, s0_1_1, 0x09FCFBEE, 0x030F0104, 0x160EF3CA, 0xF513FDFE);
	r0 = D(r0, s0_1_2, 0x16FCFF01, 0xFEFBF2F7, 0xFC0405FE, 0xF3EFD8EC);
	r1 = D(r1, s0_1_2, 0xF9F60008, 0xFC01C5DE, 0xF0FDFAF7, 0x00FCFD0A);
	r2 = D(r2, s0_1_2, 0xF80807FC, 0xF7EB0E0E, 0xFE01EFEE, 0x2BFA9504);
	r3 = D(r3, s0_1_2, 0x05FD0BF7, 0xF2070B02, 0x0413F8FB, 0xF9010E11);
	r4 = D(r4, s0_1_2, 0xF0F20D0E, 0x15FD0E23, 0x09F6160E, 0x04FF03FF);
	r5 = D(r5, s0_1_2, 0x03070808, 0xF3F50802, 0x01F7EA00, 0xFA05F30B);
	r6 = D(r6, s0_1_2, 0xEEFFF9F0, 0x13F8070A, 0xFCF4FAED, 0x010E0501);
	r7 = D(r7, s0_1_2, 0xFC070907, 0xFBF405F8, 0x060D0A2B, 0xFB0802F9);
	r0 = D(r0, s0_2_0, 0x1CFFF5F4, 0x11FBF5F6, 0x08FE0401, 0x1FF1FCFD);
	r1 = D(r1, s0_2_0, 0xFBFCF7FE, 0xFAFCFE02, 0x0BFCFE00, 0x1BFDF806);
	r2 = D(r2, s0_2_0, 0x0A0808F8, 0xFFF60B01, 0xF305FFF9, 0x00E6FEFE);
	r3 = D(r3, s0_2_0, 0x0B080308, 0x08FA06FC, 0x0A00F2FA, 0xFFFE1800);
	r4 = D(r4, s0_2_0, 0x05FCF9FC, 0x0BE80B16, 0x07F1FD00, 0xF5F3EA03);
	r5 = D(r5, s0_2_0, 0x0B02F605, 0x0604060C, 0xF508F5F7, 0x0CFCF906);
	r6 = D(r6, s0_2_0, 0xF60319FD, 0xFBFD0D05, 0xFE04FE02, 0x0B05FF01);
	r7 = D(r7, s0_2_0, 0xFFFEFD00, 0xFDFD02F9, 0x0401F1E5, 0x03FD08FC);
	r0 = D(r0, s0_2_1, 0x1603EA02, 0x0C04F203, 0x1AED040C, 0x04010DF0);
	r1 = D(r1, s0_2_1, 0x0003F300, 0x080508F7, 0x0B0607FB, 0xFC0C04F9);
	r2 = D(r2, s0_2_1, 0xE5F303FF, 0x190808FA, 0x1E00EF07, 0x0301E7E8);
	r3 = D(r3, s0_2_1, 0x0DE8F607, 0xFC000617, 0xF60300FB, 0x16F7F60B);
	r4 = D(r4, s0_2_1, 0x0007E0F9, 0x0E05F7E9, 0xF8FD07EC, 0xFA0803F1);
	r5 = D(r5, s0_2_1, 0x03010609, 0x04F7FFFF, 0x09091603, 0x0700070C);
	r6 = D(r6, s0_2_1, 0xFFF6F8FA, 0x03011AFD, 0xF906FBF9, 0xF8020612);
	r7 = D(r7, s0_2_1, 0x00F403FA, 0x040B08E3, 0x0BF9F7FD, 0x00FCF8FA);
	r0 = D(r0, s0_2_2, 0xFFF7FE06, 0xFDFA05FE, 0x050002FA, 0xFADE0307);
	r1 = D(r1, s0_2_2, 0xFEF30E0C, 0xFEF305FB, 0x0E04070B, 0x09FEF500);
	r2 = D(r2, s0_2_2, 0xF7010BFD, 0xFEFC0411, 0xEA0E0EF4, 0xD905101A);
	r3 = D(r3, s0_2_2, 0xFCF9F7FD, 0xF7EA0509, 0xFE03FE05, 0xDBF20BFF);
	r4 = D(r4, s0_2_2, 0x06F20D0A, 0xEAE603FC, 0x0205F60D, 0x0DFEF004);
	r5 = D(r5, s0_2_2, 0x0CF8FCFC, 0x0101FEFF, 0x040EF807, 0xEBFA00FC);
	r6 = D(r6, s0_2_2, 0x05F705FE, 0xFD07000C, 0xFB0505F2, 0xFCF8FEFB);
	r7 = D(r7, s0_2_2, 0xFCFBFB08, 0x020B0403, 0xFAFE09F7, 0xFCF010FF);
	r0 = D(r0, s1_0_0, 0xF20E04E0, 0xF80305F7, 0xFE00FAFB, 0xE80CE5FC);
	r1 = D(r1, s1_0_0, 0xF30AFBFE, 0xFA1317ED, 0x0B05FCF7, 0x05FCF705);
	r2 = D(r2, s1_0_0, 0x070D07FE, 0xF4FC09E2, 0xFAF6000C, 0xF126F185);
	r3 = D(r3, s1_0_0, 0xCF09EB14, 0x0808FFFC, 0x0100FCF2, 0x14FCFEEC);
	r4 = D(r4, s1_0_0, 0xEBF1FEF7, 0xEBEBC60F, 0x04F402F9, 0x04010A08);
	r5 = D(r5, s1_0_0, 0x0807FAFE, 0xFFFDFDFE, 0x01F80115, 0xFCF8F8E9);
	r6 = D(r6, s1_0_0, 0xEEFC12C7, 0xF60908EE, 0xFDFDFBF9, 0xFD0405E6);
	r7 = D(r7, s1_0_0, 0x01FEFD0A, 0xFDFD0411, 0x0A0E09DA, 0x02030102);
	r0 = D(r0, s1_0_1, 0x01020BF7, 0xF50702FA, 0x02000300, 0xF4FE0FEB);
	r1 = D(r1, s1_0_1, 0xEB0006F9, 0xBF0201FA, 0xF70B06F1, 0xE30A0604);
	r2 = D(r2, s1_0_1, 0x10DAD6FE, 0x10111104, 0xF9FC06E1, 0x001FEDC5);
	r3 = D(r3, s1_0_1, 0xF04A02E4, 0x0C0401F1, 0x19050206, 0xDC1100DF);
	r4 = D(r4, s1_0_1, 0xEE13F6E9, 0xEDECCB0E, 0xF601E1FC, 0xE6F7000F);
	r5 = D(r5, s1_0_1, 0xF80EFFFF, 0xFC01FFF7, 0x07AD0B05, 0xE31415E7);
	r6 = D(r6, s1_0_1, 0xF0DCFBCE, 0xF30F0DE5, 0xEC180BF6, 0xF803F9E3);
	r7 = D(r7, s1_0_1, 0x03F2FB0F, 0x0AF90A01, 0xE10409AE, 0x0100FE03);
	r0 = D(r0, s1_0_2, 0x130FFBF6, 0xFC010401, 0x0D070404, 0x27FE1401);
	r1 = D(r1, s1_0_2, 0x0D0CFC02, 0xFA1F09FD, 0x0909FB00, 0xFEF40303);
	r2 = D(r2, s1_0_2, 0xF7FB0204, 0xFB0DFDFA, 0x081BFE00, 0x3D13EAFD);
	r3 = D(r3, s1_0_2, 0x4408FF1C, 0xF4110301, 0x00EBF102, 0x2314F7FA);
	r4 = D(r4, s1_0_2, 0xF1FE030E, 0xF7058102, 0xFAFA0914, 0x03ED0A07);
	r5 = D(r5, s1_0_2, 0xFE020805, 0x0704FB01, 0xFDF61803, 0x16F8FA09);
	r6 = D(r6, s1_0_2, 0xC70ADE06, 0xFB05EA0C, 0x1013FD09, 0xF706F3F8);
	r7 = D(r7, s1_0_2, 0xECF606FE, 0xEBFEFEFA, 0x1626FFEE, 0xFD0202F8);
	r0 = D(r0, s1_1_0, 0x0907ECD9, 0xFD070300, 0xFCFEFEFF, 0xF6F8F8F9);
	r1 = D(r1, s1_1_0, 0xE9FB04FA, 0xFDF90DFB, 0xFD010CF2, 0xFF0205F8);
	r2 = D(r2, s1_1_0, 0xE3E5EB0D, 0xFD0E0E05, 0xF8F0FF00, 0x09F9EEFE);
	r3 = D(r3, s1_1_0, 0x0006ECEB, 0xFF050200, 0x100009F4, 0xF51B13D4);
	r4 = D(r4, s1_1_0, 0xFFFA0DF4, 0x12172EFB, 0x09FFD0EE, 0x0EF3FAF9);
	r5 = D(r5, s1_1_0, 0xE90A05FD, 0x02FFED0C, 0xFE070714, 0x0C0214F6);
	r6 = D(r6, s1_1_0, 0xCEF40CF1, 0xF203FE03, 0x01070DF7, 0xE1010405);
	r7 = D(r7, s1_1_0, 0x09F9F906, 0xF706F80E, 0xFFF817F2, 0xF9FE02F9);
	r0 = D(r0, s1_1_1, 0xF613F70B, 0xF91FFCF6, 0x1C06FFF7, 0xD10ED806);
	r1 = D(r1, s1_1_1, 0x05FCE719, 0x0CFFDADB, 0xC5DFFE03, 0xC90A1D01);
	r2 = D(r2, s1_1_1, 0x09FFEA0C, 0x0FF70218, 0xF219B804, 0xED0DCCF0);
	r3 = D(r3, s1_1_1, 0x0C0381F3, 0xF8FCFCE1, 0x0BDEEB10, 0xD613F9D1);
	r4 = D(r4, s1_1_1, 0xF0CFE906, 0x11EDE244, 0x0FB0F605, 0xE9EA11FC);
	r5 = D(r5, s1_1_1, 0x11FDF10E, 0x1DEBE40A, 0x030421F8, 0xE7F40805);
	r6 = D(r6, s1_1_1, 0x19F3C400, 0xFFFEFDFF, 0xE7E4EFF5, 0x1FF90FEB);
	r7 = D(r7, s1_1_1, 0x281710FE, 0x01E8020A, 0x1CFABB05, 0x0219FFFC);
	r0 = D(r0, s1_1_2, 0x020AEF06, 0x2D0EFF08, 0xEB0100FC, 0x1FEDD921);
	r1 = D(r1, s1_1_2, 0xE00CF401, 0xAA27EBD1, 0x2622FA0E, 0xFC060F04);
	r2 = D(r2, s1_1_2, 0x29ED05F7, 0x13E90305, 0x0FD7E10E, 0xF91FAF01);
	r3 = D(r3, s1_1_2, 0x080D0F1C, 0x010CCF09, 0xF3FCD7FA, 0xB1F6D1EE);
	r4 = D(r4, s1_1_2, 0xF120C6FF, 0x1314FF08, 0x080410F7, 0xF0EF11F4);
	r5 = D(r5, s1_1_2, 0xF512F6FA, 0x0BF8FF04, 0x0E0AF5F7, 0xF10FD701);
	r6 = D(r6, s1_1_2, 0x02040B00, 0x0E0600E4, 0x23E3F50D, 0xE003E301);
	r7 = D(r7, s1_1_2, 0xF41412F3, 0x14FDF5FC, 0xE3F7C70A, 0x01FF00FE);
	r0 = D(r0, s1_2_0, 0x07FDF7F7, 0x00F8F8FA, 0x0302FB05, 0xFDFBF8ED);
	r1 = D(r1, s1_2_0, 0x0507010A, 0xF502000A, 0x10F1FE01, 0x0005030D);
	r2 = D(r2, s1_2_0, 0x0F00F2F1, 0xF1080100, 0x0008F2FD, 0x0D0404AB);
	r3 = D(r3, s1_2_0, 0xF8F3FAEC, 0x05FE04FF, 0x02090614, 0xE7F5ED02);
	r4 = D(r4, s1_2_0, 0x0F010105, 0xED0A06F9, 0xED030910, 0x140A1205);
	r5 = D(r5, s1_2_0, 0x0C07FB05, 0xFC03FAF6, 0x05FBFAE8, 0xFDFBFD0B);
	r6 = D(r6, s1_2_0, 0x02EEE7F0, 0xFE0101FF, 0x03FBFF03, 0x06F9F3F1);
	r7 = D(r7, s1_2_0, 0xFF04FFFA, 0xF1F70809, 0xFDF50201, 0xF7FA02F9);
	r0 = D(r0, s1_2_1, 0x0DFCF6F8, 0x0A0601E8, 0x1AF7FCEF, 0xBBD1FE33);
	r1 = D(r1, s1_2_1, 0xF0E7010F, 0xEF090405, 0x0F06010D, 0x00FBFFF2);
	r2 = D(r2, s1_2_1, 0x0AF0CE05, 0xF7ECFE10, 0x0EFEF503, 0xF8F6061B);
	r3 = D(r3, s1_2_1, 0xF90212FD, 0x09F2F303, 0xFDF8F90E, 0xFCE7FF08);
	r4 = D(r4, s1_2_1, 0xED090709, 0xF2F4F6F8, 0x060003DA, 0xE70B0FF8);
	r5 = D(r5, s1_2_1, 0x0A050503, 0xFFFEFB0A, 0x101BFF25, 0x19F6FDED);
	r6 = D(r6, s1_2_1, 0xE2FA080D, 0xF9F905E7, 0xEE120710, 0xF3F8F503);
	r7 = D(r7, s1_2_1, 0xFEFAF7EF, 0xF90C07FF, 0x0109F406, 0xFCF0FE03);
	r0 = D(r0, s1_2_2, 0xF2F9EF00, 0xE904EB10, 0xE7090905, 0xEBA5F70A);
	r1 = D(r1, s1_2_2, 0xF6F4F7F6, 0x00F70201, 0xFDF4FD0E, 0xF80CF8F3);
	r2 = D(r2, s1_2_2, 0x040A1007, 0x0F03F607, 0x0DF5F219, 0xE9F505F6);
	r3 = D(r3, s1_2_2, 0xFFF50404, 0xF7FC0003, 0x08FDF4FE, 0x0DFEFC11);
	r4 = D(r4, s1_2_2, 0x18E30AFB, 0x11FBF605, 0xEB02FC02, 0x060DFA03);
	r5 = D(r5, s1_2_2, 0x0C030101, 0x0002FEFE, 0x1EFE09F8, 0xF3FAF60B);
	r6 = D(r6, s1_2_2, 0x120A070A, 0x00F2E000, 0xFC000FF8, 0x05FCFF06);
	r7 = D(r7, s1_2_2, 0xF803FA00, 0x0005FDFB, 0xFF020808, 0x09F20307);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0EF4FD03, 0xFBF7FEFD, 0x040004FC, 0xF4FEEC07);
	r1 = D(r1, s0_0_0, 0xF90401F9, 0xF7E9E3F0, 0x0AEBF5FB, 0x06FCFD02);
	r2 = D(r2, s0_0_0, 0xFFF304F9, 0x00CD1804, 0x05FDF1F3, 0x08DB1811);
	r3 = D(r3, s0_0_0, 0x02E10506, 0x0E000504, 0x0EF706FC, 0x0BFB0D08);
	r4 = D(r4, s0_0_0, 0x00FCFC07, 0xFCF7CA29, 0x08F601FD, 0x04081506);
	r5 = D(r5, s0_0_0, 0xF0FDFFFD, 0xFBFCFB10, 0xFDF6FAF4, 0x03FD0CFD);
	r6 = D(r6, s0_0_0, 0xFBF7FB0D, 0xFDFAFB02, 0xFC010304, 0x0BF70506);
	r7 = D(r7, s0_0_0, 0x0200FF05, 0xFEFDFBF8, 0x01FBEFFF, 0x040302FE);
	r0 = D(r0, s0_0_1, 0x09EEF316, 0x02000402, 0xFFFCFB07, 0x050A0EF8);
	r1 = D(r1, s0_0_1, 0xFD040303, 0x17FDEAF9, 0xFFD90406, 0x05070107);
	r2 = D(r2, s0_0_1, 0x01FC0DFA, 0x16C0DFF9, 0x14E90706, 0x12FD000C);
	r3 = D(r3, s0_0_1, 0x13EE0F1B, 0x01F9F412, 0xFA010309, 0x0804F809);
	r4 = D(r4, s0_0_1, 0xDE02FC01, 0xAAE5B6F4, 0x1FEDFA01, 0x0500F3F2);
	r5 = D(r5, s0_0_1, 0xE81504FD, 0x0CFC0404, 0xD306FCFF, 0x1BE5EF15);
	r6 = D(r6, s0_0_1, 0x14FE0AFB, 0x0D090202, 0x1E0DF810, 0x0DF3F60C);
	r7 = D(r7, s0_0_1, 0xEBF806F8, 0xE4010DFF, 0x1FDE0217, 0x00FEFB01);
	r0 = D(r0, s0_0_2, 0x03F90BFC, 0xF9F8FDFB, 0xFFFE06FE, 0xF2000DF7);
	r1 = D(r1, s0_0_2, 0x0FFA0DFD, 0x060B05F4, 0x04EC0506, 0xF7FF09F8);
	r2 = D(r2, s0_0_2, 0x0706F4FE, 0x00E30D09, 0xF9061608, 0x03081401);
	r3 = D(r3, s0_0_2, 0xECF9FF13, 0x0C001F08, 0xF90602FB, 0x08EC0F0E);
	r4 = D(r4, s0_0_2, 0x12FA1BF4, 0xF20F020A, 0xFE090C0B, 0x04FD00FC);
	r5 = D(r5, s0_0_2, 0x080405FD, 0x03020006, 0x05FEDDF2, 0xEC0D060D);
	r6 = D(r6, s0_0_2, 0xF90CF409, 0x070C0EED, 0xFEF4FFF8, 0xFF090102);
	r7 = D(r7, s0_0_2, 0xFC06FE08, 0xF901FAFE, 0x05F30B05, 0xFE010407);
	r0 = D(r0, s0_1_0, 0x1512FEE5, 0xF703000A, 0xFFFD0300, 0x030606F6);
	r1 = D(r1, s0_1_0, 0xFFF3FEF5, 0xE816F50B, 0x01D5FC00, 0xF4EEF712);
	r2 = D(r2, s0_1_0, 0x27081FCA, 0x00CE00FA, 0x0E0901D5, 0x09040DF9);
	r3 = D(r3, s0_1_0, 0xF404F8EA, 0xFBF1FE01, 0xF9E70B00, 0x0CF20103);
	r4 = D(r4, s0_1_0, 0x08F60D03, 0x170B09FA, 0xEE08F714, 0xF1E8F918);
	r5 = D(r5, s0_1_0, 0xF0ED04F9, 0x1A1005FB, 0x0113E9FB, 0xE9F60508);
	r6 = D(r6, s0_1_0, 0x17111FEC, 0xFA06FF02, 0xF9EB06F8, 0x01FB0DF1);
	r7 = D(r7, s0_1_0, 0x0716FB0F, 0xF6FF060C, 0xE50BF9FA, 0xF9FD01F5);
	r0 = D(r0, s0_1_1, 0x0703D70B, 0x06F9EA20, 0xEC2408FF, 0x0114F60A);
	r1 = D(r1, s0_1_1, 0xE518D3F4, 0x061BEFEC, 0x1D9E0C08, 0x0DE418F8);
	r2 = D(r2, s0_1_1, 0xF3F4D611, 0xFBB5161E, 0xF405E70A, 0xBCFCE8EA);
	r3 = D(r3, s0_1_1, 0xDE27E1FA, 0xF4FD0801, 0xFF1AEED5, 0x0AE915B7);
	r4 = D(r4, s0_1_1, 0xF207F1C3, 0xD7ED1012, 0xF5F5FD09, 0xFBFF06F0);
	r5 = D(r5, s0_1_1, 0xEE07EDFC, 0x00E7061A, 0xE305FB04, 0xFD0814E0);
	r6 = D(r6, s0_1_1, 0xE201DE0E, 0x102603E5, 0xE018EF04, 0x0518EAF7);
	r7 = D(r7, s0_1_1, 0x15EA070E, 0xF2F5E90C, 0xE11DF7E1, 0xE210FE06);
	r0 = D(r0, s0_1_2, 0x06090C13, 0x07FBFB0C, 0xFBFEFC00, 0x14EDF90B);
	r1 = D(r1, s0_1_2, 0xF809F8FE, 0x0E12D829, 0x0CD2080C, 0xFEFF0203);
	r2 = D(r2, s0_1_2, 0xFD07120D, 0x09E00502, 0x15F6040A, 0xF21E1424);
	r3 = D(r3, s0_1_2, 0x0CF8F20A, 0xF80EE207, 0xFF03F2FD, 0xF814E314);
	r4 = D(r4, s0_1_2, 0xF210E20D, 0x13171E06, 0xF2090EF2, 0xF60309FE);
	r5 = D(r5, s0_1_2, 0xFA040001, 0x09FC0201, 0x03F6E100, 0xED05EF04);
	r6 = D(r6, s0_1_2, 0x0907FA02, 0xF816E0F8, 0x160F0309, 0x0203F6FD);
	r7 = D(r7, s0_1_2, 0xEBFE00F4, 0x04F80403, 0xFD09EAF8, 0x0200EE00);
	r0 = D(r0, s0_2_0, 0xF5010409, 0x01070704, 0xFC01FE05, 0xF1000610);
	r1 = D(r1, s0_2_0, 0xF7F703FB, 0x000003FB, 0xF7E408F1, 0x0D0906FE);
	r2 = D(r2, s0_2_0, 0xF0FA05F9, 0xFFF006F5, 0xF4EEFD10, 0x2710F7F6);
	r3 = D(r3, s0_2_0, 0x00F304F2, 0x000501FE, 0xF9F703FF, 0xF90D11FE);
	r4 = D(r4, s0_2_0, 0x06F502F3, 0x010DFBF0, 0xFE00FDF7, 0x12010502);
	r5 = D(r5, s0_2_0, 0xFD06FCFD, 0x0102FBFE, 0x090F09FF, 0xFB0C0406);
	r6 = D(r6, s0_2_0, 0xFE030C00, 0x040300F0, 0x070DFCFF, 0x08100B00);
	r7 = D(r7, s0_2_0, 0x02F60103, 0xF2FC0603, 0xF0020205, 0xF6F90D08);
	r0 = D(r0, s0_2_1, 0x060F0402, 0x0519F50C, 0x1C1F02F4, 0xDFD0210B);
	r1 = D(r1, s0_2_1, 0xE3FAFFFB, 0xED06F7FF, 0xF9DD10F4, 0x04070C07);
	r2 = D(r2, s0_2_1, 0x050C03F8, 0x08EBFA09, 0x0310FFEA, 0xEEF40708);
	r3 = D(r3, s0_2_1, 0x0A060EF3, 0xF916ED02, 0xF00C03F2, 0xE815FB04);
	r4 = D(r4, s0_2_1, 0xE7010202, 0xE9FCFD16, 0x0AF70E12, 0xFFFBF5F5);
	r5 = D(r5, s0_2_1, 0xFA09FDFB, 0x03FB0708, 0x0C080E02, 0x0F12EAF5);
	r6 = D(r6, s0_2_1, 0x010C03FE, 0xF316EF08, 0xEDEDFDFC, 0x0208F701);
	r7 = D(r7, s0_2_1, 0x12090408, 0xFEFD0200, 0x050506FA, 0xF1F60401);
	r0 = D(r0, s0_2_2, 0x10FA1200, 0x0104FE07, 0xFC0208F7, 0x05EE1DF9);
	r1 = D(r1, s0_2_2, 0xFE121403, 0xEEF004E9, 0xFDE70100, 0x02FD01FD);
	r2 = D(r2, s0_2_2, 0x03020404, 0x09F6F700, 0xFA03220E, 0x26F9ECF9);
	r3 = D(r3, s0_2_2, 0x0607FAFF, 0x03000CFC, 0x04070F06, 0xFA03FCFB);
	r4 = D(r4, s0_2_2, 0xFA110D04, 0x0803F704, 0x030DF6FC, 0xF8FD0509);
	r5 = D(r5, s0_2_2, 0xFD040602, 0x01FE0606, 0xF4F603FC, 0x09F6FC06);
	r6 = D(r6, s0_2_2, 0xEDF80A02, 0x0C0309EC, 0xFF0306F9, 0x01FA0301);
	r7 = D(r7, s0_2_2, 0x0203F905, 0x0903F900, 0xF20CFA02, 0x07FE0D04);
	r0 = D(r0, s1_0_0, 0xF20406F7, 0xFC04FEFE, 0x0000FE01, 0xF7FBEEFB);
	r1 = D(r1, s1_0_0, 0x0C02FE0E, 0x0D0705F6, 0x1B010AFE, 0xF201F7F3);
	r2 = D(r2, s1_0_0, 0x09090808, 0xE406F7F6, 0x08F90821, 0xCB12F909);
	r3 = D(r3, s1_0_0, 0xECE8E1CF, 0x06F70307, 0x0C0809F7, 0xE3F704FB);
	r4 = D(r4, s1_0_0, 0x1801021E, 0xF609BB06, 0xED0B0C15, 0x0407F20E);
	r5 = D(r5, s1_0_0, 0x05FEEB0D, 0x0302000C, 0x33F90101, 0xE204FEEA);
	r6 = D(r6, s1_0_0, 0xEB1407EB, 0x08FFF403, 0xE90307FF, 0xF00503F4);
	r7 = D(r7, s1_0_0, 0x04F900F8, 0x0DF7040C, 0xF50CE90E, 0x02010501);
	r0 = D(r0, s1_0_1, 0xF3FAF8EF, 0x0E0505FE, 0x02FC0102, 0x2810FCFA);
	r1 = D(r1, s1_0_1, 0xFDFDF6F7, 0xF61312EC, 0x0E0AFB11, 0x04FBFDFC);
	r2 = D(r2, s1_0_1, 0x07F6EFFC, 0x0805FFE6, 0xFF0FE1EB, 0xBB20F6E9);
	r3 = D(r3, s1_0_1, 0xFDFADAE7, 0xF004FC12, 0x0301FF15, 0xD2080400);
	r4 = D(r4, s1_0_1, 0xFA07E4FD, 0x1D11F4E2, 0xFC1003F4, 0xFB1612F8);
	r5 = D(r5, s1_0_1, 0xFCFB050D, 0x05FEFD01, 0xE70AE114, 0xFE120B05);
	r6 = D(r6, s1_0_1, 0x0F0101FD, 0x09101210, 0xFB08F6D1, 0x010102F3);
	r7 = D(r7, s1_0_1, 0x06F5021A, 0x04FDFB13, 0xED0400F4, 0xFBFCFF05);
	r0 = D(r0, s1_0_2, 0x0200F4F7, 0x0603FD03, 0x00FAFBFB, 0x12EFF5FA);
	r1 = D(r1, s1_0_2, 0x04FFFAF2, 0x1107F7FF, 0x02050C00, 0xFDF8F703);
	r2 = D(r2, s1_0_2, 0xFF04EFF5, 0x08120802, 0x0A0CFBEF, 0x04F20305);
	r3 = D(r3, s1_0_2, 0x00DEDCEA, 0x05FC0C05, 0xFB0504FE, 0xF5F2EB03);
	r4 = D(r4, s1_0_2, 0x0AF602F2, 0xF4FB3405, 0xFE05F7F6, 0x09F704FE);
	r5 = D(r5, s1_0_2, 0x00FE08FD, 0x01FAFAF5, 0x02FE0106, 0xF706F509);
	r6 = D(r6, s1_0_2, 0x041E2402, 0xEEFBF204, 0x07FE010A, 0x020D0601);
	r7 = D(r7, s1_0_2, 0xFDFCFAFA, 0x03081604, 0xF90001F3, 0x01FE0502);
	r0 = D(r0, s1_1_0, 0x09F7DAF7, 0x0807F9FD, 0xFD07FAFC, 0xF1000EF9);
	r1 = D(r1, s1_1_0, 0x19010807, 0x0206F6FF, 0xFE03FAFE, 0x080CF4F4);
	r2 = D(r2, s1_1_0, 0x0DFF0A0F, 0x341BE2EA, 0x0DFD0D1D, 0x23D1BE22);
	r3 = D(r3, s1_1_0, 0xEAFDF4FD, 0xFFFAFE07, 0x1909FCFD, 0x2808070C);
	r4 = D(r4, s1_1_0, 0x03FF0200, 0x0906EBF8, 0xF60ABDF3, 0xD226FEEF);
	r5 = D(r5, s1_1_0, 0x110203F5, 0x06F9F914, 0xE8FF0702, 0x0609F203);
	r6 = D(r6, s1_1_0, 0xDFF8010C, 0xF8FCFD05, 0x091402E0, 0xFB01FEF5);
	r7 = D(r7, s1_1_0, 0xF5F60217, 0x00EFE713, 0xEAEBF0F2, 0x0EFAEF0F);
	r0 = D(r0, s1_1_1, 0xF7D802EB, 0xF4F9FBFA, 0x07FA01FD, 0xCBF8FEF9);
	r1 = D(r1, s1_1_1, 0x130CFD08, 0x0FDDF4F8, 0xD209F4FD, 0xFBED2412);
	r2 = D(r2, s1_1_1, 0xF21CD702, 0x0EF40702, 0x080CB8E6, 0xFC8106CC);
	r3 = D(r3, s1_1_1, 0xF705DD05, 0xF31F03EE, 0x09050CFA, 0x18D30AF8);
	r4 = D(r4, s1_1_1, 0x261710FE, 0x350114D2, 0x172117F7, 0xFAF8F3EA);
	r5 = D(r5, s1_1_1, 0xFC0701F8, 0xFAFFE6FE, 0xDDFBED0E, 0x12FA06F2);
	r6 = D(r6, s1_1_1, 0xF91BEE01, 0x1AF6FD27, 0xE0021955, 0x0508F30C);
	r7 = D(r7, s1_1_1, 0x13FAEDD3, 0xF608F8F8, 0xF5F4FA00, 0xF7FE0214);
	r0 = D(r0, s1_1_2, 0x0D0C16FE, 0x02F5F701, 0xFD0AFF06, 0x19EFF4F7);
	r1 = D(r1, s1_1_2, 0xF4FEE111, 0x19D4F8EA, 0x02070CFB, 0xFFFCF7FA);
	r2 = D(r2, s1_1_2, 0x030012FE, 0x161C130A, 0x0608E909, 0x11C91DDD);
	r3 = D(r3, s1_1_2, 0x05F30DF7, 0x08F408F6, 0x0208F906, 0x06042904);
	r4 = D(r4, s1_1_2, 0x04EDCD1A, 0xFD1101FC, 0xFF08F8FF, 0xFCF307FB);
	r5 = D(r5, s1_1_2, 0x05F40EF8, 0x02FDFDFE, 0xFCF00F06, 0xFB0E0908);
	r6 = D(r6, s1_1_2, 0x040CF6F7, 0x01EEFD15, 0xFAF0E2E5, 0x01010EFE);
	r7 = D(r7, s1_1_2, 0x03020E08, 0xFEFCF8F8, 0x04092305, 0x070A1AFE);
	r0 = D(r0, s1_2_0, 0xF9FF02FA, 0x01FEFF01, 0xF0F606F7, 0x1DF7F3EA);
	r1 = D(r1, s1_2_0, 0x1603F502, 0x0D080E00, 0x190FF5FE, 0xFFFDF8FA);
	r2 = D(r2, s1_2_0, 0xF0F8F009, 0x000EFCF7, 0x01F4FFFD, 0x010B0313);
	r3 = D(r3, s1_2_0, 0x0300FC09, 0xFEF7FDFB, 0x0606FAFA, 0xE8F4D212);
	r4 = D(r4, s1_2_0, 0x08040002, 0xEEFFF900, 0xF30AF402, 0x07100DF4);
	r5 = D(r5, s1_2_0, 0x010003F2, 0x00FCFC01, 0x18EA00EF, 0xEC0506F9);
	r6 = D(r6, s1_2_0, 0x0B0ED10D, 0x04FA0208, 0x0501FFF7, 0x0300FAFB);
	r7 = D(r7, s1_2_0, 0xFDFB0604, 0x03FDF902, 0x03110801, 0x0203FCFD);
	r0 = D(r0, s1_2_1, 0xFD23EF0B, 0x0BF7F2EB, 0xFD07FBFF, 0x0A2417F8);
	r1 = D(r1, s1_2_1, 0x0DFA08E4, 0xFC1B01F8, 0x08DB01FA, 0x00F5FDFE);
	r2 = D(r2, s1_2_1, 0xFA120001, 0x02FAF8FC, 0xF61101FD, 0xFB2FF602);
	r3 = D(r3, s1_2_1, 0x0016F8FC, 0xF7FDED04, 0xFEF9F7EE, 0xF418F20D);
	r4 = D(r4, s1_2_1, 0xFDF1FDFC, 0x0404F9FC, 0x041401FC, 0xFFE4F7EE);
	r5 = D(r5, s1_2_1, 0x01F701FA, 0xF8F7F809, 0xF5E3FEF3, 0xF40FF9F6);
	r6 = D(r6, s1_2_1, 0x04011607, 0xF2FFF20A, 0xF9F0FC04, 0x06FEFC00);
	r7 = D(r7, s1_2_1, 0x04070200, 0x00FD12F9, 0xFAF111F6, 0x05F80FF8);
	r0 = D(r0, s1_2_2, 0x08F110FA, 0x05000DFD, 0x01F604FD, 0x0CF0E5F8);
	r1 = D(r1, s1_2_2, 0x0EECFFF5, 0xFB120C02, 0x100F020C, 0xFC00FE06);
	r2 = D(r2, s1_2_2, 0xFC07E4F3, 0xF6151202, 0xFB12F505, 0xE7231810);
	r3 = D(r3, s1_2_2, 0x040E03F6, 0xFF020AFA, 0x04FDFFF5, 0x08EF0C04);
	r4 = D(r4, s1_2_2, 0x0B04F9EF, 0xF60D10FC, 0xFFFB0401, 0x03EDF9FD);
	r5 = D(r5, s1_2_2, 0x0102FAF4, 0x0003FEFC, 0x1305FA00, 0xF8FEFF07);
	r6 = D(r6, s1_2_2, 0xFB0AFCFA, 0xFD0A0203, 0xFC060EF7, 0x02F701F8);
	r7 = D(r7, s1_2_2, 0xFFFDF500, 0x000BFBF9, 0x00F7F002, 0x0200F8F1);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF9030102, 0x05FFFD01, 0x050100FF, 0xE501F9FD);
	r1 = D(r1, s0_0_0, 0xFC000206, 0x16EEF600, 0xF805EC13, 0x010707FC);
	r2 = D(r2, s0_0_0, 0x07F40504, 0x0A09FA20, 0x01080517, 0xF72F0723);
	r3 = D(r3, s0_0_0, 0xDEFBFA0D, 0xF809FE0F, 0x0304FCFB, 0xFA27FB13);
	r4 = D(r4, s0_0_0, 0xFF0C0810, 0xDADD0C35, 0xE718F605, 0x03050509);
	r5 = D(r5, s0_0_0, 0x05FF0603, 0xEF060501, 0x0FE6030D, 0x04FCFC01);
	r6 = D(r6, s0_0_0, 0xFFF3F502, 0xEEFEF905, 0xFE0401F7, 0x05FBFF00);
	r7 = D(r7, s0_0_0, 0x00FD03FD, 0xF8FD0005, 0xF9F70009, 0xFCFE01FF);
	r0 = D(r0, s0_0_1, 0x05F70BFD, 0x00FFFCF9, 0x0200FF01, 0xF2020DF6);
	r1 = D(r1, s0_0_1, 0x02050505, 0x02FAFA07, 0xFC160404, 0xFDFC0002);
	r2 = D(r2, s0_0_1, 0xFBFF0106, 0xFAE70618, 0x0CFF070C, 0xEEE0093E);
	r3 = D(r3, s0_0_1, 0x18EF18FB, 0xFF0A0607, 0xF8020801, 0xFB09FEFC);
	r4 = D(r4, s0_0_1, 0x0F07F90A, 0xE0E0EC33, 0x03F70D07, 0xEF0206F4);
	r5 = D(r5, s0_0_1, 0xFA05FFFE, 0x03FC06FA, 0xF4F61614, 0x09ECF815);
	r6 = D(r6, s0_0_1, 0x09060206, 0xE4FBEE1A, 0x04FB08FB, 0x01040206);
	r7 = D(r7, s0_0_1, 0xFD03F9FA, 0xF6020003, 0x00FF0011, 0x04FC0306);
	r0 = D(r0, s0_0_2, 0x07F6F4F8, 0x08FF01F8, 0x03FF0500, 0xF60EF3F1);
	r1 = D(r1, s0_0_2, 0x04FF0108, 0xF9F9E6F7, 0xF003050A, 0xFFFCFD03);
	r2 = D(r2, s0_0_2, 0x0605FB05, 0x010FF60A, 0xF3FCEB09, 0xE714E022);
	r3 = D(r3, s0_0_2, 0xF2EE1700, 0xFF04100C, 0xFB0007FA, 0x10F81010);
	r4 = D(r4, s0_0_2, 0x02F70D04, 0xE915D41C, 0x0702FC0A, 0xF904F6FC);
	r5 = D(r5, s0_0_2, 0xF5020703, 0xFE00F603, 0xF6FBF502, 0xF2110902);
	r6 = D(r6, s0_0_2, 0xEF05F505, 0xDAFCEF16, 0x08F606FA, 0xF20905F9);
	r7 = D(r7, s0_0_2, 0xFC04FA05, 0x0006FF02, 0x0FEEFD07, 0xF8030102);
	r0 = D(r0, s0_1_0, 0xFE0AF5FA, 0x09010601, 0x04020AFE, 0x0FF503E5);
	r1 = D(r1, s0_1_0, 0x170AFC02, 0xF1F10912, 0x04F4EC0E, 0xFFE60CF6);
	r2 = D(r2, s0_1_0, 0xF9FF0017, 0x1009100C, 0xFE17FE22, 0xE70518FD);
	r3 = D(r3, s0_1_0, 0x00EBEA06, 0x09FCFB0D, 0x2508F8FF, 0xFEFC041F);
	r4 = D(r4, s0_1_0, 0x06F6F8F5, 0x06311812, 0xFEF9FF09, 0x22E30C29);
	r5 = D(r5, s0_1_0, 0x1F080402, 0xF20104FA, 0xF3E6F01B, 0x1DF801FA);
	r6 = D(r6, s0_1_0, 0x02F60A14, 0xE402EC07, 0x2EED06F6, 0x0A080204);
	r7 = D(r7, s0_1_0, 0xDF00FDF9, 0xFD050DFC, 0x0BEF0202, 0x02FD0205);
	r0 = D(r0, s0_1_1, 0x19FEF805, 0x08FC0508, 0xFA0DFEF2, 0x07E7F625);
	r1 = D(r1, s0_1_1, 0xF60AF604, 0x0905F6F3, 0x1C02FF16, 0x0D040B07);
	r2 = D(r2, s0_1_1, 0x07F0E407, 0x13120407, 0xF6230909, 0x25F90716);
	r3 = D(r3, s0_1_1, 0x2AEAED18, 0x0B1A041E, 0xF7F5060F, 0x02260522);
	r4 = D(r4, s0_1_1, 0x09F2051E, 0x0DEA0315, 0x1D03D010, 0xF3FEE1F7);
	r5 = D(r5, s0_1_1, 0xF9FBF108, 0x1F02F501, 0xEEEC0F18, 0x0C01040F);
	r6 = D(r6, s0_1_1, 0x0BE60B18, 0xDD12FA22, 0xDC0414FA, 0xF70201FA);
	r7 = D(r7, s0_1_1, 0x25FAF0FB, 0x0603F90C, 0x080AF5FC, 0xE91106FF);
	r0 = D(r0, s0_1_2, 0xF10AFDEC, 0x0600FFFF, 0xFD04F3FE, 0xED02D6FE);
	r1 = D(r1, s0_1_2, 0x00000506, 0x0BFDF0FA, 0x04FEF906, 0xFE061302);
	r2 = D(r2, s0_1_2, 0xF60B0700, 0xEE100802, 0x19F1EBFA, 0x38EE1E0A);
	r3 = D(r3, s0_1_2, 0x0906C805, 0x030CFCFB, 0xFEFFF207, 0x0212EA04);
	r4 = D(r4, s0_1_2, 0x0A09CCFF, 0xF9FF1709, 0xF8010902, 0x05F90DF8);
	r5 = D(r5, s0_1_2, 0xFDFFEBFB, 0xFF01FEFD, 0x10FCF502, 0xF710FB06);
	r6 = D(r6, s0_1_2, 0x01F7F8FB, 0xC80E0410, 0x0DF802FD, 0xFA02F6FD);
	r7 = D(r7, s0_1_2, 0xF3060403, 0xF902FF00, 0x0E07CD09, 0x0204F100);
	r0 = D(r0, s0_2_0, 0xFCF60309, 0xFA0704FC, 0xFB02FDFA, 0xF8FEF7E4);
	r1 = D(r1, s0_2_0, 0x09FDFFFC, 0xF7F506F1, 0x060B0B18, 0x040907FB);
	r2 = D(r2, s0_2_0, 0xFBFF1D03, 0x06F1020C, 0xF1020401, 0x27BFF52E);
	r3 = D(r3, s0_2_0, 0x06F20A11, 0xFF05060C, 0x06F9FFFF, 0x12F002F2);
	r4 = D(r4, s0_2_0, 0x01FF0508, 0x11DBFE21, 0x08F00912, 0xFBFA0608);
	r5 = D(r5, s0_2_0, 0xFE071101, 0xF8000402, 0xFA07F804, 0x04ED03FF);
	r6 = D(r6, s0_2_0, 0x03F30F11, 0xFFEDFE02, 0x0B0108FC, 0xFAFA0608);
	r7 = D(r7, s0_2_0, 0xFD01F8FD, 0x02FCFCFC, 0x06F5FB02, 0x01FA05F9);
	r0 = D(r0, s0_2_1, 0x0BF9FE00, 0xF6FF02FF, 0xF9F1F5FC, 0x05062C07);
	r1 = D(r1, s0_2_1, 0x070A0F08, 0xFCEE1D05, 0x14FE10FF, 0xFCF60404);
	r2 = D(r2, s0_2_1, 0x1408E60B, 0xFEFB0B10, 0x00FF0716, 0x02CA1822);
	r3 = D(r3, s0_2_1, 0x0905030A, 0x00F20715, 0xF8011509, 0x12F80A13);
	r4 = D(r4, s0_2_1, 0xFE171102, 0xFCFB071E, 0x03F51002, 0xEF0704F5);
	r5 = D(r5, s0_2_1, 0xFDFCF6FF, 0x10FFEDFD, 0x1403020D, 0xF7EB0709);
	r6 = D(r6, s0_2_1, 0xFF03F4FE, 0xFD010106, 0xE30803F7, 0x06F9FFFD);
	r7 = D(r7, s0_2_1, 0x14FDF902, 0x080108FA, 0xFE161207, 0x190003F2);
	r0 = D(r0, s0_2_2, 0xFCF8F106, 0x0E00DFF8, 0xF902FE05, 0xCF0105EB);
	r1 = D(r1, s0_2_2, 0xF107E202, 0x13DB0417, 0xFA0405FB, 0x00FAFE04);
	r2 = D(r2, s0_2_2, 0x0005F102, 0xEE05EC0D, 0x17FFF5F9, 0xDCF9D50F);
	r3 = D(r3, s0_2_2, 0xF80D05FE, 0xEFFEF709, 0xF60702FD, 0xE3FD21F9);
	r4 = D(r4, s0_2_2, 0xFD10F006, 0xFC04E511, 0xFE00EFFE, 0x03FDFFFD);
	r5 = D(r5, s0_2_2, 0x02F906FF, 0xFD03FFFF, 0x0A0BF7F2, 0x04F1FE0A);
	r6 = D(r6, s0_2_2, 0xFC00030C, 0xEC09FD07, 0x0AFD0600, 0xF9FC0904);
	r7 = D(r7, s0_2_2, 0xFEFCFC00, 0xFF01FB03, 0xFE00F705, 0xF1FB0CFA);
	r0 = D(r0, s1_0_0, 0xF5031E01, 0xFA03FDFE, 0x00FFFFFF, 0x10F71317);
	r1 = D(r1, s1_0_0, 0xFC0205F4, 0xE4F10E0C, 0xF8FA1610, 0x08040609);
	r2 = D(r2, s1_0_0, 0x04F9E3F7, 0xEFFA250F, 0xFFFAF4F2, 0xB9F6F0F0);
	r3 = D(r3, s1_0_0, 0xC805311F, 0x05040302, 0xFEF90005, 0xFB01F10B);
	r4 = D(r4, s1_0_0, 0x04F1FBEF, 0xE6D0FDA0, 0xFBF6FADC, 0xF8FE080A);
	r5 = D(r5, s1_0_0, 0xFC00FDF7, 0x07FCFB03, 0x0302FFEE, 0x0601050C);
	r6 = D(r6, s1_0_0, 0x00F9E606, 0x03080BFE, 0x02FA0103, 0x0906F805);
	r7 = D(r7, s1_0_0, 0x0203FF00, 0x01FFF6FC, 0xFAFA1602, 0xFF00FAFF);
	r0 = D(r0, s1_0_1, 0x04170809, 0xFC03FEFE, 0xFC020200, 0xCE1C08F7);
	r1 = D(r1, s1_0_1, 0xF802EDFE, 0xF3060C12, 0xEA0808F7, 0x09081C02);
	r2 = D(r2, s1_0_1, 0x06F00A01, 0xD503FD01, 0xF505120B, 0x03E90C14);
	r3 = D(r3, s1_0_1, 0x1ADA1908, 0xEEFEF604, 0xF901F6FE, 0x0110E4FE);
	r4 = D(r4, s1_0_1, 0xECFC01F9, 0xF3EBFB81, 0xF514F106, 0xFC080502);
	r5 = D(r5, s1_0_1, 0x01F30804, 0xF7070604, 0x13D80CF3, 0xFBF90403);
	r6 = D(r6, s1_0_1, 0xE7F1FA07, 0xF9080E0D, 0xF20B0202, 0x05F9FE05);
	r7 = D(r7, s1_0_1, 0x0BFC0302, 0xFCF0FE04, 0xD8001913, 0x02000D06);
	r0 = D(r0, s1_0_2, 0x0017FB0C, 0x0106FB00, 0x0200FE03, 0xE816160E);
	r1 = D(r1, s1_0_2, 0x03F5FE02, 0xFF1EFE00, 0xEFF90302, 0x07FCFB00);
	r2 = D(r2, s1_0_2, 0x01FF08FC, 0xF614140B, 0xFE000807, 0xF1FBE30F);
	r3 = D(r3, s1_0_2, 0x07E4340B, 0xF5060302, 0x04060203, 0xF4020E03);
	r4 = D(r4, s1_0_2, 0x05FD0BFE, 0xEAFB25FA, 0x010BFEF8, 0xFAFC1E01);
	r5 = D(r5, s1_0_2, 0x01F9F501, 0x02FDFC04, 0x06F01607, 0xF609FD03);
	r6 = D(r6, s1_0_2, 0x0518EA0D, 0xFFFB0411, 0xFC0904FC, 0xFF0EF905);
	r7 = D(r7, s1_0_2, 0x03F9FC00, 0xFC0E00FD, 0xF9101C13, 0xF8FD0900);
	r0 = D(r0, s1_1_0, 0xECED07F2, 0xFAFF0102, 0x020608FB, 0x0700041C);
	r1 = D(r1, s1_1_0, 0x020005F7, 0x08000CEF, 0x14071011, 0x03110019);
	r2 = D(r2, s1_1_0, 0xF7060485, 0xE10F180B, 0xFE06FFF8, 0xDDF80702);
	r3 = D(r3, s1_1_0, 0xF3F125FC, 0x00FF070C, 0x0708050E, 0xFC0CE51D);
	r4 = D(r4, s1_1_0, 0x0100F30A, 0xF018EDD1, 0x07F910A0, 0xE20D1916);
	r5 = D(r5, s1_1_0, 0xF5050CF4, 0xFF010CF7, 0x0704E8F5, 0x0400F316);
	r6 = D(r6, s1_1_0, 0xF21701D1, 0xFB051620, 0xFC03FF09, 0xFC0303EC);
	r7 = D(r7, s1_1_0, 0x02FDFFFD, 0x08F70EE8, 0xFCF21E0B, 0xF9F907F8);
	r0 = D(r0, s1_1_1, 0xF00B0AFF, 0xF7010008, 0xFD0F0408, 0xC4EC1AFA);
	r1 = D(r1, s1_1_1, 0xF61B1700, 0xE9EB0BD4, 0x11F915FB, 0xFEF90308);
	r2 = D(r2, s1_1_1, 0xFF24F7F1, 0x0BF510FA, 0xF9FC00D7, 0xD21789B1);
	r3 = D(r3, s1_1_1, 0xEC0723C4, 0xEA0809F4, 0xFC080701, 0xEDF7CEEB);
	r4 = D(r4, s1_1_1, 0xF3081AFC, 0x081808EE, 0x02FA0DFD, 0x09DE1E03);
	r5 = D(r5, s1_1_1, 0x010EFD05, 0x0B0503F7, 0x1211E5FC, 0xF11302DE);
	r6 = D(r6, s1_1_1, 0x00FB13ED, 0xF3FB07DB, 0x0BE702FC, 0xFE08F9D2);
	r7 = D(r7, s1_1_1, 0xFC12FA09, 0xFE1500FD, 0x03CE1681, 0xFAF70308);
	r0 = D(r0, s1_1_2, 0x07FBF107, 0xF806F900, 0x09030602, 0x06E7FA0D);
	r1 = D(r1, s1_1_2, 0x0114F2FA, 0x05FEDDFA, 0xFC090A12, 0x06FDFC04);
	r2 = D(r2, s1_1_2, 0xFA0221F9, 0xFB080404, 0x01F51C04, 0x02EF8100);
	r3 = D(r3, s1_1_2, 0x04E14FF6, 0xF407FFFA, 0x011507F7, 0xF9F8C011);
	r4 = D(r4, s1_1_2, 0xF60BD5FA, 0x080619EF, 0xFAFD0A04, 0xF9FB06FF);
	r5 = D(r5, s1_1_2, 0xFD10FD03, 0x01FA0700, 0xFD12EE0D, 0xFA0DD503);
	r6 = D(r6, s1_1_2, 0xFFFBFD00, 0xF7EF2817, 0x02EC03FB, 0x0412EA09);
	r7 = D(r7, s1_1_2, 0x000FFC04, 0x02FC0405, 0x07EA05F1, 0xFD0EFDFB);
	r0 = D(r0, s1_2_0, 0x00F30DF5, 0xFA020FFF, 0x09000214, 0xF20409F8);
	r1 = D(r1, s1_2_0, 0xF8080308, 0x03FEF9F9, 0xF2FD19F9, 0x030408FE);
	r2 = D(r2, s1_2_0, 0x01FAFBFD, 0xD7012701, 0x0804030B, 0xD4C915F3);
	r3 = D(r3, s1_2_0, 0x080304FE, 0xFD020709, 0x040D0810, 0xE8E825F0);
	r4 = D(r4, s1_2_0, 0x05FDFEFF, 0xF7ED1419, 0xDFF802FA, 0x07F9D605);
	r5 = D(r5, s1_2_0, 0xF8050011, 0x02FD0311, 0xFF0BEDF3, 0xFD000D0A);
	r6 = D(r6, s1_2_0, 0xF5EC1828, 0x01F40B0C, 0xF701F7FD, 0xFF050501);
	r7 = D(r7, s1_2_0, 0x07FE00FF, 0xEE0C03F4, 0x00FCF4FB, 0xF0000502);
	r0 = D(r0, s1_2_1, 0x00EC0DFA, 0xF1F508E7, 0xF8F604FD, 0x111F33DE);
	r1 = D(r1, s1_2_1, 0xF60409F2, 0x09FDF7DC, 0xA8FD0D05, 0x0A0B070B);
	r2 = D(r2, s1_2_1, 0x07FA01F3, 0xBCFE1116, 0xEDE71BE3, 0xE3DA11DB);
	r3 = D(r3, s1_2_1, 0xEFF3FAEB, 0xE2F909D3, 0xF50003F9, 0xEFED01DE);
	r4 = D(r4, s1_2_1, 0xF3090EFA, 0xD7F8FF0C, 0x0DF02402, 0x0D09FA0B);
	r5 = D(r5, s1_2_1, 0xF70003FA, 0x05F6ECFF, 0x0B021DD9, 0xF7FB12F9);
	r6 = D(r6, s1_2_1, 0xF804FFFD, 0xF8E512FE, 0xF6140802, 0xFEF907EE);
	r7 = D(r7, s1_2_1, 0x0CF3F901, 0xFC030203, 0xF6FEF91A, 0xF6F6FDEF);
	r0 = D(r0, s1_2_2, 0xFFF9FB01, 0xFE0009FD, 0x0303F9FE, 0xF6F5140B);
	r1 = D(r1, s1_2_2, 0xFF090100, 0xE0D914EA, 0x06F30F03, 0x0901FE01);
	r2 = D(r2, s1_2_2, 0x03EF190D, 0xF3F00E05, 0xF7F31F00, 0xE5D00FCF);
	r3 = D(r3, s1_2_2, 0x04F9FCFF, 0x03F3F605, 0x03000203, 0xF8FAFAFF);
	r4 = D(r4, s1_2_2, 0xFAFC17F4, 0xFED5EC05, 0x02F5EDFC, 0xFF03F800);
	r5 = D(r5, s1_2_2, 0xFEFDFAFE, 0x0301FB00, 0x000C0AFD, 0x03EA0500);
	r6 = D(r6, s1_2_2, 0x0003EA08, 0xF0FB09FC, 0x0005F5FB, 0x07FBF6FF);
	r7 = D(r7, s1_2_2, 0x02FDFE01, 0x0701FD08, 0xFE04EE04, 0xF6F0EF03);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0F0306FD, 0x05FC1204, 0xFC0107FA, 0x050229FD);
	r1 = D(r1, s0_0_0, 0x060D0BFB, 0x0202FD20, 0x00FB0D00, 0xFF0C08F8);
	r2 = D(r2, s0_0_0, 0x02F4FCFC, 0xFC012200, 0x00F704E7, 0x1018EFEB);
	r3 = D(r3, s0_0_0, 0xFAEE0B25, 0x040A16FB, 0x0D0F0AFA, 0xFB0907F0);
	r4 = D(r4, s0_0_0, 0x001106E7, 0x0A0810DC, 0xFC170B00, 0xE2050205);
	r5 = D(r5, s0_0_0, 0x010307FC, 0x04FD05F3, 0xFBE7E80E, 0x081E0C03);
	r6 = D(r6, s0_0_0, 0x1403FD01, 0xF70215FE, 0xFD0AF507, 0x0B0B10FD);
	r7 = D(r7, s0_0_0, 0x03FCFFFF, 0xFED30E05, 0x05FDEEF5, 0x02FE06F9);
	r0 = D(r0, s0_0_1, 0xF9FC0CF9, 0x0A070605, 0x0301FE00, 0x01F417F0);
	r1 = D(r1, s0_0_1, 0x02010309, 0x29F70AF9, 0xFE031106, 0x0CF80BFC);
	r2 = D(r2, s0_0_1, 0xFB0DF7F1, 0x0CEF0BF5, 0xF116050B, 0xBCF1F702);
	r3 = D(r3, s0_0_1, 0xBDFEE7DA, 0x09080AF3, 0xFA0508F3, 0x1114FBEA);
	r4 = D(r4, s0_0_1, 0xFD0E0017, 0xFB021709, 0xF4EC05D2, 0xF5F515F1);
	r5 = D(r5, s0_0_1, 0x0107FC03, 0xFFFA07F4, 0xF3240416, 0x0DEEF2EF);
	r6 = D(r6, s0_0_1, 0xEDC2FD00, 0x01F90801, 0xFF08FEF1, 0x02FC05F9);
	r7 = D(r7, s0_0_1, 0x03FA0406, 0x02E9FBFA, 0xF5FEFF0D, 0x0AF9FF00);
	r0 = D(r0, s0_0_2, 0xFEFA1003, 0x050110FE, 0x00FE04FD, 0xF00823F6);
	r1 = D(r1, s0_0_2, 0x00FC0800, 0x1BFA10FA, 0xF2060FFA, 0x0AFEF902);
	r2 = D(r2, s0_0_2, 0xE800F106, 0x0B0126FC, 0xE3FE0110, 0xF80BF404);
	r3 = D(r3, s0_0_2, 0xDD10200E, 0xF8080FFD, 0xFDFE14F5, 0x0309DF00);
	r4 = D(r4, s0_0_2, 0x00F609FD, 0x810F1128, 0x02FC0AFA, 0x0902FFFC);
	r5 = D(r5, s0_0_2, 0xFEFB04FD, 0x00FD0700, 0x17F0F50E, 0x0D130CF1);
	r6 = D(r6, s0_0_2, 0xEE0108F3, 0xF40B20FC, 0x07FBFF00, 0xFDFF0CF1);
	r7 = D(r7, s0_0_2, 0x05030000, 0x0604FDFF, 0x08F1FCE7, 0xFD060AFE);
	r0 = D(r0, s0_1_0, 0x0AFF1120, 0x04FF0802, 0x03FA0300, 0x12131BFF);
	r1 = D(r1, s0_1_0, 0x00FB0DE6, 0x060306EC, 0xF20012F5, 0x03F00717);
	r2 = D(r2, s0_1_0, 0xEB0003F2, 0xF504F003, 0x061104F7, 0xCDD8F326);
	r3 = D(r3, s0_1_0, 0x06FD0C1A, 0xF4FC04FD, 0xF8F2FD12, 0x0781FA1A);
	r4 = D(r4, s0_1_0, 0x0AF7FD14, 0xD1F50509, 0xF305EBF6, 0xF3F3F8FB);
	r5 = D(r5, s0_1_0, 0x010A00F4, 0xFE0A05ED, 0x04F40FF8, 0xFAEDFD0C);
	r6 = D(r6, s0_1_0, 0xFCF0050C, 0x01FB1306, 0xFD03EF00, 0xFAF80D0C);
	r7 = D(r7, s0_1_0, 0x02FD0BFD, 0xFBF008EB, 0x060C0604, 0xF9F605FB);
	r0 = D(r0, s0_1_1, 0xF7E802FD, 0xFFFE0909, 0x11020404, 0x2DFDF3DA);
	r1 = D(r1, s0_1_1, 0xF90109FE, 0x07EB0117, 0xE2FB14F4, 0xFF0CFCFF);
	r2 = D(r2, s0_1_1, 0xFDFA0B04, 0xFC1405F9, 0xCE1201F6, 0x10EFFE11);
	r3 = D(r3, s0_1_1, 0x02C30CED, 0xF5F4FB13, 0x0BFF1009, 0xE9810B07);
	r4 = D(r4, s0_1_1, 0x00F80FE3, 0xE50EF5DC, 0xD3FFFDD9, 0x33F40410);
	r5 = D(r5, s0_1_1, 0xE7FC0407, 0xFEFFFB08, 0xF1F4FBF5, 0x0DE41011);
	r6 = D(r6, s0_1_1, 0x03AC0805, 0x09F502FC, 0x0FCFE539, 0xFDDA0208);
	r7 = D(r7, s0_1_1, 0x00200ED7, 0xE4ED06E7, 0x0DDC1A14, 0x04FE0502);
	r0 = D(r0, s0_1_2, 0xEE1609EA, 0xFEFD01F8, 0x020009FD, 0x331010F0);
	r1 = D(r1, s0_1_2, 0x100C09EE, 0xFB0E0505, 0x0FEC13FE, 0x00FAFBFD);
	r2 = D(r2, s0_1_2, 0xF7160108, 0xEB0F18F4, 0xE3FB0201, 0x81010EE4);
	r3 = D(r3, s0_1_2, 0xC7111103, 0x01FE04F9, 0xFD0C0002, 0xD9D202E2);
	r4 = D(r4, s0_1_2, 0x9F0D14F1, 0xC8000702, 0xE819000A, 0x0B0E1007);
	r5 = D(r5, s0_1_2, 0x01F20A07, 0x03060004, 0x06E51002, 0xE7F5FCF7);
	r6 = D(r6, s0_1_2, 0x180401FC, 0xEE030307, 0x0C1503EA, 0xF8EE0606);
	r7 = D(r7, s0_1_2, 0xFFF3FE0F, 0xF9FD03EE, 0xCFE10B06, 0x06F6FCF9);
	r0 = D(r0, s0_2_0, 0xFEF60703, 0x06050DF9, 0x09040801, 0x07042E00);
	r1 = D(r1, s0_2_0, 0x02F5060D, 0x080AFF01, 0x04FF1F0D, 0xF9F806F9);
	r2 = D(r2, s0_2_0, 0x110C010B, 0x01001E06, 0x1411FA0D, 0x18EA00F6);
	r3 = D(r3, s0_2_0, 0x10FE0B0B, 0xFFFA0C02, 0xF9F60701, 0xF4F00C12);
	r4 = D(r4, s0_2_0, 0x01F7EFF9, 0x14F010F3, 0x04EF10DF, 0xFB1905F6);
	r5 = D(r5, s0_2_0, 0xFC020806, 0x00FD07FA, 0x0E0BFCF6, 0x030805F9);
	r6 = D(r6, s0_2_0, 0x0CFC0703, 0xF8FE17FD, 0x0A00ED00, 0x04F70F0B);
	r7 = D(r7, s0_2_0, 0xFB0705FD, 0x07F308EB, 0x0CFA01F4, 0xFD0808F6);
	r0 = D(r0, s0_2_1, 0xC5F70D0D, 0xFC00FD19, 0xFBFB040A, 0x0C071304);
	r1 = D(r1, s0_2_1, 0xEDFB0513, 0xE1070800, 0x02FF1410, 0x12100601);
	r2 = D(r2, s0_2_1, 0xD9EE0604, 0x0FFB13FC, 0xC4E20208, 0x040616F2);
	r3 = D(r3, s0_2_1, 0xF9F9FB03, 0xF7E70D0D, 0xFAF80309, 0xE6E80AFE);
	r4 = D(r4, s0_2_1, 0x0B0C0309, 0x0B1E1909, 0xFF030908, 0x24050403);
	r5 = D(r5, s0_2_1, 0xF3FF08FA, 0xF30002F0, 0xF1EB0DFF, 0x08DF0C0C);
	r6 = D(r6, s0_2_1, 0xEBFAFC05, 0x160D17F3, 0x040FF5F4, 0x0BD7080C);
	r7 = D(r7, s0_2_1, 0xECFD0103, 0x0113020C, 0x0506F8F0, 0xDBFDFCFB);
	r0 = D(r0, s0_2_2, 0x10E40C0D, 0xEEF504EE, 0x13010508, 0x050940BF);
	r1 = D(r1, s0_2_2, 0xDBE40917, 0xDB03020C, 0xFA0A18F6, 0xFF010003);
	r2 = D(r2, s0_2_2, 0xEF02F6F4, 0xE6F80CF0, 0xE30007E1, 0xC6EB01F2);
	r3 = D(r3, s0_2_2, 0xFE0604F5, 0xF9EA04F8, 0xFFF2090C, 0xE800F503);
	r4 = D(r4, s0_2_2, 0xB7E8061C, 0xEFE30F13, 0x15F40408, 0x09000702);
	r5 = D(r5, s0_2_2, 0x110904FD, 0xF60004F3, 0xF315FCF2, 0x0EF5010B);
	r6 = D(r6, s0_2_2, 0xFC0DF5F3, 0xE8E422EA, 0xF70AF1E3, 0x0AFF0202);
	r7 = D(r7, s0_2_2, 0x07F90612, 0x00070500, 0x06FEF8F8, 0xEE0D0401);
	r0 = D(r0, s1_0_0, 0xE6F6F9F7, 0x03FE08FB, 0x04FFF900, 0xF40604FE);
	r1 = D(r1, s1_0_0, 0xFD0203F4, 0x06051A00, 0xE9F9FBFE, 0xFF0BFC02);
	r2 = D(r2, s1_0_0, 0x05F3F008, 0x12150312, 0xECEEED03, 0x2405F1F8);
	r3 = D(r3, s1_0_0, 0x07F6F717, 0x06FDF7F9, 0xFEFCF9FD, 0x0F0DFBF8);
	r4 = D(r4, s1_0_0, 0xF807F6F6, 0x131DB80D, 0x0709FA11, 0x13180A07);
	r5 = D(r5, s1_0_0, 0xFE00FBFF, 0xF3F70905, 0xEBDEE7ED, 0x000A0BFB);
	r6 = D(r6, s1_0_0, 0x18F71C0E, 0xFB020AFA, 0x060C0100, 0x0CF902FA);
	r7 = D(r7, s1_0_0, 0xFAFAFDFC, 0x06FBFD01, 0x11310905, 0xFAFA03FD);
	r0 = D(r0, s1_0_1, 0xFD19F8F7, 0x01F908F8, 0x01FE02FA, 0xF2EA1717);
	r1 = D(r1, s1_0_1, 0x0CFF06FF, 0x20F50E06, 0x0601FE08, 0xE2FBEE00);
	r2 = D(r2, s1_0_1, 0x0A0C1308, 0xF7EF0908, 0x09230B0E, 0x30371F00);
	r3 = D(r3, s1_0_1, 0x1623F8C6, 0xFC040904, 0x050C02FF, 0x0AFEFDFA);
	r4 = D(r4, s1_0_1, 0xEF06F80C, 0xBA24C5F5, 0xFD0301FB, 0xE5EBF307);
	r5 = D(r5, s1_0_1, 0xFE020311, 0x0A0D0A0D, 0x2045A5FD, 0xEAE001F6);
	r6 = D(r6, s1_0_1, 0xA7EB0E0D, 0xF3F209EA, 0x100312E9, 0xECF805FD);
	r7 = D(r7, s1_0_1, 0xFEFCF60E, 0xF700FF0F, 0x290BF9F8, 0x060C00FC);
	r0 = D(r0, s1_0_2, 0x1008F208, 0xFA03FCFE, 0xFDFDF602, 0xD7F9F305);
	r1 = D(r1, s1_0_2, 0xFCF4F9FE, 0xF80008F2, 0x00EF0101, 0xF5FB0107);
	r2 = D(r2, s1_0_2, 0x16120701, 0x1332F1F3, 0xE301FCF8, 0x22ECFBE3);
	r3 = D(r3, s1_0_2, 0xF2F304DC, 0x08F50205, 0x0602FE06, 0x1503F1FE);
	r4 = D(r4, s1_0_2, 0xE3D803FF, 0xFF19F712, 0x1108F2FE, 0xF41004FF);
	r5 = D(r5, s1_0_2, 0xECF00805, 0xFD01F9FB, 0xDCEF0CE9, 0x1423F9F8);
	r6 = D(r6, s1_0_2, 0xD8F106F6, 0xFE0E00F0, 0xF305F60A, 0xF1EC010A);
	r7 = D(r7, s1_0_2, 0xF2FA08FF, 0x00F8040D, 0x14E5F6E6, 0xFBFE05FE);
	r0 = D(r0, s1_1_0, 0xF6F4FE00, 0xFCFEFFF4, 0x05040405, 0x0BFCF30C);
	r1 = D(r1, s1_1_0, 0x06F4FFFC, 0xE7000604, 0x00021002, 0xFC020100);
	r2 = D(r2, s1_1_0, 0xF8F52603, 0x13FEF210, 0xE7070909, 0xE21900FF);
	r3 = D(r3, s1_1_0, 0x12DD1D01, 0x00FF08F4, 0x0806F502, 0xD8E8F9F5);
	r4 = D(r4, s1_1_0, 0x0B060503, 0x0E18E3F1, 0x0401F114, 0x24340517);
	r5 = D(r5, s1_1_0, 0x0C0FFBFF, 0x0206FC00, 0x090E17EF, 0x0009FFFB);
	r6 = D(r6, s1_1_0, 0xE5ED02E1, 0x06F8F8F4, 0x0904FDF8, 0x06EF00ED);
	r7 = D(r7, s1_1_0, 0xF9FA0304, 0xFB0EF50E, 0x030EF914, 0x01F30208);
	r0 = D(r0, s1_1_1, 0x040500F1, 0x15F402F4, 0xFFFBF9E3, 0xE2010F14);
	r1 = D(r1, s1_1_1, 0xE4F5F109, 0xF8FDE60D, 0x060F1307, 0xEEEE1100);
	r2 = D(r2, s1_1_1, 0x28140DE8, 0xC0DD06F8, 0x200DE5F3, 0xD5069F11);
	r3 = D(r3, s1_1_1, 0x2308F5FB, 0x0B0FFEDE, 0xF3010BEB, 0x97F4BBFA);
	r4 = D(r4, s1_1_1, 0xD8BF0D24, 0xD00902E0, 0xC5F4DC11, 0xDB1EDDF3);
	r5 = D(r5, s1_1_1, 0x08F40212, 0x0600FD10, 0x171BC00C, 0xEB0804E6);
	r6 = D(r6, s1_1_1, 0x130CC500, 0xE6F70AEF, 0xF1F70D20, 0xF9F5F7FA);
	r7 = D(r7, s1_1_1, 0x11FB01F0, 0x010DEF2C, 0xC4FC1605, 0x0EFC061A);
	r0 = D(r0, s1_1_2, 0x03F8FEF6, 0xFDF9FBFC, 0x0BFB05FF, 0x0514D8E5);
	r1 = D(r1, s1_1_2, 0xECEB0802, 0xA1F0EDE9, 0xF7130DF6, 0x08FE0402);
	r2 = D(r2, s1_1_2, 0x050702FA, 0x0C08FDE6, 0xEFEBFEF7, 0x89FFEBDE);
	r3 = D(r3, s1_1_2, 0xBEFA0AFC, 0x0D12FBF8, 0xF6F6060A, 0xE909EE06);
	r4 = D(r4, s1_1_2, 0x07FD1CE5, 0x0FFD0308, 0xFC0DF5FF, 0xFA11FCFE);
	r5 = D(r5, s1_1_2, 0x0405FF06, 0x0507FF05, 0x0B10FF12, 0xF506F6F4);
	r6 = D(r6, s1_1_2, 0xD3060CFA, 0x050EF0D7, 0xF7F70F0A, 0xEAF602FC);
	r7 = D(r7, s1_1_2, 0x01FBFBFF, 0xF107FB15, 0xE30AE401, 0xEF07040D);
	r0 = D(r0, s1_2_0, 0xF7030603, 0xF3000202, 0x01050106, 0xFC00FE16);
	r1 = D(r1, s1_2_0, 0x02FDFCF0, 0xFAF90CFF, 0x09F6F906, 0x0E0A06FD);
	r2 = D(r2, s1_2_0, 0xCFDDFEFB, 0x191BFB08, 0xF2F6FEF8, 0x2B29EC14);
	r3 = D(r3, s1_2_0, 0xEEEE0300, 0x110C00FF, 0x0003FAF9, 0x031B0B16);
	r4 = D(r4, s1_2_0, 0xF3F30200, 0x0811E7F3, 0x10150605, 0x121D000D);
	r5 = D(r5, s1_2_0, 0xEEFDFCF3, 0xFAFA00F9, 0xE8EB10FE, 0x0F01FE04);
	r6 = D(r6, s1_2_0, 0x03DFF506, 0x0A040203, 0x1007F603, 0x04E903FD);
	r7 = D(r7, s1_2_0, 0xFEFB0400, 0x020AFB06, 0x0409000A, 0x0A0FFA11);
	r0 = D(r0, s1_2_1, 0xFE071308, 0x12FCF1FA, 0x09FF0B08, 0x01D9E9FF);
	r1 = D(r1, s1_2_1, 0xF4E50B0E, 0x09E601F4, 0x0003F9F8, 0xE905F309);
	r2 = D(r2, s1_2_1, 0x182AFA00, 0xCD0008F7, 0x230D0AFF, 0x29FCFBF7);
	r3 = D(r3, s1_2_1, 0x1930010C, 0x0D03F60B, 0xFAFB07FE, 0x2610100C);
	r4 = D(r4, s1_2_1, 0xF7F704F0, 0xEFFC190D, 0xFCE70601, 0xF0E2FAF8);
	r5 = D(r5, s1_2_1, 0x04FD04FE, 0x00010506, 0x1319E6F3, 0xF7FC0D03);
	r6 = D(r6, s1_2_1, 0xF409F807, 0xEC090BF6, 0xF9FCFBE6, 0x00E3EDFF);
	r7 = D(r7, s1_2_1, 0x0EFF0018, 0xE90103EA, 0xF7000105, 0xF7FCFDF8);
	r0 = D(r0, s1_2_2, 0xFEFEF304, 0xE40C04FE, 0xFAF6FC01, 0x23B3FDED);
	r1 = D(r1, s1_2_2, 0xE301F90B, 0x1305F910, 0xFA030FF6, 0x09FCF5FB);
	r2 = D(r2, s1_2_2, 0x1A01EDFB, 0xFD110C07, 0xE3F012F8, 0xFA3C0102);
	r3 = D(r3, s1_2_2, 0xB7F3F60F, 0xF908F908, 0x0301FC02, 0xF9EB0FF4);
	r4 = D(r4, s1_2_2, 0x050FF514, 0x290FED0D, 0xEC1FF2FE, 0xFD05050C);
	r5 = D(r5, s1_2_2, 0xD7EB010B, 0x10FAFE02, 0x0DE10BFB, 0xF005EB06);
	r6 = D(r6, s1_2_2, 0x09E50DFA, 0x0A1EE7F0, 0x08F2FF06, 0xE7EEF60C);
	r7 = D(r7, s1_2_2, 0x03FCFDFF, 0xFB17FFF9, 0x04F307F9, 0xF7FAFBF8);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(1.102e-02, -4.164e-03, -1.456e-02, 1.324e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-2.734e-02, -7.611e-02, -2.309e-02, 2.891e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-5.457e-02, 8.914e-03, -2.229e-02, 1.074e-03);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(2.411e-03, -2.738e-03, 7.782e-04, -3.237e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-5.825e-02, 1.537e-02, -3.257e-03, 2.494e-04);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.330e-02, -6.726e-03, -5.763e-03, -1.334e-03);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-3.674e-02, -8.348e-02, -1.363e-02, -6.209e-03);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(2.612e-03, 2.452e-03, -1.580e-02, -1.372e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-BILINEAR-MPV-NVL-conv8
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv7
//!BIND LUMA
//!SAVE conv8
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv7_pt;
			r = conv7_gather(p, 0);
			g = conv7_gather(p, 1);
			b = conv7_gather(p, 2);
			a = conv7_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv7_pt;
			r = conv7_gather(p, 0);
			g = conv7_gather(p, 1);
			b = conv7_gather(p, 2);
			a = conv7_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF90808EB, 0x07FC0400, 0x060DF212, 0xFFFDFEF6);
	r1 = D(r1, s0_0_0, 0x0707F005, 0xFF000502, 0x08F3F4FE, 0x06FA02FF);
	r2 = D(r2, s0_0_0, 0x1301FEFF, 0xDBE4FA02, 0x10F80BFD, 0xF70006FD);
	r3 = D(r3, s0_0_0, 0x0A0D1402, 0x04FE0C00, 0x0000FC01, 0x040206FB);
	r4 = D(r4, s0_0_0, 0x0CFF03FB, 0x08040303, 0xFEFB0401, 0x04030900);
	r5 = D(r5, s0_0_0, 0xFAF8F8FE, 0x11FE13FD, 0x00010000, 0x04FD06FF);
	r6 = D(r6, s0_0_0, 0xFFFF0404, 0x02FC0200, 0x1701050B, 0x0500FE07);
	r7 = D(r7, s0_0_0, 0x0FF313FE, 0x0BF30409, 0x010003FC, 0x0CEE0DFB);
	r0 = D(r0, s0_0_1, 0x01E10AFE, 0x02F6FD03, 0xAED70D08, 0xFAED1206);
	r1 = D(r1, s0_0_1, 0xE5EBE9ED, 0xFD0114FE, 0x01EA20F8, 0x02031104);
	r2 = D(r2, s0_0_1, 0xFEFD0DFD, 0x0AEFFC0E, 0x22DE0CFE, 0x05FA0603);
	r3 = D(r3, s0_0_1, 0xFF03260B, 0xFDFE18FC, 0x04EC0301, 0xF8020DFA);
	r4 = D(r4, s0_0_1, 0x08F50FFD, 0xF7060000, 0x03F0F70B, 0x03F709FC);
	r5 = D(r5, s0_0_1, 0x0BF8FA04, 0x0106F7FD, 0x0502F7FE, 0x03FAFB00);
	r6 = D(r6, s0_0_1, 0xFF020404, 0x01F4F905, 0xE1FB01FA, 0xFC03F902);
	r7 = D(r7, s0_0_1, 0x05F7EC02, 0xFDEB0B06, 0xEFF921FC, 0x03F7F902);
	r0 = D(r0, s0_0_2, 0x00E2FA08, 0x020300F3, 0x12E21106, 0x0BEA07EC);
	r1 = D(r1, s0_0_2, 0xF600FD0E, 0x0000FAFC, 0x01EC01FD, 0x050902FE);
	r2 = D(r2, s0_0_2, 0xF4F90605, 0x070003EF, 0x0F1A09F6, 0x03FAFC02);
	r3 = D(r3, s0_0_2, 0xFE0407F7, 0x030505F6, 0x0FFFFAEC, 0x0002FFF9);
	r4 = D(r4, s0_0_2, 0xF704FF0B, 0x040101FC, 0x08FF06FD, 0x01F8F304);
	r5 = D(r5, s0_0_2, 0x05F70204, 0x0CD4EF08, 0x04040101, 0x03040CF7);
	r6 = D(r6, s0_0_2, 0x0102FB0A, 0x07000703, 0x0BFDF207, 0xFCFFF205);
	r7 = D(r7, s0_0_2, 0x060F04FD, 0x09FEFE03, 0xFE070CF2, 0x0005FC01);
	r0 = D(r0, s0_1_0, 0xFEFF0CFE, 0x06000900, 0x1303EB11, 0xFEF8EE03);
	r1 = D(r1, s0_1_0, 0x0AF4FCFB, 0xFD030002, 0x11080004, 0x0D02060A);
	r2 = D(r2, s0_1_0, 0x0904FFFF, 0x05FD10E4, 0x09FE0802, 0x0400FA04);
	r3 = D(r3, s0_1_0, 0xF5FB08F7, 0x110900FD, 0xFF0505FA, 0xFC08FFFF);
	r4 = D(r4, s0_1_0, 0x07FE0000, 0x0CF9FA08, 0xF609FCFC, 0x0A02FAF7);
	r5 = D(r5, s0_1_0, 0x040200FE, 0x16FF02FD, 0x13FFFFFD, 0x01010302);
	r6 = D(r6, s0_1_0, 0x0200FEFE, 0x06031003, 0x09FEFA06, 0x0501FEFE);
	r7 = D(r7, s0_1_0, 0xD6FDF7FD, 0x0901F40E, 0x050000FF, 0xE8F6160A);
	r0 = D(r0, s0_1_1, 0x150610FD, 0x01FDF7FD, 0x1DEF010D, 0x07EA17E4);
	r1 = D(r1, s0_1_1, 0x09050A08, 0x0C06130C, 0x0C0EF907, 0xF022E610);
	r2 = D(r2, s0_1_1, 0x1A06EE0D, 0x05FDFB05, 0x210300FA, 0x0BFFFEFB);
	r3 = D(r3, s0_1_1, 0x0402F503, 0x1413FBF4, 0x0D00EBFE, 0x000D0C11);
	r4 = D(r4, s0_1_1, 0x090AFF07, 0x03F30604, 0x05F90111, 0xF7F224FF);
	r5 = D(r5, s0_1_1, 0x00FB01F7, 0x290E04DF, 0x21EF0AFF, 0x0B0001FE);
	r6 = D(r6, s0_1_1, 0x210900FB, 0xFF012406, 0x05EEFC10, 0x09F01301);
	r7 = D(r7, s0_1_1, 0x08EA2AFF, 0x06E70EF8, 0x1607FEF3, 0x05F602EC);
	r0 = D(r0, s0_1_2, 0x0AFF03E0, 0x02010303, 0x08E4F803, 0x03FC09F0);
	r1 = D(r1, s0_1_2, 0x09F90309, 0x04F8080B, 0x0605090F, 0x110CF911);
	r2 = D(r2, s0_1_2, 0x04F20907, 0x0106FA06, 0x0C0FFAE4, 0x04F9FEFE);
	r3 = D(r3, s0_1_2, 0xFD070004, 0x02FD0107, 0x07F906F1, 0x02FC0608);
	r4 = D(r4, s0_1_2, 0xFC17FDEC, 0xFAFE0209, 0x03FDFEF7, 0x01FCF9F9);
	r5 = D(r5, s0_1_2, 0x0603F904, 0x07F4FE11, 0x060408FF, 0xF915F105);
	r6 = D(r6, s0_1_2, 0xFF08F9FE, 0xFFF800FA, 0x02010D05, 0x09FD0A04);
	r7 = D(r7, s0_1_2, 0xFDF1F5F8, 0xFFF5FFFB, 0x000003FD, 0x0200FAF9);
	r0 = D(r0, s0_2_0, 0x0403F60C, 0xFEFDFCFC, 0x0907FBFD, 0xFC0102FA);
	r1 = D(r1, s0_2_0, 0x15FE06FB, 0x0A0200FF, 0x0AFE02FB, 0x13FB05FF);
	r2 = D(r2, s0_2_0, 0x0300FB03, 0x0C000106, 0x11FE0203, 0x02FAFDFF);
	r3 = D(r3, s0_2_0, 0x02FFFD01, 0x04000201, 0x130309FE, 0x0801FF00);
	r4 = D(r4, s0_2_0, 0x040300FE, 0x0E02F800, 0x0CFF07FA, 0x0CFF0001);
	r5 = D(r5, s0_2_0, 0x07FE0104, 0x15FBFDFD, 0x0E01FBFF, 0x09FF01FE);
	r6 = D(r6, s0_2_0, 0x10FF0100, 0x0D010506, 0x0A0700FA, 0x0801FC01);
	r7 = D(r7, s0_2_0, 0x070905FC, 0x0B0500F5, 0x0000FE01, 0x090703F3);
	r0 = D(r0, s0_2_1, 0xFFFEFF00, 0x010404FC, 0x02010801, 0x0BE4FEF1);
	r1 = D(r1, s0_2_1, 0x0F020503, 0x0F01FFFF, 0x0E0505FF, 0x130607FC);
	r2 = D(r2, s0_2_1, 0x040205FA, 0x0905FCFA, 0x15F9FDF7, 0x04FD0006);
	r3 = D(r3, s0_2_1, 0xFCFBFD04, 0x02FB0003, 0x060D05F0, 0x05FB05F9);
	r4 = D(r4, s0_2_1, 0x07FFFD04, 0x11F4FC08, 0x0CFEFE07, 0x050EFDF2);
	r5 = D(r5, s0_2_1, 0x09020205, 0x0DF90C05, 0x02000200, 0x080301FC);
	r6 = D(r6, s0_2_1, 0x0B040100, 0x0305FCFD, 0x0D06FBFC, 0x0D04FE02);
	r7 = D(r7, s0_2_1, 0xF60BFFF9, 0x040AFC05, 0x03F8FD05, 0x06000202);
	r0 = D(r0, s0_2_2, 0x030D04F7, 0x030102FD, 0x020AFE05, 0x060B0BFF);
	r1 = D(r1, s0_2_2, 0x0411FAFD, 0x0CFF00FF, 0x070A02F2, 0x0B010EF6);
	r2 = D(r2, s0_2_2, 0x1000FA09, 0x02000001, 0x0B0C0CF2, 0x0302FF09);
	r3 = D(r3, s0_2_2, 0x06FE000E, 0x04010205, 0x07FAFC0C, 0x0400FFFA);
	r4 = D(r4, s0_2_2, 0x010805FA, 0x08F9FE05, 0x05030200, 0x02F50602);
	r5 = D(r5, s0_2_2, 0xFF04FEFE, 0x08FD010D, 0x0A09FB01, 0x010805FB);
	r6 = D(r6, s0_2_2, 0x040601FC, 0x04FB0B08, 0x09010803, 0x06FE0002);
	r7 = D(r7, s0_2_2, 0x05F50501, 0x0305FE02, 0x06FD0005, 0x01FDFE02);
	r0 = D(r0, s1_0_0, 0x040FFDEF, 0x00FBFEFC, 0xFFF50617, 0xFF13182A);
	r1 = D(r1, s1_0_0, 0xFF1102E8, 0x0001F500, 0xFE05F6FB, 0x01F800FC);
	r2 = D(r2, s1_0_0, 0x0407F5F1, 0xF7C3F413, 0xFAF60305, 0x02FF0202);
	r3 = D(r3, s1_0_0, 0xF80DFCF3, 0x0203080D, 0xFE0C0FFC, 0x0606F5EC);
	r4 = D(r4, s1_0_0, 0xFFFFECF5, 0xFD01F907, 0xF9FAFCFE, 0xFDFBFB09);
	r5 = D(r5, s1_0_0, 0x0711F803, 0x040001FB, 0xFD08F7FC, 0xFFF9FF02);
	r6 = D(r6, s1_0_0, 0x03070A0F, 0x01020703, 0x040BF3D7, 0xFE021603);
	r7 = D(r7, s1_0_0, 0x06FB040A, 0xF80DFB1B, 0xF9030E09, 0x070DFF15);
	r0 = D(r0, s1_0_1, 0xFD05FBF4, 0xFF0A0006, 0xF80BF211, 0xEC140009);
	r1 = D(r1, s1_0_1, 0x05170315, 0x00030105, 0xFC191022, 0xFE10F708);
	r2 = D(r2, s1_0_1, 0xF400F50F, 0xD9EB040A, 0xFA0BE0DE, 0xFD0806FD);
	r3 = D(r3, s1_0_1, 0xFF08F9ED, 0x02FDE404, 0xF71FF8E5, 0x050D080D);
	r4 = D(r4, s1_0_1, 0xF904F8FA, 0xFF0101F5, 0xFA0A0603, 0x01090402);
	r5 = D(r5, s1_0_1, 0xE9DF0400, 0xF7F3FC13, 0x01190712, 0xFF06F8F6);
	r6 = D(r6, s1_0_1, 0xFED90204, 0xF9FEFC08, 0xE900F52D, 0xFCF6F510);
	r7 = D(r7, s1_0_1, 0xF9FDFF07, 0x00FC03F3, 0x0003E607, 0xFAFA04F5);
	r0 = D(r0, s1_0_2, 0x0000EEEE, 0x01FF0205, 0xF4FDFB03, 0xEC050F0F);
	r1 = D(r1, s1_0_2, 0xF40708F5, 0x00040107, 0xF415FE0C, 0xFB0503FE);
	r2 = D(r2, s1_0_2, 0xEA09EF04, 0xF6060503, 0xD8F9FB04, 0xFB020100);
	r3 = D(r3, s1_0_2, 0xFD040402, 0xFB01030C, 0xFEFF0408, 0x01F9FF02);
	r4 = D(r4, s1_0_2, 0xF0F8FDF0, 0xFD010309, 0x00FF02FE, 0xFFFEFEFB);
	r5 = D(r5, s1_0_2, 0xF008FE04, 0xE815FD0F, 0x0006FE06, 0xFF0D01FD);
	r6 = D(r6, s1_0_2, 0xFEF8FB00, 0xFE0000FA, 0xFC05FAFE, 0xFDF9FEF8);
	r7 = D(r7, s1_0_2, 0x0206FFFA, 0xFB01FEFD, 0xFB0A050E, 0x02FC00FF);
	r0 = D(r0, s1_1_0, 0xDCF8D8E7, 0xFA0AE404, 0xFE0ED8E4, 0xFFEDEC12);
	r1 = D(r1, s1_1_0, 0xEE020C27, 0xFFFF1202, 0x020304FC, 0xFE02D5F1);
	r2 = D(r2, s1_1_0, 0xFCF30F01, 0xE6081602, 0x00EDFF03, 0xF9FFF307);
	r3 = D(r3, s1_1_0, 0xF204EBEF, 0xF40DF7F1, 0x0501FBFB, 0xF4FC1802);
	r4 = D(r4, s1_1_0, 0xFF03FE0A, 0xFC0C09F3, 0xE407E302, 0xFAF7FB04);
	r5 = D(r5, s1_1_0, 0xE60AFCFA, 0x0902F00B, 0x011E0604, 0x03010202);
	r6 = D(r6, s1_1_0, 0xFCF2F8FA, 0xFFFFFB12, 0x00F80615, 0x040B04F6);
	r7 = D(r7, s1_1_0, 0xDF08F110, 0x0416EEFF, 0x0209F60B, 0xC9EEEB22);
	r0 = D(r0, s1_1_1, 0xE7F8C6DD, 0xF7F2F803, 0xE5C0DFAC, 0xE5E209F3);
	r1 = D(r1, s1_1_1, 0xC89CAAF5, 0x000EFAF2, 0xFE132115, 0x052AFD23);
	r2 = D(r2, s1_1_1, 0x0F140312, 0xF314FFF6, 0xFD171E19, 0xF2FDE9FC);
	r3 = D(r3, s1_1_1, 0xF7FE0C00, 0xEDF212FA, 0xD6CEC507, 0xF1B70817);
	r4 = D(r4, s1_1_1, 0xF410F2DC, 0xF2DC0514, 0xF40F02FA, 0xF104ECF4);
	r5 = D(r5, s1_1_1, 0xF30F0B0A, 0xEFDCE4FF, 0x0020F3E4, 0x08130800);
	r6 = D(r6, s1_1_1, 0xF701100B, 0x0B09DBCF, 0xE412FDFF, 0xFD0FEAF8);
	r7 = D(r7, s1_1_1, 0xF0F6EB04, 0xEFFC12F5, 0xF20902E1, 0xFC0F1219);
	r0 = D(r0, s1_1_2, 0xF210BDF7, 0xFC00FFFE, 0xEFF9F3DB, 0xFB02F5FA);
	r1 = D(r1, s1_1_2, 0xE902F6E6, 0xFE08F903, 0xF10E01F0, 0xFD01030A);
	r2 = D(r2, s1_1_2, 0xD9F80129, 0x03F90408, 0xCB04F903, 0xFB040206);
	r3 = D(r3, s1_1_2, 0xF5FA0D0D, 0xF8090D08, 0xF704FF0A, 0xFA0201F8);
	r4 = D(r4, s1_1_2, 0xEEF5FA08, 0xFCF4FF01, 0x00030503, 0x03050712);
	r5 = D(r5, s1_1_2, 0x02FB06FC, 0xDE17F7E2, 0xFA1DFB16, 0xF8F404FF);
	r6 = D(r6, s1_1_2, 0x01F2F8FE, 0x010202FD, 0xDEFBF91B, 0xFE04FE0E);
	r7 = D(r7, s1_1_2, 0x01030B06, 0xFC0A0E14, 0xEA070F21, 0x04040301);
	r0 = D(r0, s1_2_0, 0x0A07F506, 0x02030504, 0xFCF908FF, 0xF1FC0600);
	r1 = D(r1, s1_2_0, 0xF7130E00, 0xFFFCF9FE, 0xFEFE0AFD, 0xFC020203);
	r2 = D(r2, s1_2_0, 0x03020001, 0x030608FE, 0x00010205, 0xFF060B01);
	r3 = D(r3, s1_2_0, 0x0908FB06, 0x01FD0CFF, 0x020AF007, 0x00060F04);
	r4 = D(r4, s1_2_0, 0xFF06FB00, 0x07031601, 0xF50602FD, 0x03F9E9FE);
	r5 = D(r5, s1_2_0, 0xFD0A0403, 0x04F5F6FF, 0xFD06FFFB, 0x000200FF);
	r6 = D(r6, s1_2_0, 0x000002FD, 0xF707ECFA, 0xFEF90100, 0x0000FDFF);
	r7 = D(r7, s1_2_0, 0xFFFEE4F9, 0xFAF8F4FB, 0x0103FB02, 0xF40EF2FC);
	r0 = D(r0, s1_2_1, 0xFDFBFDED, 0xFB02F401, 0x0E03EA0C, 0xF01010FF);
	r1 = D(r1, s1_2_1, 0xF91103EA, 0x01020005, 0xF8FEEEFC, 0xF2F2C90A);
	r2 = D(r2, s1_2_1, 0xF8F8F8F5, 0xFFFA0E06, 0xF910FA06, 0xFA05FC03);
	r3 = D(r3, s1_2_1, 0x03FF17F7, 0xFEFF0F01, 0xE8040301, 0xFA0BE9F1);
	r4 = D(r4, s1_2_1, 0xFF10FF01, 0x0816F1F4, 0xFF04F3FF, 0xF408010D);
	r5 = D(r5, s1_2_1, 0x02FD0D02, 0xFFFC0800, 0x021C0E00, 0x000AF3FA);
	r6 = D(r6, s1_2_1, 0xFCF5FDF7, 0xF0040506, 0x040803FD, 0x070F0305);
	r7 = D(r7, s1_2_1, 0xE80A0B1A, 0x08F41315, 0x020214FB, 0xF2EF110B);
	r0 = D(r0, s1_2_2, 0xFAFDF804, 0xFCF70406, 0xF00419F2, 0x01EB0901);
	r1 = D(r1, s1_2_2, 0xF30809FF, 0xFF000CFF, 0xFFFBFFF2, 0xF1FEEE08);
	r2 = D(r2, s1_2_2, 0x030E02F6, 0x0101FF07, 0xF70001F5, 0x02FE01FB);
	r3 = D(r3, s1_2_2, 0xFF0206FC, 0xFF03FDF8, 0xF9040EE9, 0xFD0308FE);
	r4 = D(r4, s1_2_2, 0xF8F7FF13, 0xFA060101, 0xFFFC0203, 0xF60AFE0B);
	r5 = D(r5, s1_2_2, 0xFD020701, 0xF1070900, 0xFDFDF900, 0xF6F1F101);
	r6 = D(r6, s1_2_2, 0x00FF0704, 0xFC030E02, 0xFD08F807, 0xFD050905);
	r7 = D(r7, s1_2_2, 0xF2F3F507, 0xF30104EF, 0xFD00F7FC, 0x00FEFA01);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFB02000D, 0x05FB0200, 0x18F40413, 0xBB01FAF9);
	r1 = D(r1, s0_0_0, 0x0317FAF0, 0x00030100, 0x0F01020A, 0x0C040802);
	r2 = D(r2, s0_0_0, 0xFE070301, 0xFCEB0FFF, 0xF6000602, 0x00F801FF);
	r3 = D(r3, s0_0_0, 0x060C07F2, 0xE6FB0501, 0x1BEEFE07, 0xEC000004);
	r4 = D(r4, s0_0_0, 0xFC0701F8, 0xF9FF0301, 0xEF0602FC, 0x0102FFF7);
	r5 = D(r5, s0_0_0, 0xE3F90702, 0x0E0FFEFF, 0x0A010100, 0x01FD0002);
	r6 = D(r6, s0_0_0, 0x00FFFDFF, 0x0AFC0301, 0xE9060AFC, 0x0602FEFE);
	r7 = D(r7, s0_0_0, 0xFB06FE00, 0x05FAFC07, 0xFAF50200, 0x07D40905);
	r0 = D(r0, s0_0_1, 0x0913FF0D, 0x04FB03FD, 0x08050222, 0xF8F5FAFC);
	r1 = D(r1, s0_0_1, 0x10030809, 0xF9020405, 0x0CF0FE11, 0x02FEFBFB);
	r2 = D(r2, s0_0_1, 0xFAFE00F3, 0xF0E4FB03, 0xB72608F8, 0xFD09FDFB);
	r3 = D(r3, s0_0_1, 0xF1F002F1, 0xF5E91008, 0xE710FA05, 0xEEF90201);
	r4 = D(r4, s0_0_1, 0xF1F50B08, 0x03010303, 0x07F401FD, 0x04050104);
	r5 = D(r5, s0_0_1, 0x1306EEE7, 0x040B080A, 0x00000600, 0xFB0501FF);
	r6 = D(r6, s0_0_1, 0x0500F5FF, 0x0F0303FB, 0xFA1BF7C8, 0x0A01F7F7);
	r7 = D(r7, s0_0_1, 0xFEF907F8, 0x0101FDFA, 0xEAFC09F9, 0x03FEFD0D);
	r0 = D(r0, s0_0_2, 0x0D01F00D, 0xFCFD03F8, 0xF20C081C, 0xFEF502F6);
	r1 = D(r1, s0_0_2, 0x0DFB01F7, 0xF9010202, 0x0C05FCF8, 0x13FD08FA);
	r2 = D(r2, s0_0_2, 0x0AFE0CEC, 0xECF90904, 0x1BFEF102, 0x07FE01FC);
	r3 = D(r3, s0_0_2, 0x15FB0A00, 0xF003040A, 0x070703F6, 0xE6020307);
	r4 = D(r4, s0_0_2, 0x01F70A03, 0xFEFD03FC, 0x06030100, 0x060301FE);
	r5 = D(r5, s0_0_2, 0x05FC01E6, 0xC7F903F3, 0x0D0405FD, 0xED0003FC);
	r6 = D(r6, s0_0_2, 0x06F8FCF2, 0x0A03FA07, 0x0CFA09ED, 0x01FFF8FF);
	r7 = D(r7, s0_0_2, 0x0501FF07, 0x06F803FC, 0xF2F40BF8, 0xF80000FC);
	r0 = D(r0, s0_1_0, 0xC2EC02E5, 0xEC01FCFC, 0xA3F90AC9, 0x08EC0814);
	r1 = D(r1, s0_1_0, 0xF90A02F9, 0xE6FA00FF, 0x3FEF03FE, 0xE804FD02);
	r2 = D(r2, s0_1_0, 0x0FF7FF05, 0xC6EEFBF7, 0x23FC0002, 0x02F0FDF9);
	r3 = D(r3, s0_1_0, 0xD3EBF2F8, 0xDFF3F6F4, 0xFC0DFE04, 0x16F202F9);
	r4 = D(r4, s0_1_0, 0x19FD01FE, 0x10FEFF01, 0xE2F904F6, 0x1BF305FF);
	r5 = D(r5, s0_1_0, 0xE0EBF1F2, 0x11090103, 0x22020501, 0x1DF70401);
	r6 = D(r6, s0_1_0, 0x2700F500, 0x0C0107FE, 0x0EFC02FF, 0xD80102FF);
	r7 = D(r7, s0_1_0, 0x0107F6F2, 0xF8FE03FA, 0xF504FD04, 0xE51AE3FE);
	r0 = D(r0, s0_1_1, 0xE3D4E5CC, 0x02020001, 0x26D1F494, 0x9EE917FE);
	r1 = D(r1, s0_1_1, 0xE8FBF127, 0x0B1D040F, 0x2D09F1C7, 0x0AFAFCEA);
	r2 = D(r2, s0_1_1, 0xFD0D04FB, 0x15F701DF, 0xFF0E0F08, 0xBD0A01F6);
	r3 = D(r3, s0_1_1, 0xF10FC9EF, 0xDF059FF4, 0xDB1481F7, 0x2D05E7ED);
	r4 = D(r4, s0_1_1, 0x9C0706FF, 0xFFFFF7C4, 0xFDF001EA, 0xD8110BF8);
	r5 = D(r5, s0_1_1, 0xF9FEE3FC, 0xB0F4EF02, 0x08F50404, 0x130513FF);
	r6 = D(r6, s0_1_1, 0x1212F210, 0x0EEC1307, 0xBFF3E0F2, 0xF3FAFEF7);
	r7 = D(r7, s0_1_1, 0xAEDC1109, 0xDEEE1FD3, 0xDDDACBE3, 0xB4FA07E9);
	r0 = D(r0, s0_1_2, 0xCEF50B01, 0x1A07080B, 0xCE0205C1, 0x10F20021);
	r1 = D(r1, s0_1_2, 0x07FEEDF7, 0xF9FD0006, 0x12E8FFE7, 0x00F2FDEA);
	r2 = D(r2, s0_1_2, 0x810CAEC2, 0x1505FDFE, 0x9E1193FF, 0xF6F904F3);
	r3 = D(r3, s0_1_2, 0xBCF901F8, 0xFAFEF2F8, 0xF90205E8, 0x31F902FA);
	r4 = D(r4, s0_1_2, 0xF607FA00, 0x0F0004FE, 0x03050200, 0xEE0709F8);
	r5 = D(r5, s0_1_2, 0x0CF90608, 0x0FF6E602, 0x24060E02, 0x10F9F3EE);
	r6 = D(r6, s0_1_2, 0x1808EA03, 0xFA040810, 0xF4FDFD0E, 0xE7FEFDF7);
	r7 = D(r7, s0_1_2, 0x0E07F911, 0xF6050AED, 0xE207D8F5, 0x12040202);
	r0 = D(r0, s0_2_0, 0x100D0C0A, 0x07FF0302, 0x1DFD0F10, 0x8EE9FF0C);
	r1 = D(r1, s0_2_0, 0x1DFCFB00, 0x0FFC04FF, 0xEA0AFDFE, 0xE703FEFB);
	r2 = D(r2, s0_2_0, 0x0A00FCFF, 0x0A0A0309, 0x0A0003FE, 0x0DF9FDFA);
	r3 = D(r3, s0_2_0, 0x0108FE02, 0xFE010105, 0x0404FB05, 0x0D02FFFD);
	r4 = D(r4, s0_2_0, 0xFCFFFDFF, 0x0D000502, 0xFBFFFF02, 0xF8070100);
	r5 = D(r5, s0_2_0, 0x07030202, 0x13FE0107, 0xFEFA0500, 0xF3FE01FE);
	r6 = D(r6, s0_2_0, 0x050201FE, 0x1EF4F5FA, 0x05FBFC03, 0x04FD02FE);
	r7 = D(r7, s0_2_0, 0x96FB0803, 0xE3F7FD0A, 0x0902FA01, 0xEA04FF04);
	r0 = D(r0, s0_2_1, 0xF8FF02F6, 0xE7FE01FC, 0x1CFEFFFF, 0xEDE21018);
	r1 = D(r1, s0_2_1, 0xA6F7FC08, 0xF5030301, 0x02F40200, 0xA8F5D809);
	r2 = D(r2, s0_2_1, 0xFDF80203, 0xD906FA01, 0x0801FBFC, 0x020307F6);
	r3 = D(r3, s0_2_1, 0x02FE03FC, 0x00040007, 0xD915EC08, 0x0BF8F500);
	r4 = D(r4, s0_2_1, 0x01FD0701, 0x0201F4FF, 0x070303FD, 0xD70607FB);
	r5 = D(r5, s0_2_1, 0xF905FDF4, 0xFFED09FB, 0x090305F3, 0xE1FAFFF9);
	r6 = D(r6, s0_2_1, 0x00F8F0FE, 0xF2FCEAF7, 0xFE070E01, 0x0205FFFB);
	r7 = D(r7, s0_2_1, 0xDB17EBF0, 0x010A0102, 0xFA0B0404, 0x05F806F3);
	r0 = D(r0, s0_2_2, 0x06FBFE09, 0xF8FEFEF0, 0x10FFFFD3, 0x02FD0EFC);
	r1 = D(r1, s0_2_2, 0x0D0CFA16, 0x03F90501, 0xE900050F, 0xDF03E6E9);
	r2 = D(r2, s0_2_2, 0x0F0106F6, 0x070106FE, 0x140EF10B, 0xFBFB05FC);
	r3 = D(r3, s0_2_2, 0x0D06000C, 0x04000008, 0x16F400F7, 0x01050005);
	r4 = D(r4, s0_2_2, 0x130FFD0B, 0x10FD0004, 0x040202FF, 0x130007FE);
	r5 = D(r5, s0_2_2, 0xFD0500FF, 0x0805F20E, 0x00FF0B03, 0xC602F705);
	r6 = D(r6, s0_2_2, 0x0701F301, 0xF5F400EF, 0x160AFEF7, 0xFCFF01F9);
	r7 = D(r7, s0_2_2, 0x1BEF14CF, 0x0AFB0CFF, 0x02F70305, 0x04010001);
	r0 = D(r0, s1_0_0, 0xFDF80203, 0xFDFF0401, 0xFC100402, 0xFD0204FC);
	r1 = D(r1, s1_0_0, 0x0B0300FF, 0xFF01FC02, 0xFE03FE01, 0x00F900FD);
	r2 = D(r2, s1_0_0, 0xF903FDFF, 0xFC0619EC, 0x0B040303, 0xF9FD0306);
	r3 = D(r3, s1_0_0, 0x01FF03FD, 0xF7FC08F4, 0x08030103, 0x0700FF02);
	r4 = D(r4, s1_0_0, 0x0E03FC05, 0xFFFFFF04, 0xF90500FD, 0x05FF01FD);
	r5 = D(r5, s1_0_0, 0xEF001100, 0x0604FB05, 0xFD05FF03, 0x00010201);
	r6 = D(r6, s1_0_0, 0xFDFFFB01, 0x0502FFFF, 0xFC0EF8F9, 0xFD030101);
	r7 = D(r7, s1_0_0, 0x09030505, 0x030104FF, 0x00FA0203, 0xF2FC06FE);
	r0 = D(r0, s1_0_1, 0xFCFA08FB, 0x01FE0003, 0x18010D10, 0xFF0EFD03);
	r1 = D(r1, s1_0_1, 0xC71713F9, 0x04FDFDFE, 0x1900FD02, 0xEBFB09FD);
	r2 = D(r2, s1_0_1, 0x1010F40D, 0xD4000B1B, 0xFC0404FA, 0xFB000601);
	r3 = D(r3, s1_0_1, 0xD9FC1203, 0x07FB12E2, 0xFF00120B, 0xF30306FD);
	r4 = D(r4, s1_0_1, 0xF82605F8, 0xFCFC0101, 0x04FDFD07, 0x010AFAFE);
	r5 = D(r5, s1_0_1, 0xF5060705, 0x04040205, 0x1304ED01, 0x0AFFFD03);
	r6 = D(r6, s1_0_1, 0x09FE0101, 0x0401FFFF, 0x00F00B10, 0xFFFB0DFF);
	r7 = D(r7, s1_0_1, 0xF2FC0103, 0x01090B03, 0xEEF70CFD, 0xFE000205);
	r0 = D(r0, s1_0_2, 0x12FF0F00, 0xFB020303, 0xEB18FC03, 0xFDFE040D);
	r1 = D(r1, s1_0_2, 0x0CFCFBF9, 0xF80100FD, 0xFE07FE03, 0x05040E04);
	r2 = D(r2, s1_0_2, 0x03EA0F05, 0x0FFAFD05, 0xF6030219, 0xFCFCFC00);
	r3 = D(r3, s1_0_2, 0x080801FA, 0x140108FD, 0xFC00F301, 0x0B000302);
	r4 = D(r4, s1_0_2, 0x06F90007, 0xF7040200, 0x01FEFFFF, 0x06020204);
	r5 = D(r5, s1_0_2, 0xEFF50007, 0xF7040A09, 0xF3020003, 0xF20207FD);
	r6 = D(r6, s1_0_2, 0xFDFDFEF7, 0x09FC0201, 0xFE06FEFA, 0x0EFCFDFB);
	r7 = D(r7, s1_0_2, 0x020202FE, 0x060705FF, 0x0D0109FF, 0x01FE0100);
	r0 = D(r0, s1_1_0, 0x0E1013FF, 0xF8FFFD03, 0x81F725F5, 0x05F704DB);
	r1 = D(r1, s1_1_0, 0xF005F40B, 0xF2070504, 0x07000DF8, 0x0B0C030E);
	r2 = D(r2, s1_1_0, 0x02010101, 0xEC050811, 0x0205F406, 0x1006FC00);
	r3 = D(r3, s1_1_0, 0xDAFF0603, 0x11FA0304, 0xF6FF07FC, 0x0EFD12FE);
	r4 = D(r4, s1_1_0, 0xFD010102, 0x00FB0502, 0xF717FB13, 0x07FB0500);
	r5 = D(r5, s1_1_0, 0xFF08EFED, 0x07040904, 0xFBF4F8FF, 0xFFFF01FE);
	r6 = D(r6, s1_1_0, 0x080702F8, 0xFCFC01FB, 0x03FFFAFB, 0xFDFBF9F9);
	r7 = D(r7, s1_1_0, 0xF307080E, 0x02F206FA, 0x08FD0406, 0xF11102F4);
	r0 = D(r0, s1_1_1, 0xEE001A16, 0xF60112FA, 0xC6E743F6, 0xE80B050D);
	r1 = D(r1, s1_1_1, 0xC42431D0, 0x12FD09FF, 0x10D10F0E, 0x0AE4E405);
	r2 = D(r2, s1_1_1, 0xF6ED01F5, 0x0C00FA0E, 0xFBF90C0C, 0xF6FD130A);
	r3 = D(r3, s1_1_1, 0xEAECFC05, 0xE9F6FB1C, 0xE6181B2A, 0x0FF308F8);
	r4 = D(r4, s1_1_1, 0xE61C01FD, 0xF30511FD, 0x0802FF06, 0xF0050B00);
	r5 = D(r5, s1_1_1, 0x0CEBFF27, 0xFBFEFCF7, 0xF6150DF1, 0xF9F10F02);
	r6 = D(r6, s1_1_1, 0x0A10010D, 0xF9060BFE, 0xEE1509F5, 0xE5120602);
	r7 = D(r7, s1_1_1, 0xFA040804, 0xD4FE1904, 0xF9FA000C, 0x06FBFA1A);
	r0 = D(r0, s1_1_2, 0x08F8FC0F, 0xE3F4FC0D, 0xCFF212F3, 0x09F8FC0C);
	r1 = D(r1, s1_1_2, 0xFFFBF718, 0x0203FFFA, 0x04FCF9F6, 0xEFF8FF0E);
	r2 = D(r2, s1_1_2, 0xEC1C0501, 0xF5FEFF01, 0xDB03001E, 0x05040002);
	r3 = D(r3, s1_1_2, 0xC1F0FEFD, 0xEFEDFF09, 0xF90704DF, 0x00FA01EC);
	r4 = D(r4, s1_1_2, 0xEBFCEF08, 0xFFF10200, 0x0700FF00, 0xEB060510);
	r5 = D(r5, s1_1_2, 0xFD0601FE, 0xF7FB040B, 0x10070106, 0xFF1506F9);
	r6 = D(r6, s1_1_2, 0xFBFFF709, 0xF9060006, 0xF1EB060B, 0x00F9FC01);
	r7 = D(r7, s1_1_2, 0xFDFBFF03, 0xEBEF0204, 0xEDF0000D, 0x00FE0201);
	r0 = D(r0, s1_2_0, 0x0CF5FAFF, 0x05010501, 0x1AEFF4FD, 0xE802EFB6);
	r1 = D(r1, s1_2_0, 0x14030010, 0x04030002, 0x02FE00FC, 0xE0040300);
	r2 = D(r2, s1_2_0, 0xFD00FDFD, 0xFA0303EE, 0x0305FDFE, 0xFFFFFEF0);
	r3 = D(r3, s1_2_0, 0x0EF40301, 0x060404FF, 0x0AFBFCFA, 0xF3F805EE);
	r4 = D(r4, s1_2_0, 0x0203FFFE, 0xF8F907F7, 0xF904FEF6, 0xFF01FE01);
	r5 = D(r5, s1_2_0, 0x040205FC, 0x0A03FE08, 0x0C020200, 0x02FF06F8);
	r6 = D(r6, s1_2_0, 0xFF01FDFF, 0xF404FA05, 0xFE04FC02, 0x0BFF05FF);
	r7 = D(r7, s1_2_0, 0xF9FBFA04, 0x06FDFF04, 0x00000203, 0xFE08FA0A);
	r0 = D(r0, s1_2_1, 0xF2F4FC00, 0xEEF8FDE1, 0xF4EBE5FA, 0xF5FDF2F8);
	r1 = D(r1, s1_2_1, 0xEA0E0C81, 0x03FEFFF3, 0xEE0706F9, 0xEDFD05A9);
	r2 = D(r2, s1_2_1, 0x0402FF0E, 0xFD0100FF, 0xFD07FE04, 0x00FB04E9);
	r3 = D(r3, s1_2_1, 0x0702FEE8, 0x02FD01F2, 0xFB120601, 0x09F80601);
	r4 = D(r4, s1_2_1, 0x050B00D8, 0x04F3FCEB, 0x00FFFEF9, 0xE8FAFD02);
	r5 = D(r5, s1_2_1, 0xF802FDF9, 0x0400FFA8, 0x0200F61F, 0xF805FCF9);
	r6 = D(r6, s1_2_1, 0xFCFF0511, 0xF3FB0206, 0x08EBF808, 0x01F5FFFB);
	r7 = D(r7, s1_2_1, 0xF301FD09, 0xF5EFF305, 0x070005ED, 0xFAFB010A);
	r0 = D(r0, s1_2_2, 0x01020202, 0x04F8FC16, 0xF503F419, 0x12FFFE07);
	r1 = D(r1, s1_2_2, 0x02F8FFBC, 0x00000003, 0xFAF3FF08, 0x01F70335);
	r2 = D(r2, s1_2_2, 0x08F2FEEC, 0xFCFBFE03, 0x01040624, 0xFF00010C);
	r3 = D(r3, s1_2_2, 0x00FEFDE5, 0x0207FDF4, 0xFD060101, 0x02FDFD06);
	r4 = D(r4, s1_2_2, 0x04FF01F1, 0xFDFCFE09, 0x0100000B, 0x080600FC);
	r5 = D(r5, s1_2_2, 0xFE00FF09, 0xFA11FEE2, 0xFD01FC03, 0xF70106E9);
	r6 = D(r6, s1_2_2, 0x01FFFFFE, 0xFDFD0006, 0x060505FA, 0xFE030006);
	r7 = D(r7, s1_2_2, 0x09F801FF, 0xF7F8FF0D, 0xFDF500EB, 0xFEFCFF05);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x01FFFE17, 0xFF0102FD, 0x0607FD00, 0x03FEF90F);
	r1 = D(r1, s0_0_0, 0x04FEF3EA, 0xFF00FEFB, 0x0102FAEE, 0xFF0006F9);
	r2 = D(r2, s0_0_0, 0x0200F707, 0xF80A0BFB, 0xFF05020B, 0xFFFF0402);
	r3 = D(r3, s0_0_0, 0xF70708E6, 0xFFFC01E2, 0x0002050D, 0x0001FF00);
	r4 = D(r4, s0_0_0, 0x04FEFCF2, 0xFF0203F8, 0xFC0706F8, 0x03FEFF02);
	r5 = D(r5, s0_0_0, 0xFFFB03FC, 0xFF0102E1, 0xFFFFFBFC, 0xFF01FC06);
	r6 = D(r6, s0_0_0, 0xFE000004, 0x000203FD, 0x00F60218, 0x00010201);
	r7 = D(r7, s0_0_0, 0x01FFFE05, 0xFF0702F5, 0xFD020510, 0x05FE0307);
	r0 = D(r0, s0_0_1, 0x050801F9, 0xFEFEFAFE, 0x0A1002DD, 0xFD0A03F3);
	r1 = D(r1, s0_0_1, 0x000021F3, 0xFFFEFEFE, 0x0001F6FC, 0x010209F5);
	r2 = D(r2, s0_0_1, 0x01FA080C, 0xF3EFF0FF, 0xFEF8F4EB, 0xFE0304F8);
	r3 = D(r3, s0_0_1, 0xF809FBFE, 0xF901FD05, 0xF605F612, 0xFC01FC07);
	r4 = D(r4, s0_0_1, 0x04FAFC08, 0xFD010501, 0x05FB0102, 0x01F9FF08);
	r5 = D(r5, s0_0_1, 0xF60B04FA, 0xF80000FD, 0xFCF9FC01, 0x00FFFDF8);
	r6 = D(r6, s0_0_1, 0xFF0103FA, 0x0102FEFA, 0xF7F200ED, 0x020103FD);
	r7 = D(r7, s0_0_1, 0xFA0800F6, 0xFC0407FF, 0xFAFCFFEF, 0x0DF1FB04);
	r0 = D(r0, s0_0_2, 0x0C040804, 0xFE06FB00, 0x0A0BF9EF, 0xF1120205);
	r1 = D(r1, s0_0_2, 0xDFFA0808, 0xFF02FDFD, 0xFB02FBF8, 0x02000BFF);
	r2 = D(r2, s0_0_2, 0xEBF7FEFC, 0xEB190104, 0xF00715F3, 0xFA0C07FF);
	r3 = D(r3, s0_0_2, 0xFAFC04FE, 0xF805FFFA, 0xED1B07FA, 0xFAFEFFFF);
	r4 = D(r4, s0_0_2, 0xF9F103FE, 0xFB0501FE, 0x0106FEFE, 0xFE040701);
	r5 = D(r5, s0_0_2, 0xE6050106, 0xE2FC0F0B, 0xFFFEFEFA, 0xFEFE03FF);
	r6 = D(r6, s0_0_2, 0x01FD01FF, 0x05FE02FE, 0xDE04040B, 0x06FC0704);
	r7 = D(r7, s0_0_2, 0x06FF0405, 0x08FDFD09, 0xF5060301, 0xFC0F0004);
	r0 = D(r0, s0_1_0, 0xFC020A0F, 0xFE02FDED, 0xF8F0F7F9, 0x03FCF407);
	r1 = D(r1, s0_1_0, 0x02FF07F4, 0x00FD030D, 0xFEFB1005, 0x02FDFFE4);
	r2 = D(r2, s0_1_0, 0xFC050308, 0xFBF2FA05, 0xFE0302F5, 0xFB0408F6);
	r3 = D(r3, s0_1_0, 0x01F510FC, 0xFB010F05, 0x0101FDE2, 0xF6070D10);
	r4 = D(r4, s0_1_0, 0x00FC0811, 0xFD010609, 0xFE060001, 0xFF03030F);
	r5 = D(r5, s0_1_0, 0xF9060206, 0xFC0500FB, 0x0000FA0B, 0xFDFE0204);
	r6 = D(r6, s0_1_0, 0xFF03020F, 0xFFFD01E8, 0x0204F80F, 0xFFFDF8F8);
	r7 = D(r7, s0_1_0, 0xFFFA0D0B, 0x01FE02EF, 0x010307FE, 0xEF0414D0);
	r0 = D(r0, s0_1_1, 0xF1DBFB07, 0xFEF70408, 0xE5C9121F, 0xFAFFFCC0);
	r1 = D(r1, s0_1_1, 0x01161F05, 0xFEFD14F3, 0xFCF826F2, 0xFC1800F3);
	r2 = D(r2, s0_1_1, 0x000508E1, 0xF1181B0C, 0x04FB0BE6, 0x07F2FCFC);
	r3 = D(r3, s0_1_1, 0xFCE91905, 0xF40D1206, 0x00F5FDD2, 0xEB1116E6);
	r4 = D(r4, s0_1_1, 0xFE031003, 0xFAF90AF8, 0xF4110C09, 0x09E700FC);
	r5 = D(r5, s0_1_1, 0xE70CFE00, 0xFC08FC0B, 0xFEF31603, 0xFFF8FEF9);
	r6 = D(r6, s0_1_1, 0x05FFEDFF, 0xF707F50F, 0xFE031C12, 0xFFFEFF03);
	r7 = D(r7, s0_1_1, 0xCCF30626, 0xF6FAF315, 0xFC010E1B, 0xC81BE4FB);
	r0 = D(r0, s0_1_2, 0xE515F31A, 0x030BFDFA, 0xAFEFFB1A, 0xE81B0C17);
	r1 = D(r1, s0_1_2, 0xAD030E0E, 0xFA110906, 0xF81423F8, 0xF5F900FD);
	r2 = D(r2, s0_1_2, 0xFDFBE8FC, 0x03F5FD01, 0xE51312FA, 0xF3100802);
	r3 = D(r3, s0_1_2, 0xFF1909F3, 0xF4030AFA, 0xD60D18FA, 0xE6FD0A02);
	r4 = D(r4, s0_1_2, 0x050203EB, 0xE9F20EF9, 0x08F802FA, 0xF20101F7);
	r5 = D(r5, s0_1_2, 0x00FB0900, 0xD1001D0D, 0xFB170AFE, 0xF5060BF7);
	r6 = D(r6, s0_1_2, 0xFF02FE02, 0x0605FAFB, 0x0508E3F5, 0xEFF5F1F9);
	r7 = D(r7, s0_1_2, 0x01FDEFF9, 0xE7F902F5, 0xE80814F1, 0x05F9FC02);
	r0 = D(r0, s0_2_0, 0x03081008, 0xFD01FAF9, 0xFF051505, 0xFD04FF0A);
	r1 = D(r1, s0_2_0, 0x06F8E406, 0x0000FDFC, 0x01030102, 0x000524F8);
	r2 = D(r2, s0_2_0, 0xFC00FA00, 0xFF11F006, 0xFE050BFA, 0xFF0107FB);
	r3 = D(r3, s0_2_0, 0x010E0805, 0x01000101, 0x010407F7, 0x01F90FF7);
	r4 = D(r4, s0_2_0, 0x00FEF2FE, 0x01FC0202, 0xFE0712FA, 0xFE03FFF2);
	r5 = D(r5, s0_2_0, 0xFF080902, 0xFA030001, 0xFFFFE203, 0x00FF0600);
	r6 = D(r6, s0_2_0, 0xFF00F7FB, 0xFEFC0FF3, 0xFEFCF3FC, 0x00FE0201);
	r7 = D(r7, s0_2_0, 0x07F803FC, 0x0007FC01, 0x02FEFDFB, 0xF410FC1C);
	r0 = D(r0, s0_2_1, 0x03F02000, 0xF80B1010, 0xF8F4210E, 0xF9091AED);
	r1 = D(r1, s0_2_1, 0xFC1B3416, 0xFF00120B, 0xFEF801F6, 0x010129FD);
	r2 = D(r2, s0_2_1, 0xFA06E210, 0x02FDFF02, 0x00FBD5EE, 0x000A0104);
	r3 = D(r3, s0_2_1, 0x04F80EF6, 0x030507F5, 0xFCEFFB11, 0x01020602);
	r4 = D(r4, s0_2_1, 0xFC0A0EE5, 0xFFF80003, 0x000608F7, 0xFCE7FC0A);
	r5 = D(r5, s0_2_1, 0x000204FF, 0x04F80CF2, 0xFD0AF801, 0xFEFAF2FC);
	r6 = D(r6, s0_2_1, 0x01FC0E05, 0xFAFC10FB, 0x020302F0, 0x0103F905);
	r7 = D(r7, s0_2_1, 0xF5F10CF5, 0xF9030E01, 0x04090102, 0x0DFD1BEE);
	r0 = D(r0, s0_2_2, 0x0DE91B03, 0xFF0300FC, 0x0EFA2BDD, 0x0DF4ED08);
	r1 = D(r1, s0_2_2, 0xE10705ED, 0x01020203, 0xFE0B0D1A, 0xFE112EF5);
	r2 = D(r2, s0_2_2, 0x0204120F, 0xFEFB01FE, 0xF80F1411, 0x07040C02);
	r3 = D(r3, s0_2_2, 0x02F70B09, 0x05050709, 0xFD14250B, 0x07040606);
	r4 = D(r4, s0_2_2, 0xFEFBF405, 0x06F009FF, 0x06FEF5FD, 0xFA000403);
	r5 = D(r5, s0_2_2, 0x05FBFC03, 0xF80A16F9, 0x03FAF304, 0xF7051AFE);
	r6 = D(r6, s0_2_2, 0xFE09FC01, 0xF40000F1, 0x0001000C, 0x04F809FF);
	r7 = D(r7, s0_2_2, 0xFFFC0802, 0x03FB09FF, 0x00FF0807, 0x0002FBFF);
	r0 = D(r0, s1_0_0, 0xF8F508FD, 0x01020000, 0xF802F9EE, 0x0109F806);
	r1 = D(r1, s1_0_0, 0xF50AFF0D, 0x000102FF, 0x0701FF08, 0x00FB04FF);
	r2 = D(r2, s1_0_0, 0x02FE00FE, 0x03FC09F7, 0x0200FC00, 0xFDFF05FF);
	r3 = D(r3, s1_0_0, 0xFAFA03F6, 0xFF020AFF, 0x00FAFCFD, 0xFDFE0502);
	r4 = D(r4, s1_0_0, 0xF905FE05, 0xFAFFFE00, 0x0A04FAFE, 0xFCFEFFFD);
	r5 = D(r5, s1_0_0, 0xF7FE0801, 0xF9FFFD04, 0x03020102, 0x030000FF);
	r6 = D(r6, s1_0_0, 0xF802FD00, 0x060200FE, 0xF2FC0304, 0xFD000001);
	r7 = D(r7, s1_0_0, 0xF6010700, 0x0704F4FB, 0x04FCFF06, 0xFDF805FC);
	r0 = D(r0, s1_0_1, 0xFFF9FA05, 0x04060002, 0xF7F3DF09, 0x1508EAF9);
	r1 = D(r1, s1_0_1, 0x1BE2FEF2, 0xF9FC05FD, 0xFC06EEFD, 0x01020206);
	r2 = D(r2, s1_0_1, 0x03F2FC08, 0xFDFC00F4, 0x0604FEFC, 0x030BFE01);
	r3 = D(r3, s1_0_1, 0x10F5F60D, 0x00EDFFFE, 0x09130E05, 0xFDFCFAFD);
	r4 = D(r4, s1_0_1, 0x0BF3FE00, 0xFC0200FF, 0x04FF12FB, 0x04060CFD);
	r5 = D(r5, s1_0_1, 0x1403EDF8, 0x12F8F8F3, 0x010006FB, 0xFF01FF00);
	r6 = D(r6, s1_0_1, 0x0706F704, 0x0100FCFC, 0x0B00F104, 0x0705FC02);
	r7 = D(r7, s1_0_1, 0x0501FBF9, 0x070BF3F8, 0x05010AFB, 0x010100FD);
	r0 = D(r0, s1_0_2, 0x0A020702, 0x05FA02FB, 0x0007F0FC, 0x13FE0DFC);
	r1 = D(r1, s1_0_2, 0xE7110D00, 0xFCFC0300, 0xF707F8FC, 0x01F9FC04);
	r2 = D(r2, s1_0_2, 0x00FBF800, 0x00FCFC04, 0xF6F8F807, 0xFB0109FA);
	r3 = D(r3, s1_0_2, 0x06F6FD00, 0x07FBF5FD, 0x07EF01F9, 0x03FCFD00);
	r4 = D(r4, s1_0_2, 0xF0050900, 0xFDFF01FF, 0x0104FD02, 0x08FEFDFE);
	r5 = D(r5, s1_0_2, 0x00FE05FB, 0x09F61EFA, 0xFF01FF01, 0x06FD00FD);
	r6 = D(r6, s1_0_2, 0xFC0403FE, 0xFE02FC00, 0x09FB05FB, 0x04020500);
	r7 = D(r7, s1_0_2, 0x040500FF, 0x030207F7, 0x04FBFA02, 0x010300FF);
	r0 = D(r0, s1_1_0, 0xF204E6F6, 0x08FCFFFE, 0xE2F20625, 0x11020AFA);
	r1 = D(r1, s1_1_0, 0xF0F7FFF2, 0x02FEFFFF, 0x00F603FF, 0xFFFBFEF9);
	r2 = D(r2, s1_1_0, 0x02FCFDF7, 0xF904F80A, 0x11FF00FF, 0xFE02FDF9);
	r3 = D(r3, s1_1_0, 0x0EFFF914, 0x09F7F900, 0x04F8FF06, 0x02FDFE01);
	r4 = D(r4, s1_1_0, 0xFCFD08FC, 0xFA02FC0B, 0x0401F402, 0x0400FB01);
	r5 = D(r5, s1_1_0, 0x1503F1FA, 0xF8FEFCFD, 0xF9FE0206, 0x07FE0300);
	r6 = D(r6, s1_1_0, 0x0200FFFB, 0xFDFF09FC, 0xF2FEFEF2, 0xFF000109);
	r7 = D(r7, s1_1_0, 0x13F9F5F9, 0xFCFDFE12, 0xFDFF05F7, 0x1208FCFB);
	r0 = D(r0, s1_1_1, 0x04F1F107, 0x24F70E05, 0xC7E6F313, 0xFF0A12EA);
	r1 = D(r1, s1_1_1, 0x23EDFFF5, 0x01FF0C00, 0x24D60DF2, 0xEEF7FEFF);
	r2 = D(r2, s1_1_1, 0xF40305F7, 0x00FEFFF4, 0x11040FDD, 0x08041603);
	r3 = D(r3, s1_1_1, 0xD9F2FB1C, 0xEEEEE804, 0xEE010A02, 0x0903F9F9);
	r4 = D(r4, s1_1_1, 0x16F611F3, 0x1506EE13, 0x0CF426FC, 0x080318F0);
	r5 = D(r5, s1_1_1, 0xFFF81409, 0x1B02EDF7, 0x05000A05, 0xFFFB11F7);
	r6 = D(r6, s1_1_1, 0x06010006, 0xFCFB08F7, 0x0FE709FA, 0x0401F71C);
	r7 = D(r7, s1_1_1, 0xFCF91001, 0x01F80A30, 0x01FDE409, 0x0CF6F901);
	r0 = D(r0, s1_1_2, 0xF5EBEA14, 0xF8FAF803, 0xAFF2F71D, 0xF609FEFC);
	r1 = D(r1, s1_1_2, 0xF4F507F7, 0x02FB0C09, 0x02BF0218, 0xF5010DFE);
	r2 = D(r2, s1_1_2, 0xECD8F90C, 0x09FF01FE, 0xE3FDBF0E, 0x01FC0406);
	r3 = D(r3, s1_1_2, 0xFD030604, 0xFEFF0100, 0x03FA06F8, 0x0100FEF8);
	r4 = D(r4, s1_1_2, 0xEF010F0F, 0x07040702, 0x03FDFD0A, 0x04F60810);
	r5 = D(r5, s1_1_2, 0xFE0200FC, 0x0CEA21FA, 0x0000F70A, 0x08020D04);
	r6 = D(r6, s1_1_2, 0xFD030FFE, 0x02F7ED03, 0xF5F2F607, 0x02FC071A);
	r7 = D(r7, s1_1_2, 0x070200FE, 0x05030318, 0xFFF20506, 0x03020502);
	r0 = D(r0, s1_2_0, 0x03040C08, 0x08FCFFFE, 0x14000601, 0x290007F4);
	r1 = D(r1, s1_2_0, 0xF20E0006, 0x030000FE, 0x0001FAFE, 0xFEFD00FB);
	r2 = D(r2, s1_2_0, 0x08020002, 0xFFF7F2F9, 0x0AFEFCFD, 0x0200FE01);
	r3 = D(r3, s1_2_0, 0x04FE0803, 0xFD02F8FA, 0x03F700FC, 0xFD01F9FC);
	r4 = D(r4, s1_2_0, 0xFE07FE04, 0xFFFD0604, 0x02FC06FE, 0x03010100);
	r5 = D(r5, s1_2_0, 0xFAFFFBFE, 0xF901FF04, 0xF901FDFF, 0x01FFFD01);
	r6 = D(r6, s1_2_0, 0x0200FDFF, 0x0400F604, 0xFEFF01FB, 0x01FE01FE);
	r7 = D(r7, s1_2_0, 0x060207FB, 0x060201F7, 0xFFFEFBFF, 0xFCF4FDFB);
	r0 = D(r0, s1_2_1, 0x09000402, 0xFBFBFBFB, 0x330A0A11, 0x20FC1B10);
	r1 = D(r1, s1_2_1, 0x04E315CB, 0xFF010505, 0xFEF8F0FB, 0xEC03F4F7);
	r2 = D(r2, s1_2_1, 0x05FEFF03, 0x05FFFDF3, 0x0D02F8FE, 0x010212F9);
	r3 = D(r3, s1_2_1, 0x09010204, 0x03FE0403, 0xE60602FA, 0xFCFE000B);
	r4 = D(r4, s1_2_1, 0x07F405F3, 0x0DF90C0B, 0x01FE08FA, 0xFE03FDF9);
	r5 = D(r5, s1_2_1, 0x03FDF9F5, 0x06FFFFFA, 0x0C0301F3, 0x09FEFEFC);
	r6 = D(r6, s1_2_1, 0x03FEFF07, 0x0003FA13, 0x0602050B, 0x070207FC);
	r7 = D(r7, s1_2_1, 0xF1F0EBFB, 0x13ED05F2, 0x06FF0302, 0xFF00F9F1);
	r0 = D(r0, s1_2_2, 0xF8F9F4FC, 0x0BFE0107, 0x18DEF9F0, 0xFA06F201);
	r1 = D(r1, s1_2_2, 0xFE07F41B, 0xFFFE01FB, 0x02FCF704, 0x040007F3);
	r2 = D(r2, s1_2_2, 0x08FCFCF9, 0x00010303, 0xE5FFF803, 0x00FEF9FF);
	r3 = D(r3, s1_2_2, 0x0BFEFA02, 0xFFFFFB02, 0xFDFE1101, 0x03FDFC0A);
	r4 = D(r4, s1_2_2, 0xFF03FA0B, 0xFFF4F81E, 0x0000FE08, 0x05F91305);
	r5 = D(r5, s1_2_2, 0x0002FB02, 0xFCFD0005, 0xF9010007, 0xFBFEF1FF);
	r6 = D(r6, s1_2_2, 0x00000803, 0x01000800, 0xF8FEF0FF, 0x0000F805);
	r7 = D(r7, s1_2_2, 0x05F6030E, 0x04F5EE05, 0x04FFFB02, 0x02FEFD0A);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFCFE09FD, 0x04FE07FF, 0xF40007F9, 0x03FD0805);
	r1 = D(r1, s0_0_0, 0x0305F301, 0xFF010C00, 0x00010200, 0x01031401);
	r2 = D(r2, s0_0_0, 0xFB04F505, 0x03FF04F0, 0x00FD1202, 0x00000EFF);
	r3 = D(r3, s0_0_0, 0xFCFF0EFD, 0x01000203, 0xFC0108FB, 0xFE000900);
	r4 = D(r4, s0_0_0, 0x01010702, 0xFF0007FC, 0x02FD12F7, 0xFDFFFB01);
	r5 = D(r5, s0_0_0, 0xFFFFFDFF, 0xFFFC0603, 0x0102DCFF, 0x02FF0000);
	r6 = D(r6, s0_0_0, 0xFC0517FE, 0xFFFFFD01, 0xF502F504, 0xFEFF0700);
	r7 = D(r7, s0_0_0, 0x0302FE04, 0xFC040DFF, 0xFF0105FF, 0x01FF03F8);
	r0 = D(r0, s0_0_1, 0x0FFBFFEC, 0x06FEEFFF, 0x0BFEF0EA, 0x1D010DE7);
	r1 = D(r1, s0_0_1, 0xE704FF01, 0x0002F401, 0x0F05FAF5, 0x040500FB);
	r2 = D(r2, s0_0_1, 0xF00618FE, 0x0B07F318, 0xF9FFEB0B, 0x110102FB);
	r3 = D(r3, s0_0_1, 0xF6020004, 0xE705FF02, 0x080A03F6, 0xF3000006);
	r4 = D(r4, s0_0_1, 0xF20302FE, 0x0300FBFF, 0x0001FE03, 0x00FF0702);
	r5 = D(r5, s0_0_1, 0x0E050008, 0xFBFFFEFA, 0xF8030307, 0x03FE10FD);
	r6 = D(r6, s0_0_1, 0x040A19FC, 0xFFFEFDFE, 0x0008170B, 0x03020CFD);
	r7 = D(r7, s0_0_1, 0xF2FB0005, 0x0EFDFDFD, 0xF4040109, 0x0EFFFC07);
	r0 = D(r0, s0_0_2, 0x10FFFDF4, 0x03010001, 0xF5EE0BF0, 0xFCFEF6EC);
	r1 = D(r1, s0_0_2, 0xFB0A050E, 0xFDFF00FE, 0x07010103, 0x0201FA05);
	r2 = D(r2, s0_0_2, 0x0402F6FF, 0xFE000604, 0xFD0404FD, 0x03010005);
	r3 = D(r3, s0_0_2, 0xF7010100, 0x0601FEF1, 0xF1FCFFFD, 0xFEFF00F7);
	r4 = D(r4, s0_0_2, 0x00020800, 0xFD010401, 0x05000007, 0x01FF0000);
	r5 = D(r5, s0_0_2, 0xF900040D, 0xE9FC1100, 0x010201F7, 0x00FF04FA);
	r6 = D(r6, s0_0_2, 0xFF060403, 0x0400FC02, 0xF602F00E, 0x080003F2);
	r7 = D(r7, s0_0_2, 0x06010804, 0xF9010411, 0xFB03FEEE, 0xFCFF0405);
	r0 = D(r0, s0_1_0, 0x0604EF06, 0x02FEE9FF, 0xD3FF043D, 0xF9FEFAFC);
	r1 = D(r1, s0_1_0, 0xFF03CD00, 0xFF000501, 0xF700FB01, 0x09021EF4);
	r2 = D(r2, s0_1_0, 0xFCFCFA03, 0xFD04031E, 0x05FD05FC, 0x0A0100FB);
	r3 = D(r3, s0_1_0, 0xF801120A, 0x01000FF8, 0xFB0101FF, 0xF601FCFA);
	r4 = D(r4, s0_1_0, 0xFBFF0109, 0x01010F04, 0x070011F9, 0xFFFEF9FD);
	r5 = D(r5, s0_1_0, 0xFE050807, 0xFAFD0B0A, 0xFA01DB09, 0xFDFFF9FF);
	r6 = D(r6, s0_1_0, 0x010827FD, 0xFEFF1101, 0xF2FB0810, 0xFE0002FF);
	r7 = D(r7, s0_1_0, 0x0102EC02, 0xFA02F109, 0x020204F9, 0x05060501);
	r0 = D(r0, s0_1_1, 0xE3FFFB0E, 0xED061507, 0xD6F9014F, 0x0208E207);
	r1 = D(r1, s0_1_1, 0xDB06FBAC, 0xFD13FAFF, 0xD30218EC, 0x1ECB2002);
	r2 = D(r2, s0_1_1, 0xDA0A0E12, 0x16FF05F1, 0xE6FF07FB, 0xF800ED0E);
	r3 = D(r3, s0_1_1, 0xFE080AF7, 0x0A060508, 0xEF08E60C, 0x0A0204FC);
	r4 = D(r4, s0_1_1, 0x000415EA, 0x0B051202, 0x0104FCF2, 0xF2FFF60D);
	r5 = D(r5, s0_1_1, 0x0702FC12, 0xFB0601F7, 0xDF3CF4F8, 0xF2040509);
	r6 = D(r6, s0_1_1, 0x08FB230E, 0xF7030201, 0xE005F4F3, 0x01FDFEFC);
	r7 = D(r7, s0_1_1, 0xE9050007, 0xDBFFFA10, 0x0702110D, 0xF3FE0402);
	r0 = D(r0, s0_1_2, 0xF7F900E5, 0x08010015, 0x13010BEE, 0x19FF0C02);
	r1 = D(r1, s0_1_2, 0xF0FDFE0B, 0x08020AFF, 0x08FEFDF6, 0x060602E0);
	r2 = D(r2, s0_1_2, 0xE5060AFA, 0xFEFB0106, 0x0604F9FA, 0x05010305);
	r3 = D(r3, s0_1_2, 0xFA0107DE, 0xFE0104EB, 0x070308EF, 0x000001FF);
	r4 = D(r4, s0_1_2, 0xF706FAEE, 0xFEFF0100, 0x05FEFF04, 0xFEFFFBEB);
	r5 = D(r5, s0_1_2, 0x0EFA0003, 0xEEFE0FED, 0x12021406, 0x0701FC03);
	r6 = D(r6, s0_1_2, 0xF60A140A, 0x01FF01FF, 0xF10706F6, 0x0101FAF7);
	r7 = D(r7, s0_1_2, 0x01FBFD03, 0xFE0208F1, 0xF702FF02, 0xFFFDFB01);
	r0 = D(r0, s0_2_0, 0xF90708E7, 0xFC020200, 0xE4F2F502, 0x05060BE2);
	r1 = D(r1, s0_2_0, 0xFBFD1510, 0x02010301, 0xFBFF0101, 0x0C000BFB);
	r2 = D(r2, s0_2_0, 0x04FD0600, 0x05020803, 0xFDFE0803, 0x04000502);
	r3 = D(r3, s0_2_0, 0xF700FAF9, 0xF1000000, 0xF7FC05F7, 0xF701000A);
	r4 = D(r4, s0_2_0, 0xFCFDFD05, 0xF9FFFD09, 0xFAFD0D0A, 0xFFFF06FB);
	r5 = D(r5, s0_2_0, 0xFDFE020C, 0xFBFB0100, 0xFF010100, 0x0301FEFC);
	r6 = D(r6, s0_2_0, 0x020417FF, 0x01010AFF, 0x0AFB0405, 0xFDFFF907);
	r7 = D(r7, s0_2_0, 0x030009FA, 0xFAFFFBF8, 0xFB00FC05, 0xFA01091A);
	r0 = D(r0, s0_2_1, 0xFD020A0B, 0x1802FE17, 0xE4F905D0, 0x0CFF0AED);
	r1 = D(r1, s0_2_1, 0x060512E9, 0x00000AFA, 0xF6FCF808, 0xF90108F8);
	r2 = D(r2, s0_2_1, 0x04F90100, 0xF8FF000C, 0xFEFE04F2, 0x0C00FF0A);
	r3 = D(r3, s0_2_1, 0x0303FC07, 0xFA00F4F2, 0xEE060F01, 0xF903FAE9);
	r4 = D(r4, s0_2_1, 0x0B000405, 0xF501FFF5, 0x0DFBFD04, 0xFD000B05);
	r5 = D(r5, s0_2_1, 0x07FD05FD, 0x0AFDFD0C, 0x11040202, 0x07010C02);
	r6 = D(r6, s0_2_1, 0x00071005, 0xF90102FE, 0x0B0203FB, 0x020210F6);
	r7 = D(r7, s0_2_1, 0xF7FFFB0A, 0x050005FD, 0xFD02FEF6, 0x01FCFF1F);
	r0 = D(r0, s0_2_2, 0xF9FD0608, 0xFA00FE03, 0xE8F7002A, 0x05FCFE05);
	r1 = D(r1, s0_2_2, 0xF703FBF0, 0x020006FC, 0xFBFD07F3, 0xDD0501BF);
	r2 = D(r2, s0_2_2, 0x0C02FD07, 0xF9FF02F7, 0x020007EB, 0x0AFDFF05);
	r3 = D(r3, s0_2_2, 0xFE000201, 0xFFFE0306, 0xFDF9F617, 0xF9010501);
	r4 = D(r4, s0_2_2, 0xF601FDEE, 0x0300FFFA, 0x04FE00FD, 0x000104F8);
	r5 = D(r5, s0_2_2, 0xFB0000FD, 0x0200050A, 0x04010606, 0x0702FD0B);
	r6 = D(r6, s0_2_2, 0xFD060402, 0x040202FF, 0x01060402, 0xFF00FF01);
	r7 = D(r7, s0_2_2, 0x0B020103, 0x03FFF9F1, 0x02000102, 0x01FF03FD);
	r0 = D(r0, s1_0_0, 0x010800FE, 0x00FE0000, 0x05F3FFF7, 0x18FB0403);
	r1 = D(r1, s1_0_0, 0x18010402, 0x04FC0001, 0x0C02F901, 0xF70203FD);
	r2 = D(r2, s1_0_0, 0x03FF0102, 0xEFF6FEF9, 0x05020107, 0x02FA03FC);
	r3 = D(r3, s1_0_0, 0x0CF9FAF8, 0x18FCF801, 0x030404F5, 0xFF0BFDFF);
	r4 = D(r4, s1_0_0, 0x08010404, 0xFCFB01FB, 0xEAFD01FE, 0xFD020102);
	r5 = D(r5, s1_0_0, 0xF8F90401, 0x000404FF, 0xFA020102, 0xFD020002);
	r6 = D(r6, s1_0_0, 0x0CFD00FD, 0xF9FBFE01, 0x04080802, 0xFEF9FFFD);
	r7 = D(r7, s1_0_0, 0xFD09FF05, 0x09F2FD02, 0x0A02FB02, 0xEE0208FF);
	r0 = D(r0, s1_0_1, 0xFBFFFBFC, 0xF501FD02, 0xE712F8FE, 0xD9FDF2F7);
	r1 = D(r1, s1_0_1, 0x080505F2, 0x00030202, 0x15FDF002, 0x2AFC0AFE);
	r2 = D(r2, s1_0_1, 0x0B0204FD, 0x16051D0A, 0x12EBFC05, 0xE4FBFCFB);
	r3 = D(r3, s1_0_1, 0xFAFE01FF, 0xFAF20901, 0xDCFFE7F8, 0x120708FD);
	r4 = D(r4, s1_0_1, 0x03020201, 0xFD0101FE, 0x0CFD0801, 0xFE030200);
	r5 = D(r5, s1_0_1, 0x0BFE0805, 0xEAFCF3F4, 0x00FE0206, 0xFF0100FE);
	r6 = D(r6, s1_0_1, 0xF5FEFCF8, 0x03FE0101, 0x09F4F5FB, 0xF101FCFD);
	r7 = D(r7, s1_0_1, 0x020010FD, 0xDC01F102, 0xF500FC01, 0x0BFE0403);
	r0 = D(r0, s1_0_2, 0x18FCE9FD, 0xFFFD0300, 0xE7FC03F7, 0x0304FF08);
	r1 = D(r1, s1_0_2, 0xF901F5FA, 0x05030501, 0x14010000, 0xFAF902FB);
	r2 = D(r2, s1_0_2, 0xE0F7F1FA, 0xF6FFFD01, 0xF604F6EE, 0x13FE0D00);
	r3 = D(r3, s1_0_2, 0xF404F7FE, 0x02FCFB00, 0x17FF0DFF, 0xFAFDF9FE);
	r4 = D(r4, s1_0_2, 0xEEFDFCF7, 0xFC000700, 0xF9000400, 0xFFFE0700);
	r5 = D(r5, s1_0_2, 0xF8020E05, 0x15F30405, 0x07020702, 0xFFFF0100);
	r6 = D(r6, s1_0_2, 0x0002F7FD, 0xFDF9FF02, 0xF603FDFF, 0xF901F7FD);
	r7 = D(r7, s1_0_2, 0x0400FAFF, 0xF9FCFAFF, 0x09FCFFFE, 0xFE01FBFE);
	r0 = D(r0, s1_1_0, 0x121313FD, 0x00FFFBFF, 0xF62E1914, 0x0FFD0DF7);
	r1 = D(r1, s1_1_0, 0x13DCF401, 0x06F70001, 0x001308FF, 0x08E3FDFE);
	r2 = D(r2, s1_1_0, 0x04F90400, 0xF4F31307, 0x02FBFD03, 0x0803F9FC);
	r3 = D(r3, s1_1_0, 0xECFD0AF9, 0x010E01FD, 0xEE0E0AFB, 0x0BFAF7FA);
	r4 = D(r4, s1_1_0, 0x00F20301, 0x04010400, 0x0CFAEF07, 0xFB05FAFE);
	r5 = D(r5, s1_1_0, 0x0401F701, 0xFDF80CFF, 0xFE030205, 0xFB0303FF);
	r6 = D(r6, s1_1_0, 0xFD0B01FD, 0x09F2F900, 0x00EA0D07, 0x040909FF);
	r7 = D(r7, s1_1_0, 0x06EFF106, 0xF7080804, 0x0202FB00, 0x19EFFA08);
	r0 = D(r0, s1_1_1, 0x04042A01, 0xFFE91102, 0xFC16F8FC, 0xFFF20AFB);
	r1 = D(r1, s1_1_1, 0xE20604D7, 0xEFF80AFE, 0x05090905, 0x11F4EA16);
	r2 = D(r2, s1_1_1, 0xF1F50205, 0x0D05F705, 0xE6EB0201, 0x0FF311FD);
	r3 = D(r3, s1_1_1, 0x071005FB, 0xF7090E00, 0x30D6F5F6, 0x26FD00FD);
	r4 = D(r4, s1_1_1, 0xF502F8FA, 0x17F9F302, 0xF1FA0B04, 0x0AEDF605);
	r5 = D(r5, s1_1_1, 0xF5F50F06, 0x0EFDF1FA, 0x00F120EE, 0xF9F904FF);
	r6 = D(r6, s1_1_1, 0xFB090449, 0xF7FDFA02, 0xDC1BECFA, 0x220D0805);
	r7 = D(r7, s1_1_1, 0x0FFF040C, 0x080F1503, 0xFA0E0CFF, 0xEC030B08);
	r0 = D(r0, s1_1_2, 0xFFFF1309, 0x0801F6FE, 0x1616EE0A, 0xFCFAE1FF);
	r1 = D(r1, s1_1_2, 0x21EEFE05, 0xEFF9F603, 0x0A0EF506, 0xF9FB02F7);
	r2 = D(r2, s1_1_2, 0x0012FC06, 0xFB02F906, 0x1B01FEE1, 0xF1F40804);
	r3 = D(r3, s1_1_2, 0x080A0AFC, 0x03080703, 0xDBFAEA01, 0x05070601);
	r4 = D(r4, s1_1_2, 0x18010DED, 0x06FEEEFB, 0x03FFFCFE, 0x05060402);
	r5 = D(r5, s1_1_2, 0x05FEF701, 0x06FBF605, 0x01FCFC09, 0x090504F8);
	r6 = D(r6, s1_1_2, 0x12FB11F5, 0xFBFDFDFE, 0x10020AFA, 0x04071AFF);
	r7 = D(r7, s1_1_2, 0xF506FB00, 0x140204F5, 0xFF030CFF, 0x0506F9FE);
	r0 = D(r0, s1_2_0, 0x07FBF700, 0xFE020405, 0xFE1AF0FD, 0x06FBEBF1);
	r1 = D(r1, s1_2_0, 0xFE070402, 0xFF0E0101, 0x00030104, 0xFDE30002);
	r2 = D(r2, s1_2_0, 0xFB030502, 0xFDFF0707, 0xFC040403, 0xFEFB0A02);
	r3 = D(r3, s1_2_0, 0x000FFCFE, 0xFEF4FF02, 0x040300FA, 0xFF030900);
	r4 = D(r4, s1_2_0, 0x010A0202, 0xF9FF04FF, 0x01FC0A04, 0x03F701FC);
	r5 = D(r5, s1_2_0, 0xFF010904, 0x02FB0002, 0x04FE0301, 0xFD060600);
	r6 = D(r6, s1_2_0, 0xFD0004FF, 0xFD0505FF, 0x010507FF, 0x011106FE);
	r7 = D(r7, s1_2_0, 0x09FB02FE, 0xFE03F101, 0xFFF80001, 0x06F90505);
	r0 = D(r0, s1_2_1, 0x0F0FEA00, 0x05F8FDFF, 0xFD02FAFE, 0xF7170305);
	r1 = D(r1, s1_2_1, 0x06F1E7FD, 0x00100C02, 0xFE010405, 0xF8E311FD);
	r2 = D(r2, s1_2_1, 0x08050204, 0x01000104, 0xFEF9FA03, 0xFE060704);
	r3 = D(r3, s1_2_1, 0x03FCF900, 0x03F4FFFE, 0x06FDF8FD, 0xFBFF0502);
	r4 = D(r4, s1_2_1, 0x0502F202, 0xF1060204, 0x0206F600, 0x01FF0102);
	r5 = D(r5, s1_2_1, 0xFF05F902, 0xFEF7FE03, 0x0205F006, 0x0006F9FD);
	r6 = D(r6, s1_2_1, 0xFF040CFC, 0x00101003, 0x0500FC08, 0xFC11FA02);
	r7 = D(r7, s1_2_1, 0x00030409, 0x0BF5F006, 0xFF06FE00, 0x0401F505);
	r0 = D(r0, s1_2_2, 0xFC0B0303, 0xFBF400FD, 0x0B20F4F7, 0xFAFE0501);
	r1 = D(r1, s1_2_2, 0x1109FFFC, 0x0004FF02, 0x07020204, 0xFCDEFDFA);
	r2 = D(r2, s1_2_2, 0xFFF3FA0A, 0x01050002, 0x0AFCFFF2, 0x0201FE00);
	r3 = D(r3, s1_2_2, 0xFAF8FDFD, 0xFCFBFDFE, 0x050BF204, 0xFD030001);
	r4 = D(r4, s1_2_2, 0xF6FE06F6, 0xF7030301, 0xFE00FF02, 0xFEFFF007);
	r5 = D(r5, s1_2_2, 0xFF010404, 0x0307F900, 0xFEFCFF01, 0x05FC07F8);
	r6 = D(r6, s1_2_2, 0xFFFFFDFB, 0x050C0405, 0x00FAFD04, 0x0506FDFF);
	r7 = D(r7, s1_2_2, 0xFC03F40A, 0x09FAEE04, 0xFFFEFD01, 0xFD07FC01);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-2.627e-02, -9.969e-03, -4.122e-02, -1.691e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-2.974e-02, -1.865e-03, -2.838e-02, -9.028e-04);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-2.471e-02, -2.801e-02, -2.026e-02, -6.830e-03);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-4.976e-03, -1.653e-02, -3.035e-02, -6.952e-03);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-5.006e-03, -1.011e-02, 2.010e-04, -2.307e-03);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.433e-02, -1.885e-02, -5.514e-03, -9.616e-03);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-8.145e-03, -3.215e-03, -1.795e-02, -5.690e-03);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-2.060e-02, -2.995e-02, -1.103e-02, -2.388e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-8x32-BILINEAR-MPV-NVL-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv8
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv8_pt;
			r = conv8_gather(p, 0);
			g = conv8_gather(p, 1);
			b = conv8_gather(p, 2);
			a = conv8_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv8_pt;
			r = conv8_gather(p, 0);
			g = conv8_gather(p, 1);
			b = conv8_gather(p, 2);
			a = conv8_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0;
	vec4 f0;
	r0 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0001FEFF, 0xFF010300, 0x00FD0100, 0x00FE0100);
	r0 = D(r0, s0_0_1, 0x06FFF7FF, 0x03FFF3FC, 0x06FFFCFF, 0xFFFD04FF);
	r0 = D(r0, s0_0_2, 0x06FFFF06, 0xF1FF0C07, 0x0300FEFF, 0xF9FF01FE);
	r0 = D(r0, s0_1_0, 0x02E5F601, 0xFFF00002, 0xFF1CF704, 0xFF0D0201);
	r0 = D(r0, s0_1_1, 0xE9ED0FE7, 0x13E60CF4, 0xF2151A19, 0x101EE10E);
	r0 = D(r0, s0_1_2, 0x02F8FFFB, 0x03F3FEEE, 0x0609FFFD, 0xF910060B);
	r0 = D(r0, s0_2_0, 0x04010001, 0xFF01FF00, 0x050102FA, 0xFF0100FD);
	r0 = D(r0, s0_2_1, 0x0301FF00, 0xFB000001, 0xF901FF03, 0x020108FC);
	r0 = D(r0, s0_2_2, 0xFF010000, 0x0100FF00, 0xFFFF0002, 0x03FF0004);
	r0 = D(r0, s1_0_0, 0xFF0002FF, 0x00000001, 0x0000FFFE, 0x00000001);
	r0 = D(r0, s1_0_1, 0xFDFEFA12, 0xFE00FCF0, 0x0000FF05, 0x0000FEFB);
	r0 = D(r0, s1_0_2, 0x000000FE, 0xFEFEFD02, 0x0000FFFF, 0x00000001);
	r0 = D(r0, s1_1_0, 0xFE0E0702, 0x00020100, 0xFDF90703, 0x00010100);
	r0 = D(r0, s1_1_1, 0xFA0C0918, 0xF91A10E9, 0xF7F9FD1F, 0xF8F007E4);
	r0 = D(r0, s1_1_2, 0x0101FDFE, 0xFF00FCFF, 0x0000FFFE, 0xFC00FAFF);
	r0 = D(r0, s1_2_0, 0x010000FF, 0x00000000, 0x00FE02FF, 0x01FF0001);
	r0 = D(r0, s1_2_1, 0x02000003, 0x020100FD, 0x01FD0509, 0x00FC06F5);
	r0 = D(r0, s1_2_2, 0x000000FF, 0x01000100, 0x0100FFFE, 0x02FF0002);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x02010005, 0xFF010002, 0xFF0000FF, 0x00FF0001);
	r0 = D(r0, s0_0_1, 0x0CFF00FE, 0x0B02FFFD, 0x01000000, 0xFF010000);
	r0 = D(r0, s0_0_2, 0xFF000200, 0xFFFF00FF, 0x02000000, 0x02000000);
	r0 = D(r0, s0_1_0, 0x05E7FFE7, 0x010300FE, 0x07F80017, 0x000500F3);
	r0 = D(r0, s0_1_1, 0xEBFA0D02, 0x061CFB16, 0x02FDFCFC, 0x1707FE07);
	r0 = D(r0, s0_1_2, 0x0400E900, 0xF3FE0DFF, 0xFE000700, 0xEFFF05FF);
	r0 = D(r0, s0_2_0, 0xFEFB0204, 0xFF020000, 0xFDEC00F7, 0x0002FF03);
	r0 = D(r0, s0_2_1, 0x02FEEDFF, 0x000705FD, 0xF8F90E0B, 0xFC1B08F1);
	r0 = D(r0, s0_2_2, 0x00000401, 0x02FE0501, 0x02000400, 0x00FDE203);
	r0 = D(r0, s1_0_0, 0x000101FF, 0x00FF0000, 0x00010000, 0x00FF0000);
	r0 = D(r0, s1_0_1, 0x05EFFF03, 0x030E0100, 0x02FC0000, 0x0103FF00);
	r0 = D(r0, s1_0_2, 0xFE010001, 0x00030002, 0x01000100, 0x02000100);
	r0 = D(r0, s1_1_0, 0xFFFEFF00, 0xFFFF00FF, 0x02FF0201, 0x00FF0101);
	r0 = D(r0, s1_1_1, 0x14E6E2EA, 0x0819F6FA, 0xDDE00707, 0xF61C0401);
	r0 = D(r0, s1_1_2, 0x03FF06FC, 0x0E06FDEF, 0xFF00FB05, 0xE908FD0A);
	r0 = D(r0, s1_2_0, 0x01020100, 0x00FFFF00, 0x00000002, 0x00FF0100);
	r0 = D(r0, s1_2_1, 0xFFFFFA06, 0xFF02FF02, 0x05F716FE, 0x03080503);
	r0 = D(r0, s1_2_2, 0x0001FF04, 0xFFFFFD07, 0x000100FC, 0x03000BF9);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0A0001FE, 0x0000FF01, 0x03000401, 0x00000100);
	r0 = D(r0, s0_0_1, 0xEF041502, 0x05010F01, 0xFC000200, 0xFB000601);
	r0 = D(r0, s0_0_2, 0x02FF0000, 0xFB020701, 0x01000000, 0x0000FF00);
	r0 = D(r0, s0_1_0, 0xFEFF02F5, 0xFFFF0202, 0x05FFF4F6, 0xFF00FF02);
	r0 = D(r0, s0_1_1, 0x0311F80E, 0x0D00FEF1, 0xF20FF907, 0x1702E8FB);
	r0 = D(r0, s0_1_2, 0x00EB00FF, 0xF7FBFC04, 0x02F0FFFF, 0xF4020303);
	r0 = D(r0, s0_2_0, 0x000000FF, 0x00000001, 0x000002FB, 0x00000102);
	r0 = D(r0, s0_2_1, 0x01000003, 0x000000FC, 0x0406000B, 0x010002F2);
	r0 = D(r0, s0_2_2, 0x00000000, 0x01FF0103, 0x00FB00FF, 0xFFFBFF04);
	r0 = D(r0, s1_0_0, 0xF2010200, 0xF70000FF, 0xFF000100, 0x01000000);
	r0 = D(r0, s1_0_1, 0x010600FD, 0xFE05FCFF, 0xFF000000, 0xFF00FE00);
	r0 = D(r0, s1_0_2, 0x00000101, 0xFF020103, 0x000000FF, 0xFF000000);
	r0 = D(r0, s1_1_0, 0x11021500, 0xFD00FFFF, 0xF9020DFF, 0xED00FF00);
	r0 = D(r0, s1_1_1, 0xFF090D06, 0x1407DB0E, 0x030D0509, 0x120AEEFD);
	r0 = D(r0, s1_1_2, 0x0000000A, 0xFF0502E1, 0x000001FF, 0xFF060202);
	r0 = D(r0, s1_2_0, 0x00000400, 0xFF0001FF, 0x09010F04, 0x04000100);
	r0 = D(r0, s1_2_1, 0x00000106, 0x0000FDF7, 0xFF0208DB, 0x0302E907);
	r0 = D(r0, s1_2_2, 0x000000FE, 0x00000307, 0x00000007, 0xFF01030C);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x04FF04FF, 0x01000000, 0x0000FF00, 0xFF000000);
	r0 = D(r0, s0_0_1, 0x07FE05FC, 0x080309FC, 0x00FFF400, 0x0100F700);
	r0 = D(r0, s0_0_2, 0x0000FB00, 0x02FFFAFF, 0x0000FF00, 0x0000FB00);
	r0 = D(r0, s0_1_0, 0xF601FFFC, 0xFF030100, 0x02F4FFFC, 0x0202FF00);
	r0 = D(r0, s0_1_1, 0xF91900F4, 0xEFE2FBF5, 0x090910F5, 0x080706F5);
	r0 = D(r0, s0_1_2, 0xFFFE0100, 0x000506FC, 0x00FF0000, 0x03FD0CFC);
	r0 = D(r0, s0_2_0, 0x01000000, 0x00000000, 0xFB0700FF, 0xFF010000);
	r0 = D(r0, s0_2_1, 0x00F9FF00, 0x00070000, 0xFAEE00FC, 0xF8FF00FC);
	r0 = D(r0, s0_2_2, 0x00010000, 0xFFFF0000, 0x00FF0100, 0xFF0F01FF);
	r0 = D(r0, s1_0_0, 0x000003FF, 0x00FFFF00, 0x00000001, 0x00010100);
	r0 = D(r0, s1_0_1, 0x0201FDF5, 0xFFFF0410, 0x01FFFEF9, 0xFFFFFD00);
	r0 = D(r0, s1_0_2, 0x0000FF03, 0xFF01FCF5, 0x01000001, 0xFE00FF02);
	r0 = D(r0, s1_1_0, 0x0001FD00, 0x00060200, 0x00FE00FD, 0x00FCFF00);
	r0 = D(r0, s1_1_1, 0x02FEF005, 0x00DFF1F5, 0xFC071E1C, 0x001013FB);
	r0 = D(r0, s1_1_2, 0x110004F8, 0xF208FF12, 0xF001FFFC, 0x15FF0AEA);
	r0 = D(r0, s1_2_0, 0x00FF0000, 0x00000000, 0x0002FFFF, 0x00FF0000);
	r0 = D(r0, s1_2_1, 0xFF030000, 0x00FE00FF, 0x01FDFDFE, 0x000EFFFE);
	r0 = D(r0, s1_2_2, 0xFEFE0000, 0x00FF0100, 0x0301FF01, 0xFDF9FD04);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(8.364e-09, 2.195e-08, -4.782e-09, 8.118e-10);
	f0 = tanh(f0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(f0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(f0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(f0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(f0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
