// CuNNy 4x12 BILINEAR MPV NVL DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-4x12-BILINEAR-MPV-NVL-DS-in
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(LUMA_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0)) + vec2(0.5)) * LUMA_pt).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(-2.157e-03, -1.751e-02, -2.103e-02, 2.564e-02) * s0_0_0;
	r1 += V4(2.522e-02, -1.721e-01, -1.257e-02, 4.036e-02) * s0_0_0;
	r2 += V4(4.781e-02, 4.613e-02, 4.335e-03, -6.186e-02) * s0_0_0;
	r0 += V4(7.966e-02, -6.585e-01, 8.755e-02, -2.624e-03) * s0_0_1;
	r1 += V4(-2.337e-02, -2.675e-02, -3.845e-02, 7.474e-02) * s0_0_1;
	r2 += V4(-3.303e-02, 6.445e-02, 1.812e-02, 2.163e-02) * s0_0_1;
	r0 += V4(1.826e-02, -7.863e-03, -6.567e-02, -2.989e-02) * s0_0_2;
	r1 += V4(-9.642e-03, -6.238e-02, -8.221e-02, 3.551e-02) * s0_0_2;
	r2 += V4(-1.278e-02, 2.928e-03, -2.775e-02, 3.674e-02) * s0_0_2;
	r0 += V4(-5.785e+00, 3.162e-02, 1.617e-02, 5.480e-03) * s0_1_0;
	r1 += V4(-3.745e-02, -2.670e-01, 2.145e-02, 1.182e-01) * s0_1_0;
	r2 += V4(3.188e-02, -1.354e-02, -6.421e-02, 5.786e-01) * s0_1_0;
	r0 += V4(-4.150e-01, 6.309e-01, 6.074e-01, -2.063e-02) * s0_1_1;
	r1 += V4(-7.402e-01, 4.327e-01, 4.795e-01, 2.173e-01) * s0_1_1;
	r2 += V4(-5.043e-01, -1.120e+00, 6.827e-01, -4.658e-01) * s0_1_1;
	r0 += V4(1.129e-01, 2.561e-02, -6.203e-01, -6.340e-03) * s0_1_2;
	r1 += V4(2.102e-01, 1.447e-01, -1.435e-01, -8.153e-02) * s0_1_2;
	r2 += V4(-9.687e-02, 7.271e-02, 5.901e-02, -7.894e-02) * s0_1_2;
	r0 += V4(3.961e-02, -1.490e-02, 7.895e-03, -4.684e-02) * s0_2_0;
	r1 += V4(7.988e-04, -5.172e-02, -1.457e-02, -5.088e-03) * s0_2_0;
	r2 += V4(3.228e-01, 7.184e-02, -2.687e-01, -9.555e-02) * s0_2_0;
	r0 += V4(1.165e-01, 3.479e-02, 1.510e-01, 5.901e-01) * s0_2_1;
	r1 += V4(1.185e-01, 2.256e-02, -8.850e-03, 1.399e-01) * s0_2_1;
	r2 += V4(1.456e-01, -1.505e+00, -3.598e-01, 3.367e-02) * s0_2_1;
	r0 += V4(6.145e-03, -1.762e-02, -1.637e-01, -5.020e-01) * s0_2_2;
	r1 += V4(4.562e-01, -1.730e-02, -1.470e-01, 3.291e-02) * s0_2_2;
	r2 += V4(1.007e-01, 7.702e-02, -4.064e-02, 3.374e-02) * s0_2_2;
	r0 += V4(6.455e-02, -5.132e-03, 1.360e-02, -2.366e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-2.141e-03, 9.650e-03, 2.577e-03, -2.359e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(1.035e-02, 8.120e-02, -3.262e-03, -1.885e-03);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-4x12-BILINEAR-MPV-NVL-DS-conv1
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0)) + vec2(0.5)) * in_pt))
#define l1(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0)) + vec2(0.5)) * in_pt))
#define l2(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0)) + vec2(0.5)) * in_pt))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-3.643e-02, 8.805e-02, 1.041e-01, 8.229e-02, 3.480e-02, 1.943e-01, 6.131e-03, 1.867e-02, 5.818e-01, 4.399e-01, 9.121e-02, -1.680e-01, -5.233e-01, -3.468e-01, -7.871e-02, -2.570e-01) * s0_0_0;
	r1 += M4(2.077e-01, 3.536e-02, -3.344e-02, 2.940e-02, 3.836e-03, 5.053e-02, 2.960e-02, 2.856e-02, -1.177e-01, 3.793e-01, -5.044e-02, 3.369e-01, 5.360e-01, -2.770e-01, 5.794e-01, 2.421e-01) * s0_0_0;
	r2 += M4(-3.056e-02, 9.548e-02, 4.870e-03, 1.678e-01, 3.734e-02, -3.086e-02, -5.127e-02, -7.452e-02, 1.494e-01, 1.431e-01, -1.449e-01, -4.808e-01, 1.509e-02, -4.407e-01, 1.499e-01, -4.342e-01) * s0_0_0;
	r0 += M4(-2.047e-01, -2.260e-01, -8.133e-02, 1.871e-01, -6.713e-02, -1.752e-01, 1.290e-01, 4.545e-02, -2.072e-01, -1.117e-01, 2.225e-01, -1.903e-01, -1.127e-01, -3.490e-01, 4.207e-01, -1.718e-01) * s0_0_1;
	r1 += M4(4.828e-02, -1.783e-01, -8.406e-02, 2.045e-01, -1.489e-01, 5.878e-02, 3.220e-03, -1.357e-02, -2.803e-01, -9.558e-02, -1.254e-01, 1.344e-01, 4.613e-01, 1.539e-01, -2.401e+00, -3.183e-01) * s0_0_1;
	r2 += M4(2.894e-02, 1.335e-01, 7.779e-02, -1.262e-01, 1.017e-01, -7.278e-02, 1.570e-01, 5.347e-02, 1.405e-01, -1.013e-01, -8.198e-02, 7.146e-02, -2.350e-01, -1.304e-01, 1.383e-01, -8.387e-02) * s0_0_1;
	r0 += M4(-2.772e-01, -5.750e-02, 6.530e-02, 1.686e-01, -9.479e-02, 2.416e-01, 1.010e-02, 7.010e-02, -9.939e-03, 9.975e-03, 7.973e-02, -8.747e-02, -4.597e-02, 6.421e-02, -1.010e-01, 5.385e-02) * s0_0_2;
	r1 += M4(8.155e-02, -9.837e-02, -1.115e-01, -1.940e-01, -1.580e-01, -2.725e-02, 5.468e-03, -7.706e-02, -3.984e-02, -8.674e-02, 1.600e-02, -1.283e-01, 4.440e-01, 9.751e-02, 6.325e-01, -1.362e-01) * s0_0_2;
	r2 += M4(3.471e-02, 7.888e-02, -1.060e-01, 1.104e-01, 1.293e-02, -3.737e-02, -1.392e-01, 9.611e-02, -7.182e-02, 8.347e-02, -1.694e-01, 4.432e-02, -3.391e-01, -5.931e-02, 1.035e-01, -3.224e-02) * s0_0_2;
	r0 += M4(2.278e-02, 1.186e-01, 7.258e-03, -1.126e-02, 2.979e-01, 4.808e-01, 1.373e-01, 7.536e-02, 3.628e-01, -2.415e+00, -1.527e-01, -5.058e-02, -1.347e-01, -8.918e-01, 5.524e-02, 3.934e-01) * s0_1_0;
	r1 += M4(8.386e-02, 6.370e-03, 4.465e-02, -1.446e-01, -6.069e-02, -2.733e-01, -5.405e-02, 1.899e-01, 3.522e-02, 4.308e-01, -3.302e-01, 3.792e-01, -1.831e-03, -7.649e-02, -1.052e-01, 1.945e-01) * s0_1_0;
	r2 += M4(-5.456e-02, 7.230e-02, 1.072e-01, -2.310e-02, 1.548e-01, 5.397e-02, 4.757e-02, 5.814e-02, 1.943e-01, 1.578e-01, 2.343e-01, -1.736e+00, -6.331e-02, 3.887e-02, -2.006e-01, 1.947e-02) * s0_1_0;
	r0 += M4(1.286e-01, -5.999e-02, 9.820e-02, -1.236e-01, -4.181e-01, -8.648e-01, 5.137e-01, 5.639e-01, 1.440e-01, 1.381e-01, -2.551e-01, 3.308e-01, -1.275e-01, 3.819e-01, -9.058e-02, 7.071e-02) * s0_1_1;
	r1 += M4(2.668e-01, 4.340e-01, 3.220e-01, -4.584e-02, -3.827e-01, -4.118e-01, -1.254e-01, 6.035e-01, 7.557e-02, 4.376e-02, -7.928e-01, 2.043e-01, 3.138e-01, -2.468e-01, 1.509e-01, 8.767e-02) * s0_1_1;
	r2 += M4(5.375e-01, 2.604e-01, 2.937e-01, -2.545e-01, -1.329e+00, -3.234e-01, 3.135e-01, 3.682e-01, -6.288e-01, 1.090e-01, -1.851e-01, -3.174e-01, 3.581e-01, -1.192e-01, 2.338e-01, 3.148e-01) * s0_1_1;
	r0 += M4(-1.159e+00, 5.812e-01, -6.665e+00, -6.691e-02, -3.576e-01, 1.910e-01, -1.812e-01, -4.359e-02, 1.291e-02, -2.053e-02, -3.464e-02, 8.217e-02, -1.172e-01, 7.922e-02, -1.254e-01, 2.179e-01) * s0_1_2;
	r1 += M4(3.198e-01, 7.156e-01, 8.324e-01, 2.604e-01, -2.212e-01, 7.717e-02, 3.152e-01, -3.506e-01, -4.345e-01, -3.600e-02, -5.117e-01, 2.749e-02, -1.342e-01, -1.744e-01, -2.469e-01, 3.134e-01) * s0_1_2;
	r2 += M4(1.035e+00, -3.285e-01, 1.242e-01, -6.714e-01, -6.462e-02, 2.900e-01, -3.896e-03, -1.487e-02, 1.636e-01, -6.463e-02, -1.433e-01, 1.028e-02, -4.616e-02, -9.808e-02, 1.241e-01, -5.889e-03) * s0_1_2;
	r0 += M4(-7.403e-02, 4.535e-02, 1.597e-01, 9.143e-02, -9.055e-02, 3.395e-01, -2.860e-03, 4.476e-02, 2.439e-01, 2.803e-02, -2.253e-02, -4.320e-02, -3.058e-02, 1.141e-01, 1.236e-02, 2.326e-03) * s0_2_0;
	r1 += M4(2.065e-02, -8.117e-02, 3.207e-02, -2.550e-03, -2.665e-01, -3.695e-01, -2.270e-02, -1.070e-01, 2.200e-01, -4.064e-01, 2.509e-01, 9.059e-02, -2.125e-01, 5.114e-02, -8.083e-02, -4.996e-02) * s0_2_0;
	r2 += M4(1.721e-02, -6.846e-02, -1.046e-02, 3.992e-02, 2.936e-01, -8.348e-02, 4.148e-01, 8.384e-02, -1.646e-01, 4.826e-02, 3.024e-01, -1.106e+00, -8.583e-02, 1.797e-02, -1.352e-01, 3.133e-01) * s0_2_0;
	r0 += M4(3.094e-01, 2.166e-01, 6.562e-02, 7.749e-02, -2.685e-01, -3.778e+00, -3.792e-03, 1.851e-01, 1.018e-01, -1.471e-01, 1.726e-01, -3.735e-02, 1.519e-01, 1.757e-01, 3.345e-02, 1.918e-02) * s0_2_1;
	r1 += M4(-5.690e-02, -8.264e-02, 6.037e-02, 3.701e-02, 2.123e-01, -1.817e-01, 2.417e-01, 3.307e-01, -3.071e-02, 4.709e-02, 1.616e-02, -4.549e-02, 6.287e-02, -1.482e-02, -2.051e-03, 3.275e-02) * s0_2_1;
	r2 += M4(2.595e-01, -3.747e-01, -1.663e-01, -3.922e-01, 2.052e-01, -9.432e-01, -7.675e-01, -3.221e-01, -3.484e-01, 1.295e-01, 1.033e-01, -2.207e-01, 3.386e-02, 1.963e-01, -1.040e-01, 1.353e-01) * s0_2_1;
	r0 += M4(4.140e-01, -2.346e-01, 3.306e-01, 1.344e-01, 3.809e-02, 6.041e-01, 7.390e-03, 2.570e-01, 1.206e-01, -7.646e-02, 7.259e-02, -8.180e-02, -9.945e-02, 4.590e-02, 2.542e-02, 2.093e-02) * s0_2_2;
	r1 += M4(3.031e-01, 2.426e-01, 1.489e-01, 1.617e-01, -1.159e-01, 2.157e-01, -4.464e-01, -8.888e-02, 9.877e-02, -5.791e-02, 1.456e-01, -1.466e-01, -5.632e-02, 6.242e-02, -2.031e-02, 2.752e-02) * s0_2_2;
	r2 += M4(3.367e-01, -3.825e-02, 5.828e-02, -3.320e-01, -6.043e-02, 5.223e-01, -2.954e-01, 2.940e-01, -2.257e-01, 2.665e-01, 7.815e-02, -1.492e-02, 5.920e-02, 7.600e-02, -3.799e-02, 1.159e-02) * s0_2_2;
	r0 += M4(-1.589e-01, -2.326e-01, 2.307e-01, 1.928e-01, 1.347e-02, 4.075e-02, 3.099e-02, 2.616e-02, -8.068e-05, -9.954e-02, -3.802e-02, -5.141e-02, -2.097e-02, -1.869e-01, 1.587e-01, 1.712e-01) * s1_0_0;
	r1 += M4(9.192e-02, 2.125e-01, 4.635e-02, 2.399e-01, -1.694e-01, -2.311e-01, -4.898e-02, 8.004e-02, -2.050e-01, -1.232e-01, 1.251e-01, -4.099e-02, -2.991e-01, -2.275e-01, -1.379e-01, 1.433e-01) * s1_0_0;
	r2 += M4(-3.769e-01, -3.275e-01, 3.887e-02, 3.649e-02, 5.531e-02, -5.797e-02, -5.378e-02, 2.025e-01, -3.373e-01, 1.290e-01, -2.949e-02, -1.613e-01, -4.334e-02, 2.440e-01, 5.810e-02, -3.802e-03) * s1_0_0;
	r0 += M4(-5.371e-02, -3.985e-01, -2.424e-01, 1.938e-01, -1.092e-01, -4.289e-01, -4.577e-02, 3.131e-02, 2.534e-01, -1.373e-01, -1.469e-01, 7.147e-02, -1.995e-01, 5.600e-02, 1.652e-01, 2.595e-01) * s1_0_1;
	r1 += M4(-1.788e-01, 2.250e-01, 3.697e-01, -1.881e-01, 8.324e-02, -5.188e-02, -6.305e-02, -7.780e-02, 1.153e-01, -3.478e-01, 1.670e-01, 3.944e-01, -2.740e-01, -3.330e-01, 1.064e-01, -1.287e-02) * s1_0_1;
	r2 += M4(-1.013e-01, 2.407e-01, 2.666e-01, -1.194e-01, -1.429e-01, 5.067e-01, 1.080e-02, 5.567e-02, 5.515e-02, 9.915e-03, -1.195e-01, 4.095e-02, -3.503e-02, -3.509e-02, 1.372e-03, 2.909e-01) * s1_0_1;
	r0 += M4(1.227e-01, 1.448e-01, 4.494e-03, 1.386e-01, 1.066e-01, -6.406e-02, 3.814e-02, -8.667e-02, -1.093e-01, -3.956e-02, -3.475e-02, -3.762e-02, -2.451e-01, 1.165e-01, 2.341e-01, -2.466e-03) * s1_0_2;
	r1 += M4(-6.488e-02, -2.436e-02, -1.335e-01, -1.133e-03, 3.484e-01, -1.420e-01, -9.156e-02, 1.217e-02, 1.321e-01, 1.310e-01, 8.786e-02, 1.929e-01, -2.731e-01, -1.592e-02, 2.018e-01, 4.810e-02) * s1_0_2;
	r2 += M4(-1.350e-01, -8.101e-02, 3.719e-03, -7.229e-02, -1.257e-02, -1.132e-02, 7.784e-02, -9.127e-03, 1.048e-01, 2.241e-01, 1.765e-01, -2.069e-01, 3.112e-01, 1.624e-01, 2.636e-02, 1.211e-01) * s1_0_2;
	r0 += M4(3.948e-01, 3.550e-01, 7.465e-02, -1.116e-02, 1.415e-02, 1.544e-01, -4.769e-02, -1.019e-01, -2.709e-02, 1.601e-02, -4.940e-02, 4.753e-02, -1.821e-01, -1.926e-01, -1.849e-01, -2.476e-01) * s1_1_0;
	r1 += M4(1.376e-01, -3.762e-01, -1.133e-01, -9.082e-02, -3.217e-01, 2.096e-02, -1.063e-01, -3.141e-01, 1.001e-02, -2.930e-01, -1.689e-01, 7.097e-02, -2.361e-02, 3.107e-02, -4.262e-02, 2.953e-02) * s1_1_0;
	r2 += M4(-7.758e-01, 4.561e-01, -1.028e-01, -4.150e-01, 2.569e-01, 4.385e-01, 1.753e-01, -1.120e-01, -1.632e-01, 3.470e-01, -1.196e-01, 7.651e-03, 3.174e-01, -1.162e-02, 1.497e-01, -4.382e-02) * s1_1_0;
	r0 += M4(1.332e-01, -2.041e+00, -8.803e-02, -8.079e-02, 4.252e-01, 2.881e-01, 2.756e-01, 2.406e-01, 5.449e-01, 2.683e-01, 3.066e-01, -1.195e-02, 3.416e-01, 2.818e-01, 8.135e-02, 1.330e-01) * s1_1_1;
	r1 += M4(-3.209e-01, 3.857e-01, 2.488e-01, 2.548e-01, -1.695e-01, 1.200e-01, -1.407e-01, -6.107e-02, -4.879e-01, 8.807e-02, -2.802e-01, -4.775e-01, -1.733e-01, -1.381e-01, -3.408e-01, -1.067e-01) * s1_1_1;
	r2 += M4(-1.694e-01, 1.345e-01, 6.724e-02, 2.861e-01, -1.175e-01, 4.488e-01, -1.284e-01, -1.868e-01, 1.327e+00, 5.034e-01, 4.161e-01, 2.314e-01, -1.891e-02, 4.287e-02, 1.209e-01, 3.375e-01) * s1_1_1;
	r0 += M4(1.470e-01, -9.243e-02, 1.106e-01, -2.815e-02, -9.057e-02, -1.353e-01, -5.213e-03, -1.846e-01, 4.116e-02, 9.759e-03, 9.044e-02, -1.990e-01, 1.962e-01, 5.797e-02, 1.375e-01, -2.996e-01) * s1_1_2;
	r1 += M4(-8.292e-02, -6.519e-02, 7.086e-03, -2.875e-02, 3.255e-01, 1.038e-01, 3.324e-01, -1.725e-01, 6.804e-01, 1.437e-01, 2.026e-01, 1.068e-01, 2.050e-01, -2.147e-01, 2.362e-01, 3.281e-03) * s1_1_2;
	r2 += M4(2.256e-02, 1.882e-01, 7.658e-02, 6.495e-02, 2.670e-01, -2.156e-01, 1.069e-02, 4.053e-02, 2.171e-01, -4.121e-01, 1.342e-01, 1.640e-01, -3.731e-01, 8.716e-02, 2.779e-02, -1.577e-01) * s1_1_2;
	r0 += M4(2.702e-02, -2.916e-02, 9.549e-04, 1.864e-02, 6.580e-02, -2.057e-01, -6.617e-03, 3.105e-02, -2.565e-01, 1.652e-01, -4.111e-02, 3.989e-03, -2.823e-01, -1.796e-01, 2.048e-01, 8.830e-03) * s1_2_0;
	r1 += M4(-4.093e-01, -1.015e-01, 2.572e-03, -1.497e-01, 1.822e-02, 2.193e-01, 1.160e-02, 9.595e-02, 1.643e-01, 2.265e-01, -3.468e-02, 1.466e-01, 2.871e-01, 3.654e-01, -1.736e-01, -2.812e-02) * s1_2_0;
	r2 += M4(6.015e-02, -1.048e-01, 3.087e-02, 6.197e-02, -1.468e-02, -9.251e-02, 1.037e-01, 7.548e-02, -1.533e-02, -2.505e-02, -1.378e-01, -1.777e-01, 2.209e-01, -1.724e-01, 2.017e-02, -2.248e-01) * s1_2_0;
	r0 += M4(2.195e-01, -2.769e-01, 2.394e-02, 3.548e-02, -3.167e-01, 6.414e-03, -8.470e-02, -2.609e-01, -2.417e-01, 3.450e-01, -6.408e-02, -1.662e-01, 1.735e-01, 5.440e-02, 2.030e-01, 3.649e-02) * s1_2_1;
	r1 += M4(-1.158e-01, -1.360e-01, 2.095e-02, 7.717e-03, -4.166e-01, 4.565e-01, -2.180e-02, -3.862e-02, -6.383e-02, 3.945e-01, 7.411e-02, -1.781e-01, 3.632e-01, 3.652e-01, -1.080e-02, -4.014e-02) * s1_2_1;
	r2 += M4(2.713e-01, 2.459e-01, 2.686e-02, 1.195e-01, -1.101e-01, -5.347e-01, 2.130e-01, -1.105e-02, 1.206e-01, -2.875e-01, 3.422e-03, -2.612e-01, -2.541e-01, -9.522e-02, -1.843e-01, 3.529e-02) * s1_2_1;
	r0 += M4(-1.095e-01, 1.538e-01, -1.786e-02, 2.994e-02, -2.930e-01, -1.180e-02, -1.015e-01, 7.302e-02, 1.792e-01, 3.853e-02, -7.147e-02, 1.934e-02, 2.307e-01, 3.361e-03, 1.504e-01, -3.308e-02) * s1_2_2;
	r1 += M4(-4.881e-02, 1.234e-01, 1.523e-02, -3.185e-02, 1.881e-01, -2.594e-01, 2.267e-01, 1.901e-01, -2.582e-01, 2.044e-01, 5.461e-02, -2.815e-02, 1.853e-01, 1.130e-01, 1.271e-01, -6.398e-02) * s1_2_2;
	r2 += M4(-6.233e-03, 3.081e-02, -4.094e-02, 9.065e-02, -4.672e-02, -6.873e-01, -4.415e-02, -2.115e-01, 2.561e-01, -3.685e-01, -1.032e-01, 4.414e-02, -2.956e-01, -2.117e-01, -4.605e-02, -3.168e-01) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(1.983e-01, 1.217e-02, -3.414e-02, -6.737e-02, 3.749e-02, 1.169e-01, -5.236e-03, 1.658e-01, -2.028e-01, -3.694e-01, 6.323e-02, 6.470e-02, -7.566e-03, 1.294e-01, 6.257e-02, 1.567e-02) * s0_0_0;
	r1 += M4(-2.705e-01, -2.727e-03, -6.714e-02, -2.427e-01, 2.587e-01, -8.848e-02, -1.263e-01, 4.695e-02, 5.410e-01, 1.949e-01, 1.056e-01, 1.326e-01, 1.451e-01, 1.984e-02, 5.830e-02, 1.090e-02) * s0_0_0;
	r2 += M4(-5.512e-02, 4.066e-01, 2.192e-02, -5.997e-02, 3.021e-01, 2.061e-01, -1.513e-01, -6.775e-02, -3.673e-02, -2.536e-01, -4.066e-02, -1.570e-01, -8.090e-03, -1.049e-01, -9.319e-03, 8.424e-02) * s0_0_0;
	r0 += M4(2.523e-02, 3.645e-01, 2.444e-01, 3.023e-01, -7.936e-01, 7.987e-02, -3.395e-01, -2.019e-01, -1.003e+00, -8.814e-01, -8.747e-03, 1.556e-02, -3.170e-01, -2.336e-01, -1.329e-01, 1.803e-01) * s0_0_1;
	r1 += M4(-2.416e-01, -1.735e-01, -2.970e-02, -9.334e-02, 4.349e-01, 2.614e-01, 3.640e-01, 1.252e-02, 2.998e-01, 3.299e-01, -7.550e-02, 6.470e-01, 6.914e-02, -3.268e-01, -6.164e-02, -2.897e-01) * s0_0_1;
	r2 += M4(-3.177e-01, -9.219e-02, 1.357e-01, 1.617e-01, 5.931e-02, -2.536e+00, 1.004e-01, 1.829e-01, 4.441e-01, -6.521e-01, 2.104e-01, 1.791e-01, 3.497e-01, -4.218e-01, 5.788e-02, 7.731e-01) * s0_0_1;
	r0 += M4(1.335e-01, -1.475e-01, -1.184e-01, 3.993e-01, -1.982e-01, 1.389e-01, -1.073e-01, 1.816e-01, -9.206e-01, -8.061e-01, -1.714e-01, 1.970e-01, -1.565e-01, 9.164e-02, -6.815e-02, 7.487e-02) * s0_0_2;
	r1 += M4(-3.798e-01, -7.719e-02, -2.330e-01, 3.643e-01, -9.565e-02, -7.150e-02, -4.829e-02, -2.913e-01, -1.712e-01, 2.747e-02, -7.887e-02, 2.973e-01, -1.490e-02, 2.141e-01, 2.966e-02, -1.652e-01) * s0_0_2;
	r2 += M4(-3.300e-01, -9.857e-02, 1.662e-02, 1.172e-01, 7.736e-02, -1.156e-01, -1.259e-01, 8.637e-02, 5.915e-02, -3.452e-01, -7.171e-02, -4.849e-02, -8.254e-02, -1.245e-02, 5.108e-02, -1.334e-02) * s0_0_2;
	r0 += M4(-4.721e-02, -1.463e-01, -9.393e-03, 8.966e-02, -7.542e-03, -1.601e-01, 1.913e-03, 1.429e-01, -1.533e-01, 1.025e-01, 5.079e-03, -4.730e-02, 1.077e-01, 2.076e-01, 1.341e-01, 1.264e-01) * s0_1_0;
	r1 += M4(2.527e-01, 4.877e-01, 1.174e-01, -1.129e-01, 8.784e-02, 7.503e-02, -1.431e-01, -2.921e-02, -9.379e-02, -1.551e-01, -1.761e-02, 1.376e-01, 1.681e-01, -6.239e-02, -1.475e-02, 2.107e-01) * s0_1_0;
	r2 += M4(7.899e-02, -4.930e-02, 1.641e-01, 3.500e-01, -3.969e-01, -1.664e-01, 1.494e-02, -2.644e-01, -1.095e-01, -2.118e-01, -2.373e-01, -1.625e-01, -1.311e-01, -1.422e-01, -4.904e-02, -4.565e-01) * s0_1_0;
	r0 += M4(2.267e-01, 2.016e-01, -2.358e-01, -2.720e-01, -7.558e-01, -6.487e-01, 2.237e-01, 9.460e-02, 2.647e-01, 5.441e-01, 6.051e-01, 1.776e-01, -3.111e-01, -7.382e-01, 1.371e-01, 2.457e-01) * s0_1_1;
	r1 += M4(-1.400e-02, 7.194e-01, 2.398e-01, 4.064e-02, -1.340e-01, -7.119e-02, 5.188e-01, 2.322e-01, 6.037e-01, -9.114e-01, -3.593e-01, -1.848e-01, 3.365e-01, 6.075e-02, 2.226e-01, 8.820e-02) * s0_1_1;
	r2 += M4(3.229e-01, -5.266e-01, 4.057e-01, 2.249e-01, 9.060e-01, -2.505e+00, -8.683e-02, 5.425e-01, -3.312e-01, 1.965e-01, -1.361e-01, -4.419e-01, 1.926e-01, -1.074e+00, 2.685e-02, -6.233e-01) * s0_1_1;
	r0 += M4(1.694e-01, 9.733e-02, 6.024e-02, -3.494e-03, 3.619e-01, -3.713e-01, -3.392e-02, 4.107e-01, -6.238e-01, -7.641e-01, -6.995e-02, -1.119e-01, -3.623e-01, -1.643e-01, -8.580e-02, 2.220e-01) * s0_1_2;
	r1 += M4(2.815e-02, -7.978e-02, -2.382e-01, 1.969e-02, -4.211e-01, 2.878e-01, -4.057e-01, 1.631e-01, -2.542e-01, 3.510e-02, 4.411e-01, 7.872e-02, -8.457e-01, 2.045e-01, -1.443e+00, -1.336e-01) * s0_1_2;
	r2 += M4(2.397e-01, 2.159e-01, 1.353e-01, -3.769e-01, 3.779e-01, 3.370e-01, -4.950e-01, 4.199e-01, -1.361e-01, -1.127e-01, -2.036e-01, 1.666e-01, -4.982e-01, 1.331e-01, 5.612e-02, -6.248e-01) * s0_1_2;
	r0 += M4(1.490e-01, 1.395e-01, 1.337e-01, 3.014e-02, 3.011e-01, -1.412e-01, 1.896e-01, 8.166e-02, 3.469e-02, 8.767e-02, 1.738e-02, 1.311e-03, 4.730e-02, 9.799e-02, 7.211e-02, 3.671e-02) * s0_2_0;
	r1 += M4(-8.322e-02, -1.463e-01, 4.651e-02, 6.319e-02, -1.087e-01, -1.384e-01, -6.815e-02, 8.712e-02, 2.524e-01, 9.054e-02, -1.918e-02, 2.157e-02, -1.979e-01, -3.651e-01, 5.520e-02, 2.767e-02) * s0_2_0;
	r2 += M4(-4.346e-02, -4.555e-02, -1.246e-01, 2.335e-01, -9.586e-02, -6.595e-02, -2.938e-01, 6.544e-02, -1.079e-02, 7.042e-02, -1.941e-02, -8.377e-02, 1.093e-02, 6.176e-02, -8.629e-02, -3.988e-01) * s0_2_0;
	r0 += M4(-3.226e-01, 1.441e-01, -9.470e-02, -7.040e-04, -2.851e-01, 6.394e-01, 1.799e-01, 5.343e-03, 1.130e-01, -7.299e-02, 7.881e-02, 5.635e-02, 3.553e-01, 6.184e-02, 4.824e-02, -4.944e-02) * s0_2_1;
	r1 += M4(5.612e-01, -7.604e-02, 1.722e-02, 1.370e-02, 7.874e-02, -6.241e-01, 3.452e-03, -1.914e-01, -2.627e-01, -2.396e-02, -7.353e-03, 2.045e-02, -1.013e-01, -5.628e-01, 3.538e-03, -3.001e-01) * s0_2_1;
	r2 += M4(6.810e-02, -1.980e-01, -5.003e-02, 5.927e-02, 1.489e-01, 1.418e-01, 2.708e-01, 1.921e-01, -8.278e-02, -3.817e-02, 2.290e-01, 2.065e-01, -5.661e-02, 1.192e-01, -9.687e-02, -4.152e-01) * s0_2_1;
	r0 += M4(2.207e-01, 9.164e-02, -4.358e-02, 1.641e-02, 7.481e-01, -1.699e-01, 9.853e-03, 1.960e-01, 9.757e-02, -1.064e-01, 6.741e-02, 2.728e-02, 6.761e-01, -1.644e-01, 9.244e-02, 1.458e-01) * s0_2_2;
	r1 += M4(-1.063e-01, -9.208e-02, -9.079e-02, 7.398e-02, 1.634e-01, 2.275e-02, -1.091e-01, 9.152e-02, 2.826e-01, -2.197e-02, -1.375e-02, -2.702e-02, -1.199e-01, 8.824e-02, -3.670e-01, 3.716e-02) * s0_2_2;
	r2 += M4(4.418e-02, 6.927e-02, 1.241e-01, -2.989e-01, 1.267e-01, 3.118e-01, -4.484e-01, 2.057e-01, -1.200e-02, 6.824e-02, -2.111e-01, 1.026e-02, -4.003e-01, 7.021e-01, -4.297e-01, -6.018e-01) * s0_2_2;
	r0 += V4(-1.151e-02, 4.747e-02, -1.342e-01, 1.201e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(4.041e-03, 2.988e-02, 3.235e-02, 4.939e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(4.670e-03, -1.273e-02, 1.376e-03, 7.638e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-4x12-BILINEAR-MPV-NVL-DS-conv2
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0)) + vec2(0.5)) * conv1_pt))
#define l1(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0)) + vec2(0.5)) * conv1_pt))
#define l2(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0)) + vec2(0.5)) * conv1_pt))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-9.685e-02, -1.947e-01, -3.283e-03, -1.041e-01, -2.290e-02, 9.311e-02, -3.815e-02, 1.295e-01, 2.041e-02, 5.946e-02, 6.418e-02, -5.847e-02, -2.590e-02, 2.385e-01, 2.199e-02, -9.447e-02) * s0_0_0;
	r1 += M4(-1.387e-01, 6.680e-02, -3.523e-03, 5.273e-03, 9.755e-02, -1.445e-01, 4.171e-02, -4.809e-02, 2.529e-01, 1.780e-01, 3.742e-02, 3.419e-02, 2.913e-02, -1.435e-01, 8.102e-03, -1.433e-01) * s0_0_0;
	r2 += M4(3.747e-02, -9.994e-02, 1.886e-01, -1.015e-01, 4.723e-02, 7.863e-02, 6.467e-02, 2.213e-02, 1.753e-02, 2.398e-02, 5.826e-04, 5.916e-03, 1.805e-02, -6.094e-02, -1.245e-01, 4.795e-02) * s0_0_0;
	r0 += M4(-2.104e-01, 3.209e-02, 6.853e-02, -8.694e-02, -1.062e-01, 3.689e-01, 2.102e-02, -2.511e-01, 1.294e-01, -1.697e-01, 1.634e-01, 5.287e-02, 2.878e-01, -1.182e-01, -4.700e-02, 2.048e-01) * s0_0_1;
	r1 += M4(6.996e-02, 3.427e-01, -8.045e-02, 1.251e-01, -1.851e-01, -1.184e-01, 8.551e-02, 7.295e-02, 1.376e-01, -3.647e-02, 1.700e-01, -8.057e-02, 2.172e-02, 5.993e-02, -1.136e-02, -1.726e-01) * s0_0_1;
	r2 += M4(-3.485e-02, -2.663e-01, 5.124e-01, 2.449e-01, 2.321e-01, -2.273e-01, -4.598e-02, -3.837e-02, -7.694e-02, 4.287e-02, 2.046e-03, 8.088e-02, 1.449e-01, 3.629e-01, 2.561e-02, -8.438e-02) * s0_0_1;
	r0 += M4(-4.870e-02, 1.593e-01, -7.556e-03, 1.221e-01, 1.554e-02, -2.509e-03, 2.355e-02, -4.979e-02, -2.251e-02, 3.808e-02, 7.089e-02, 1.057e-01, -3.206e-02, 2.183e-01, 2.510e-02, -1.049e-01) * s0_0_2;
	r1 += M4(-1.492e-01, 5.252e-02, -2.891e-02, -7.767e-02, -1.321e-01, 6.878e-04, -1.162e-02, -1.015e-01, 1.083e-02, -2.612e-02, 8.617e-02, 3.919e-02, 2.550e-01, 7.577e-02, 3.188e-02, 2.310e-03) * s0_0_2;
	r2 += M4(9.568e-02, -8.444e-02, 2.936e-01, 1.099e-01, 1.154e-01, -6.774e-02, -2.289e-02, 1.557e-02, -2.021e-02, 3.086e-02, 7.271e-02, 6.024e-02, -4.567e-02, 1.162e-01, -2.912e-02, -3.246e-02) * s0_0_2;
	r0 += M4(-5.120e-02, -1.794e-01, -5.358e-02, -2.727e-01, -3.609e-02, 2.533e-01, -3.088e-02, -1.443e-01, -2.455e-02, -2.487e-01, 8.374e-02, -1.170e-01, 5.231e-01, 2.202e-01, -2.516e-02, 5.080e-01) * s0_1_0;
	r1 += M4(8.094e-02, 8.213e-02, -8.651e-03, -8.490e-02, 1.320e-01, -6.129e-02, 7.563e-02, 5.835e-02, 2.097e-02, 6.507e-02, 2.662e-01, 7.467e-02, 1.312e-01, 2.974e-01, -3.792e-01, -2.225e-01) * s0_1_0;
	r2 += M4(4.483e-02, -8.043e-02, -1.295e-03, -7.181e-02, -7.742e-02, 2.976e-01, 1.559e-01, 4.933e-02, 1.007e-02, -1.129e-01, 1.229e-03, 1.314e-01, -3.254e-01, 4.282e-02, -4.797e-01, 1.555e-02) * s0_1_0;
	r0 += M4(-1.392e-01, -1.064e+00, -7.806e-02, -8.567e-04, 3.327e-03, 1.169e-01, 1.528e-01, -7.980e-01, -1.699e-02, 2.909e-01, 2.375e-01, 1.200e-01, -9.828e-02, -6.253e-01, 2.781e-01, -7.416e-02) * s0_1_1;
	r1 += M4(2.320e-01, 4.336e-01, -4.547e-02, -6.221e-02, 7.259e-01, -3.386e-01, -6.930e-03, -1.410e-01, -3.355e-01, -1.345e-01, 4.635e-01, 1.478e-01, 2.720e-01, -9.468e-01, 5.225e-01, 6.143e-01) * s0_1_1;
	r2 += M4(-3.307e-01, 1.741e-01, -2.287e-01, 1.722e-01, -3.134e-01, -5.371e-03, 2.277e-01, 1.457e-02, 1.834e-01, 2.365e-01, -1.795e-01, -5.661e-02, 6.120e-01, 5.162e-01, -3.799e-01, -3.687e-01) * s0_1_1;
	r0 += M4(-1.450e-01, -6.101e-02, -6.522e-02, 9.617e-02, -1.439e-02, 5.263e-01, -1.295e-02, -2.717e-01, 4.003e-02, -1.593e-01, -1.620e-02, -8.322e-02, 1.328e-01, -7.956e-02, 1.390e-02, -1.477e-02) * s0_1_2;
	r1 += M4(-7.295e-02, -4.762e-02, 5.772e-03, -1.165e-01, -1.516e-02, -1.072e-01, 4.625e-02, 9.825e-02, 1.311e-01, 1.375e-01, 2.421e-01, -1.788e-02, 1.273e-01, 4.079e-01, 2.500e-02, 2.105e-02) * s0_1_2;
	r2 += M4(-8.536e-02, 1.558e-01, -6.301e-02, 5.247e-02, 2.105e-01, 3.679e-02, 5.971e-02, 1.507e-01, -2.844e-02, -1.303e-01, 6.084e-02, -1.112e-03, 1.056e-01, -4.645e-02, -7.274e-02, -1.039e-02) * s0_1_2;
	r0 += M4(8.295e-02, 1.736e-01, -6.814e-02, -1.230e-01, -7.732e-03, 1.242e-01, -8.885e-03, -2.466e-01, -2.048e-02, 2.261e-01, 7.780e-02, 8.638e-02, 5.608e-02, 2.723e-01, -1.029e-01, 1.714e-01) * s0_2_0;
	r1 += M4(6.144e-02, 9.642e-02, 5.223e-02, 5.042e-04, -3.428e-02, 1.021e-02, 1.524e-02, 4.065e-02, -6.282e-02, -1.013e-01, 4.153e-02, -4.279e-02, -1.826e-01, -7.541e-02, -1.451e-01, 2.571e-01) * s0_2_0;
	r2 += M4(2.622e-02, 2.009e-01, 6.253e-02, 1.021e-01, -7.367e-03, 2.387e-01, 5.404e-02, -8.620e-02, -1.804e-03, 2.651e-03, -1.294e-02, -1.145e-01, -1.515e-01, -1.824e-01, 1.017e-01, 1.838e-01) * s0_2_0;
	r0 += M4(-8.520e-02, 1.161e-01, -4.991e-02, -2.341e-01, -6.381e-02, 3.399e-01, -8.570e-02, -4.069e-01, 3.869e-02, -1.121e-01, 2.251e-02, -1.593e-01, -2.350e-02, 1.661e-01, -2.309e-02, 5.298e-02) * s0_2_1;
	r1 += M4(3.611e-02, 3.464e-02, 5.738e-02, 3.175e-02, 2.294e-01, -3.467e-02, 3.918e-02, 2.940e-02, 7.144e-02, -8.250e-02, 2.488e-01, -2.285e-02, -5.418e-01, 4.021e-01, -3.313e-02, 5.097e-02) * s0_2_1;
	r2 += M4(8.682e-02, 8.486e-02, 4.120e-03, 1.521e-01, -3.070e-01, 1.645e-01, -2.488e-02, 4.784e-02, 9.350e-02, -1.702e-01, 1.238e-01, -1.421e-01, -1.981e-01, -3.994e-01, 1.493e-01, 3.109e-02) * s0_2_1;
	r0 += M4(3.446e-02, -1.120e-01, 3.966e-02, -3.222e-02, 8.715e-02, 1.422e-01, -2.203e-02, -1.114e-01, 2.375e-02, 1.353e-01, 7.633e-02, 1.585e-02, 4.026e-02, 5.776e-03, 1.451e-02, -1.987e-02) * s0_2_2;
	r1 += M4(1.215e-01, 2.822e-02, -1.871e-02, -9.659e-02, 9.491e-02, -1.230e-02, 9.261e-03, 8.686e-02, -1.968e-01, 4.162e-02, 7.630e-03, 3.178e-03, 4.713e-01, 8.617e-02, 2.983e-02, 5.438e-02) * s0_2_2;
	r2 += M4(8.177e-02, 7.527e-02, 1.936e-01, -9.733e-02, 9.531e-02, 1.303e-01, 8.956e-02, -1.881e-02, -1.017e-01, 7.684e-02, -9.495e-02, -1.455e-02, 1.712e-01, -1.184e-01, -1.402e-01, 1.721e-01) * s0_2_2;
	r0 += M4(-1.492e-02, -2.405e-01, -6.262e-03, -3.878e-01, 2.886e-02, 1.788e-01, 1.468e-01, -1.778e-01, -6.230e-02, 2.997e-01, 1.651e-02, 5.535e-02, -2.654e-02, 2.172e-01, -4.550e-02, 1.288e-01) * s1_0_0;
	r1 += M4(3.162e-01, -2.338e-01, 2.737e-02, 1.994e-01, -2.755e-02, -3.883e-01, -8.317e-03, 1.124e-01, 2.409e-01, 1.738e-01, -4.075e-03, -1.369e-01, 1.092e-01, -1.304e-01, 1.079e-03, -3.317e-02) * s1_0_0;
	r2 += M4(8.111e-04, -1.932e-02, -1.659e-01, 1.512e-01, 6.503e-02, -4.884e-02, -1.910e-01, -4.954e-02, 3.029e-02, 1.023e-01, -1.264e-01, 3.228e-02, 1.843e-03, 4.980e-02, -3.454e-02, -6.313e-02) * s1_0_0;
	r0 += M4(-2.221e-01, -7.949e-01, -8.421e-02, -5.581e-01, 8.829e-02, -4.135e-01, 1.159e-01, 2.063e-01, -7.695e-02, -1.898e-01, -1.077e-01, -4.097e-02, -7.230e-02, -1.448e-01, -2.898e-02, -8.584e-02) * s1_0_1;
	r1 += M4(3.682e-02, 4.710e-02, 6.624e-02, 4.084e-01, -1.557e-01, -2.034e-01, -1.499e-01, 2.470e-01, 2.140e-01, 1.068e-01, -1.553e-02, -1.292e-01, -1.006e-01, -3.455e-01, -7.035e-02, 2.091e-01) * s1_0_1;
	r2 += M4(2.865e-02, 1.231e-02, -3.644e-01, 9.619e-02, -5.662e-02, -3.223e-01, -4.947e-01, 2.189e-01, -1.259e-01, 1.450e-01, -1.175e-01, 2.198e-01, -6.834e-02, -6.009e-02, -1.367e-01, 1.320e-02) * s1_0_1;
	r0 += M4(-9.577e-02, 3.582e-02, -4.817e-02, -5.689e-01, 4.688e-02, -3.178e-01, 8.640e-02, -2.864e-01, 2.575e-02, 3.135e-01, -4.262e-02, 6.464e-02, -7.056e-02, -6.434e-02, 4.353e-03, -6.933e-02) * s1_0_2;
	r1 += M4(5.386e-02, -5.179e-02, -1.864e-02, 5.549e-03, 7.285e-02, -1.149e-01, -6.358e-02, 1.297e-01, 7.466e-03, 9.915e-02, 4.066e-02, -9.402e-02, 5.581e-02, 1.041e-01, 4.415e-03, -4.744e-02) * s1_0_2;
	r2 += M4(-2.752e-02, 7.207e-02, -3.193e-01, 3.013e-04, -2.131e-01, 1.818e-01, -4.350e-01, 3.553e-02, 4.590e-02, 7.632e-02, 1.281e-01, 2.589e-02, 2.923e-02, -2.652e-02, 3.122e-02, -2.820e-02) * s1_0_2;
	r0 += M4(-2.048e-02, 2.877e-01, 9.102e-02, -3.880e-01, 9.899e-02, -3.535e-01, -4.279e-02, -3.542e-01, -9.871e-03, -4.094e-01, -1.189e-01, -2.608e-01, -5.329e-02, -8.577e-02, 5.695e-03, -1.394e-01) * s1_1_0;
	r1 += M4(1.069e-01, -9.854e-02, 3.052e-02, 6.913e-02, 2.524e-02, 9.941e-02, -6.052e-02, -8.902e-02, -4.834e-01, -7.364e-01, -9.208e-02, 2.478e-01, -1.564e-01, -2.601e-02, -4.616e-02, 4.804e-02) * s1_1_0;
	r2 += M4(-1.548e-01, -6.802e-02, 2.966e-02, -9.976e-02, 2.145e-01, -5.405e-02, 1.735e-02, -1.669e-02, 3.610e-01, 2.471e-01, 4.799e-02, 2.691e-01, 3.501e-02, -4.827e-02, 2.316e-01, 1.308e-01) * s1_1_0;
	r0 += M4(-1.596e-01, -6.405e-01, -5.171e-02, -3.933e-01, -1.384e-02, 2.324e-01, -1.511e-01, 2.436e-01, 2.728e-01, -9.866e-01, -9.745e-02, 2.044e-01, 5.208e-01, -7.365e-01, -1.823e-01, -1.642e-01) * s1_1_1;
	r1 += M4(-1.497e-01, 2.199e-01, 5.421e-02, 4.793e-02, 4.746e-01, 2.621e-02, 6.916e-02, 1.919e-01, -7.713e-01, -1.242e-01, 3.127e-02, 3.754e-02, -6.043e-01, 3.934e-01, -7.986e-02, -3.729e-01) * s1_1_1;
	r2 += M4(2.309e-01, -2.604e-01, -7.185e-02, 7.297e-02, -3.505e-01, 3.822e-02, -2.354e-01, 4.687e-01, 3.806e-01, 1.015e-01, 3.096e-01, -1.003e-01, 3.193e-01, -1.081e-01, 2.980e-01, -2.901e-01) * s1_1_1;
	r0 += M4(-4.293e-02, -8.928e-01, 5.229e-02, -5.019e-01, 3.937e-03, 3.696e-02, -5.833e-03, -3.096e-01, -1.658e-02, -1.292e-01, -4.147e-03, 6.577e-02, 3.173e-02, -4.971e-01, 1.814e-01, -1.966e-01) * s1_1_2;
	r1 += M4(4.489e-01, -1.020e-02, 1.503e-02, 1.610e-01, 2.088e-01, -6.172e-02, 4.507e-02, -4.346e-02, 2.566e-01, 1.228e-01, -3.244e-02, 2.175e-02, 2.692e-01, 6.436e-02, -9.243e-02, 1.201e-01) * s1_1_2;
	r2 += M4(-5.507e-02, 1.393e-02, -7.644e-02, -1.057e-01, -1.204e-01, 1.720e-01, -2.710e-01, -1.331e-01, -3.686e-02, 2.932e-03, 2.492e-03, -4.676e-02, 5.707e-02, -6.170e-02, 6.560e-02, 8.213e-03) * s1_1_2;
	r0 += M4(1.133e-02, 1.970e-01, -1.944e-02, -3.327e-01, 4.227e-02, -8.865e-02, 3.234e-02, 1.474e-01, -9.179e-02, 1.768e-01, -3.552e-02, 2.667e-01, -5.003e-02, 1.775e-02, 1.140e-02, 1.800e-01) * s1_2_0;
	r1 += M4(2.503e-01, 1.204e-01, 2.430e-02, 6.432e-03, -2.038e-01, 5.205e-03, -8.749e-03, 1.096e-01, -1.981e-01, -1.364e-01, -6.421e-02, 4.947e-02, 4.199e-02, -7.791e-02, -2.826e-02, -2.753e-02) * s1_2_0;
	r2 += M4(-3.429e-02, 2.411e-02, -6.113e-02, 5.386e-02, 2.193e-01, 1.118e-02, 4.832e-02, -4.474e-02, 4.603e-02, -2.341e-02, 1.106e-01, -1.023e-01, -1.186e-01, 4.117e-02, -7.393e-02, -6.472e-02) * s1_2_0;
	r0 += M4(-5.476e-02, 2.515e-01, 4.789e-02, -4.978e-01, -3.624e-03, 2.392e-01, 2.072e-02, 1.499e-01, -1.881e-01, -3.318e-02, -6.903e-02, -8.115e-02, -2.581e-02, -3.717e-01, 1.238e-01, 1.448e-01) * s1_2_1;
	r1 += M4(4.495e-01, 6.100e-02, -2.817e-02, -3.209e-03, 9.718e-02, -5.036e-02, -1.600e-02, -3.427e-02, -5.779e-01, -7.407e-02, -4.778e-02, -3.049e-02, -5.347e-01, -1.452e-01, 4.671e-02, 7.788e-02) * s1_2_1;
	r2 += M4(-1.098e-01, 2.525e-02, -1.062e-01, 6.754e-02, -1.755e-01, -4.214e-02, 4.712e-02, -6.915e-02, 6.707e-02, -1.848e-01, 2.010e-01, -5.551e-02, 1.532e-01, -3.105e-02, 1.932e-01, -8.796e-02) * s1_2_1;
	r0 += M4(-5.816e-02, -2.459e-01, -7.789e-02, -3.375e-01, 3.274e-02, 7.083e-02, -7.603e-03, 1.128e-01, 7.410e-03, 1.861e-01, -1.723e-02, -7.265e-02, -6.724e-02, 4.754e-02, 3.433e-02, -2.446e-01) * s1_2_2;
	r1 += M4(2.185e-01, -2.800e-02, 1.263e-03, 7.767e-02, 7.065e-02, -3.047e-02, 4.666e-02, 3.161e-02, -3.155e-01, 1.374e-02, -1.113e-02, -2.676e-03, -4.051e-01, -4.160e-02, -8.900e-02, -1.044e-02) * s1_2_2;
	r2 += M4(5.333e-02, -2.054e-02, -6.120e-02, -6.430e-02, 5.197e-02, 9.623e-03, 2.165e-02, 7.040e-04, 7.784e-02, -1.762e-02, -4.235e-02, 4.966e-02, 6.981e-02, -2.354e-02, -6.526e-02, 7.609e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(8.979e-02, -7.655e-02, -2.395e-02, -1.231e-01, 6.280e-02, -1.705e-01, -7.424e-02, 3.937e-01, 1.343e-02, 6.447e-02, -5.984e-02, 1.747e-01, -5.019e-02, -2.013e-01, 7.084e-02, -2.864e-01) * s0_0_0;
	r1 += M4(-2.225e-01, 2.549e-01, -2.069e-02, -4.450e-02, -2.767e-01, -2.455e-01, 7.473e-03, 4.363e-02, -2.305e-01, -4.023e-02, -4.974e-02, 2.664e-02, -1.328e-02, 1.227e-01, -5.955e-02, 9.993e-02) * s0_0_0;
	r2 += M4(-9.487e-02, -1.421e-01, 1.271e-01, 1.289e-01, -2.966e-01, 5.229e-02, -2.624e-02, 6.685e-02, 1.009e-01, 1.446e-01, -5.751e-02, -1.539e-01, -3.198e-02, -1.363e-01, 1.928e-02, -3.337e-02) * s0_0_0;
	r0 += M4(9.195e-02, 5.293e-01, 1.058e-02, 2.027e-01, 2.083e-01, -5.305e-02, 5.128e-03, 4.997e-01, -1.909e-01, 9.249e-02, -1.609e-02, -1.003e-01, -8.737e-02, -2.180e-01, 1.240e-01, -8.857e-02) * s0_0_1;
	r1 += M4(3.992e-02, 4.583e-01, -4.353e-02, -2.822e-01, -1.731e-01, -3.422e-01, 2.497e-02, -3.233e-01, 5.091e-02, 2.673e-01, 2.715e-02, 1.428e-01, 7.910e-02, 2.967e-01, -9.178e-02, -5.742e-02) * s0_0_1;
	r2 += M4(-2.646e-01, -2.089e-01, 4.147e-01, 3.965e-02, -4.319e-01, 2.675e-01, 1.771e-01, -3.447e-01, 1.447e-02, -4.208e-01, -2.948e-02, 2.112e-01, -1.052e-01, -3.740e-01, 6.740e-02, 1.802e-01) * s0_0_1;
	r0 += M4(1.005e-01, -2.338e-01, -4.211e-02, 1.460e-01, 5.038e-02, -5.609e-02, -9.571e-02, 1.416e-01, -2.249e-02, -2.320e-01, -5.463e-02, -1.625e-01, -5.743e-02, 2.060e-01, 1.148e-02, -7.302e-02) * s0_0_2;
	r1 += M4(-3.638e-02, 7.847e-02, 1.768e-03, 5.669e-02, -1.473e-01, -2.611e-01, 3.165e-02, 3.380e-03, -1.950e-01, -3.097e-01, -6.785e-02, -3.603e-02, -1.013e-01, 1.118e-01, 1.168e-01, -1.509e-01) * s0_0_2;
	r2 += M4(-1.122e-01, 2.921e-02, -5.468e-02, 5.538e-02, -7.175e-02, 1.185e-01, 7.779e-02, -1.683e-01, -1.151e-01, 2.383e-02, -1.037e-01, -6.630e-02, 2.656e-01, -2.031e-01, 2.170e-01, 2.527e-01) * s0_0_2;
	r0 += M4(2.981e-02, 2.187e-01, -1.409e-02, -1.490e-01, 2.290e-02, -9.332e-02, -1.373e-01, 5.635e-01, -3.541e-03, 9.242e-03, -2.534e-02, -5.651e-02, -6.306e-02, -1.058e-01, -1.201e-02, 1.242e-01) * s0_1_0;
	r1 += M4(-1.601e-01, 1.636e-01, -5.995e-02, -1.767e-01, -4.500e-01, -3.784e-01, 8.936e-02, 8.653e-02, -1.842e-01, 2.141e-02, -6.630e-02, -6.012e-02, 1.410e-01, 3.903e-02, -8.804e-02, -9.732e-02) * s0_1_0;
	r2 += M4(-8.914e-02, -1.346e-01, -8.312e-02, 8.078e-02, -1.451e-01, 4.313e-01, 1.880e-01, -4.324e-01, 8.312e-02, -5.856e-02, 1.678e-01, 3.326e-02, 8.246e-02, 1.664e-01, 8.337e-02, -5.640e-03) * s0_1_0;
	r0 += M4(8.671e-03, 1.110e-01, -5.792e-02, 3.068e-01, -2.145e-01, 9.834e-01, 4.178e-02, -3.108e-01, -2.252e-01, 5.085e-01, 1.469e-01, -1.862e-01, 2.107e-01, -4.984e-01, 1.919e-01, -3.965e-02) * s0_1_1;
	r1 += M4(4.530e-01, 4.988e-01, -2.557e-01, -1.249e-01, 9.832e-02, -1.488e-01, 1.644e-01, -3.090e-01, 7.219e-01, 2.330e-01, 4.247e-02, -1.603e-01, -1.460e-02, 3.381e-01, -5.537e-02, -1.463e-01) * s0_1_1;
	r2 += M4(-4.846e-01, -4.209e-01, -4.667e-02, 7.967e-02, -3.837e-01, 1.858e-01, 4.714e-02, 1.178e-01, -2.560e-01, 5.523e-01, -3.654e-01, 4.125e-01, -2.433e-01, -6.806e-02, -2.172e-01, 3.234e-01) * s0_1_1;
	r0 += M4(-4.327e-02, -3.212e-01, -6.756e-02, 1.064e-01, 1.156e-01, 1.922e-01, -4.253e-02, -1.259e-01, 3.636e-02, 7.158e-02, 1.074e-01, 6.681e-02, -4.410e-02, 5.658e-01, -8.577e-02, -2.842e-01) * s0_1_2;
	r1 += M4(-3.288e-01, -1.440e-02, -9.022e-02, -5.207e-02, 3.672e-02, -1.318e-02, -6.602e-03, -4.828e-02, -2.657e-01, -1.386e-01, 8.048e-03, -2.239e-01, -1.147e-01, -1.652e-01, 7.162e-02, 1.518e-01) * s0_1_2;
	r2 += M4(-1.332e-01, 1.294e-01, -9.103e-02, -8.613e-02, -1.420e-01, 2.162e-01, 1.501e-01, -7.986e-02, -1.786e-01, -1.229e-01, -5.175e-02, 1.724e-01, -4.428e-02, 2.189e-02, 1.899e-01, 1.785e-01) * s0_1_2;
	r0 += M4(7.660e-02, -3.163e-02, -1.026e-02, 6.186e-02, -5.194e-02, -6.855e-02, -5.870e-02, 1.031e-01, -6.710e-02, -2.491e-01, -2.593e-02, 2.261e-01, -2.827e-02, -4.906e-02, 8.371e-02, -2.173e-01) * s0_2_0;
	r1 += M4(2.265e-02, 1.627e-01, -1.050e-02, 1.482e-02, -2.049e-01, -2.015e-01, 3.189e-02, -5.146e-02, -1.469e-01, -1.284e-01, -3.309e-02, 1.113e-03, -1.151e-01, 8.904e-02, 1.783e-02, 1.675e-02) * s0_2_0;
	r2 += M4(9.697e-02, 4.423e-02, 8.287e-02, 4.844e-02, 3.637e-02, -1.744e-02, 1.268e-01, -2.725e-01, 4.546e-02, 2.764e-02, -5.132e-02, -6.086e-02, -2.479e-02, -2.049e-02, -1.175e-01, 6.079e-02) * s0_2_0;
	r0 += M4(2.269e-04, -3.294e-01, -1.159e-03, 1.542e-01, 4.092e-02, 7.176e-02, -2.530e-02, 3.299e-01, 4.756e-03, -3.473e-01, -4.075e-02, 2.094e-01, 8.881e-02, -1.145e-01, 5.010e-02, 2.009e-01) * s0_2_1;
	r1 += M4(4.720e-02, -1.274e-01, -1.526e-02, 2.468e-02, 3.630e-02, -3.513e-02, -1.751e-03, 1.138e-01, -1.342e-02, -6.565e-03, 7.907e-02, -2.307e-01, -1.339e-01, -7.003e-02, 1.763e-02, -1.767e-02) * s0_2_1;
	r2 += M4(2.251e-01, 1.229e-01, 6.339e-02, 5.044e-02, 8.732e-02, 2.091e-01, 7.350e-02, -4.159e-02, -2.402e-01, -4.504e-03, 4.438e-02, -1.042e-01, 2.182e-01, -3.416e-03, -1.768e-02, -1.661e-01) * s0_2_1;
	r0 += M4(8.129e-02, 5.203e-01, -1.507e-02, 2.260e-01, -4.748e-02, 5.127e-02, -5.960e-03, 1.623e-01, 1.578e-02, -3.159e-01, 3.250e-02, 4.394e-01, 2.438e-02, -4.043e-01, 3.569e-03, 4.418e-01) * s0_2_2;
	r1 += M4(-2.841e-01, -8.865e-02, 6.720e-02, 4.558e-02, 6.770e-02, 3.373e-02, -5.219e-03, -1.777e-02, -2.725e-01, -2.317e-01, -9.499e-02, -3.995e-02, 1.116e-01, 6.995e-02, -2.455e-02, 7.886e-03) * s0_2_2;
	r2 += M4(9.859e-03, 1.823e-01, 5.959e-03, 8.505e-02, 1.333e-02, -3.320e-02, 6.985e-02, 1.089e-02, 9.532e-02, -2.869e-02, 1.738e-01, -2.426e-01, -2.084e-01, -6.784e-02, -6.518e-02, -2.600e-01) * s0_2_2;
	r0 += V4(2.331e-02, 8.120e-02, 7.923e-02, 3.157e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(2.887e-02, 6.344e-02, -7.450e-01, -1.069e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-1.790e-02, 6.261e-03, 7.300e-02, 1.752e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-4x12-BILINEAR-MPV-NVL-DS-conv3
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv2_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0)) + vec2(0.5)) * conv2_pt))
#define l1(x, y) V4(conv2_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0)) + vec2(0.5)) * conv2_pt))
#define l2(x, y) V4(conv2_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0)) + vec2(0.5)) * conv2_pt))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(1.016e-01, 1.368e-01, -2.221e-02, 1.751e-01, -2.076e-03, -7.382e-01, 1.004e-02, -6.745e-02, -1.372e-01, 4.203e-02, 1.987e-02, -3.614e-02, -5.386e-02, -7.466e-02, 3.349e-02, -8.089e-02) * s0_0_0;
	r1 += M4(-1.898e-02, -5.621e-02, -9.235e-03, 1.218e-01, -4.412e-02, -4.800e-03, -1.925e-02, -1.093e-01, 6.831e-02, -3.145e-02, 2.812e-02, -2.223e-01, -4.660e-02, 2.077e-02, 1.599e-02, 2.168e-02) * s0_0_0;
	r2 += M4(-1.564e+00, -2.460e-03, -9.087e-02, -1.616e-01, -2.383e+00, -1.133e-01, -6.047e-02, 1.382e-01, -2.789e+00, -8.133e-02, 2.868e-01, 5.667e-02, -3.763e-01, -4.258e-02, 8.679e-02, 5.578e-02) * s0_0_0;
	r0 += M4(-2.936e-02, -4.320e-02, 3.993e-04, 1.697e-01, 5.287e-02, -4.782e-01, 1.718e-01, -1.472e-01, -2.217e-02, -7.394e-03, -8.039e-03, -4.463e-01, -1.939e-01, 1.398e-02, 1.975e-02, -1.761e-01) * s0_0_1;
	r1 += M4(-2.588e-01, -7.784e-02, -8.782e-03, 2.977e-02, 5.140e-02, -1.323e-01, -2.639e-02, 1.241e-02, 4.714e-01, 1.506e-01, 3.614e-02, 2.127e-01, 9.535e-02, 6.327e-02, 3.000e-02, -3.174e-01) * s0_0_1;
	r2 += M4(-2.472e-01, 1.710e-01, -4.344e-02, 1.920e-02, -8.432e-02, -2.251e-02, -2.163e-01, 7.322e-02, 1.142e-01, -3.077e-01, -1.079e-01, 1.215e-01, 3.495e-01, -3.617e-02, -2.852e-01, -1.462e-01) * s0_0_1;
	r0 += M4(4.532e-02, -5.385e-02, 7.608e-03, 2.446e-01, 3.040e-02, -3.683e-01, 2.512e-01, 4.898e-02, 1.388e-01, 1.371e-02, 1.117e-01, 9.848e-02, -2.095e-01, 6.500e-02, -1.268e-01, -4.404e-01) * s0_0_2;
	r1 += M4(5.410e-02, 5.326e-03, 1.251e-02, 2.089e-02, -5.148e-01, -8.519e-02, -2.826e-02, -2.507e-02, -3.987e-01, 4.354e-02, 3.610e-03, -1.958e-02, -1.286e-01, 1.730e-01, 4.017e-02, 9.472e-02) * s0_0_2;
	r2 += M4(2.864e-03, -1.610e-02, 1.862e-02, 3.562e-02, -4.502e-02, -1.098e-01, 1.030e-03, -2.484e-02, 7.788e-02, -8.401e-03, 9.395e-02, -9.618e-02, -1.570e-01, -6.670e-02, 4.359e-02, 7.468e-02) * s0_0_2;
	r0 += M4(1.486e-01, 1.505e-01, 3.528e-02, 1.251e-01, -1.307e-01, -5.995e-01, 7.677e-02, -1.462e-01, 1.937e-02, -9.400e-02, -1.714e-03, 1.076e-03, -5.011e-02, 1.339e-02, -6.172e-02, 3.214e-02) * s0_1_0;
	r1 += M4(1.346e-01, 3.286e-02, 2.825e-02, 1.601e-01, -5.715e-02, -1.702e-01, -2.224e-02, -1.508e-01, 7.336e-03, 1.554e-02, 9.136e-02, -2.900e-01, 6.137e-02, 3.626e-02, 2.606e-02, -4.115e-02) * s0_1_0;
	r2 += M4(-9.229e-02, 5.218e-02, -3.113e-01, -5.910e-02, -1.226e-02, -6.799e-02, 3.338e-02, -5.422e-02, 2.013e-01, -4.220e-01, 4.327e-02, -2.413e-02, 1.131e-01, -5.706e-02, -2.584e-01, 8.397e-02) * s0_1_0;
	r0 += M4(4.210e-02, -2.495e-02, -1.849e-01, -1.344e-01, -7.285e-02, 1.884e-01, 8.588e-02, -3.458e-02, 2.838e-02, 1.073e-01, -7.487e-02, 1.093e-01, -5.623e-02, -1.624e-01, -2.770e-02, -1.830e-02) * s0_1_1;
	r1 += M4(-5.056e-01, 3.852e-01, -3.686e-01, -4.990e-01, -3.075e-01, -1.231e-01, 2.997e-02, 1.925e-01, 1.779e-01, -2.979e-01, 4.439e-01, 2.339e-01, -2.546e-01, 1.213e-01, 3.721e-02, 5.969e-02) * s0_1_1;
	r2 += M4(3.828e-01, 1.028e+00, 6.386e-02, 5.488e-01, 1.206e-01, -2.180e-02, -2.704e-01, -8.766e-02, 1.143e-02, -7.189e-01, -1.056e-01, 2.474e-02, -1.916e-01, -2.435e-02, -4.026e-01, 7.959e-02) * s0_1_1;
	r0 += M4(-2.232e-01, 2.363e-02, 1.823e-01, -1.320e-01, -1.057e-01, -4.064e-01, 3.501e-01, 2.065e-01, -5.275e-03, -4.068e-02, -2.211e-01, 3.303e-01, 8.316e-02, 6.938e-02, -3.215e-02, 2.880e-01) * s0_1_2;
	r1 += M4(2.487e-01, -1.232e-01, -3.798e-02, -1.648e-02, -6.488e-01, 3.304e-03, 2.012e-02, 4.427e-02, -2.052e-01, 2.622e-02, 5.652e-02, 2.902e-01, -2.026e-02, 8.470e-02, 1.619e-02, 6.818e-02) * s0_1_2;
	r2 += M4(8.893e-02, 1.070e-01, 2.822e-02, 1.997e-01, 5.167e-02, -9.491e-02, -2.712e-01, -9.127e-02, 1.615e-01, -4.758e-01, -1.305e-01, -2.793e-02, -5.076e-02, 1.501e-02, 7.102e-02, -3.816e-02) * s0_1_2;
	r0 += M4(1.095e-01, -3.297e-02, 1.651e-02, 8.706e-02, -2.320e-01, -5.059e-01, 7.883e-02, 5.462e-02, -1.433e-02, -1.057e-01, -2.115e-02, -1.168e-02, -6.717e-02, -6.760e-02, -2.633e-03, -1.709e-02) * s0_2_0;
	r1 += M4(5.268e-02, 3.407e-02, -1.701e-02, -1.122e-01, -2.754e-03, -1.193e-01, -1.472e-02, -1.235e-01, -8.420e-02, 4.618e-02, 2.183e-03, -1.652e-01, 3.416e-02, 7.270e-02, 2.379e-04, -9.402e-02) * s0_2_0;
	r2 += M4(1.060e-01, 6.092e-02, 5.889e-03, 7.586e-02, -7.416e-02, -2.665e-01, -2.070e-01, -1.632e-01, -1.041e-01, 1.139e-01, 1.834e-02, 9.541e-02, -4.407e-03, 3.114e-02, -1.681e-01, 7.600e-03) * s0_2_0;
	r0 += M4(2.509e-01, 1.951e-01, -4.281e-03, -9.993e-02, -1.240e-01, -4.987e-01, 6.472e-02, 1.631e-02, 5.429e-02, 7.404e-02, 1.450e-01, -4.107e-02, -2.025e-01, -4.888e-02, 2.035e-02, -1.324e-02) * s0_2_1;
	r1 += M4(-3.518e-02, -2.335e-01, -5.225e-02, -2.421e-02, -2.056e-01, 3.932e-02, 4.615e-02, -3.414e-02, 1.565e-01, 4.772e-02, 1.626e-01, -6.333e-02, -4.359e-02, 1.771e-01, -5.537e-03, 3.660e-03) * s0_2_1;
	r2 += M4(-9.938e-02, 3.575e-01, -1.309e-01, 1.063e-01, -3.689e-02, -1.658e-01, -2.453e-01, -9.190e-02, 1.800e-03, -3.832e-01, -1.026e-01, -1.894e-01, 2.548e-03, -2.374e-02, -7.807e-02, -5.435e-02) * s0_2_1;
	r0 += M4(2.039e-01, -1.645e-01, -2.483e-01, -6.744e-02, -4.757e-02, -3.236e-01, 1.167e-01, 1.433e-02, -6.015e-02, -6.106e-02, 4.326e-02, -2.607e-02, -1.448e-01, -3.970e-02, 1.179e-01, -3.690e-02) * s0_2_2;
	r1 += M4(2.737e-02, -6.028e-02, 2.629e-02, -1.271e-02, -6.697e-01, 1.036e-01, 1.324e-02, -9.589e-03, -1.690e-01, -2.130e-02, 4.723e-02, 7.541e-02, 1.736e-02, 9.787e-02, -2.009e-02, 1.488e-02) * s0_2_2;
	r2 += M4(5.553e-03, 3.482e-02, -3.871e-02, -5.259e-02, -1.464e-02, -9.475e-02, -3.096e-01, 7.448e-02, 6.755e-02, -4.420e-01, 1.873e-02, -4.997e-03, 2.275e-02, 1.075e-02, -1.617e-01, 9.485e-02) * s0_2_2;
	r0 += M4(3.096e-02, -4.502e-01, -5.503e-02, 1.928e-01, -6.080e-02, -1.756e-02, 1.028e-01, -1.420e-01, 2.776e-01, 9.513e-01, -1.686e-01, -2.857e-01, 7.985e-02, 1.135e-01, -4.527e-02, 2.831e-02) * s1_0_0;
	r1 += M4(1.334e-01, -6.187e-02, 3.604e-02, -2.320e-01, 2.739e-02, -3.713e-02, -9.120e-03, -1.411e-01, 2.065e-01, 3.437e-01, 1.109e-01, 6.889e-02, -1.192e-01, -2.069e-02, -5.690e-02, -6.976e-02) * s1_0_0;
	r2 += M4(-3.157e+00, -3.189e-02, -5.642e-02, 3.013e-02, -5.772e+00, -5.218e-02, -5.405e-02, -2.415e-02, -2.728e+00, 5.654e-01, 2.470e-01, 1.469e-01, -1.048e+00, 4.222e-02, -2.739e-02, -4.908e-02) * s1_0_0;
	r0 += M4(2.504e-02, -8.963e-02, 1.624e-01, 2.229e-01, 4.379e-02, 6.771e-02, 9.000e-02, -3.214e-01, 8.851e-01, 4.836e-01, -2.865e-01, 7.951e-01, 8.429e-02, -2.023e-01, 1.115e-01, 1.740e-01) * s1_0_1;
	r1 += M4(-1.189e-01, -1.719e-01, -2.873e-03, 5.018e-03, -3.109e-01, 3.621e-02, -1.777e-02, -1.163e-01, 9.974e-01, 4.094e-03, 1.113e-01, 5.342e-01, -7.558e-02, 9.162e-03, -7.480e-02, 3.103e-02) * s1_0_1;
	r2 += M4(-1.893e-01, -1.595e-01, -1.173e-01, -9.398e-02, -8.546e-02, -5.227e-02, -4.584e-02, -4.421e-02, 5.832e-01, -5.585e-02, -2.913e-01, 1.038e+00, 1.903e-02, -1.777e-02, -1.470e-01, 6.547e-02) * s1_0_1;
	r0 += M4(7.611e-02, -1.758e-01, -2.278e-02, -4.441e-03, -4.232e-02, 1.320e-01, -9.034e-02, -9.366e-02, -1.884e-01, 1.330e+00, -3.594e-01, 5.015e-01, -7.325e-02, 3.709e-05, 8.101e-02, 1.426e-02) * s1_0_2;
	r1 += M4(-3.178e-02, -6.953e-02, 1.923e-02, 5.606e-02, -1.915e-02, -7.383e-02, -1.477e-02, -6.780e-02, -7.982e-01, 1.086e-01, 1.626e-01, -1.840e-02, -2.187e-01, -7.021e-02, -1.353e-02, -9.899e-02) * s1_0_2;
	r2 += M4(1.270e-02, -8.580e-02, 3.995e-02, -7.741e-02, -4.823e-02, 5.407e-02, 1.537e-02, -1.191e-01, 4.119e-02, 6.243e-01, 6.367e-01, -4.006e-02, -5.680e-02, -1.219e-02, 1.327e-02, -6.958e-02) * s1_0_2;
	r0 += M4(1.459e-01, -4.013e-01, -7.084e-02, -3.344e-02, -9.263e-02, -3.179e-02, 4.483e-02, 1.042e-02, -3.181e-01, 8.854e-01, 2.026e-01, 3.553e-01, -4.474e-02, 7.778e-02, -4.212e-02, -8.542e-02) * s1_1_0;
	r1 += M4(-1.895e-03, -1.974e-01, 5.462e-03, -4.098e-01, 6.947e-02, 1.834e-02, -6.392e-03, -2.619e-01, -2.420e-01, -2.512e-02, 3.346e-01, 1.832e-01, 1.200e-01, -1.548e-01, 5.898e-02, -2.215e-01) * s1_1_0;
	r2 += M4(9.834e-02, 3.157e-02, 1.190e-01, -6.779e-02, 5.842e-02, -2.357e-02, -7.362e-02, -7.638e-02, 6.240e-02, 2.673e-01, 1.246e+00, 5.801e-01, 1.505e-02, -2.031e-02, 2.407e-01, -9.490e-02) * s1_1_0;
	r0 += M4(-1.180e-01, -2.345e-01, 2.509e-02, -2.833e-02, -2.178e-01, -1.166e+00, 2.286e-01, 3.613e-02, -8.678e-01, -4.349e-01, -3.904e-01, 1.200e+00, -3.078e-01, 4.896e-01, -1.404e-01, -5.095e-01) * s1_1_1;
	r1 += M4(4.553e-02, 1.255e-01, 6.162e-02, -5.657e-03, 4.554e-02, -2.590e-01, -2.957e-02, -1.142e-01, 1.152e+00, -1.228e+00, 1.203e+00, 1.381e+00, -4.109e-02, 2.530e-01, 9.577e-02, 4.694e-01) * s1_1_1;
	r2 += M4(3.125e-02, 2.854e-01, -8.493e-02, -2.266e-01, -2.389e-01, 8.529e-02, -4.445e-01, -2.701e-01, 1.987e-01, -4.046e+00, -1.897e+00, -9.206e-01, 5.349e-02, 1.382e-01, 1.674e-01, -3.612e-01) * s1_1_1;
	r0 += M4(1.859e-02, -2.597e-01, 1.402e-01, 6.110e-02, -7.108e-02, 6.511e-02, 2.236e-01, -7.266e-02, 8.813e-01, 1.066e+00, -7.978e-01, 8.112e-01, 9.957e-02, -8.847e-02, -2.476e-01, 3.350e-01) * s1_1_2;
	r1 += M4(-1.946e-01, -9.346e-02, 1.514e-02, 4.378e-02, -2.186e-01, -7.839e-02, -6.392e-03, 6.142e-03, -4.484e+00, 8.007e-01, 1.335e-01, 6.810e-02, -6.679e-02, 2.354e-01, -5.320e-02, -1.828e-01) * s1_1_2;
	r2 += M4(6.410e-02, 2.319e-02, -8.246e-02, -1.084e-01, 5.001e-02, -3.657e-02, 3.072e-01, 1.584e-01, -5.018e-02, 4.709e-01, 1.941e-01, -6.861e-02, 1.101e-02, 1.089e-01, -1.248e-01, -8.681e-02) * s1_1_2;
	r0 += M4(9.365e-02, -1.029e-01, -8.377e-02, -6.266e-02, -1.469e-02, 6.974e-02, 7.103e-02, -7.443e-02, 2.641e-01, 5.444e-01, 1.719e-01, -4.086e-01, -4.555e-02, 9.885e-02, 7.206e-02, 1.035e-01) * s1_2_0;
	r1 += M4(8.559e-02, -3.386e-02, 5.787e-03, -4.619e-02, 2.000e-02, 3.064e-03, -2.410e-02, -9.242e-03, 3.026e-01, 1.958e-01, 3.111e-01, -1.326e-01, 5.628e-02, 6.617e-02, -1.407e-02, 1.687e-01) * s1_2_0;
	r2 += M4(-3.065e-02, -3.615e-02, 9.873e-03, 9.499e-03, -8.690e-03, -3.267e-02, 1.203e-01, -2.614e-02, 4.516e-01, 3.947e-01, 5.755e-02, 2.885e-01, 1.522e-02, -1.034e-01, 1.717e-01, -5.218e-02) * s1_2_0;
	r0 += M4(1.734e-01, -1.223e-01, -1.376e-02, -6.456e-02, 8.276e-02, 7.827e-02, 1.490e-01, 7.533e-03, -3.237e-01, -1.034e-01, 1.159e-01, -2.222e-01, 3.224e-01, 1.011e-01, -3.984e-02, 5.336e-02) * s1_2_1;
	r1 += M4(-9.528e-03, -1.210e-02, 2.409e-02, 1.140e-02, -1.069e-01, -2.302e-02, -3.003e-02, -2.825e-02, 2.162e-03, 5.562e-01, 4.446e-01, 6.058e-02, -1.470e-01, -2.490e-01, -6.292e-02, 4.890e-02) * s1_2_1;
	r2 += M4(3.567e-02, -8.081e-02, 1.178e-01, 4.821e-02, 5.700e-02, -6.127e-02, -1.567e-01, -2.532e-02, 2.684e-01, 3.333e-01, 1.408e+00, 4.217e-01, -1.917e-01, 2.834e-01, 9.761e-02, 1.450e-01) * s1_2_1;
	r0 += M4(3.310e-02, -2.784e-01, -8.267e-02, 2.202e-02, -1.983e-03, 2.159e-01, -3.900e-02, 7.314e-03, -2.244e-01, 1.336e+00, -4.252e-01, -1.154e-01, 1.165e-01, 7.396e-02, -5.452e-04, -3.481e-02) * s1_2_2;
	r1 += M4(-1.643e-02, 6.700e-02, -4.891e-04, 3.843e-02, -5.349e-02, -1.045e-01, -8.657e-03, -3.352e-02, -5.829e-01, -1.352e-01, 2.092e-01, -1.168e-01, 2.445e-01, -9.402e-02, -4.087e-02, -6.486e-02) * s1_2_2;
	r2 += M4(4.867e-03, -1.927e-02, 8.296e-02, 1.574e-02, -2.706e-02, -2.126e-02, 1.200e-01, -4.723e-02, 1.191e-01, 2.970e-01, -3.012e-01, 1.992e-01, 1.884e-02, 9.913e-02, -1.596e-01, -1.037e-01) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-4.836e-03, -7.512e-02, 2.057e-02, -1.066e-01, -5.618e-02, 4.225e-02, 9.373e-03, 1.594e-02, -3.721e-02, -1.878e-02, 1.334e-02, -9.026e-02, 6.301e-02, 3.724e-02, 2.400e-02, -2.634e-03) * s0_0_0;
	r1 += M4(-1.008e-01, -9.306e-02, -6.520e-04, 9.351e-02, -2.856e-02, -1.185e-02, -5.074e-03, 7.579e-02, 5.924e-02, 1.028e-02, -1.969e-02, -1.499e-02, 3.429e-02, -4.848e-02, 1.194e-02, 1.193e-01) * s0_0_0;
	r2 += M4(2.960e-01, -4.405e-02, 8.570e-02, -3.924e-02, 4.590e-01, 6.341e-02, 7.350e-02, -4.296e-02, -4.435e+00, -1.374e-01, -9.700e-02, 3.984e-02, -2.509e-01, -6.225e-02, -1.058e-01, -8.285e-02) * s0_0_0;
	r0 += M4(-3.473e-02, -4.113e-02, -1.573e-01, 3.213e-01, -5.955e-02, -2.706e-02, 1.095e-01, -1.645e-01, 9.186e-02, -1.365e-01, -1.594e-01, 8.256e-02, -2.599e-01, 1.320e-01, 2.513e-02, -5.190e-02) * s0_0_1;
	r1 += M4(1.021e-01, 7.063e-03, 2.874e-03, -2.969e-02, 4.088e-02, -2.114e-02, -2.334e-02, 7.009e-02, 2.001e-02, 1.434e-02, -2.867e-03, -2.402e-02, -4.257e-02, 1.577e-01, 3.481e-02, -1.331e-01) * s0_0_1;
	r2 += M4(2.764e-01, 4.810e-02, 2.786e-01, -1.372e-01, 1.364e-01, -2.737e-02, 8.943e-02, -6.953e-02, -2.837e-02, -3.206e-02, -2.125e-01, 6.890e-02, 8.319e-02, 1.578e-01, 1.439e-01, 6.195e-02) * s0_0_1;
	r0 += M4(3.180e-02, 1.939e-01, -7.592e-02, -1.665e-01, -7.230e-02, 6.790e-02, 5.275e-02, -1.126e-01, -2.717e-02, -4.675e-02, 2.415e-01, -1.318e-03, -7.638e-02, 1.159e-02, -1.291e-01, -1.240e-01) * s0_0_2;
	r1 += M4(2.541e-01, 3.206e-02, 2.842e-02, 8.181e-03, 1.649e-01, 7.900e-02, -1.463e-02, -9.743e-02, -1.248e-01, -1.067e-01, -3.184e-02, 8.012e-03, 1.776e-02, 4.237e-02, -6.246e-03, -6.615e-02) * s0_0_2;
	r2 += M4(-1.186e-01, -8.784e-02, -1.441e-01, 2.017e-02, -7.473e-02, 1.014e-01, -1.274e-01, 1.076e-02, 8.859e-02, -1.775e-02, 3.672e-02, -8.347e-03, 5.671e-02, -3.995e-02, -3.853e-02, 1.181e-01) * s0_0_2;
	r0 += M4(3.267e-02, -3.950e-02, 1.312e-02, 5.258e-02, -7.775e-03, -2.419e-02, -5.730e-03, 2.011e-01, 2.855e-02, 4.421e-02, -1.555e-02, 5.665e-02, 6.313e-02, 1.734e-01, -1.091e-01, 3.392e-02) * s0_1_0;
	r1 += M4(-4.871e-02, -8.518e-02, 3.075e-02, 1.932e-01, 1.093e-01, 1.869e-03, 9.415e-02, -1.713e-01, 7.864e-02, 6.821e-02, -2.077e-02, -6.363e-02, 1.331e-01, 1.271e-01, 1.848e-02, 4.467e-02) * s0_1_0;
	r2 += M4(-6.881e-03, 7.721e-02, 3.102e-02, 1.339e-01, 1.256e-01, -5.610e-02, 2.278e-01, -7.712e-02, -1.220e-01, -2.589e-02, -1.534e-01, -3.322e-02, 2.930e-01, 1.458e-02, -4.313e-01, 1.469e-02) * s0_1_0;
	r0 += M4(6.425e-01, 3.705e-01, -8.278e-02, 2.437e-01, -1.251e-01, 2.802e-01, 1.786e-01, 2.240e-01, 1.260e-01, -7.595e-01, -2.871e-01, -1.202e-01, 6.212e-03, -4.048e-01, -3.545e-01, 8.133e-02) * s0_1_1;
	r1 += M4(2.123e-01, -6.874e-02, 1.065e-01, -2.589e-01, 3.402e-01, -1.379e-01, 2.284e-01, 3.031e-01, -2.476e-01, -2.281e-01, 3.260e-02, 2.332e-01, -1.615e-02, 6.093e-02, -2.887e-02, 1.665e-01) * s0_1_1;
	r2 += M4(8.334e-03, 2.663e-01, -1.257e-01, -1.284e-02, -1.080e-01, -1.996e-01, 1.237e-01, 2.120e-01, 1.085e-01, 1.400e-01, -1.414e-01, 1.753e-01, -7.765e-02, 2.500e-01, 2.216e-01, 5.085e-02) * s0_1_1;
	r0 += M4(-1.256e-01, 2.414e-01, -3.629e-01, -1.442e-03, 1.876e-02, 8.746e-02, -5.334e-02, -1.086e-01, 2.061e-01, -8.393e-02, 4.217e-01, -2.053e-01, 3.213e-01, 1.983e-02, 9.373e-03, -4.826e-02) * s0_1_2;
	r1 += M4(1.577e-01, -2.514e-01, 2.621e-02, 6.127e-02, -1.044e-01, 2.425e-01, 2.070e-02, -1.888e-01, -1.208e-01, 3.683e-02, 6.435e-03, -1.651e-02, -1.224e-01, 1.581e-01, -8.604e-03, -8.345e-03) * s0_1_2;
	r2 += M4(-4.449e-02, 2.619e-02, 2.296e-01, 5.885e-02, -8.227e-02, 4.895e-02, 6.211e-02, -2.906e-02, 1.031e-02, -4.627e-02, -5.155e-02, -1.649e-01, 3.047e-02, 3.782e-02, -5.784e-02, -8.097e-02) * s0_1_2;
	r0 += M4(-2.701e-02, -3.327e-02, 5.252e-02, -4.203e-02, 7.592e-02, -1.275e-01, -3.465e-02, 8.275e-02, 7.506e-02, 9.610e-02, -6.089e-03, 9.580e-02, -3.785e-02, -3.454e-02, 3.278e-03, 4.403e-02) * s0_2_0;
	r1 += M4(-9.846e-02, -3.769e-02, 7.429e-03, -3.306e-02, -6.832e-03, 3.485e-02, 1.578e-02, -1.384e-01, 1.469e-01, 1.135e-01, 1.961e-02, 1.642e-01, 2.902e-02, 8.023e-03, 1.705e-02, 7.754e-02) * s0_2_0;
	r2 += M4(5.547e-03, 5.614e-02, 1.867e-03, 1.847e-02, 1.677e-01, 7.552e-02, -1.767e-01, 1.669e-02, 1.661e-03, -7.141e-02, -1.846e-01, 7.271e-02, 1.170e-03, 9.839e-02, -1.652e-01, 5.349e-02) * s0_2_0;
	r0 += M4(-3.944e-02, -9.065e-02, 1.045e-01, -4.395e-02, -1.125e-01, -1.856e-01, 1.078e-01, -4.423e-02, 2.157e-01, 1.288e-01, -1.454e-01, 8.288e-02, -7.788e-02, -4.134e-01, -7.501e-02, 3.404e-02) * s0_2_1;
	r1 += M4(-2.730e-02, 1.294e-01, -3.349e-03, 7.950e-03, -9.275e-02, 2.718e-01, 5.135e-03, 1.009e-01, 6.254e-03, -1.322e-01, -3.794e-02, -1.365e-01, 2.324e-01, 1.596e-01, -1.693e-02, 1.008e-01) * s0_2_1;
	r2 += M4(-2.971e-02, 2.491e-01, 1.401e-01, -1.170e-01, 1.963e-01, 9.682e-02, 3.466e-01, 6.612e-02, -7.787e-02, -1.345e-02, -1.825e-01, 7.999e-02, -5.068e-02, 1.811e-01, 1.448e-01, -1.746e-01) * s0_2_1;
	r0 += M4(-3.566e-02, -8.557e-02, 6.621e-02, -8.944e-02, -1.831e-01, 2.507e-01, -8.459e-03, -6.681e-02, -1.662e-02, 4.059e-02, -1.624e-01, 2.126e-02, -2.397e-01, -2.332e-01, 2.247e-01, 1.046e-02) * s0_2_2;
	r1 += M4(-2.149e-01, -5.953e-02, 4.753e-02, -8.356e-03, 4.618e-02, -1.320e-01, -2.091e-02, -3.013e-02, 9.961e-02, -8.007e-02, -2.173e-02, 3.169e-02, -1.390e-01, 6.983e-02, -5.098e-02, -3.636e-02) * s0_2_2;
	r2 += M4(2.477e-03, -1.562e-02, 4.424e-01, -3.095e-02, -9.600e-03, 8.982e-02, -6.364e-02, 2.066e-02, -1.051e-02, -1.604e-01, 3.908e-02, 4.261e-02, 1.848e-02, 1.861e-02, -3.250e-01, 3.943e-02) * s0_2_2;
	r0 += V4(-1.128e-02, 7.643e-02, 2.833e-02, 5.096e-04);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.213e-02, -2.235e-02, 5.260e-04, -7.471e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-7.552e-03, -6.577e-02, 6.999e-02, -1.674e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-4x12-BILINEAR-MPV-NVL-DS-conv4
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv3_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0)) + vec2(0.5)) * conv3_pt))
#define l1(x, y) V4(conv3_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0)) + vec2(0.5)) * conv3_pt))
#define l2(x, y) V4(conv3_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0)) + vec2(0.5)) * conv3_pt))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(3.858e-01, 1.563e-02, 5.302e-02, 2.409e-03, 1.052e-01, 2.382e-02, -2.205e-02, 2.544e-02, 2.334e-02, -3.311e-02, 2.209e-04, -8.426e-02, -9.342e-02, 1.523e-02, 6.960e-03, -6.476e-02) * s0_0_0;
	r1 += M4(1.258e-01, 1.086e-01, -6.964e-02, 3.963e-02, -9.208e-03, 1.144e-02, -2.435e-02, -3.293e-03, -3.164e-02, -1.378e-02, 5.372e-02, -3.867e-02, -3.874e-02, -2.402e-02, 2.765e-02, -3.285e-02) * s0_0_0;
	r2 += M4(2.325e-02, -5.500e-02, -1.323e-01, 1.626e-01, -2.880e-03, 5.618e-03, -5.593e-02, 2.974e-02, -1.606e-02, 1.794e-02, -6.523e-02, 4.829e-02, -9.069e-03, -1.378e-02, -8.797e-03, 7.575e-02) * s0_0_0;
	r0 += M4(1.286e-01, -2.770e-02, 4.209e-01, 2.740e-01, 2.002e-01, 4.404e-02, 1.880e-01, 3.643e-01, 6.980e-03, -1.069e-02, -2.495e-02, -3.123e-02, -1.424e-02, 5.679e-02, -1.072e-01, -4.206e-02) * s0_0_1;
	r1 += M4(-1.675e-01, 1.408e-01, 6.116e-02, -1.959e-02, 3.699e-02, 9.835e-02, 8.228e-02, 5.401e-03, -1.004e-01, -1.047e-02, 7.191e-03, -2.582e-02, 9.538e-03, -2.005e-02, 9.791e-02, 2.187e-02) * s0_0_1;
	r2 += M4(-4.972e-02, -1.656e-02, -5.533e-02, 4.262e-02, -2.930e-03, 1.822e-02, 1.027e-02, 1.712e-02, 2.276e-02, -4.303e-02, -2.820e-02, 2.710e-02, 1.078e-02, -5.425e-02, -6.145e-02, -3.456e-03) * s0_0_1;
	r0 += M4(-7.287e-03, 1.709e-02, -1.961e-02, 1.038e-01, -1.062e-02, -5.253e-02, 9.546e-02, 1.680e-01, 1.145e-03, -1.150e-03, 1.144e-02, 4.235e-02, -9.050e-03, -2.251e-02, -5.296e-03, -3.434e-02) * s0_0_2;
	r1 += M4(-1.278e-01, 4.088e-03, -2.698e-02, -5.501e-02, -1.008e-01, 2.995e-02, 7.399e-03, 2.805e-03, 2.577e-02, -1.485e-02, 1.776e-03, 7.200e-03, -4.060e-02, -2.537e-03, -4.894e-02, 2.473e-03) * s0_0_2;
	r2 += M4(1.311e-02, -5.005e-03, -4.431e-02, 1.427e-02, -1.297e-03, -3.680e-02, 1.680e-02, 2.395e-03, -9.654e-03, -2.825e-02, -3.639e-03, 1.734e-03, -2.467e-02, 5.892e-03, 5.697e-02, 1.268e-02) * s0_0_2;
	r0 += M4(-4.951e-01, -1.539e-01, -4.829e-02, -2.530e-02, 2.114e-01, 9.704e-03, 1.910e-02, 4.694e-03, -1.623e-01, -2.388e-01, -1.088e-01, 8.098e-03, -7.848e-01, 4.953e-02, -1.484e-01, 6.022e-02) * s0_1_0;
	r1 += M4(-1.550e-01, -9.628e-02, -2.784e-01, 8.130e-02, 1.421e-01, 5.186e-02, 3.511e-02, 5.032e-04, -3.847e-01, -6.394e-02, -2.867e-01, 1.765e-01, 4.374e-02, -7.300e-02, -5.509e-02, -2.064e-02) * s0_1_0;
	r2 += M4(7.056e-02, -6.621e-02, -2.580e-02, -2.066e-01, 1.997e-01, 4.878e-02, -5.755e-04, 1.115e-01, -1.238e-01, -4.230e-01, -2.495e-01, -2.627e-01, -1.686e-01, -2.901e-02, -1.079e-01, -2.108e-01) * s0_1_0;
	r0 += M4(2.380e-02, 3.061e-01, -5.127e-01, -2.920e-01, 4.268e-01, 1.639e-01, 4.541e-01, 2.170e-01, -2.725e-02, -4.691e-02, -1.145e-01, -1.265e-01, -2.291e-02, -8.968e-02, -5.881e-01, -5.019e-01) * s0_1_1;
	r1 += M4(2.701e-01, -4.044e-02, -1.186e-02, 2.157e-01, 2.959e-01, -7.080e-02, 2.387e-01, 1.885e-01, -1.451e-01, -2.048e-04, -1.077e-01, 1.114e-02, 2.065e-02, -8.984e-02, -3.496e-02, 8.514e-03) * s0_1_1;
	r2 += M4(3.746e-01, 1.641e-01, -1.332e-02, 1.736e-02, 3.942e-01, 2.643e-01, 2.705e-01, 3.371e-01, -2.016e-02, -2.030e-02, -7.081e-02, -1.265e-01, 1.605e-02, -4.964e-02, -5.728e-02, 9.488e-02) * s0_1_1;
	r0 += M4(3.182e-02, -1.384e-01, 1.694e-01, 7.387e-02, 2.104e-02, 2.655e-02, 1.646e-01, 7.300e-02, -4.604e-03, -2.190e-02, 4.190e-03, -1.011e-02, -6.661e-02, 9.581e-03, -3.941e-02, 6.086e-02) * s0_1_2;
	r1 += M4(3.079e-01, 8.325e-02, -1.341e-01, -2.471e-02, 1.240e-01, 5.921e-02, 6.247e-02, 4.065e-02, -1.181e-02, -6.452e-03, -1.884e-02, -3.980e-02, -9.005e-02, 1.949e-02, -2.611e-02, -2.046e-02) * s0_1_2;
	r2 += M4(-4.472e-02, 2.514e-02, 5.605e-02, 4.099e-02, 2.337e-02, 3.670e-02, 4.360e-02, 1.226e-01, 1.675e-02, -2.045e-02, 3.685e-02, 3.843e-02, 1.808e-03, -1.373e-02, 4.273e-02, 4.265e-02) * s0_1_2;
	r0 += M4(1.132e-03, -2.603e-02, 3.697e-02, 7.523e-03, -1.215e-02, -1.605e-02, 3.632e-03, -9.639e-03, -4.820e-02, -5.640e-02, -1.256e-02, -2.043e-02, 5.301e-02, 4.163e-02, 5.463e-02, 2.911e-02) * s0_2_0;
	r1 += M4(1.178e-01, 6.401e-03, -1.041e-02, -2.526e-02, 2.359e-02, -8.566e-03, 6.092e-02, 1.599e-02, 9.768e-03, -1.961e-02, -7.984e-02, -4.284e-02, 1.277e-01, 2.151e-02, 5.807e-02, 3.374e-02) * s0_2_0;
	r2 += M4(-1.636e-01, -2.912e-02, 4.187e-02, -3.771e-02, 8.421e-02, 2.962e-02, 8.348e-03, 8.479e-03, -9.344e-02, -3.565e-02, -5.559e-02, -1.139e-01, -3.371e-01, 7.823e-02, -1.284e-01, 1.651e-01) * s0_2_0;
	r0 += M4(5.702e-02, -7.864e-02, -1.680e-02, -1.776e-02, 2.149e-03, 7.677e-03, 1.917e-02, -3.019e-03, 1.213e-02, -6.992e-02, -3.077e-02, -7.948e-03, 1.047e-01, -4.904e-02, -3.203e-02, 1.559e-03) * s0_2_1;
	r1 += M4(-1.092e-01, -6.424e-02, 6.854e-02, 5.062e-02, 5.096e-02, 7.720e-03, 3.633e-02, -2.712e-02, 1.051e-03, 5.816e-03, -1.336e-02, 9.646e-04, -2.080e-01, -5.472e-02, 1.744e-01, 2.153e-01) * s0_2_1;
	r2 += M4(-4.871e-02, -2.041e-04, -1.677e-01, 1.140e-01, 1.812e-01, 2.121e-02, 5.013e-02, -1.640e-02, -4.543e-03, -1.034e-01, 1.608e-02, -8.041e-02, -2.599e-02, 5.658e-02, -2.456e-01, 2.502e-01) * s0_2_1;
	r0 += M4(-1.152e-02, 7.188e-02, 1.775e-02, 1.320e-02, -1.464e-02, -1.411e-03, -1.852e-02, -1.025e-02, -7.641e-03, -3.103e-02, 1.949e-03, -1.528e-02, 3.000e-04, -6.761e-02, 9.204e-02, 2.898e-02) * s0_2_2;
	r1 += M4(-6.905e-02, 2.507e-02, -7.478e-02, 5.417e-03, 7.021e-02, 4.768e-03, -6.798e-02, -7.526e-03, 1.428e-02, -3.625e-03, -4.398e-04, 2.570e-03, 8.129e-02, 3.262e-02, -3.075e-02, -8.745e-03) * s0_2_2;
	r2 += M4(-1.398e-02, -6.997e-02, 6.604e-02, -4.308e-02, -2.399e-02, 1.092e-02, -2.237e-02, -8.798e-03, -2.484e-02, -4.689e-02, 1.597e-02, -5.124e-02, -2.831e-02, 5.748e-02, 8.843e-02, 7.140e-02) * s0_2_2;
	r0 += M4(4.840e-02, 5.457e-02, 1.105e-02, -1.881e-03, -1.207e-01, -7.738e-02, 7.493e-02, 4.827e-02, 9.002e-02, -8.270e-02, 6.953e-02, 9.697e-02, -8.475e-02, 4.041e-02, -4.846e-02, -5.506e-02) * s1_0_0;
	r1 += M4(-3.156e-02, 3.894e-02, 1.518e-01, 6.192e-02, 1.002e-02, 5.905e-03, 9.739e-02, 3.612e-02, 2.488e-01, 1.284e-01, -1.687e-02, 7.979e-02, 2.551e-03, -1.529e-02, 3.962e-02, -2.191e-03) * s1_0_0;
	r2 += M4(1.969e-02, -2.433e-02, 1.057e-02, -6.201e-02, 7.006e-02, -9.745e-02, -1.952e-02, 3.232e-02, 2.887e-02, 1.441e-01, 1.593e-01, -1.652e-02, -3.308e-03, -3.912e-02, -2.045e-02, -5.745e-02) * s1_0_0;
	r0 += M4(-7.152e-02, 5.146e-02, -2.018e-03, 3.020e-03, 2.089e-02, 5.957e-02, -3.760e-01, -3.037e-01, -1.465e-02, 5.094e-02, 3.552e-02, -5.684e-01, 4.505e-02, 7.710e-03, -5.716e-02, -6.763e-02) * s1_0_1;
	r1 += M4(1.537e-01, 1.204e-02, -2.464e-02, -4.133e-03, 2.884e-01, -2.155e-02, -7.537e-02, 1.243e-01, 7.704e-02, -8.654e-02, -5.497e-02, -1.395e-01, 1.250e-01, -9.239e-03, -2.714e-01, 1.391e-01) * s1_0_1;
	r2 += M4(-4.507e-02, 2.855e-02, -1.346e-02, -5.887e-02, -1.195e-02, -2.328e-02, -7.397e-02, -2.627e-01, 8.947e-03, 1.746e-01, 7.359e-02, -2.360e-02, 5.218e-02, 3.389e-02, 1.488e-01, -2.483e-01) * s1_0_1;
	r0 += M4(3.442e-02, -1.264e-02, -1.335e-02, -2.258e-02, -2.992e-02, -1.413e-01, 1.249e-01, 1.344e-01, -5.572e-02, 3.804e-02, -8.367e-02, -1.644e-01, -1.523e-02, 4.377e-02, 1.470e-01, 2.366e-01) * s1_0_2;
	r1 += M4(5.336e-02, -1.352e-02, -5.829e-02, -7.812e-03, -8.248e-02, 9.263e-02, 1.331e-01, -9.945e-03, 5.177e-02, 1.150e-02, 6.606e-02, -8.839e-04, -1.997e-01, 1.922e-01, 1.640e-01, 9.820e-02) * s1_0_2;
	r2 += M4(1.788e-02, -5.062e-03, -2.031e-02, -3.537e-02, -3.607e-02, -3.704e-02, 1.184e-01, -7.292e-02, 3.196e-02, 9.911e-02, -5.306e-02, -7.251e-02, 1.226e-03, 8.437e-02, 1.185e-01, 9.594e-02) * s1_0_2;
	r0 += M4(1.081e-01, 5.670e-02, 1.586e-01, 5.217e-02, -7.538e-03, -5.258e-01, -4.653e-02, -6.535e-03, 1.323e-01, -3.936e-01, 7.225e-02, 5.959e-02, 7.343e-03, 9.548e-02, -3.554e-02, -1.111e-02) * s1_1_0;
	r1 += M4(-1.916e-01, 1.656e-01, 2.223e-01, 1.683e-01, -7.084e-01, -7.615e-03, -1.451e-01, 2.056e-01, -2.332e-01, 1.139e-01, -5.354e-01, 3.046e-01, -2.657e-03, 1.578e-02, 4.613e-02, 2.372e-02) * s1_1_0;
	r2 += M4(1.243e-01, -3.210e-02, 1.486e-01, 4.072e-02, -4.208e-01, -1.925e-02, 8.538e-03, 6.219e-02, 5.619e-03, 1.485e-01, 4.014e-01, 2.661e-01, -3.855e-02, 2.492e-02, -5.825e-02, -6.633e-02) * s1_1_0;
	r0 += M4(3.058e-02, 1.406e-01, -2.664e-01, -2.646e-01, 3.740e-01, 2.201e-01, 4.310e-01, 2.310e-01, -3.934e-01, 2.213e-01, -2.933e-01, 4.632e-01, -2.116e-01, -2.038e-01, 7.853e-02, 2.944e-02) * s1_1_1;
	r1 += M4(5.639e-02, 2.487e-02, 4.583e-02, 1.377e-01, -3.777e-01, 6.846e-02, 3.427e-01, 5.057e-02, -3.482e-01, -2.782e-01, 1.038e-01, -4.534e-01, -4.256e-01, 1.038e-01, -2.627e-01, 2.755e-01) * s1_1_1;
	r2 += M4(-9.206e-03, -7.639e-03, -2.515e-01, -3.038e-01, 3.838e-01, 1.720e-01, -3.855e-02, 2.531e-01, -5.762e-01, 3.194e-01, -2.475e-01, -4.336e-01, -1.367e-01, 1.020e-01, 3.564e-01, -4.980e-02) * s1_1_1;
	r0 += M4(-1.101e-01, 2.067e-03, -3.590e-02, -9.004e-03, -9.866e-02, -1.842e-01, -4.024e-02, -1.013e-01, 1.269e-02, 7.629e-02, -4.557e-02, 5.602e-02, 2.151e-01, 1.788e-01, 2.592e-01, 2.251e-01) * s1_1_2;
	r1 += M4(-5.638e-02, 2.618e-02, -6.517e-02, 3.277e-03, -3.821e-02, -4.427e-02, -2.268e-02, -9.496e-02, 1.763e-01, 3.247e-03, 8.618e-02, 1.072e-01, -1.796e-02, 1.091e-01, 2.309e-01, 1.238e-01) * s1_1_2;
	r2 += M4(-5.383e-02, -3.729e-02, 8.031e-02, 4.936e-02, -7.105e-02, -5.286e-03, 4.210e-02, 5.893e-03, -1.406e-01, 7.948e-02, -4.419e-01, -4.492e-01, 1.761e-01, 1.451e-01, -6.065e-02, -2.378e-01) * s1_1_2;
	r0 += M4(6.740e-03, 1.111e-01, 1.979e-02, 4.246e-04, -4.403e-02, -2.903e-01, 2.304e-02, 1.002e-02, 1.140e-01, 1.003e-01, 3.654e-02, 1.794e-02, -2.345e-02, 8.740e-02, -1.086e-02, -7.185e-03) * s1_2_0;
	r1 += M4(5.091e-02, 8.342e-03, -7.059e-03, -5.760e-02, 1.657e-01, -4.128e-02, 3.943e-02, -9.986e-02, 6.995e-02, 6.606e-02, 1.403e-01, -1.006e-01, -3.603e-02, -1.448e-02, 3.150e-02, -1.433e-02) * s1_2_0;
	r2 += M4(1.131e-02, -3.735e-03, 8.610e-02, -1.464e-01, 1.430e-01, -4.291e-03, 1.218e-01, -1.159e-01, 2.568e-01, 1.018e-01, 7.486e-02, 1.137e-01, -2.681e-02, -2.360e-02, -2.548e-02, 4.442e-02) * s1_2_0;
	r0 += M4(2.435e-02, 2.244e-01, 2.889e-02, 6.465e-02, -1.079e-01, 6.600e-02, -9.355e-02, -4.144e-02, 5.140e-02, -3.055e-01, 1.510e-01, -3.685e-02, 5.176e-02, -1.036e-01, -6.595e-02, -2.447e-02) * s1_2_1;
	r1 += M4(-2.459e-01, -1.758e-02, 1.773e-01, 3.578e-02, 6.662e-02, 3.964e-03, 2.223e-02, -1.207e-01, 7.803e-02, -2.612e-02, 1.821e-01, 1.566e-01, -2.161e-01, 4.231e-03, 1.514e-02, 5.359e-02) * s1_2_1;
	r2 += M4(3.199e-02, 1.730e-02, -8.063e-02, 8.281e-02, -3.779e-02, 5.518e-02, 8.285e-02, -1.519e-01, 2.455e-01, 3.659e-02, -5.664e-02, 3.765e-01, -1.722e-02, 2.834e-02, 1.610e-02, 8.005e-02) * s1_2_1;
	r0 += M4(1.495e-02, -1.021e-01, 1.678e-02, 3.065e-03, 2.107e-02, -9.620e-02, -1.746e-02, 1.198e-02, 2.167e-02, 2.549e-01, 1.422e-02, 3.216e-02, 7.973e-03, 2.003e-01, 9.607e-02, 9.119e-03) * s1_2_2;
	r1 += M4(-1.924e-02, -1.396e-02, 2.888e-02, -2.744e-02, -2.746e-02, -3.001e-02, 2.691e-02, -2.497e-02, -1.332e-01, 3.164e-02, -9.253e-03, 4.119e-02, -3.497e-02, 8.045e-02, -8.381e-02, -3.754e-03) * s1_2_2;
	r2 += M4(-2.041e-02, 2.346e-02, 2.313e-02, 1.333e-02, -3.096e-02, -6.894e-03, -4.747e-02, -2.268e-02, 9.065e-02, -6.063e-02, 4.675e-02, 1.970e-01, 9.533e-02, 1.643e-02, 2.010e-01, 2.754e-03) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(2.543e-03, -3.090e-02, 2.887e-02, 3.649e-02, 8.591e-02, 3.020e-02, 2.349e-03, -2.942e-02, 1.807e-01, 1.112e-01, -4.200e-02, -4.706e-02, -1.313e-01, 3.962e-02, -2.289e-02, -1.424e-01) * s0_0_0;
	r1 += M4(4.257e-02, 3.375e-02, -4.045e-02, 3.209e-02, -1.675e-02, 2.662e-02, -5.814e-02, -4.895e-02, -1.063e-01, 5.859e-02, 2.986e-02, 6.172e-03, -1.519e-01, -6.725e-02, -8.792e-02, -3.803e-02) * s0_0_0;
	r2 += M4(-2.455e-03, 6.069e-02, 8.552e-02, 5.499e-02, 1.587e-02, 7.170e-02, 5.110e-02, -3.056e-02, 3.822e-02, -6.731e-02, -4.606e-02, 1.019e-01, -2.944e-02, 1.281e-02, 3.943e-02, -4.280e-02) * s0_0_0;
	r0 += M4(-1.957e-02, -1.423e-01, -8.249e-02, 6.414e-02, 1.566e-01, -5.382e-03, 8.270e-02, 1.417e-01, -3.350e-01, -3.056e-02, 1.119e-01, 2.549e-01, 7.676e-02, 1.164e-02, 1.333e-02, 3.260e-01) * s0_0_1;
	r1 += M4(-1.349e-01, 1.470e-02, -1.364e-02, -8.415e-02, 8.355e-02, 2.035e-01, 4.218e-02, 1.262e-01, 1.040e-01, -4.501e-02, -3.721e-01, 9.189e-02, -2.863e-01, 2.323e-02, 8.283e-02, -1.946e-02) * s0_0_1;
	r2 += M4(-5.453e-02, 1.570e-01, -9.469e-02, 1.037e-01, 1.000e-02, -6.350e-02, 4.237e-02, 5.770e-02, 4.241e-03, -2.404e-02, 1.012e-01, -1.642e-01, 1.019e-02, 4.761e-02, 2.147e-02, -8.586e-03) * s0_0_1;
	r0 += M4(3.539e-02, 1.176e-01, 6.189e-02, -1.387e-02, -4.257e-03, 9.553e-02, 9.462e-02, 1.416e-01, 3.746e-02, -4.068e-02, 1.061e-02, -1.414e-01, -1.529e-02, 5.339e-02, -3.746e-02, -5.610e-02) * s0_0_2;
	r1 += M4(1.295e-01, -2.385e-02, 3.086e-02, 2.009e-02, 1.269e-01, 7.485e-02, 7.217e-02, -2.137e-02, -7.457e-02, 1.612e-02, -5.340e-02, 8.439e-03, -6.837e-02, 4.578e-02, 2.731e-02, -8.137e-03) * s0_0_2;
	r2 += M4(4.765e-02, -1.908e-01, 3.386e-02, -1.879e-01, -4.236e-02, 9.245e-02, -2.662e-02, -1.302e-02, -7.178e-03, -2.304e-02, 7.747e-02, 4.100e-02, -1.546e-02, -2.589e-02, 8.986e-03, 4.833e-02) * s0_0_2;
	r0 += M4(2.959e-01, 6.144e-03, 8.780e-02, 1.430e-02, 7.873e-02, 8.701e-02, -2.930e-02, -1.853e-02, 2.121e-02, 1.970e-01, -1.461e-01, -8.179e-02, 4.305e-01, 1.576e-01, -6.317e-02, 3.140e-02) * s0_1_0;
	r1 += M4(-4.854e-02, 3.846e-02, -6.213e-02, -2.591e-02, 4.891e-02, 1.203e-01, 1.656e-01, -1.933e-02, 2.121e-02, -1.480e-02, 1.294e-01, -1.882e-01, 1.870e-01, 1.689e-01, 1.294e-01, -5.603e-02) * s0_1_0;
	r2 += M4(7.429e-02, 2.233e-01, 7.263e-02, 6.710e-02, 1.295e-01, -8.414e-02, -3.363e-02, 8.870e-04, 1.968e-01, -2.857e-02, -3.057e-01, -1.763e-01, 1.975e-02, -5.279e-02, -2.745e-01, -1.233e-02) * s0_1_0;
	r0 += M4(7.762e-01, -7.736e-02, 5.254e-01, 9.682e-02, 7.757e-02, -3.143e-01, 3.746e-02, 9.869e-02, 4.566e-02, -1.860e-02, 3.427e-01, 5.639e-03, -1.748e-01, -1.053e-01, 5.059e-01, 1.694e-01) * s0_1_1;
	r1 += M4(5.680e-01, 1.411e-01, 4.755e-01, -6.423e-02, -4.873e-01, 4.311e-01, -3.611e-01, -1.912e-01, -1.753e-01, 5.914e-02, -1.853e-01, 2.260e-01, 6.946e-01, 1.910e-01, -1.333e-01, 2.390e-01) * s0_1_1;
	r2 += M4(1.889e-01, 8.419e-02, -2.441e-02, 4.446e-01, 7.579e-02, -7.252e-01, -3.173e-01, -2.580e-01, -4.202e-01, 1.228e-01, 1.441e-01, 8.142e-03, 2.390e-01, 2.391e-01, 5.777e-01, -9.010e-02) * s0_1_1;
	r0 += M4(-1.288e-01, 4.002e-02, 2.416e-01, -1.100e+00, 1.257e-02, 6.209e-02, 1.126e-01, 1.018e-01, 6.185e-03, 1.386e-02, -1.636e-01, -3.357e-02, 2.378e-02, -3.638e-03, -2.222e-01, -2.259e-01) * s0_1_2;
	r1 += M4(2.043e-01, 9.253e-02, -3.174e-01, -1.306e-02, -9.355e-02, 1.715e-01, 1.822e-02, 3.895e-02, -2.358e-01, -3.122e-02, 2.203e-02, 6.567e-02, 2.456e-01, 3.317e-02, -9.359e-02, 4.068e-02) * s0_1_2;
	r2 += M4(-5.841e-02, 4.313e-01, 3.273e-01, -5.057e-01, 2.185e-02, -9.598e-02, 4.305e-02, 1.542e-01, 7.788e-02, -2.525e-02, -1.729e-01, -8.826e-02, -3.782e-02, -1.622e-02, -8.408e-03, -9.715e-02) * s0_1_2;
	r0 += M4(-8.522e-02, -3.375e-01, 8.538e-02, 9.924e-02, 3.946e-02, 1.179e-02, -2.657e-02, -1.723e-02, -5.052e-02, -1.569e-02, -2.328e-02, -9.758e-03, -5.835e-02, 5.289e-03, -7.507e-02, -3.124e-02) * s0_2_0;
	r1 += M4(1.095e-01, 4.319e-02, -1.447e-01, 2.709e-02, 5.133e-02, -1.474e-03, 4.645e-02, -1.404e-01, -7.521e-02, -2.341e-02, -5.193e-02, 2.733e-02, -1.518e-01, 4.378e-02, 1.288e-01, 1.096e-01) * s0_2_0;
	r2 += M4(1.011e-01, -4.936e-02, 2.311e-01, 9.558e-02, 6.615e-02, 6.828e-02, 7.700e-02, -1.593e-02, -7.984e-02, 2.399e-02, -6.671e-02, -3.529e-02, 2.358e-01, 5.827e-03, 2.552e-02, -5.830e-02) * s0_2_0;
	r0 += M4(-2.393e-01, -9.850e-02, -1.342e-01, 1.163e-01, 2.962e-02, 1.568e-01, 1.035e-01, 3.576e-02, -5.718e-03, 1.001e-01, -4.090e-02, 1.937e-02, -9.838e-02, -4.752e-02, -4.691e-02, -1.071e-02) * s0_2_1;
	r1 += M4(2.510e-01, 7.118e-02, -3.469e-01, -2.054e-01, 5.201e-02, 8.089e-02, -3.256e-02, -1.150e-01, 1.019e-01, 9.457e-03, -1.176e-01, -6.369e-02, -3.916e-01, -1.362e-01, 3.971e-02, 2.184e-01) * s0_2_1;
	r2 += M4(3.311e-01, 2.830e-01, 3.117e-01, 2.437e-01, 7.527e-02, -3.508e-02, 1.577e-01, -7.352e-02, 8.727e-02, -2.502e-02, 1.787e-01, -8.857e-02, -3.107e-01, -3.184e-02, -1.346e-01, 1.802e-01) * s0_2_1;
	r0 += M4(1.953e-01, 8.703e-02, -6.034e-01, -3.307e-01, -6.577e-02, 1.128e-01, -5.913e-02, -2.840e-02, 5.250e-03, -2.146e-02, -1.701e-02, 3.456e-04, -4.867e-03, 4.429e-02, -4.045e-02, -1.719e-02) * s0_2_2;
	r1 += M4(-2.085e+00, 3.409e-03, -3.273e-01, 4.438e-02, 4.260e-02, 7.641e-03, 5.695e-02, -9.530e-02, 5.107e-02, -2.445e-02, -1.302e-02, 2.018e-02, -1.805e-01, -8.870e-03, -7.590e-02, 1.275e-02) * s0_2_2;
	r2 += M4(-1.992e-01, -4.037e-01, -1.848e-01, 3.753e-02, -6.661e-03, 9.898e-02, -2.307e-02, 2.545e-02, 2.840e-02, -1.797e-02, -1.246e-01, 8.797e-02, -3.051e-02, 9.960e-03, 9.012e-02, -6.690e-04) * s0_2_2;
	r0 += V4(-7.725e-03, 4.623e-03, -5.545e-03, -2.873e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-3.529e-04, 7.372e-03, -8.384e-03, 3.660e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-3.603e-03, -4.073e-01, 5.029e-03, 1.171e-02);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-4x12-BILINEAR-MPV-NVL-DS-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv4
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv4_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0)) + vec2(0.5)) * conv4_pt))
#define l1(x, y) V4(conv4_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0)) + vec2(0.5)) * conv4_pt))
#define l2(x, y) V4(conv4_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0)) + vec2(0.5)) * conv4_pt))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-1.290e-02, 7.108e-04, -9.440e-03, -6.677e-03, 1.023e-01, -2.752e-02, 3.175e-02, -8.656e-03, 3.323e-02, -7.760e-04, 6.877e-03, 3.822e-03, -7.614e-03, -1.597e-02, -1.076e-03, -3.676e-03) * s0_0_0;
	r0 += M4(-1.664e-02, -2.068e-02, -2.452e-02, 4.504e-03, -2.446e-01, 1.496e-01, -2.705e-02, -2.310e-02, -2.926e-03, 2.742e-02, -4.801e-04, -4.152e-02, -1.218e-02, -7.308e-03, -4.328e-03, -5.105e-03) * s0_0_1;
	r0 += M4(7.298e-03, -7.941e-04, -6.140e-03, 9.479e-03, 2.716e-02, -9.741e-02, 4.384e-04, 2.045e-02, -5.283e-03, -8.757e-03, -7.047e-03, -1.060e-02, -2.224e-03, -4.189e-03, -2.969e-03, 2.286e-04) * s0_0_2;
	r0 += M4(2.073e-02, -2.179e-02, 7.791e-04, 9.098e-03, -1.330e-02, -2.790e-02, 8.423e-02, -4.163e-02, 1.218e-01, -4.834e-03, 1.587e-01, -3.408e-02, 5.531e-02, -2.102e-02, -1.461e-02, 3.090e-03) * s0_1_0;
	r0 += M4(-5.957e-01, 1.504e-01, 6.448e-02, 9.446e-02, 4.585e-02, 1.257e-01, -2.349e-01, 3.018e-01, 1.760e-01, -6.219e-01, 1.233e-01, 9.685e-02, 1.670e-01, 7.127e-02, 5.029e-02, 3.610e-02) * s0_1_1;
	r0 += M4(-1.581e-02, 7.972e-02, 2.486e-03, 1.294e-01, -2.606e-03, -4.830e-02, 4.845e-02, -1.367e-01, -3.180e-02, -1.329e-02, -4.202e-03, -3.314e-02, 2.915e-03, 2.208e-02, -1.524e-04, 4.675e-03) * s0_1_2;
	r0 += M4(-7.905e-03, -2.987e-03, -2.487e-02, -4.507e-03, -2.481e-03, 5.455e-03, -3.073e-02, -9.628e-03, -4.818e-02, -4.274e-03, 4.153e-02, -1.364e-03, 1.223e-01, -3.246e-02, 8.101e-02, -4.849e-02) * s0_2_0;
	r0 += M4(-2.715e-03, -1.619e-02, 1.343e-01, 6.331e-02, -3.238e-02, -1.814e-02, -2.910e-04, -2.022e-02, -3.411e-03, -2.515e-02, 1.697e-01, 1.180e-01, -3.821e-02, 7.103e-02, 2.080e-02, -6.745e-01) * s0_2_1;
	r0 += M4(-7.159e-03, -4.101e-02, -4.133e-02, 6.452e-02, -7.337e-04, 6.194e-04, -6.812e-03, -2.202e-02, -1.210e-02, 6.092e-03, -9.719e-03, -1.810e-03, 5.301e-03, -5.707e-02, -4.244e-02, -3.158e-02) * s0_2_2;
	r0 += M4(-3.541e-02, 1.630e-03, -1.772e-03, 4.053e-03, 3.853e-02, 1.729e-02, 2.863e-02, -7.748e-04, -2.460e-02, -1.924e-02, -2.051e-02, -1.802e-03, -3.278e-02, -2.044e-02, -2.663e-02, 1.162e-02) * s1_0_0;
	r0 += M4(-3.682e-02, -4.455e-02, 1.825e-02, 7.242e-03, -3.284e-02, -2.836e-02, 3.211e-02, 3.162e-02, 9.167e-02, 4.580e-02, -1.429e-02, -1.679e-02, 1.189e-03, 4.617e-03, -5.067e-02, -5.512e-02) * s1_0_1;
	r0 += M4(-2.009e-03, -3.333e-02, -1.820e-03, 1.089e-02, 2.037e-02, 2.941e-02, 2.561e-03, 2.320e-02, -6.827e-03, 1.718e-02, 7.896e-03, -2.408e-02, -5.730e-03, -2.223e-02, 2.130e-02, -9.977e-03) * s1_0_2;
	r0 += M4(1.176e-01, -7.786e-03, 1.181e-02, 1.204e-02, 8.033e-03, 4.089e-02, 7.232e-03, 1.776e-02, 7.589e-02, -2.620e-02, 2.309e-02, -3.338e-02, 2.146e-02, -3.403e-02, 3.233e-02, -2.961e-02) * s1_1_0;
	r0 += M4(2.153e-01, 3.053e-01, -2.446e-01, -1.938e-01, -3.412e-01, -4.461e-01, -3.995e-01, -4.002e-01, -3.866e-01, 1.986e-01, 1.214e-01, 2.627e-01, 2.295e-01, 2.272e-01, 2.241e-01, 2.234e-01) * s1_1_1;
	r0 += M4(-1.406e-02, 2.257e-02, 1.886e-02, -6.470e-02, 3.775e-02, 7.076e-02, 3.182e-02, 1.508e-02, 2.120e-02, -2.319e-01, -5.251e-02, -8.374e-02, -3.334e-02, 3.539e-02, -2.836e-02, 3.038e-02) * s1_1_2;
	r0 += M4(-3.162e-02, -7.704e-03, -2.555e-03, -1.375e-02, 5.327e-02, -7.784e-03, 7.461e-02, 3.919e-02, 7.770e-03, -8.140e-03, 5.396e-02, 8.563e-04, -2.155e-02, 6.779e-03, -3.536e-02, -2.534e-02) * s1_2_0;
	r0 += M4(-2.690e-02, -5.115e-02, 9.643e-02, 6.174e-02, -1.254e-04, 7.104e-02, -3.453e-02, 9.330e-03, 2.283e-02, -4.699e-03, -1.989e-01, -4.291e-04, -2.966e-02, -3.343e-02, 2.706e-02, 2.093e-02) * s1_2_1;
	r0 += M4(-5.358e-03, -1.004e-02, -1.496e-02, 2.251e-02, -6.968e-04, -4.058e-03, 4.194e-02, 7.557e-02, 1.142e-02, 4.524e-02, 4.457e-02, -3.188e-02, 1.547e-02, -1.031e-02, -1.754e-02, -1.983e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-9.349e-03, -4.494e-03, -1.151e-02, -7.444e-03, 3.466e-02, 1.861e-02, 1.307e-02, -4.424e-03, -5.748e-02, 2.575e-02, -9.624e-05, -1.234e-02, 4.018e-02, 5.892e-03, 1.997e-03, -2.822e-03) * s0_0_0;
	r0 += M4(1.433e-01, 1.205e-01, 2.078e-02, 7.963e-03, 1.015e-01, 9.941e-02, 4.503e-02, 5.901e-02, -1.961e-02, -1.646e-01, -1.270e-02, 3.722e-02, 1.073e-01, 1.280e-01, -1.079e-02, 1.213e-02) * s0_0_1;
	r0 += M4(-1.621e-02, 1.315e-01, 8.707e-03, -9.066e-03, 1.754e-02, 3.186e-02, -1.999e-03, -4.635e-03, -2.814e-03, 3.811e-02, -3.816e-03, 1.374e-02, 3.693e-04, 3.024e-02, 6.458e-03, -3.268e-03) * s0_0_2;
	r0 += M4(-2.429e-02, -5.872e-04, -1.383e-02, -2.337e-02, 8.248e-02, 1.647e-02, 8.991e-02, 1.589e-02, -6.767e-02, 2.740e-02, -1.353e-01, 6.323e-02, -1.519e-01, 4.721e-02, -4.288e-02, 1.708e-02) * s0_1_0;
	r0 += M4(5.357e-02, 5.789e-02, -7.065e-01, 8.975e-02, 3.989e-01, 3.979e-01, 4.178e-01, 4.322e-01, 3.101e-01, 5.826e-02, 2.122e-01, -3.550e-01, -1.811e-01, -4.129e-01, 2.624e-01, 1.285e-01) * s0_1_1;
	r0 += M4(2.676e-02, 1.411e-01, 8.371e-03, 8.742e-02, 3.547e-02, 1.214e-01, 3.138e-02, 1.231e-01, -1.217e-02, 1.008e-01, 6.972e-03, 1.294e-01, 4.540e-03, 3.148e-03, -1.739e-02, 7.377e-02) * s0_1_2;
	r0 += M4(-4.135e-03, -3.029e-03, 7.807e-03, -5.373e-03, 2.397e-02, -1.576e-02, 5.130e-02, 2.813e-03, -2.415e-02, 3.017e-03, -3.357e-02, 3.657e-03, 2.000e-02, -3.437e-04, -2.293e-02, 1.598e-02) * s0_2_0;
	r0 += M4(2.053e-03, 5.108e-03, 2.499e-02, 8.374e-03, 7.409e-02, 8.839e-02, 1.066e-01, 1.097e-01, -2.276e-02, -3.650e-02, 2.362e-02, 6.786e-03, -6.691e-03, 2.729e-02, -6.877e-02, -5.362e-02) * s0_2_1;
	r0 += M4(-3.412e-03, -6.479e-03, 3.126e-03, 8.842e-03, -1.226e-02, 9.805e-03, 2.421e-03, 5.379e-02, -6.491e-04, -1.208e-02, -1.765e-02, -1.488e-02, 6.554e-03, -5.029e-03, 2.764e-03, -1.065e-02) * s0_2_2;
	r0 += V4(-5.875e-03, -6.241e-03, -5.938e-03, -5.965e-03);
	r0 = tanh(r0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
