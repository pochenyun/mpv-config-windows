// CuNNy 6x8 BILINEAR MPV NVL DS
// Copyright (c) 2024 cunnyplapper

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-6x8-BILINEAR-MPV-NVL-DS-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(LUMA_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0)) + vec2(0.5)) * LUMA_pt).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(4.358e-03, -2.470e-03, -8.342e-03, 4.503e-02) * s0_0_0;
	r1 += V4(-1.204e-02, -1.322e-02, -2.138e-02, -1.376e-02) * s0_0_0;
	r0 += V4(5.981e-01, 3.174e-01, 1.704e-01, 4.557e-01) * s0_0_1;
	r1 += V4(3.004e-01, 1.884e-02, 1.680e-02, 2.051e-01) * s0_0_1;
	r0 += V4(8.701e-02, -1.757e-01, -4.651e-02, 3.703e-02) * s0_0_2;
	r1 += V4(-5.065e-02, -7.623e-03, 6.116e-02, 3.565e-02) * s0_0_2;
	r0 += V4(2.875e-02, 7.251e-02, 7.188e-02, -4.286e-01) * s0_1_0;
	r1 += V4(2.499e-01, -7.036e-01, -2.021e-01, 3.666e-02) * s0_1_0;
	r0 += V4(-9.741e-02, 3.174e-01, 5.761e-01, -4.113e-02) * s0_1_1;
	r1 += V4(5.214e-01, 6.895e-01, 3.763e-01, -2.822e-01) * s0_1_1;
	r0 += V4(-6.192e-01, -5.371e-01, 2.607e-01, -2.199e-02) * s0_1_2;
	r1 += V4(3.190e-02, 2.202e-02, -2.013e-01, 3.521e-02) * s0_1_2;
	r0 += V4(-3.002e-02, -3.485e-02, 3.422e-02, -7.263e-02) * s0_2_0;
	r1 += V4(-5.183e-02, 2.037e-03, 2.251e-02, 2.102e-01) * s0_2_0;
	r0 += V4(-1.830e-03, 6.103e-02, -1.441e-02, 4.172e-02) * s0_2_1;
	r1 += V4(7.271e-04, -6.358e-03, 2.635e-02, -4.980e+00) * s0_2_1;
	r0 += V4(3.394e-02, -7.105e-04, -4.624e-02, -1.579e-02) * s0_2_2;
	r1 += V4(1.168e-02, -2.545e-03, 6.880e-03, -1.101e-01) * s0_2_2;
	r0 += V4(-1.382e-03, 2.735e-02, -2.347e-02, 3.182e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(3.412e-02, -1.330e-03, 8.179e-02, 4.507e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8-BILINEAR-MPV-NVL-DS-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * in_pt))
#define l1(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * in_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(1.319e-01, 1.607e-02, -3.299e-02, 1.067e-01, -3.527e-02, 2.260e-01, -2.594e-01, -3.042e-01, 1.538e-01, -1.365e-01, 1.229e-01, 4.655e-02, -3.162e-02, 4.801e-02, 8.894e-04, 1.813e-01) * s0_0_0;
	r1 += M4(1.115e-01, 1.667e-01, -3.664e-02, 5.377e-02, -1.701e-01, -2.977e-01, -7.582e-02, -6.452e-02, -1.187e-01, 3.550e-01, -4.426e-01, 2.417e-01, 5.596e-03, -1.022e-01, 1.460e-02, -1.117e-01) * s0_0_0;
	r0 += M4(-1.683e-01, -4.347e-02, 1.272e-01, 7.451e-02, 2.330e-01, 1.660e-01, -5.902e-01, -3.193e-01, 1.199e-01, 2.596e-01, 1.978e-03, 2.247e-01, -6.475e-02, -4.887e-02, -1.207e-02, -1.421e-01) * s0_0_1;
	r1 += M4(9.493e-02, 1.023e-01, 7.007e-02, -1.392e-01, -3.212e-01, -3.136e-01, -1.285e-01, 1.087e-01, -3.187e-01, 3.272e-01, -2.300e-01, -1.991e-01, -5.504e-02, 7.379e-02, -6.108e-02, 1.439e-01) * s0_0_1;
	r0 += M4(6.018e-02, -4.051e-02, -2.530e-01, 1.291e-01, 1.085e-02, 1.124e-01, 1.338e-01, -1.173e-02, 1.610e-01, 6.205e-02, -4.845e-02, -1.404e-01, 1.602e-01, 4.714e-02, 4.297e-01, -2.370e-01) * s0_0_2;
	r1 += M4(-5.454e-02, -5.687e-02, -4.193e-02, 1.074e-01, -8.761e-02, 7.624e-02, -6.752e-03, -3.932e-02, -1.001e-01, -7.846e-02, -2.497e-01, 8.035e-02, -2.183e-01, 1.497e-01, -3.093e-02, -1.754e-02) * s0_0_2;
	r0 += M4(1.004e-01, 4.555e-01, -3.705e-01, 1.933e-01, -3.115e-01, -1.625e-01, 1.823e-01, 5.248e-01, 2.900e-01, 1.091e-01, 3.315e-01, 9.487e-02, -1.634e-02, -6.633e-02, 5.289e-03, -1.196e-01) * s0_1_0;
	r1 += M4(1.754e-01, 4.969e-02, 2.018e-01, 3.294e-01, -4.878e-02, -4.507e-01, 1.671e-01, -2.851e-01, 5.133e-01, 6.753e-02, -1.264e-01, -4.871e-01, 1.040e-01, 2.228e-02, 7.203e-02, 5.399e-02) * s0_1_0;
	r0 += M4(-1.502e-01, 3.669e-01, -2.750e-01, 7.310e-01, 1.033e-03, -2.104e-01, 3.236e-01, -1.584e-01, 6.532e-01, -2.389e-01, -5.474e-03, -3.332e-01, -7.275e-02, -1.853e-02, 3.941e-01, -2.121e-01) * s0_1_1;
	r1 += M4(4.155e-01, -4.798e-02, 6.418e-02, 1.048e-01, -1.535e-02, -8.772e-02, -1.364e-01, -1.459e-02, 2.661e-01, -3.682e-01, 7.555e-02, 3.520e-01, -3.604e-01, -3.740e-02, -4.040e-01, -1.727e-01) * s0_1_1;
	r0 += M4(1.184e-01, 1.306e-01, -5.443e-01, -1.211e-01, 7.014e-03, -6.244e-02, 3.340e-01, 1.410e-01, 1.324e-01, -2.999e-01, -1.585e-01, 5.353e-02, -3.726e-03, 2.508e-01, 8.667e-02, 1.982e-01) * s0_1_2;
	r1 += M4(-1.440e-01, 1.435e-02, -1.566e-01, 6.348e-02, 1.182e-01, 4.965e-02, -7.240e-02, -1.180e-02, -6.208e-01, -1.461e-03, -2.649e-01, -1.437e-01, -1.619e-01, 2.046e-01, -2.584e-01, -4.313e-02) * s0_1_2;
	r0 += M4(1.220e-01, 3.349e-01, -9.668e-01, 4.064e-02, -1.901e-01, 1.323e-01, 6.616e-01, 6.523e-01, 8.707e-02, 1.700e-01, -3.896e-01, 6.734e-02, 7.377e-02, 8.349e-02, 1.956e-01, 6.749e-02) * s0_2_0;
	r1 += M4(1.616e-02, 5.444e-02, 4.528e-02, 1.473e+00, -1.935e-01, -4.026e-01, 1.517e-01, 2.551e-01, 6.568e-02, 1.266e-01, -1.479e-01, 2.234e-01, 1.247e-01, -1.811e-01, -2.455e-01, 1.426e-01) * s0_2_0;
	r0 += M4(6.432e-02, 2.545e-01, -5.280e-01, -2.055e-01, 1.543e-01, -6.425e-01, -8.657e-02, -2.068e-01, 9.889e-03, -5.125e-04, -2.136e-01, -1.207e-01, 9.948e-02, -1.668e-01, 1.112e-01, -3.394e-01) * s0_2_1;
	r1 += M4(1.834e-01, 1.492e-01, 1.880e-01, 6.902e-01, -1.772e-01, 3.957e-01, 9.240e-03, -3.601e-01, 2.758e-01, -1.077e-01, 2.644e-02, -4.085e-01, 1.294e-01, 1.603e-01, 3.719e-01, -9.015e-01) * s0_2_1;
	r0 += M4(7.805e-02, 5.901e-02, -2.698e-01, -3.333e-02, -6.294e-03, -9.652e-02, 3.084e-01, -3.650e-02, 2.625e-01, -2.233e-01, -3.722e-01, 5.761e-02, -1.247e-01, 5.752e-03, 3.101e-01, 5.630e-01) * s0_2_2;
	r1 += M4(7.762e-02, 2.105e-01, -9.482e-02, -6.233e-02, 2.837e-02, -2.414e-02, 7.058e-02, 1.670e-01, -1.076e-01, 3.930e-01, -2.307e-02, 3.010e-01, -3.169e-01, -2.016e-01, 3.408e-02, -1.171e-02) * s0_2_2;
	r0 += M4(-4.085e-02, 9.541e-02, 5.787e-02, 6.884e-02, 4.486e-02, 5.017e-02, -8.805e-02, -7.489e-02, 4.996e-02, -1.210e-01, 3.857e-01, 2.235e-01, -2.509e-01, -5.450e-02, -3.175e-01, 3.035e-01) * s1_0_0;
	r1 += M4(5.359e-02, -1.091e-01, 1.552e-01, -1.127e-01, -2.577e-03, 7.397e-02, -7.333e-02, -3.509e-02, 3.256e-01, -3.817e-02, -1.077e-01, 2.932e-02, 1.885e-02, 9.166e-02, 2.431e-02, 3.232e-01) * s1_0_0;
	r0 += M4(-2.405e-01, -1.257e-01, 1.335e-01, 4.736e-02, 1.742e-01, 4.604e-02, 6.309e-01, 3.270e-01, 1.163e-01, 1.089e-01, -6.814e-01, -1.542e-01, -2.559e-01, 6.446e-02, -9.407e-02, -9.205e-02) * s1_0_1;
	r1 += M4(2.510e-02, -2.395e-01, 3.698e-01, -1.520e-01, 2.599e-01, 2.378e-01, -5.509e-02, 2.817e-01, 2.052e-01, 5.124e-01, -5.634e-02, 1.156e-02, -2.301e-01, 2.165e-01, -5.930e-01, 2.560e-01) * s1_0_1;
	r0 += M4(-1.497e-01, -1.086e-01, -4.603e-02, 1.127e-02, -8.063e-02, 7.207e-02, 8.965e-01, 3.657e-01, -5.249e-02, -5.353e-02, -3.691e-01, -1.267e-01, 1.538e-01, 4.282e-02, 1.092e-01, -2.913e-02) * s1_0_2;
	r1 += M4(2.268e-01, -1.328e-01, 2.631e-01, -1.755e-01, 2.806e-01, 1.796e-01, 1.180e-02, 1.524e-01, -7.780e-02, -2.250e-01, 8.720e-02, -1.586e-01, 2.573e-01, -8.933e-02, -4.717e-01, -2.443e-01) * s1_0_2;
	r0 += M4(-7.364e-02, -6.575e-02, -1.174e-01, -1.314e-01, 8.423e-02, -1.403e-01, -2.599e-02, -6.569e-02, -1.994e-01, 5.548e-01, -6.856e-02, 5.746e-01, 2.049e-02, -2.341e-01, -2.750e-01, -2.511e-01) * s1_1_0;
	r1 += M4(-6.010e-02, 3.583e-01, 5.171e-02, 9.865e-02, -6.114e-02, 1.403e-01, -6.443e-03, 2.386e-01, -1.065e-01, -2.437e-01, -2.744e-01, -1.257e-01, 8.874e-02, 4.005e-01, 1.496e-02, 3.368e-02) * s1_1_0;
	r0 += M4(-9.560e-02, 1.197e-01, 5.129e-01, 2.160e-01, 4.286e-01, 7.093e-01, -1.719e-01, 4.313e-01, 1.109e-01, -4.763e-01, 4.397e-01, -5.152e-01, -9.932e-02, 1.016e-02, -2.482e-01, -6.088e-02) * s1_1_1;
	r1 += M4(-8.525e-02, -1.282e-01, 2.341e-01, 4.173e-02, 4.003e-01, 3.330e-01, 1.645e-01, 7.020e-01, 5.275e-01, -4.549e-01, 3.745e-01, 3.501e-01, -3.488e-01, 3.129e-01, 9.675e-02, 2.206e-01) * s1_1_1;
	r0 += M4(-2.962e-01, 2.270e-01, 1.255e-01, -1.251e-01, -8.997e-03, 1.184e+00, -1.682e-01, 5.304e-01, -1.159e-01, -8.747e-02, -1.633e-01, -4.275e-02, 1.518e-01, 1.968e-02, -6.529e-01, 1.297e-01) * s1_1_2;
	r1 += M4(1.598e-01, -1.266e-01, 2.482e-01, 1.261e-01, 7.216e-01, 6.751e-01, 2.898e-01, -4.265e-03, -6.729e-01, 4.344e-02, -3.257e-02, -4.752e-03, 1.538e-01, 5.430e-02, -1.290e-01, 2.625e-01) * s1_1_2;
	r0 += M4(-3.010e-02, -7.792e-02, 3.366e-02, -1.570e-01, -5.603e-02, -1.718e-02, -1.886e-01, -8.783e-02, 3.463e-02, -1.233e-01, 2.611e-01, -1.251e-01, 9.114e-02, -2.427e-02, 1.235e-01, 2.045e-02) * s1_2_0;
	r1 += M4(-3.267e-02, 1.233e-01, 1.280e-01, -2.351e+00, -9.849e-02, 2.194e-01, 2.785e-01, 1.158e+00, 8.962e-02, -4.980e-02, -1.563e-01, -1.837e+00, -5.221e-03, 3.393e-02, -1.569e-01, 3.704e-01) * s1_2_0;
	r0 += M4(-3.118e-01, 2.773e-01, 5.916e-02, 3.019e-02, 1.842e-02, 1.401e-01, -3.800e-01, -6.007e-02, -2.564e-02, 1.101e-01, 2.607e-01, 3.916e-01, -1.127e-01, 3.693e-02, 1.807e-02, 1.386e-02) * s1_2_1;
	r1 += M4(-2.161e-01, -3.564e-01, 5.086e-02, -1.140e+00, 1.816e-02, 2.170e-01, 3.586e-01, 7.090e-01, -2.656e-01, -1.775e-01, 5.021e-02, 5.395e-01, -1.507e-02, 1.719e-01, 3.431e-01, 1.769e-01) * s1_2_1;
	r0 += M4(9.048e-03, -6.430e-02, -6.336e-03, 5.798e-02, -2.798e-02, 1.949e-01, 6.988e-02, 2.370e-02, 8.916e-02, 2.766e-02, -5.645e-01, -2.669e-01, 3.727e-02, 3.826e-02, 3.199e-02, 6.590e-02) * s1_2_2;
	r1 += M4(1.182e-01, -1.440e-02, -7.064e-02, -2.786e-01, 1.012e-01, -1.225e-02, -1.397e-01, 2.625e-01, -1.014e-01, 2.015e-01, 1.711e-01, 1.294e-01, 1.421e-01, 1.547e-02, -1.508e-01, -5.780e-02) * s1_2_2;
	r0 += V4(7.842e-02, 9.205e-02, -3.232e-02, -3.190e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(4.817e-02, 1.033e-01, -1.827e-02, 2.940e-01);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8-BILINEAR-MPV-NVL-DS-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv1_pt))
#define l1(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv1_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(7.837e-02, -7.238e-03, -1.507e-01, -8.422e-03, -1.128e-01, 3.184e-01, -4.916e-02, 2.436e-02, 8.838e-02, -2.328e-01, -1.469e-01, 6.190e-02, 5.340e-02, -2.664e-01, -3.249e-02, -8.243e-04) * s0_0_0;
	r1 += M4(-2.458e-01, -2.364e-01, -6.955e-03, 5.341e-02, -1.528e-01, 1.168e-01, 2.540e-01, 1.217e-01, 1.290e-02, -2.926e-01, -9.781e-03, 1.915e-01, 2.158e-01, -1.113e-01, -1.945e-01, -9.525e-02) * s0_0_0;
	r0 += M4(-1.444e-02, -3.416e-01, -1.390e-01, 2.818e-02, 1.513e-02, 2.722e-01, -3.557e-01, 1.266e-01, 1.589e-01, -3.855e-02, 1.174e-01, 2.000e-02, -9.855e-03, -2.835e-01, 5.435e-02, 1.946e-02) * s0_0_1;
	r1 += M4(-2.980e-01, -5.395e-01, -2.705e-01, -4.776e-01, -2.368e-01, 7.987e-02, -1.009e-01, 4.672e-01, -3.106e-02, -1.423e-01, 7.816e-02, -9.857e-02, 3.397e-01, -5.164e-02, -3.908e-02, -3.934e-01) * s0_0_1;
	r0 += M4(2.304e-02, 7.201e-02, 5.521e-02, -5.274e-03, -8.513e-02, 2.331e-02, -9.461e-02, -1.025e-01, 1.733e-02, -1.064e-03, 2.339e-02, -2.392e-02, 1.768e-02, -9.236e-02, 6.200e-02, 2.887e-02) * s0_0_2;
	r1 += M4(1.933e-01, -1.748e-02, -6.171e-02, 2.267e-01, -1.746e-02, -1.762e-01, -5.685e-02, -3.487e-01, 1.225e-01, -3.447e-02, -9.889e-03, -5.672e-01, -4.484e-02, 1.905e-01, -7.153e-03, 2.503e-01) * s0_0_2;
	r0 += M4(-9.169e-02, -1.405e-01, -7.411e-01, 1.675e-01, 1.655e-01, -2.089e-01, 2.260e-01, 1.338e-01, 9.666e-03, -2.315e-01, -1.851e-01, 6.253e-02, -8.030e-02, 1.700e-01, 2.134e-01, -8.651e-03) * s0_1_0;
	r1 += M4(-2.903e-01, 7.286e-02, -1.143e-02, -1.480e-02, -2.357e-01, 2.560e-01, -2.894e-01, 1.567e-01, -1.830e-01, -6.028e-02, 1.154e-01, 3.369e-01, 3.683e-01, -5.342e-02, 2.843e-01, 1.186e-01) * s0_1_0;
	r0 += M4(-1.894e-01, -6.372e-02, -2.248e-01, 4.611e-01, 5.318e-01, -4.377e-01, 4.132e-02, -8.814e-02, -2.062e-01, 3.055e-01, -9.364e-02, -2.180e-01, -1.704e-01, 3.841e-01, 4.852e-02, -3.032e-02) * s0_1_1;
	r1 += M4(-1.149e-01, 1.346e-01, -1.823e-01, 3.846e-01, -5.289e-01, 3.623e-01, 4.189e-01, -5.570e-01, 1.488e-01, 3.445e-01, -2.337e-01, -4.676e-01, 4.287e-01, 1.203e-01, -1.677e-01, 2.594e-01) * s0_1_1;
	r0 += M4(-1.533e-01, 3.212e-01, 3.998e-02, 1.424e-01, -1.147e-01, 8.139e-03, -4.617e-02, -3.771e-02, -2.001e-02, -1.536e-01, -1.978e-02, 2.361e-02, 4.953e-02, 2.493e-01, 1.230e-01, 1.654e-01) * s0_1_2;
	r1 += M4(1.014e-01, 2.781e-01, -2.490e-01, -4.424e-01, 1.904e-01, 1.644e-01, 1.110e-02, -9.842e-02, -1.463e-03, 1.155e-02, 2.344e-02, 1.697e-01, -1.409e-01, -1.094e-01, -5.468e-02, -3.054e-01) * s0_1_2;
	r0 += M4(-1.398e-01, -1.529e-01, -3.937e-01, 5.420e-02, 7.720e-02, -2.437e-01, 1.169e-01, 5.870e-02, 2.253e-01, -1.001e-01, -8.650e-02, 6.903e-02, -4.241e-02, -4.198e-02, -2.132e-01, -4.623e-02) * s0_2_0;
	r1 += M4(1.698e-01, 6.658e-02, 4.840e-01, -1.639e-01, 1.967e-01, 2.551e-02, -6.853e-01, -6.926e-02, 4.601e-02, 1.697e-02, -2.369e-01, 5.388e-02, -2.379e-01, -9.268e-02, 2.568e-01, 1.399e-02) * s0_2_0;
	r0 += M4(-3.106e-01, -1.531e-01, 2.483e-01, -6.464e-02, -8.560e-02, -2.289e-01, 4.427e-03, 2.780e-02, -2.537e-01, -4.163e-02, 2.099e-01, -1.407e-02, 6.953e-02, -7.121e-01, 7.855e-02, 1.011e-01) * s0_2_1;
	r1 += M4(-2.018e-02, 1.615e-02, 1.483e-01, 1.243e-01, -1.459e-01, -4.797e-01, -6.056e-02, 2.448e-02, -3.502e-02, -1.994e-01, 1.542e-01, -1.933e-01, -1.358e-01, 2.176e-01, 1.457e-01, 2.788e-01) * s0_2_1;
	r0 += M4(2.443e-01, 3.561e-01, 1.068e-01, -6.184e-02, -2.152e-02, -3.738e-01, 8.152e-02, -5.069e-02, 3.316e-02, 2.075e-01, 2.454e-02, 4.816e-03, 4.624e-02, -1.821e-02, -7.153e-02, 7.105e-03) * s0_2_2;
	r1 += M4(4.281e-01, 2.320e-01, 9.478e-02, -1.577e+00, -4.497e-02, 7.836e-02, 6.837e-02, -4.824e-01, 3.555e-02, 9.877e-02, 7.544e-02, -5.072e-02, -3.154e-02, 3.169e-02, -4.918e-02, 3.940e-01) * s0_2_2;
	r0 += M4(-6.109e-02, 3.055e-01, 3.986e-01, 1.627e-02, -1.591e-02, 9.761e-02, 1.841e-01, -5.435e-02, 4.055e-02, 9.692e-02, -5.043e-01, -6.653e-02, 5.801e-02, -3.861e-02, 3.690e-01, 2.257e-02) * s1_0_0;
	r1 += M4(-6.580e-02, 9.665e-02, 7.945e-02, 1.561e-01, -7.435e-02, -2.980e-01, -2.355e-02, 9.556e-02, 2.013e-01, -6.351e-02, -5.242e-02, -4.674e-01, -1.551e-02, 1.873e-02, -1.528e-01, 3.139e-01) * s1_0_0;
	r0 += M4(3.429e-02, 1.328e-01, -2.172e-02, 4.001e-02, -1.304e-01, 1.264e-01, 4.574e-01, -3.521e-02, -7.666e-02, -2.881e-01, 1.399e-01, 5.470e-03, 1.297e-01, 6.822e-01, 1.706e+00, 6.745e-02) * s1_0_1;
	r1 += M4(-3.301e-02, -1.064e-01, -1.491e-01, 1.405e-01, 1.465e-02, 2.320e-01, 3.013e-01, 5.281e-02, -3.391e-01, -2.803e-01, 2.280e-01, -2.107e-01, 5.127e-01, 1.657e-01, 4.606e-01, 5.052e-01) * s1_0_1;
	r0 += M4(-3.013e-02, 5.238e-02, 7.068e-02, 1.978e-02, 1.994e-02, 1.659e-01, -4.397e-02, 7.301e-02, 1.361e-01, -2.689e-01, -3.509e-01, 6.187e-02, -1.552e-01, -7.495e-01, 1.075e+00, 2.256e-01) * s1_0_2;
	r1 += M4(-1.097e-01, -3.483e-03, -1.240e-02, 2.689e-01, -6.023e-02, 1.154e-01, -3.707e-02, -5.319e-01, 3.172e-01, -9.041e-02, -1.813e-01, -1.576e+00, 3.313e-02, -7.154e-01, -3.605e-01, -3.050e+00) * s1_0_2;
	r0 += M4(3.783e-01, -6.522e-01, -1.166e-02, -1.928e-02, -2.967e-02, -3.305e-02, 6.879e-01, 9.288e-02, -1.433e-02, -1.030e-01, -4.599e-01, -6.443e-02, 5.991e-02, -1.240e-01, -9.200e-03, 1.293e-01) * s1_1_0;
	r1 += M4(-1.463e-01, -3.326e-01, -7.310e-03, -1.206e-02, 1.828e-02, -2.941e-02, -1.118e-01, 3.037e-02, 8.804e-04, -9.754e-02, -2.301e-01, 2.888e-01, -1.823e-02, 1.330e-02, -8.145e-02, 4.687e-02) * s1_1_0;
	r0 += M4(-1.478e-01, -2.675e-01, 3.525e-02, 1.458e-01, 5.108e-02, -1.372e-01, 2.197e-01, -1.431e-01, 1.278e-01, -6.936e-02, -7.621e-01, 2.343e-01, 1.032e-01, 1.767e-01, 1.604e-01, 3.975e-01) * s1_1_1;
	r1 += M4(-6.219e-01, 4.462e-01, -4.774e-01, 2.782e-01, 2.892e-01, 3.911e-01, 5.038e-01, -1.188e-01, -3.129e-01, 2.800e-01, -1.641e-01, 1.758e-01, -4.552e-01, -3.308e-02, -4.676e-01, 7.840e-02) * s1_1_1;
	r0 += M4(-4.243e-04, 5.305e-03, 2.169e-01, 3.844e-02, 2.258e-01, 1.380e-03, -1.187e-01, 1.292e-03, -5.542e-02, 4.564e-04, -4.205e-01, -3.352e-02, 2.187e-01, 1.840e-01, -1.436e-02, 2.978e-01) * s1_1_2;
	r1 += M4(-9.105e-02, 5.447e-03, -9.163e-02, 2.433e-02, -5.664e-02, -3.400e-01, 1.009e-01, -2.027e-01, 3.534e-01, 6.867e-02, -1.331e-01, -1.461e-01, 5.116e-01, -9.984e-03, 2.863e-01, -1.235e-01) * s1_1_2;
	r0 += M4(-8.013e-02, 5.196e-01, 6.358e-01, -4.580e-02, 1.078e-01, 1.030e-01, -1.553e-03, 9.396e-03, -7.470e-02, 2.570e-01, 1.065e-01, -3.565e-02, -1.709e-02, 1.480e-01, 1.387e-01, 3.092e-02) * s1_2_0;
	r1 += M4(1.837e-01, -1.218e-01, 5.109e-01, 6.707e-02, -1.197e-01, 4.063e-02, -4.486e-01, 2.284e-01, -3.678e-02, 2.020e-02, 4.329e-01, -1.656e-01, 5.716e-02, 3.462e-02, 1.798e-01, 9.545e-02) * s1_2_0;
	r0 += M4(1.182e-02, -3.714e-01, 1.251e-01, -1.274e-01, -3.869e-02, -2.399e-02, 9.327e-02, 2.655e-01, -1.401e-01, 2.649e-01, 2.375e-01, -4.603e-02, 6.811e-02, -1.250e-02, -2.354e-02, 2.176e-02) * s1_2_1;
	r1 += M4(2.606e-01, 1.252e-01, 2.257e-01, 1.194e-01, -2.939e-01, -3.504e-02, -1.830e-01, -1.674e-02, 1.736e-03, 7.508e-02, 3.338e-01, 1.718e-01, -9.635e-02, 2.380e-02, -1.975e-01, 5.634e-02) * s1_2_1;
	r0 += M4(-2.533e-02, 2.458e-01, 1.057e-02, -1.073e-02, -6.633e-02, 2.681e-01, 1.181e-02, 1.354e-02, 1.530e-01, 2.967e-01, -1.171e-01, -4.435e-02, 1.187e-02, -1.415e-01, -3.767e-02, 4.653e-02) * s1_2_2;
	r1 += M4(2.570e-01, -5.495e-02, -2.299e-02, -2.022e-01, 4.609e-02, -8.023e-02, 1.741e-04, 7.702e-01, -8.877e-02, 4.503e-02, -1.234e-01, -1.517e+00, -6.926e-03, -6.964e-02, 1.236e-02, -1.744e-02) * s1_2_2;
	r0 += V4(4.210e-01, 1.358e-01, -4.469e-02, -2.447e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(1.254e-01, -2.896e-02, 4.496e-02, 8.820e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8-BILINEAR-MPV-NVL-DS-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv2_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv2_pt))
#define l1(x, y) V4(conv2_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv2_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(1.068e-01, -1.907e-02, 1.660e-02, 4.969e-02, 2.890e-02, -2.401e-02, -5.684e-02, -2.264e-02, 3.247e-03, 3.477e-02, 2.168e-02, -3.367e-02, 3.211e-02, 1.591e-01, 2.402e-02, 2.393e-02) * s0_0_0;
	r1 += M4(4.599e-02, -3.362e-02, 4.727e-02, -1.153e-01, 1.494e-01, 1.254e-01, 8.313e-02, -4.124e-02, -3.732e-02, 6.335e-02, 2.820e-03, 2.275e-02, -5.497e-02, -1.763e-01, -1.524e-01, 7.347e-02) * s0_0_0;
	r0 += M4(-5.865e-02, -4.172e-01, -1.040e-01, -1.577e-01, -6.788e-04, -7.768e-02, -6.457e-02, 9.205e-02, 7.592e-02, 6.233e-02, -1.976e-02, 2.649e-02, 5.548e-02, 1.132e-01, -7.477e-02, -9.913e-02) * s0_0_1;
	r1 += M4(-6.592e-02, -4.567e-01, -4.762e-02, 4.574e-02, -1.331e-02, -9.432e-02, -6.048e-02, -2.236e-02, 1.748e-01, 1.043e-01, 9.030e-02, -3.143e-03, -3.811e-02, -1.939e-01, 2.561e-01, 3.584e-01) * s0_0_1;
	r0 += M4(1.300e-01, -1.655e-01, 2.991e-01, 7.496e-02, -6.641e-03, 3.951e-03, -2.269e-01, -5.287e-02, 7.626e-02, -2.962e-02, 3.857e-01, 1.729e-02, 1.192e-02, 1.562e-01, 4.621e-02, 7.543e-02) * s0_0_2;
	r1 += M4(4.428e-02, 3.023e-01, 1.169e-01, -1.797e-04, 8.729e-03, -2.478e-01, -4.734e-03, -1.884e-02, -3.321e-02, 3.345e-01, 9.563e-02, 1.298e-01, 2.080e-03, 1.832e-01, 1.256e-01, 1.539e-02) * s0_0_2;
	r0 += M4(2.300e-01, -1.128e-01, 2.362e-03, -1.450e-01, 1.157e-01, -1.044e-01, 4.726e-02, 1.503e-02, 3.431e-02, -2.763e-02, 5.286e-02, -4.027e-02, -4.324e-01, 3.189e-02, 2.098e-02, -2.536e-02) * s0_1_0;
	r1 += M4(-3.972e-01, -5.006e-01, 5.053e-02, -9.632e-02, -1.311e-01, -4.847e-01, 1.273e-01, -1.335e-01, 2.625e-02, 1.399e-01, 9.923e-03, 6.641e-03, 2.400e-01, 2.331e-01, 1.373e-01, 1.639e-02) * s0_1_0;
	r0 += M4(-2.766e-01, -6.975e-01, -3.869e-01, 1.545e-01, 4.821e-02, 7.831e-02, -7.242e-03, -5.383e-02, 1.928e-01, 8.990e-02, 8.940e-02, 1.036e-01, 2.889e-01, 6.585e-01, 1.353e-01, 6.157e-01) * s0_1_1;
	r1 += M4(5.518e-02, -2.160e-02, -1.238e-01, 4.640e-01, -3.785e-01, -8.530e-01, -2.356e-02, -1.500e-01, -8.109e-02, 1.301e-01, 1.252e-01, -1.110e-01, 3.904e-01, -2.408e-02, -3.791e-01, -4.302e-01) * s0_1_1;
	r0 += M4(-1.034e-01, -5.826e-02, 1.921e-01, 4.354e-02, -6.889e-03, -6.109e-02, 1.316e-02, -3.525e-02, 2.008e-01, 1.907e-01, 1.723e-01, -1.629e-01, -1.786e-02, 9.543e-02, -1.285e-01, 1.606e-01) * s0_1_2;
	r1 += M4(1.850e-01, 7.635e-01, 2.274e-01, 8.005e-02, -1.348e-02, 2.057e-01, -4.017e-02, -9.382e-02, 1.526e-01, -8.114e-01, 2.255e-01, 6.191e-02, -1.952e-01, 1.610e-01, 8.220e-03, 2.822e-02) * s0_1_2;
	r0 += M4(-7.929e-02, -5.279e-02, -1.304e-03, 2.671e-01, -6.416e-02, 5.101e-03, 7.208e-03, 4.462e-02, -6.496e-03, 2.475e-02, -7.029e-03, -1.646e-02, 3.030e-02, -9.148e-02, -1.194e-01, -1.525e-01) * s0_2_0;
	r1 += M4(-1.179e-01, 1.460e-01, -3.290e-02, -7.061e-03, -2.171e-01, -1.725e-01, -1.121e-02, -4.805e-03, 3.625e-02, 8.180e-02, -2.018e-02, 3.112e-02, 1.611e-01, -8.527e-02, 1.316e-02, 7.806e-02) * s0_2_0;
	r0 += M4(-2.682e-02, 5.892e-02, 2.319e-01, 2.337e-01, -3.521e-02, -1.962e-01, -6.075e-03, -1.007e-01, -3.005e-02, 3.051e-02, 1.617e-02, 1.890e-01, 8.108e-02, 8.997e-02, -2.291e-03, -3.018e-01) * s0_2_1;
	r1 += M4(4.147e-01, 3.565e-01, 1.479e-01, -4.661e-02, -5.356e-02, 1.544e-01, -1.411e-01, 2.625e-02, -1.812e-01, -1.590e-02, 3.676e-02, -1.227e-02, -3.197e-01, -2.436e-01, -6.477e-02, 1.612e-02) * s0_2_1;
	r0 += M4(5.532e-02, -5.634e-03, -2.304e-01, 3.457e-02, -5.371e-02, 7.395e-02, -2.244e-03, -1.673e-01, 3.721e-02, 7.083e-04, 1.878e-01, 7.411e-02, -2.926e-02, 1.013e-01, 1.439e-01, 1.209e-01) * s0_2_2;
	r1 += M4(2.327e-02, -4.513e-01, -1.027e-01, -7.659e-02, 2.354e-01, 2.993e-01, 1.237e-02, 2.155e-02, 4.560e-01, -6.471e-02, -4.377e-02, 1.687e-02, -5.579e-02, 2.093e-01, 1.032e-01, 1.691e-02) * s0_2_2;
	r0 += M4(-1.570e-02, -4.506e-02, 1.050e-02, -4.823e-02, 4.496e-02, -5.054e-02, -7.846e-05, 4.951e-02, -1.218e-01, 6.906e-02, 4.658e-02, 5.911e-02, 5.464e-03, -4.095e-02, 3.913e-01, -4.885e-02) * s1_0_0;
	r1 += M4(4.947e-02, 5.873e-02, 4.858e-02, -1.907e-02, -7.014e-02, -4.783e-02, -2.618e-02, -1.874e-02, 2.112e-02, -5.248e-02, -5.678e-02, 5.904e-02, 3.065e-01, -2.564e+00, 3.869e-01, 3.025e-01) * s1_0_0;
	r0 += M4(-6.186e-02, -1.681e-01, 1.459e-01, 7.155e-03, -9.927e-03, 1.837e-02, -1.575e-01, -9.497e-02, 3.339e-02, 1.674e-01, 2.228e-01, 3.014e-02, -7.393e-02, 1.097e-01, 1.075e-01, 1.732e-01) * s1_0_1;
	r1 += M4(1.352e-01, 5.943e-02, 2.062e-02, -2.274e-02, -4.906e-02, -1.730e-01, 1.979e-02, -3.983e-03, 4.538e-02, -2.292e-01, -1.424e-02, 1.895e-01, 1.464e-01, 4.375e-01, 2.618e-03, 1.351e-02) * s1_0_1;
	r0 += M4(1.739e-02, -4.461e-02, 7.527e-02, 6.633e-02, -8.656e-03, 6.473e-03, 4.220e-02, 1.235e-02, 7.402e-05, 1.846e-01, 3.680e-01, 3.697e-02, -3.249e-02, 1.127e-02, -1.210e-02, -4.272e-02) * s1_0_2;
	r1 += M4(1.047e-02, -9.073e-02, -8.965e-03, 1.660e-02, 7.373e-02, 2.337e-01, -1.071e-02, 8.652e-03, -8.200e-02, -2.851e-01, 2.046e-01, 1.508e-01, -2.828e-02, -5.384e-02, 1.330e-02, -1.974e-02) * s1_0_2;
	r0 += M4(2.016e-01, -4.999e-02, 3.303e-02, 8.752e-02, -2.994e-02, 1.384e-01, 5.400e-02, 2.117e-02, -8.471e-02, 9.472e-02, 4.647e-02, -8.336e-02, 4.965e-01, 1.473e-01, 1.302e-02, 5.084e-02) * s1_1_0;
	r1 += M4(-3.147e-01, 1.000e-01, 1.304e-01, -8.784e-02, 6.421e-02, -1.500e-01, -1.391e-01, 2.627e-01, 1.155e-01, -2.336e-01, -3.852e-02, 1.028e-01, 2.511e-01, -1.633e-01, 5.459e-03, 2.410e-01) * s1_1_0;
	r0 += M4(-8.613e-02, -3.066e-01, -1.079e-01, -1.811e-01, 2.377e-01, 1.206e-01, 2.106e-01, 5.448e-02, 2.913e-01, 8.777e-02, -1.609e-03, 8.472e-02, 8.973e-02, 1.592e-01, 1.217e-01, 2.554e-01) * s1_1_1;
	r1 += M4(1.323e-01, -8.793e-02, 1.116e-01, -1.480e-01, -1.051e-01, -3.161e-01, 2.836e-01, 1.987e-01, 1.601e-01, -2.614e-01, -7.639e-02, 4.267e-01, -8.064e-03, 6.833e-01, 5.743e-03, 1.138e-01) * s1_1_1;
	r0 += M4(-8.372e-02, -1.745e-02, -2.825e-01, -1.340e-02, 9.603e-03, -1.164e-02, -4.864e-03, -1.757e-01, 1.595e-01, -2.271e-02, 2.690e-01, 6.958e-02, 1.964e-04, -7.252e-02, 7.447e-02, -5.875e-03) * s1_1_2;
	r1 += M4(-1.577e-01, -5.676e-01, 1.100e-02, -1.074e-02, 2.037e-02, 2.445e-01, 1.896e-02, -2.992e-02, -1.915e-01, 4.487e-02, 1.094e-01, 2.961e-02, 4.178e-02, -1.005e-02, 2.883e-02, 3.501e-02) * s1_1_2;
	r0 += M4(-1.276e-02, -2.288e-02, 5.584e-02, 5.812e-02, 2.894e-01, -2.986e-02, -6.360e-02, 3.264e-02, -6.003e-02, 4.877e-02, 2.091e-02, 2.922e-02, 2.465e-02, 5.819e-01, 1.768e-01, 3.183e-01) * s1_2_0;
	r1 += M4(7.786e-02, -4.053e-01, 1.165e-02, -1.549e-02, 4.302e-02, 5.375e-01, 3.742e-02, -1.735e-02, -7.122e-02, 1.485e-01, 1.721e-02, -5.227e-03, 2.436e-01, -2.700e-01, -8.399e-02, 3.925e-01) * s1_2_0;
	r0 += M4(-6.337e-02, -1.403e-01, -2.214e-02, -1.629e-01, 6.245e-02, -5.766e-02, -1.623e-01, 1.155e-01, 6.013e-02, 1.124e-01, 1.837e-02, 2.180e-01, -7.089e-02, -6.214e-02, 1.420e-01, 2.065e-01) * s1_2_1;
	r1 += M4(1.959e-01, -5.170e-01, 4.626e-02, 4.199e-02, -2.760e-01, 2.167e-01, 1.481e-02, -2.956e-02, -2.549e-01, 2.313e-01, 1.255e-03, 1.890e-02, -1.725e-01, 5.175e-01, 4.684e-01, 3.674e-02) * s1_2_1;
	r0 += M4(-1.870e-02, -2.939e-02, -8.418e-02, -1.725e-02, 3.863e-02, 1.273e-01, 7.683e-02, -3.992e-04, -2.488e-02, 6.735e-02, 6.693e-02, 7.917e-02, 1.934e-02, -1.547e-02, -5.340e-02, -1.556e-03) * s1_2_2;
	r1 += M4(1.115e-04, -1.636e-01, 1.129e-01, 1.074e-01, 1.132e-01, 8.073e-02, -3.735e-02, -4.464e-02, 5.418e-02, 6.113e-02, -4.463e-02, 1.436e-02, 1.240e-01, 2.038e-01, -2.587e-02, -2.207e-02) * s1_2_2;
	r0 += V4(2.220e-02, -4.239e-01, -3.936e-02, -2.322e-01);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-6.282e-02, -7.379e-02, -2.838e-02, -7.355e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8-BILINEAR-MPV-NVL-DS-conv4
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv3_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv3_pt))
#define l1(x, y) V4(conv3_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv3_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-8.250e-02, -1.478e-02, 4.393e-03, -5.076e-02, 1.738e-01, -3.147e-02, 8.810e-02, 3.387e-01, -1.232e-02, -2.225e-02, 1.048e-03, 5.439e-02, 8.391e-02, 3.322e-03, -8.520e-02, -1.114e-01) * s0_0_0;
	r1 += M4(-1.157e-02, 8.714e-02, -4.282e-02, -4.029e-02, -5.363e-02, 1.635e-01, 3.615e-02, -2.037e-01, -6.013e-02, -7.181e-02, 6.953e-02, 4.146e-02, -1.256e-01, -5.742e-02, -4.313e-02, 5.983e-02) * s0_0_0;
	r0 += M4(-2.154e-01, -4.862e-02, -2.564e-01, 3.020e-02, -1.163e-01, 9.857e-02, -1.477e-01, 9.641e-02, 1.774e-02, -3.578e-02, -5.837e-03, -1.922e-02, -1.780e-01, -7.425e-02, -1.949e-01, -2.200e-01) * s0_0_1;
	r1 += M4(-7.064e-02, -1.887e-02, -1.318e-01, -7.596e-02, 1.740e-01, 6.673e-02, -7.165e-02, -1.519e-01, 1.074e-01, 1.213e-01, 5.113e-02, -1.819e-02, -1.504e-01, -2.556e-01, -2.712e-01, 2.061e-01) * s0_0_1;
	r0 += M4(-4.987e-02, 1.067e-02, 1.900e-01, 1.039e-01, -1.255e-01, 9.273e-02, 2.507e-02, -1.480e-01, -2.081e-02, -1.788e-04, -3.308e-02, -3.003e-02, -6.771e-02, -1.613e-01, -2.037e-01, -1.808e-02) * s0_0_2;
	r1 += M4(-2.123e-01, 3.780e-02, 2.008e-02, -1.092e-02, 2.738e-01, -1.183e-01, -2.909e-03, 3.778e-02, 6.811e-02, -3.882e-02, -8.216e-03, 1.129e-01, -8.411e-02, 8.658e-02, -6.166e-02, -1.586e-01) * s0_0_2;
	r0 += M4(1.738e-02, -1.881e-02, 8.924e-02, 5.587e-02, 3.375e-01, 3.429e-01, -3.453e-01, 4.529e-01, 3.604e-01, -6.528e-02, -1.770e-01, 2.365e-01, 5.261e-01, 6.013e-02, -1.979e-01, -2.402e-02) * s0_1_0;
	r1 += M4(2.735e-02, 6.492e-02, 3.405e-02, 5.031e-03, 6.832e-01, -2.889e-02, 1.024e-01, -3.510e-01, 2.368e-01, -1.258e-01, 1.433e-01, 1.541e-01, -4.033e-02, 1.763e-01, 1.104e-02, 3.962e-02) * s0_1_0;
	r0 += M4(-2.495e-01, 6.117e-02, 4.451e-01, 2.881e-01, 3.511e-01, 5.760e-01, -4.199e-01, -5.726e-02, 2.142e-01, 7.782e-02, -4.929e-01, -4.267e-01, 2.863e-01, 2.830e-01, 1.747e-01, -2.558e-04) * s0_1_1;
	r1 += M4(2.005e-02, 6.053e-01, 9.752e-02, 8.158e-02, 9.915e-01, 2.214e-01, -7.357e-01, -5.272e-01, 2.005e-01, 4.387e-02, -1.469e-01, 3.080e-01, -3.996e-01, -2.659e-01, 1.043e-01, 7.396e-02) * s0_1_1;
	r0 += M4(-9.897e-02, 2.035e-01, 4.608e-02, -3.009e-02, -1.687e-01, 2.480e-01, 8.641e-02, -1.366e-01, 2.643e-02, -9.005e-02, -1.687e-01, -3.180e-02, 1.636e-01, 1.682e-02, 1.640e-02, -8.130e-02) * s0_1_2;
	r1 += M4(-4.244e-01, -2.606e-02, 2.623e-01, 3.847e-01, 4.276e-01, -4.211e-02, 1.229e-01, 2.468e-01, 2.212e-02, -5.161e-02, -3.465e-02, -3.377e-02, 3.823e-01, -2.491e-01, 2.861e-01, 6.006e-01) * s0_1_2;
	r0 += M4(-9.074e-02, 5.858e-03, 1.171e-01, 1.602e-02, -5.456e-01, 1.096e-01, -3.474e-02, 2.172e-02, 2.227e-02, -1.512e-01, 2.694e-01, 2.383e-01, -4.098e-02, -7.340e-02, -1.456e-01, -9.507e-02) * s0_2_0;
	r1 += M4(5.622e-02, 4.807e-02, 2.311e-02, -3.429e-02, 1.005e-01, 2.059e-01, 6.713e-02, -1.106e-01, -1.326e-01, 1.113e-02, 1.086e-01, -5.104e-02, 9.144e-03, 1.040e-01, -6.714e-02, -1.080e-01) * s0_2_0;
	r0 += M4(-1.577e-01, -9.097e-02, 1.982e-01, 1.505e-01, 1.756e-01, 4.118e-01, 4.251e-01, -4.715e-02, 1.109e-01, -1.062e-01, -4.893e-02, -1.354e-01, 1.898e-01, 1.407e-02, -4.347e-02, 3.109e-02) * s0_2_1;
	r1 += M4(-1.308e-01, 2.719e-01, 8.097e-02, -1.185e-01, 8.804e-01, 1.102e+00, 2.228e-01, 1.313e-01, 1.747e-01, -4.056e-01, 2.482e-01, 5.087e-01, 8.758e-02, -5.081e-02, -2.563e-03, -3.130e-01) * s0_2_1;
	r0 += M4(-4.178e-02, -1.074e-01, 1.145e-01, -7.769e-02, 9.609e-02, 1.524e-01, 9.101e-02, -7.480e-02, 7.822e-03, -1.886e-02, 2.203e-02, -2.012e-01, 9.896e-02, 2.665e-02, -2.416e-02, -1.445e-01) * s0_2_2;
	r1 += M4(-1.605e-01, -3.096e-01, -2.749e-02, -1.070e-01, 4.605e-01, 2.155e-01, 1.160e-01, 1.415e-02, 1.997e-01, -1.485e-01, 7.087e-02, 9.988e-02, 4.973e-03, -1.288e-01, 2.361e-02, 4.034e-02) * s0_2_2;
	r0 += M4(-3.271e-01, 7.308e-02, 2.051e-01, -2.538e-02, 2.160e-02, 1.580e-02, -1.153e-01, 4.477e-02, 4.968e-02, 1.486e-01, 1.282e-01, 5.179e-02, -8.276e-02, -3.452e-02, -8.733e-02, -7.828e-02) * s1_0_0;
	r1 += M4(-5.391e-02, 2.505e-02, -3.725e-03, 1.181e-02, 2.135e-01, 1.091e-02, -4.236e-02, -1.209e-01, 3.991e-02, 1.223e-01, 2.096e-02, -4.863e-02, 8.702e-02, 4.198e-02, -8.085e-02, -7.266e-03) * s1_0_0;
	r0 += M4(-5.509e-02, 9.649e-02, 3.095e-01, 2.171e-01, 4.731e-02, 6.386e-02, 4.077e-02, 9.600e-02, 3.291e-02, 8.471e-02, 1.087e-01, -3.810e-02, -6.025e-02, -1.457e-01, -4.774e-02, -8.443e-03) * s1_0_1;
	r1 += M4(-3.642e-01, 4.778e-02, 2.472e-02, -1.244e-01, 1.817e-01, 9.666e-02, 7.672e-02, 1.335e-02, 5.339e-02, -6.743e-02, -1.648e-02, -1.928e-02, 1.253e-02, -7.258e-03, 2.718e-02, -5.970e-02) * s1_0_1;
	r0 += M4(4.379e-02, 1.704e-01, 8.811e-02, 1.969e-01, -5.528e-02, 6.047e-02, 5.153e-02, 2.003e-02, 1.150e-01, -7.186e-02, 1.775e-02, -7.950e-02, -9.029e-02, 8.548e-02, -1.853e-02, 2.091e-02) * s1_0_2;
	r1 += M4(3.005e-02, -4.522e-02, 6.957e-03, 4.073e-02, 2.190e-01, 1.105e-01, 6.111e-02, 8.918e-02, -2.711e-02, -4.036e-03, -6.358e-02, -1.574e-01, -9.318e-02, -2.553e-02, -2.473e-02, 2.119e-02) * s1_0_2;
	r0 += M4(-2.183e-01, 1.455e-01, 3.314e-02, 8.557e-02, -6.405e-03, -7.697e-03, 3.807e-01, 4.303e-02, 4.573e-02, 1.012e-01, -3.130e-02, -1.836e-01, 3.486e-01, -1.478e-01, -6.169e-02, 1.689e-01) * s1_1_0;
	r1 += M4(-2.126e-02, -1.166e-01, 5.580e-03, 1.037e-01, -2.350e-01, 1.055e-01, -3.048e-02, 9.985e-02, -3.693e-02, 2.711e-02, -1.067e-02, -2.538e-01, -5.819e-02, 8.157e-02, 1.112e-01, -4.679e-02) * s1_1_0;
	r0 += M4(-2.928e-02, 2.480e-01, -8.709e-02, 5.928e-01, -7.763e-03, 2.131e-01, 5.600e-02, -1.288e-01, 1.715e-01, -5.226e-01, 1.793e-01, 1.900e-01, -5.014e-01, -4.933e-02, 9.306e-02, 3.467e-01) * s1_1_1;
	r1 += M4(-5.593e-02, -3.578e-01, 4.624e-02, 1.650e-01, -2.052e-02, -4.424e-02, 3.722e-02, 2.666e-01, -2.044e-01, -4.270e-01, 3.964e-01, 3.423e-02, -1.418e-01, 3.297e-01, 4.721e-01, -1.269e-01) * s1_1_1;
	r0 += M4(-2.213e-02, 1.027e-01, 1.436e-01, 8.470e-02, -4.637e-02, -3.640e-02, 7.660e-02, -1.306e-01, 6.115e-02, -9.496e-02, 8.638e-02, 9.504e-02, -1.628e-02, 4.793e-01, 1.495e-01, 7.806e-03) * s1_1_2;
	r1 += M4(8.144e-03, 2.565e-02, 2.639e-02, -6.591e-02, 2.455e-01, 1.635e-02, -1.987e-02, -4.143e-03, -2.247e-02, 8.770e-02, 6.465e-02, 2.702e-01, 5.545e-01, 8.564e-02, -4.665e-02, -7.882e-02) * s1_1_2;
	r0 += M4(-1.597e-01, 1.959e-02, 1.306e-01, -3.852e-02, 1.568e-01, 8.117e-03, 2.508e-01, 1.263e-01, 1.084e-01, 1.044e-01, -6.073e-02, 2.390e-01, -8.677e-03, 1.101e-02, 4.723e-02, 1.723e-02) * s1_2_0;
	r1 += M4(1.133e-02, 1.526e-03, 3.483e-04, 9.902e-02, 1.347e-01, 2.881e-01, 4.205e-03, -2.934e-02, 1.785e-02, 2.173e-01, -3.814e-02, 5.283e-02, 5.719e-02, 2.481e-01, -5.309e-02, -2.157e-01) * s1_2_0;
	r0 += M4(-1.198e-01, -1.877e-02, 2.235e-01, -1.611e-02, 8.536e-03, 2.639e-02, 2.397e-01, -2.849e-01, -5.764e-01, 2.137e-01, -2.488e-01, -1.092e-01, 4.169e-02, -3.684e-02, -6.074e-01, 1.675e-02) * s1_2_1;
	r1 += M4(-5.139e-02, 5.585e-02, -3.282e-02, 7.763e-02, 1.767e-01, 1.015e-01, -1.399e-02, -2.092e-01, 2.357e-02, -1.969e-02, -7.656e-02, 5.584e-01, -6.028e-01, -1.239e+00, -1.215e-01, 1.136e-01) * s1_2_1;
	r0 += M4(-9.541e-03, 2.779e-02, 7.696e-02, 6.024e-02, -4.340e-02, -5.418e-02, -1.241e-02, -5.036e-02, -1.720e-01, -5.233e-02, -8.816e-02, -5.666e-02, 2.576e-01, 8.515e-02, -1.106e-01, -1.240e-01) * s1_2_2;
	r1 += M4(5.073e-02, 8.515e-02, -5.190e-02, -5.229e-02, 5.638e-02, 9.284e-03, 7.974e-03, -1.306e-01, 2.385e-02, 1.422e-01, -1.612e-01, -2.192e-01, 1.060e-02, -1.933e-01, -1.351e-01, -1.859e-01) * s1_2_2;
	r0 += V4(1.151e-02, -1.899e-02, -6.692e-03, -4.895e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(5.247e-02, 1.122e-02, -2.350e-02, -2.131e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8-BILINEAR-MPV-NVL-DS-conv5
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv4
//!BIND LUMA
//!SAVE conv5
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv4_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv4_pt))
#define l1(x, y) V4(conv4_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv4_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(1.573e-02, 2.967e-02, 4.282e-02, 4.827e-02, 5.650e-02, 4.824e-03, 1.469e-01, 2.185e-01, 2.860e-03, -6.102e-02, -2.376e-02, 6.669e-02, -2.056e-02, -7.593e-02, -6.571e-02, -3.081e-01) * s0_0_0;
	r1 += M4(1.456e-02, 8.572e-02, -1.150e-03, 1.502e-01, -2.371e-01, 1.227e-01, 5.896e-02, 6.323e-02, -5.571e-02, -1.899e-01, 1.913e-03, -1.240e-01, 8.991e-02, -6.917e-02, 3.545e-03, -2.319e-01) * s0_0_0;
	r0 += M4(6.997e-02, 9.108e-02, -3.318e-02, 1.096e-01, 3.207e-03, 1.169e-02, 8.325e-02, 2.467e-01, -7.835e-03, 1.716e-02, 8.927e-02, -1.216e-01, -1.500e-01, -1.549e-01, 4.678e-02, 1.643e-01) * s0_0_1;
	r1 += M4(-1.666e-01, 3.468e-02, 1.259e-02, 3.144e-01, -2.336e-01, -6.145e-02, 4.206e-02, 1.975e-02, -4.797e-04, -2.300e-01, 7.058e-03, 6.944e-02, 2.677e-01, 6.283e-02, -1.323e-01, -3.870e-01) * s0_0_1;
	r0 += M4(-7.921e-03, -3.133e-02, 1.577e-01, 3.655e-02, 4.990e-02, -7.711e-03, 2.063e-02, 6.021e-02, 8.984e-02, -9.796e-02, -4.889e-02, -5.639e-02, 2.812e-02, -3.283e-02, -3.622e-03, 3.211e-03) * s0_0_2;
	r1 += M4(-2.379e-01, -1.125e-02, -3.372e-02, 4.073e-02, -2.497e-01, -3.384e-02, 7.985e-02, 1.269e-02, -7.193e-02, -9.950e-02, -3.202e-02, -4.234e-01, 1.668e-01, 1.259e-01, 7.467e-02, 1.786e-01) * s0_0_2;
	r0 += M4(-7.123e-03, 2.220e-02, 3.486e-02, -5.843e-02, 2.272e-02, 3.502e-02, 2.568e-01, 2.773e-01, -1.971e-02, -4.527e-02, -8.945e-02, 3.751e-02, -3.975e-02, -1.174e-01, -1.198e-01, 1.294e-01) * s0_1_0;
	r1 += M4(-1.305e-02, 1.773e-01, 8.622e-02, -1.040e-01, -1.682e-01, -1.479e-01, 3.508e-02, 2.411e-01, 8.920e-02, -2.101e-01, 3.332e-02, -1.213e-01, 2.549e-01, -2.094e-01, -1.214e-01, -4.291e-03) * s0_1_0;
	r0 += M4(-1.721e-02, -3.497e-02, -2.640e-01, 9.262e-02, -8.085e-02, 3.097e-01, -3.561e-01, -7.980e-02, 1.265e-01, -1.762e-02, 3.213e-01, -1.530e-02, -1.704e-01, -1.230e-01, 2.299e-01, 6.326e-02) * s0_1_1;
	r1 += M4(4.637e-01, 2.823e-01, -1.522e-01, -5.415e-01, -4.504e-01, -1.336e-01, -1.740e-01, -2.129e-02, -3.691e-02, 5.485e-02, 1.586e-01, 9.977e-02, 1.744e-01, 3.726e-02, -3.294e-01, -3.322e-02) * s0_1_1;
	r0 += M4(5.190e-01, 2.131e-01, -1.274e-01, -7.466e-02, 3.088e-01, 1.517e-01, -1.224e-01, -3.436e-02, -1.069e-01, -1.015e-01, -1.259e-01, -9.940e-02, -9.478e-02, -4.043e-02, -1.065e-02, 5.436e-02) * s0_1_2;
	r1 += M4(-2.051e-01, 2.927e-02, -4.985e-03, 5.011e-01, 4.421e-02, 1.994e-02, 2.336e-01, 1.892e-01, -1.891e-01, 4.150e-02, 2.373e-01, -5.146e-01, -1.807e-01, -5.207e-02, -7.582e-02, -1.548e-01) * s0_1_2;
	r0 += M4(-2.378e-02, -1.562e-02, 2.136e-03, -2.127e-02, 7.007e-02, 6.014e-02, 7.770e-02, 6.916e-02, 5.803e-02, -3.841e-02, -4.259e-02, 2.738e-02, 1.670e-02, -3.967e-02, 4.323e-02, 1.559e-02) * s0_2_0;
	r1 += M4(8.580e-02, -2.222e-02, -4.872e-03, -3.489e-02, 3.136e-02, 4.190e-01, 1.118e-01, -1.577e-01, 5.384e-02, -9.339e-02, -2.563e-02, -1.210e-01, -4.595e-02, -3.310e-03, -1.033e-01, 1.891e-02) * s0_2_0;
	r0 += M4(-8.087e-02, -1.304e-01, 7.817e-02, -1.136e-01, 3.486e-01, 1.013e-02, -2.021e-01, -3.650e-02, 5.896e-02, 3.703e-02, -6.081e-02, -6.221e-03, 1.321e-02, -1.702e-02, -7.365e-02, -3.301e-02) * s0_2_1;
	r1 += M4(-7.187e-03, 1.090e-01, -1.201e-01, 2.260e-01, -5.421e-02, -2.860e-01, 8.199e-02, -1.299e-01, 4.082e-02, -1.218e-01, 3.234e-01, 8.134e-02, 1.845e-03, -4.737e-02, -7.687e-02, 6.812e-02) * s0_2_1;
	r0 += M4(-1.947e-01, 3.682e-03, -3.884e-02, -5.763e-02, 4.692e-02, -6.147e-02, 4.435e-02, 4.002e-02, 3.852e-02, -4.383e-02, 3.424e-02, -9.934e-04, 6.212e-02, -3.664e-02, 3.637e-02, 5.052e-02) * s0_2_2;
	r1 += M4(6.089e-02, 1.255e-01, -8.161e-03, -4.964e-03, -1.780e-01, -6.723e-02, 1.692e-01, 8.652e-02, 6.076e-02, -2.549e-01, -3.271e-01, -2.488e-01, -7.589e-02, 9.590e-03, 1.078e-01, -1.354e-02) * s0_2_2;
	r0 += M4(-3.374e-02, 4.130e-02, -1.277e-01, 1.475e-01, 2.461e-02, 1.426e-02, 1.518e-01, -6.148e-02, 3.147e-02, 1.306e-01, 1.319e-01, 2.425e-01, -4.275e-02, -1.577e-02, -7.931e-02, 3.514e-02) * s1_0_0;
	r1 += M4(1.737e-01, -1.370e-01, 4.090e-02, 6.380e-03, -4.382e-02, -8.753e-02, 1.106e-01, 2.063e-02, -3.243e-01, 5.335e-02, 9.475e-02, 3.232e-01, 1.303e-01, -2.235e-01, -7.746e-02, 6.891e-02) * s1_0_0;
	r0 += M4(-6.470e-02, 7.717e-02, 1.452e-01, -1.460e-01, -4.875e-02, 1.287e-01, 4.357e-02, -2.479e-01, 3.021e-02, 3.126e-01, -9.176e-02, 4.851e-02, -2.038e-01, -9.299e-02, 1.670e-01, -1.763e-01) * s1_0_1;
	r1 += M4(2.620e-01, 1.186e-02, 1.274e-01, -4.903e-02, 5.996e-01, 1.043e-01, -2.036e-01, -4.781e-01, -5.127e-02, 1.631e-03, 2.434e-02, 1.372e-01, 3.082e-01, 5.515e-02, -1.404e-01, -3.838e-01) * s1_0_1;
	r0 += M4(9.497e-02, 1.974e-02, -6.351e-02, 2.667e-02, 2.417e-01, 1.262e-01, -1.041e-01, 8.902e-03, 2.921e-02, 4.217e-02, -9.479e-02, -4.182e-02, 6.116e-03, -5.715e-04, 1.424e-02, 8.165e-04) * s1_0_2;
	r1 += M4(-4.915e-02, 2.704e-02, -2.662e-02, -6.572e-02, -1.542e-02, 9.420e-03, 4.241e-02, 1.355e-01, -1.036e-01, 5.036e-02, -3.143e-02, 2.354e-01, 1.377e-01, 1.501e-02, -2.159e-02, -6.211e-02) * s1_0_2;
	r0 += M4(-5.148e-02, 8.429e-02, -4.474e-02, 6.916e-02, -2.345e-02, 3.667e-02, -1.438e-01, -2.296e-02, 7.790e-02, 3.839e-01, 1.649e-01, -3.292e-01, 2.606e-02, 1.688e-02, 2.581e-01, -3.585e-02) * s1_1_0;
	r1 += M4(-3.333e-02, -5.831e-02, 1.681e-02, 1.464e-01, 1.325e-01, -2.747e-01, -1.873e-01, -7.784e-02, -2.148e-01, 8.817e-01, 1.751e-01, 2.299e-01, -6.603e-02, -2.120e-01, 1.561e-02, -5.342e-02) * s1_1_0;
	r0 += M4(-1.783e-02, 9.515e-02, -2.010e-03, 1.837e-01, 1.341e-01, 1.405e-01, -7.691e-02, -8.479e-03, 6.793e-01, -4.924e-01, 5.278e-02, 4.372e-01, -1.662e-01, -8.294e-02, 8.589e-02, -2.139e-01) * s1_1_1;
	r1 += M4(7.225e-01, 4.881e-02, -3.783e-01, -1.806e-01, 9.400e-02, -2.487e-01, -1.151e-01, -1.260e-01, -1.040e+00, -1.989e-01, 6.763e-01, -3.969e-02, 3.853e-01, -4.470e-02, -2.895e-01, 1.585e-01) * s1_1_1;
	r0 += M4(8.220e-02, 6.372e-02, 6.661e-02, 1.304e-02, 1.274e-01, 5.807e-02, 4.562e-02, 3.028e-03, 1.460e-01, 7.868e-02, 3.472e-02, 8.046e-02, -1.478e-01, -8.915e-02, -1.524e-02, -1.149e-02) * s1_1_2;
	r1 += M4(2.219e-01, 3.871e-02, -2.167e-01, -2.598e-02, -5.535e-02, 6.118e-03, 1.312e-01, 1.371e-01, -2.589e-01, -6.726e-02, 1.829e-01, -2.421e-01, 5.807e-02, -6.663e-03, -5.175e-02, 5.564e-02) * s1_1_2;
	r0 += M4(-5.444e-02, -6.726e-03, 2.544e-02, 3.637e-02, -3.209e-02, -1.239e-02, 6.714e-02, -4.888e-02, -1.323e-01, 6.185e-02, -1.130e-02, -6.872e-02, -3.488e-02, -4.018e-02, 3.714e-02, 3.430e-02) * s1_2_0;
	r1 += M4(1.229e-01, 1.687e-01, -9.688e-03, -6.244e-02, -6.728e-02, -6.821e-02, 6.616e-02, 1.018e-01, 4.746e-02, -1.630e-01, 2.759e-01, -9.546e-02, 4.205e-02, -5.729e-02, 3.474e-02, 2.157e-02) * s1_2_0;
	r0 += M4(6.672e-02, 1.383e-02, 7.263e-02, -3.289e-02, -3.851e-02, 3.999e-02, 4.588e-02, -1.359e-02, 2.050e-02, -2.018e-02, 6.191e-02, 5.123e-02, -6.885e-03, 8.343e-03, 8.490e-03, -3.389e-02) * s1_2_1;
	r1 += M4(1.609e-01, 1.403e-01, -1.480e-01, 5.847e-02, -4.670e-02, 5.305e-04, 1.077e-01, 5.789e-02, -7.455e-02, 5.162e-01, -4.082e-01, -1.283e-02, 1.773e-01, -1.822e-01, -2.451e-02, 3.894e-02) * s1_2_1;
	r0 += M4(-3.308e-02, -6.746e-03, 1.482e-03, 6.705e-03, 4.042e-02, 4.651e-02, 2.835e-02, -1.910e-03, 1.315e-01, 2.033e-02, -2.895e-02, -1.379e-02, -1.365e-01, -1.081e-02, 8.989e-03, 1.587e-02) * s1_2_2;
	r1 += M4(1.326e-02, 8.563e-03, 4.708e-02, 2.822e-02, -2.675e-02, 2.947e-02, -2.723e-02, 1.561e-01, -7.086e-02, 1.958e-01, 1.587e-01, 1.252e-01, 3.110e-02, -2.720e-02, -1.272e-01, -3.339e-02) * s1_2_2;
	r0 += V4(-2.167e-02, -1.617e-02, 1.849e-02, -2.153e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-8.967e-03, -2.020e-02, -2.574e-02, -8.043e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8-BILINEAR-MPV-NVL-DS-conv6
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv5
//!BIND LUMA
//!SAVE conv6
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv5_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv5_pt))
#define l1(x, y) V4(conv5_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv5_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-5.685e-03, -1.488e-01, 2.961e-01, 1.247e-02, 2.607e-01, 3.189e-02, 9.760e-02, 5.889e-02, 5.930e-02, -1.157e-01, 1.126e-01, 5.374e-02, -1.283e-02, 1.865e-01, 6.740e-02, -1.484e-02) * s0_0_0;
	r1 += M4(8.704e-02, 3.094e-02, 5.642e-02, 3.407e-02, -4.040e-02, -2.391e-02, -3.294e-02, 9.384e-03, -1.624e-02, 1.547e-02, 2.943e-02, -2.980e-02, 1.005e-02, 6.741e-03, -2.213e-03, -1.624e-02) * s0_0_0;
	r0 += M4(-5.356e-02, -1.414e-01, -1.527e-02, -1.024e-02, 1.855e-02, -2.439e-01, 1.141e-01, 4.212e-02, -1.200e-03, -1.215e-01, 1.211e-01, -1.068e-02, 2.319e-02, -2.166e-01, -1.348e-01, -6.324e-02) * s0_0_1;
	r1 += M4(-2.882e-01, 7.480e-02, -3.467e-01, -1.460e-01, 1.567e-01, 1.675e-01, 2.608e-01, -5.730e-02, 8.189e-04, 4.306e-02, -1.045e-01, 5.946e-02, -4.285e-02, -9.512e-03, -1.033e-01, -3.327e-02) * s0_0_1;
	r0 += M4(2.170e-02, -7.125e-02, 1.224e-02, 2.761e-02, -4.198e-02, -2.401e-01, 6.986e-02, 8.413e-02, -1.301e-02, -1.831e-01, 2.003e-02, 2.609e-02, -3.451e-02, -9.032e-02, -3.688e-02, -3.839e-02) * s0_0_2;
	r1 += M4(-1.382e-01, -8.005e-02, -4.847e-02, -2.087e-01, 3.585e-01, 1.616e-01, 2.824e-01, -1.085e-01, 1.713e-02, -7.629e-03, 1.003e-01, 3.441e-03, -9.953e-02, -2.611e-02, -8.157e-03, 3.969e-02) * s0_0_2;
	r0 += M4(-7.760e-02, -3.690e-01, -9.376e-02, -1.322e-01, -6.606e-01, 1.148e-01, -1.216e-01, -7.986e-02, -1.958e-01, -3.734e-01, 3.019e-02, -1.757e-02, -2.609e-02, -5.651e-03, 2.378e-02, -4.528e-03) * s0_1_0;
	r1 += M4(5.119e-02, 1.606e-01, 1.982e-01, -1.706e-02, -1.015e-02, -1.453e-02, 8.905e-03, -7.290e-02, -2.553e-02, 2.689e-04, 2.667e-02, -7.638e-02, 3.009e-02, 2.731e-03, 4.384e-02, 4.751e-02) * s0_1_0;
	r0 += M4(5.062e-03, -2.245e-01, -1.392e-01, -8.463e-02, 3.516e-01, -1.059e-01, 5.981e-01, -1.391e-01, 3.391e-01, -2.098e-01, -3.429e-01, 3.409e-01, 2.476e-01, -1.682e-01, 1.163e+00, 4.513e-01) * s0_1_1;
	r1 += M4(2.046e-01, -4.328e-01, 3.093e-01, 6.387e-01, -3.401e-01, -4.053e-01, -1.019e+00, 4.387e-02, 3.723e-02, -5.029e-02, 3.998e-02, -1.646e-01, 2.540e-02, -1.041e-03, 3.777e-01, 6.419e-02) * s0_1_1;
	r0 += M4(-1.212e-02, -3.315e-01, -1.413e-02, -2.550e-02, -6.730e-03, -1.536e-01, 5.815e-02, 2.529e-01, -8.682e-02, -1.720e-01, 5.017e-02, 1.870e-01, 3.092e-02, 1.390e-01, -3.760e-02, 7.155e-02) * s0_1_2;
	r1 += M4(1.189e-01, 1.063e-01, -5.756e-02, 3.430e-01, -2.436e-01, 1.160e-01, 3.936e-01, 1.459e-01, 1.945e-01, 2.122e-01, 1.851e-01, -3.789e-01, 7.059e-01, 2.730e-01, 3.399e-01, 9.446e-02) * s0_1_2;
	r0 += M4(-1.316e-02, -3.423e-01, 1.929e-02, 4.549e-02, -7.898e-02, 6.403e-02, 9.162e-02, 3.634e-03, 3.139e-02, -1.403e-01, -8.587e-04, -7.942e-03, 2.350e-01, -1.109e-01, -4.457e-02, 6.660e-03) * s0_2_0;
	r1 += M4(-3.577e-03, -1.817e-02, -5.588e-03, 1.510e-02, 1.715e-02, 7.831e-03, 3.735e-03, 6.793e-02, 1.401e-03, -7.282e-03, 1.188e-02, 3.598e-02, -2.529e-03, 8.353e-03, -6.468e-02, -2.867e-02) * s0_2_0;
	r0 += M4(-1.139e-01, -1.715e-01, 1.173e-02, 7.837e-02, 2.586e-01, -4.519e-01, -1.510e-02, -1.401e-01, 4.133e-02, -3.242e-01, -1.785e-02, 2.770e-02, 3.889e-02, 5.698e-02, -9.301e-03, 2.051e-01) * s0_2_1;
	r1 += M4(-3.417e-02, 7.885e-02, -8.306e-02, -3.430e-02, 2.118e-02, -6.009e-02, 1.141e-01, 1.040e-01, -3.336e-02, 5.819e-03, -2.911e-02, -8.043e-02, -3.428e-02, 7.152e-02, -5.472e-02, -9.505e-02) * s0_2_1;
	r0 += M4(1.027e-02, -2.800e-01, 1.461e-02, -1.564e-02, -5.034e-03, -2.857e-02, 4.360e-02, 1.135e-01, -1.401e-02, -3.930e-01, -1.402e-02, 1.376e-02, 5.237e-02, 2.866e-01, -9.729e-02, -1.018e-01) * s0_2_2;
	r1 += M4(-1.023e-01, -1.750e-01, -1.403e-02, -1.534e-01, 1.801e-01, 2.639e-01, 1.343e-02, -7.494e-01, -1.524e-03, 4.359e-02, -2.731e-02, 2.502e-01, -1.780e-01, 3.506e-01, -8.762e-02, -4.412e-01) * s0_2_2;
	r0 += M4(-2.428e-01, -4.464e-02, -3.828e-02, -2.826e-02, -7.160e-03, -2.603e-02, 5.284e-03, -2.346e-02, -1.913e-01, -4.971e-02, 2.772e-01, 9.253e-02, -2.259e-02, -1.082e-01, 3.649e-02, 4.826e-02) * s1_0_0;
	r1 += M4(2.301e-02, 1.477e-02, -7.640e-03, 6.699e-03, 1.727e-03, 1.173e-02, 4.985e-02, 1.635e-02, 2.362e-02, -1.167e-02, 3.628e-02, 5.886e-02, 1.060e-02, -5.518e-03, 6.421e-02, 5.571e-02) * s1_0_0;
	r0 += M4(-6.072e-02, -2.912e-01, -1.097e-01, -6.831e-02, 1.606e-01, -5.534e-03, -3.509e-01, -6.231e-02, 1.411e-01, -1.403e-01, 2.972e-03, -2.430e-02, -6.703e-02, -8.025e-03, -1.209e-01, 5.823e-02) * s1_0_1;
	r1 += M4(-2.783e-01, -1.740e-01, -5.527e-01, 1.508e-02, -5.532e-02, -2.950e-02, -1.121e-01, -3.416e-02, -9.393e-03, -1.607e-01, 3.284e-01, -1.453e-02, 1.579e-01, 5.066e-03, 2.939e-01, 6.468e-02) * s1_0_1;
	r0 += M4(3.189e-02, 5.141e-02, -2.885e-02, -4.809e-02, -2.567e-02, 3.251e-02, 1.820e-01, -2.183e-01, 3.230e-03, -2.562e-01, 3.929e-02, 4.376e-02, 3.897e-04, -7.534e-02, -1.909e-02, -9.864e-02) * s1_0_2;
	r1 += M4(-4.972e-01, -2.086e-01, -2.832e-01, 9.296e-02, 4.072e-01, 9.911e-02, 5.914e-01, 4.199e-01, 6.242e-01, 1.985e-01, 2.023e-01, -5.607e-02, 1.053e-02, -1.003e-01, -1.927e-01, 1.673e-01) * s1_0_2;
	r0 += M4(-8.224e-01, -1.188e-01, -1.022e-01, -1.082e-01, -2.487e-01, -1.225e-01, 3.753e-02, 9.746e-03, 6.392e-01, 2.893e-01, 3.595e-02, 5.648e-02, 3.115e-01, -2.636e-01, 1.928e-01, 8.674e-02) * s1_1_0;
	r1 += M4(8.710e-03, 2.843e-02, 2.953e-02, 5.404e-02, 1.554e-02, 2.528e-03, 1.837e-02, 6.063e-03, -2.296e-02, 5.184e-02, -4.766e-02, -6.435e-02, 1.223e-02, 2.442e-02, 1.187e-02, -8.325e-02) * s1_1_0;
	r0 += M4(-5.452e-01, -3.134e-01, -8.391e-02, 1.585e-01, 5.176e-01, 1.233e-01, 4.147e-02, 6.944e-02, -1.213e-01, 9.439e-03, -2.308e-02, 5.317e-02, -5.210e-02, 8.794e-02, 1.062e-01, 1.177e-01) * s1_1_1;
	r1 += M4(-1.665e-01, -3.565e-01, -5.079e-01, 1.479e-01, -4.132e-02, -1.736e-01, -2.417e-01, 1.914e-01, -7.934e-03, 2.380e-01, 3.404e-02, 1.722e-01, -3.762e-01, 5.382e-02, -3.411e-01, -1.800e-01) * s1_1_1;
	r0 += M4(2.437e-02, 2.591e-02, -1.347e-02, -1.042e-01, -1.354e-01, -1.293e-02, 1.256e-01, 1.537e-01, 6.169e-02, 3.417e-02, -4.854e-03, 2.264e-03, 3.309e-02, -5.861e-02, 5.618e-02, 6.898e-02) * s1_1_2;
	r1 += M4(-5.177e-01, -2.294e-01, -2.369e-01, -2.439e-01, -2.403e-01, 3.452e-01, -7.337e-02, -3.134e-01, -1.733e-01, 4.756e-01, -1.694e-01, -3.704e-02, 2.646e-01, 3.509e-01, 1.431e-01, -7.175e-01) * s1_1_2;
	r0 += M4(-6.093e-02, -3.433e-01, 2.876e-03, 1.622e-03, -2.670e-03, -3.424e-02, -8.039e-03, 1.923e-02, -4.191e-02, 2.078e-01, 1.740e-02, 2.155e-02, -1.239e-01, -9.241e-02, 1.296e-02, 3.703e-02) * s1_2_0;
	r1 += M4(1.263e-02, -4.632e-04, -3.259e-03, 1.651e-02, -7.070e-03, 9.911e-03, -1.629e-02, -2.207e-02, 2.398e-02, 2.722e-02, 2.435e-02, -3.393e-02, 4.803e-03, 1.747e-02, 5.244e-03, 2.879e-02) * s1_2_0;
	r0 += M4(-5.386e-02, -1.764e-01, 3.870e-02, -1.072e-01, -1.627e-02, 9.949e-02, -1.387e-02, -5.055e-02, 2.464e-02, -6.812e-02, 1.181e-02, -5.600e-03, 9.516e-02, -2.357e-02, -6.830e-02, -1.020e-01) * s1_2_1;
	r1 += M4(3.108e-02, -4.457e-02, 8.374e-02, -1.324e-01, -3.959e-03, -1.073e-03, 2.447e-02, 7.365e-02, 1.838e-02, 3.258e-03, 6.752e-03, 4.696e-02, 8.028e-02, -1.111e-01, 1.538e-01, 1.543e-01) * s1_2_1;
	r0 += M4(-3.597e-03, -4.521e-02, -3.201e-02, -6.612e-02, -2.043e-02, -5.422e-02, -2.151e-02, -4.884e-02, -7.731e-03, 1.944e-01, -1.523e-02, -3.698e-02, -1.163e-03, -1.193e-01, -4.782e-02, 1.186e-02) * s1_2_2;
	r1 += M4(1.936e-02, -9.106e-02, -7.904e-03, -1.901e+00, 5.933e-02, -6.280e-02, 5.872e-02, -6.857e-02, 3.221e-02, -9.565e-03, 2.259e-02, 6.973e-03, 7.977e-02, 1.543e-01, 8.258e-03, 4.698e-01) * s1_2_2;
	r0 += V4(-5.229e-03, -5.919e-02, 1.107e-02, -3.261e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-5.478e-03, -4.684e-03, -6.075e-03, -5.033e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-6x8-BILINEAR-MPV-NVL-DS-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv6
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.2 > OUTPUT.h LUMA.h / 1.2 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv6_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv6_pt))
#define l1(x, y) V4(conv6_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv6_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-1.807e-04, -3.945e-03, -8.082e-03, -4.035e-03, 3.935e-01, -1.061e-01, 1.730e-02, -4.027e-01, 1.345e-02, -3.031e-03, -2.604e-04, 3.121e-04, -8.521e-02, 3.186e-04, 1.010e-02, -1.391e-03) * s0_0_0;
	r0 += M4(9.305e-02, -4.279e-02, -3.715e-02, 5.400e-04, -1.796e-01, 6.432e-01, 3.410e-02, 2.370e-01, 8.086e-03, 8.839e-03, -1.477e-02, -1.642e-02, -1.999e-01, -2.601e-01, 4.206e-02, 6.421e-02) * s0_0_1;
	r0 += M4(1.181e-01, 6.958e-02, -3.528e-02, -2.265e-03, 1.808e-01, -6.246e-02, -6.846e-03, -4.942e-02, -1.202e-02, 3.532e-03, 4.682e-03, 1.702e-03, 1.889e-03, -1.759e-02, 1.862e-02, 2.152e-02) * s0_0_2;
	r0 += M4(-3.671e-03, -3.852e-03, -2.380e-03, -3.960e-03, 6.300e-02, -2.141e-02, 1.994e-01, 1.074e-01, -2.152e-02, -8.898e-04, -3.877e-03, -2.000e-03, -7.475e-03, 1.668e-02, -8.712e-02, 1.174e-02) * s0_1_0;
	r0 += M4(1.256e-01, -4.296e-02, 3.086e-01, -3.826e-02, -2.418e-01, -1.111e-01, 1.044e-01, 1.944e-01, 3.845e-01, 5.662e-02, 1.931e-01, 7.402e-02, -2.572e-01, -2.845e-01, -5.195e-01, -6.977e-01) * s0_1_1;
	r0 += M4(1.479e-01, 6.601e-02, 1.763e-01, -6.987e-01, 1.254e-02, 2.197e-01, 1.341e-01, 1.281e-01, 1.020e-02, 3.096e-01, 3.919e-04, 1.302e-01, 5.035e-02, 1.752e-02, 2.456e-02, 3.191e-02) * s0_1_2;
	r0 += M4(-2.570e-03, 1.040e-03, -7.055e-03, -1.744e-03, 1.463e-01, -2.346e-01, -3.969e-01, -6.160e-02, 3.307e-03, 2.792e-03, -3.471e-03, 1.428e-03, 3.436e-03, -6.741e-03, 2.423e-02, -2.736e-03) * s0_2_0;
	r0 += M4(7.425e-03, -2.775e-03, -1.268e-02, -1.294e-03, -9.054e-02, 1.374e-01, -4.078e-01, 1.347e-01, 6.538e-03, 1.957e-04, 1.852e-01, 3.807e-03, 2.362e-02, 3.537e-02, 4.401e-02, 6.457e-02) * s0_2_1;
	r0 += M4(4.866e-03, -6.724e-04, -9.800e-03, 2.798e-03, 1.541e-01, 1.599e-01, 8.652e-03, 1.220e-01, -2.522e-02, -1.613e-02, -2.310e-02, 1.587e-01, -1.865e-03, -8.358e-03, 6.397e-03, -5.317e-03) * s0_2_2;
	r0 += M4(6.372e-02, 3.161e-02, -1.362e-02, 3.816e-03, 2.658e-02, 1.733e-01, 1.472e-02, -8.362e-03, -1.615e-02, -1.185e-02, -3.045e-02, -1.689e-02, 4.406e-01, 2.256e-01, -1.815e-01, -2.429e-01) * s1_0_0;
	r0 += M4(-2.062e-03, -2.449e-02, 4.817e-03, -8.188e-03, 5.533e-02, 3.518e-02, 2.197e-03, -5.114e-02, 2.789e-02, 7.150e-02, -1.832e-02, -1.898e-02, -4.833e-02, 1.184e-01, -3.157e-03, 1.438e-02) * s1_0_1;
	r0 += M4(-8.882e-04, -5.436e-04, -3.567e-04, -3.390e-03, -6.867e-04, 4.981e-04, -8.262e-03, -7.059e-04, 2.917e-03, 1.399e-02, -4.726e-03, -1.117e-02, 8.785e-03, 3.708e-04, 1.110e-02, -2.666e-02) * s1_0_2;
	r0 += M4(-8.699e-01, 1.766e-01, 1.609e-01, 1.751e-01, -9.499e-02, 1.733e-01, -9.019e-01, 3.143e-01, 7.354e-02, -3.290e-02, 1.765e-01, -3.750e-02, -6.104e-02, -4.989e-02, 8.032e-02, 7.097e-02) * s1_1_0;
	r0 += M4(3.835e-03, 3.483e-02, -9.942e-03, 1.919e-01, 2.108e-02, -2.224e-02, 9.155e-02, -2.011e-01, 1.814e-02, -8.892e-01, 1.840e-01, 1.674e-01, 1.386e-02, 1.630e-03, -3.489e-03, 1.504e-02) * s1_1_1;
	r0 += M4(9.340e-03, -9.189e-03, 1.279e-02, -9.433e-03, -5.288e-03, 8.014e-03, -7.227e-03, 7.903e-03, -3.479e-02, -4.178e-03, -1.947e-02, 1.505e-02, 1.111e-03, -2.532e-03, 3.266e-03, -1.078e-02) * s1_1_2;
	r0 += M4(3.798e-02, 1.437e-02, 1.284e-01, 1.175e-01, -1.167e-02, 2.940e-03, -9.307e-03, -6.678e-03, 4.532e-03, -1.868e-02, 7.114e-02, -3.406e-02, -3.813e-03, -3.516e-03, -4.171e-03, -4.095e-03) * s1_2_0;
	r0 += M4(-4.425e-03, -1.213e-02, -1.797e-02, 1.250e-01, 3.096e-03, -4.425e-03, 3.290e-03, -8.093e-03, 3.978e-02, 7.878e-02, 6.901e-02, 6.220e-02, -7.749e-03, -1.863e-03, -3.018e-03, 2.618e-03) * s1_2_1;
	r0 += M4(3.542e-03, -1.049e-02, 9.952e-03, -3.437e-03, 5.456e-04, 7.475e-03, -3.509e-03, 9.030e-03, -5.654e-03, 1.268e-02, -6.067e-03, -3.458e-02, -2.205e-03, -7.418e-03, -4.137e-03, -8.575e-03) * s1_2_2;
	r0 += V4(-2.903e-08, -1.714e-08, -3.040e-08, -3.019e-08);
	r0 = tanh(r0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
